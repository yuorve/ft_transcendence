{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/flowGraphAssetsContext.ts"],
  "sourcesContent": ["import type { AnimationGroup } from \"core/Animations/animationGroup\";\nimport type { Animation } from \"core/Animations/animation\";\nimport type { Nullable } from \"core/types\";\nimport type { Mesh } from \"core/Meshes/mesh\";\nimport type { Material } from \"core/Materials/material\";\nimport type { Camera } from \"core/Cameras/camera\";\nimport type { Light } from \"core/Lights/light\";\nimport type { IAssetContainer } from \"core/IAssetContainer\";\n\n/**\n * The type of the assets that flow graph supports\n */\nexport const enum FlowGraphAssetType {\n    Animation = \"Animation\",\n    AnimationGroup = \"AnimationGroup\",\n    Mesh = \"Mesh\",\n    Material = \"Material\",\n    Camera = \"Camera\",\n    Light = \"Light\",\n    // Further asset types will be added here when needed.\n}\n\nexport type AssetType<T extends FlowGraphAssetType> = T extends FlowGraphAssetType.Animation\n    ? Animation\n    : T extends FlowGraphAssetType.AnimationGroup\n      ? AnimationGroup\n      : T extends FlowGraphAssetType.Mesh\n        ? Mesh\n        : T extends FlowGraphAssetType.Material\n          ? Material\n          : T extends FlowGraphAssetType.Camera\n            ? Camera\n            : T extends FlowGraphAssetType.Light\n              ? Light\n              : never;\n\n/**\n * Returns the asset with the given index and type from the assets context.\n * @param assetsContext The assets context to get the asset from\n * @param type The type of the asset\n * @param index The index of the asset\n * @param useIndexAsUniqueId If set to true, instead of the index in the array it will search for the unique id of the asset.\n * @returns The asset or null if not found\n */\nexport function GetFlowGraphAssetWithType<T extends FlowGraphAssetType>(\n    assetsContext: IAssetContainer,\n    type: T,\n    index: number,\n    useIndexAsUniqueId?: boolean\n): Nullable<AssetType<T>> {\n    switch (type) {\n        case FlowGraphAssetType.Animation:\n            return useIndexAsUniqueId\n                ? ((assetsContext.animations.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.animations[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.AnimationGroup:\n            return useIndexAsUniqueId\n                ? ((assetsContext.animationGroups.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.animationGroups[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Mesh:\n            return useIndexAsUniqueId\n                ? ((assetsContext.meshes.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.meshes[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Material:\n            return useIndexAsUniqueId\n                ? ((assetsContext.materials.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.materials[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Camera:\n            return useIndexAsUniqueId\n                ? ((assetsContext.cameras.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.cameras[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Light:\n            return useIndexAsUniqueId\n                ? ((assetsContext.lights.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.lights[index] as AssetType<typeof type>) ?? null);\n        default:\n            return null;\n    }\n}\n"],
  "mappings": ";AAYA,IAAkB;CAAlB,SAAkBA,qBAAkB;AAChC,EAAAA,oBAAA,WAAA,IAAA;AACA,EAAAA,oBAAA,gBAAA,IAAA;AACA,EAAAA,oBAAA,MAAA,IAAA;AACA,EAAAA,oBAAA,UAAA,IAAA;AACA,EAAAA,oBAAA,QAAA,IAAA;AACA,EAAAA,oBAAA,OAAA,IAAA;AAEJ,GARkB,uBAAA,qBAAkB,CAAA,EAAA;AAgC9B,SAAU,0BACZ,eACA,MACA,OACA,oBAA4B;AAE5B,UAAQ,MAAM;IACV,KAAA;AACI,aAAO,qBACC,cAAc,WAAW,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OACzF,cAAc,WAAW,KAAK,KAAgC;IAC1E,KAAA;AACI,aAAO,qBACC,cAAc,gBAAgB,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OAC9F,cAAc,gBAAgB,KAAK,KAAgC;IAC/E,KAAA;AACI,aAAO,qBACC,cAAc,OAAO,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OACrF,cAAc,OAAO,KAAK,KAAgC;IACtE,KAAA;AACI,aAAO,qBACC,cAAc,UAAU,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OACxF,cAAc,UAAU,KAAK,KAAgC;IACzE,KAAA;AACI,aAAO,qBACC,cAAc,QAAQ,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OACtF,cAAc,QAAQ,KAAK,KAAgC;IACvE,KAAA;AACI,aAAO,qBACC,cAAc,OAAO,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OACrF,cAAc,OAAO,KAAK,KAAgC;IACtE;AACI,aAAO;EACf;AACJ;",
  "names": ["FlowGraphAssetType"]
}
