{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphDebounceBlock.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\r\nimport { RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"core/FlowGraph/flowGraphSignalConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"core/FlowGraph/flowGraphExecutionBlockWithOutSignal\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\n\r\n/**\r\n * This block debounces the execution of a input, i.e. ensures that the input is only executed once every X times\r\n */\r\nexport class FlowGraphDebounceBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Input: The number of times the input must be executed before the onDone signal is activated\r\n     */\r\n    public readonly count: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input: Resets the debounce counter\r\n     */\r\n    public readonly reset: FlowGraphSignalConnection;\r\n    /**\r\n     * Output: The current count of the debounce counter\r\n     */\r\n    public readonly currentCount: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.count = this.registerDataInput(\"count\", RichTypeNumber);\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n        this.currentCount = this.registerDataOutput(\"currentCount\", RichTypeNumber);\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        if (callingSignal === this.reset) {\r\n            context._setExecutionVariable(this, \"debounceCount\", 0);\r\n            return;\r\n        }\r\n        const count = this.count.getValue(context);\r\n        const currentCount = context._getExecutionVariable(this, \"debounceCount\", 0);\r\n        const newCount = currentCount + 1;\r\n\r\n        this.currentCount.setValue(newCount, context);\r\n        context._setExecutionVariable(this, \"debounceCount\", newCount);\r\n        if (newCount >= count) {\r\n            this.out._activateSignal(context);\r\n            context._setExecutionVariable(this, \"debounceCount\", 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.Debounce;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Debounce, FlowGraphDebounceBlock);\r\n"],
  "mappings": ";;;;;;;;;;;AAYM,IAAO,yBAAP,cAAsC,qCAAoC;EAc5E,YAAY,QAAqC;AAC7C,UAAM,MAAM;AACZ,SAAK,QAAQ,KAAK,kBAAkB,SAAS,cAAc;AAC3D,SAAK,QAAQ,KAAK,qBAAqB,OAAO;AAC9C,SAAK,eAAe,KAAK,mBAAmB,gBAAgB,cAAc;EAC9E;EAEO,SAAS,SAA2B,eAAwC;AAC/E,QAAI,kBAAkB,KAAK,OAAO;AAC9B,cAAQ,sBAAsB,MAAM,iBAAiB,CAAC;AACtD;IACJ;AACA,UAAM,QAAQ,KAAK,MAAM,SAAS,OAAO;AACzC,UAAM,eAAe,QAAQ,sBAAsB,MAAM,iBAAiB,CAAC;AAC3E,UAAM,WAAW,eAAe;AAEhC,SAAK,aAAa,SAAS,UAAU,OAAO;AAC5C,YAAQ,sBAAsB,MAAM,iBAAiB,QAAQ;AAC7D,QAAI,YAAY,OAAO;AACnB,WAAK,IAAI,gBAAgB,OAAO;AAChC,cAAQ,sBAAsB,MAAM,iBAAiB,CAAC;IAC1D;EACJ;;;;EAKgB,eAAY;AACxB,WAAA;EACJ;;AAEJ,cAAa,0BAA+B,sBAAsB;",
  "names": []
}
