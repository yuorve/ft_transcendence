{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphSceneTickEventBlock.ts"],
  "sourcesContent": ["import { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\r\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\r\nimport { FlowGraphEventType } from \"core/FlowGraph/flowGraphEventType\";\r\n\r\n/**\r\n * Payload for the scene tick event.\r\n */\r\nexport interface IFlowGraphOnTickEventPayload {\r\n    /**\r\n     * the time in seconds since the scene started.\r\n     */\r\n    timeSinceStart: number;\r\n    /**\r\n     * the time in seconds since the last frame.\r\n     */\r\n    deltaTime: number;\r\n}\r\n\r\n/**\r\n * Block that triggers on scene tick (before each render).\r\n */\r\nexport class FlowGraphSceneTickEventBlock extends FlowGraphEventBlock {\r\n    /**\r\n     * the time in seconds since the scene started.\r\n     */\r\n    public readonly timeSinceStart: FlowGraphDataConnection<number>;\r\n\r\n    /**\r\n     * the time in seconds since the last frame.\r\n     */\r\n    public readonly deltaTime: FlowGraphDataConnection<number>;\r\n\r\n    public override readonly type: FlowGraphEventType = FlowGraphEventType.SceneBeforeRender;\r\n\r\n    constructor() {\r\n        super();\r\n        this.timeSinceStart = this.registerDataOutput(\"timeSinceStart\", RichTypeNumber);\r\n        this.deltaTime = this.registerDataOutput(\"deltaTime\", RichTypeNumber);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _preparePendingTasks(_context: FlowGraphContext): void {\r\n        // no-op\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _executeEvent(context: FlowGraphContext, payload: IFlowGraphOnTickEventPayload): boolean {\r\n        this.timeSinceStart.setValue(payload.timeSinceStart, context);\r\n        this.deltaTime.setValue(payload.deltaTime, context);\r\n        this._execute(context);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cancelPendingTasks(_context: FlowGraphContext) {\r\n        // no-op\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.SceneTickEvent;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.SceneTickEvent, FlowGraphSceneTickEventBlock);\r\n"],
  "mappings": ";;;;;;;;;;;AAyBM,IAAO,+BAAP,cAA4C,oBAAmB;EAajE,cAAA;AACI,UAAK;AAHgB,SAAA,OAAI;AAIzB,SAAK,iBAAiB,KAAK,mBAAmB,kBAAkB,cAAc;AAC9E,SAAK,YAAY,KAAK,mBAAmB,aAAa,cAAc;EACxE;;;;EAKgB,qBAAqB,UAA0B;EAE/D;;;;EAKgB,cAAc,SAA2B,SAAqC;AAC1F,SAAK,eAAe,SAAS,QAAQ,gBAAgB,OAAO;AAC5D,SAAK,UAAU,SAAS,QAAQ,WAAW,OAAO;AAClD,SAAK,SAAS,OAAO;AACrB,WAAO;EACX;;;;EAKO,oBAAoB,UAA0B;EAErD;;;;EAKgB,eAAY;AACxB,WAAA;EACJ;;AAEJ,cAAa,gCAAqC,4BAA4B;",
  "names": []
}
