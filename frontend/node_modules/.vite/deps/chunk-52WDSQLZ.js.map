{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphMultiGateBlock.ts"],
  "sourcesContent": ["import { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport { RichTypeFlowGraphInteger } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\r\n/**\r\n * Configuration for the multi gate block.\r\n */\r\nexport interface IFlowGraphMultiGateBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The number of output signals. Required.\r\n     */\r\n    outputSignalCount: number;\r\n    /**\r\n     * If the block should pick a random output flow from the ones that haven't been executed. Default to false.\r\n     */\r\n    isRandom?: boolean;\r\n    /**\r\n     * If the block should loop back to the first output flow after executing the last one. Default to false.\r\n     */\r\n    isLoop?: boolean;\r\n}\r\n\r\n/**\r\n * A block that has an input flow and routes it to any potential output flows, randomly or sequentially\r\n */\r\nexport class FlowGraphMultiGateBlock extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Input connection: Resets the gate.\r\n     */\r\n    public readonly reset: FlowGraphSignalConnection;\r\n    /**\r\n     * Output connections: The output signals.\r\n     */\r\n    public readonly outputSignals: FlowGraphSignalConnection[] = [];\r\n    /**\r\n     * Output connection: The index of the current output flow.\r\n     */\r\n    public readonly lastIndex: FlowGraphDataConnection<FlowGraphInteger>;\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public override config: IFlowGraphMultiGateBlockConfiguration\r\n    ) {\r\n        super(config);\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n        this.lastIndex = this.registerDataOutput(\"lastIndex\", RichTypeFlowGraphInteger, new FlowGraphInteger(-1));\r\n        this.setNumberOfOutputSignals(config?.outputSignalCount);\r\n    }\r\n\r\n    private _getNextIndex(indexesUsed: boolean[]): number {\r\n        // find the next index available from the indexes used array\r\n\r\n        // if all outputs were used, reset the indexes used array if we are in a loop multi gate\r\n        if (!indexesUsed.includes(false)) {\r\n            if (this.config.isLoop) {\r\n                indexesUsed.fill(false);\r\n            }\r\n        }\r\n        if (!this.config.isRandom) {\r\n            return indexesUsed.indexOf(false);\r\n        } else {\r\n            const unusedIndexes = indexesUsed.map((used, index) => (used ? -1 : index)).filter((index) => index !== -1);\r\n            return unusedIndexes.length ? unusedIndexes[Math.floor(Math.random() * unusedIndexes.length)] : -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the block's output signals. Would usually be passed from the constructor but can be changed afterwards.\r\n     * @param numberOutputSignals the number of output flows\r\n     */\r\n    public setNumberOfOutputSignals(numberOutputSignals: number = 1) {\r\n        // check the size of the outFlow Array, see if it is not larger than needed\r\n        while (this.outputSignals.length > numberOutputSignals) {\r\n            const flow = this.outputSignals.pop();\r\n            if (flow) {\r\n                flow.disconnectFromAll();\r\n                this._unregisterSignalOutput(flow.name);\r\n            }\r\n        }\r\n\r\n        while (this.outputSignals.length < numberOutputSignals) {\r\n            this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`));\r\n        }\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        // set the state(s) of the block\r\n        if (!context._hasExecutionVariable(this, \"indexesUsed\")) {\r\n            context._setExecutionVariable(\r\n                this,\r\n                \"indexesUsed\",\r\n                this.outputSignals.map(() => false)\r\n            );\r\n        }\r\n\r\n        if (callingSignal === this.reset) {\r\n            context._deleteExecutionVariable(this, \"indexesUsed\");\r\n            this.lastIndex.setValue(new FlowGraphInteger(-1), context);\r\n            return;\r\n        }\r\n        const indexesUsed = context._getExecutionVariable(this, \"indexesUsed\", [] as boolean[]);\r\n        const nextIndex = this._getNextIndex(indexesUsed);\r\n        if (nextIndex > -1) {\r\n            this.lastIndex.setValue(new FlowGraphInteger(nextIndex), context);\r\n            indexesUsed[nextIndex] = true;\r\n            context._setExecutionVariable(this, \"indexesUsed\", indexesUsed);\r\n            this.outputSignals[nextIndex]._activateSignal(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.MultiGate;\r\n    }\r\n\r\n    /**\r\n     * Serializes the block.\r\n     * @param serializationObject the object to serialize to.\r\n     */\r\n    public override serialize(serializationObject?: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.config.outputSignalCount = this.config.outputSignalCount;\r\n        serializationObject.config.isRandom = this.config.isRandom;\r\n        serializationObject.config.loop = this.config.isLoop;\r\n        serializationObject.config.startIndex = this.config.startIndex;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.MultiGate, FlowGraphMultiGateBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;AA8BM,IAAO,0BAAP,cAAuC,wBAAuB;EAchE,YAIoB,QAA6C;AAE7D,UAAM,MAAM;AAFI,SAAA,SAAA;AAVJ,SAAA,gBAA6C,CAAA;AAazD,SAAK,QAAQ,KAAK,qBAAqB,OAAO;AAC9C,SAAK,YAAY,KAAK,mBAAmB,aAAa,0BAA0B,IAAI,iBAAiB,EAAE,CAAC;AACxG,SAAK,yBAAyB,iCAAQ,iBAAiB;EAC3D;EAEQ,cAAc,aAAsB;AAIxC,QAAI,CAAC,YAAY,SAAS,KAAK,GAAG;AAC9B,UAAI,KAAK,OAAO,QAAQ;AACpB,oBAAY,KAAK,KAAK;MAC1B;IACJ;AACA,QAAI,CAAC,KAAK,OAAO,UAAU;AACvB,aAAO,YAAY,QAAQ,KAAK;IACpC,OAAO;AACH,YAAM,gBAAgB,YAAY,IAAI,CAAC,MAAM,UAAW,OAAO,KAAK,KAAM,EAAE,OAAO,CAAC,UAAU,UAAU,EAAE;AAC1G,aAAO,cAAc,SAAS,cAAc,KAAK,MAAM,KAAK,OAAM,IAAK,cAAc,MAAM,CAAC,IAAI;IACpG;EACJ;;;;;EAMO,yBAAyB,sBAA8B,GAAC;AAE3D,WAAO,KAAK,cAAc,SAAS,qBAAqB;AACpD,YAAM,OAAO,KAAK,cAAc,IAAG;AACnC,UAAI,MAAM;AACN,aAAK,kBAAiB;AACtB,aAAK,wBAAwB,KAAK,IAAI;MAC1C;IACJ;AAEA,WAAO,KAAK,cAAc,SAAS,qBAAqB;AACpD,WAAK,cAAc,KAAK,KAAK,sBAAsB,OAAO,KAAK,cAAc,MAAM,EAAE,CAAC;IAC1F;EACJ;EAEO,SAAS,SAA2B,eAAwC;AAE/E,QAAI,CAAC,QAAQ,sBAAsB,MAAM,aAAa,GAAG;AACrD,cAAQ,sBACJ,MACA,eACA,KAAK,cAAc,IAAI,MAAM,KAAK,CAAC;IAE3C;AAEA,QAAI,kBAAkB,KAAK,OAAO;AAC9B,cAAQ,yBAAyB,MAAM,aAAa;AACpD,WAAK,UAAU,SAAS,IAAI,iBAAiB,EAAE,GAAG,OAAO;AACzD;IACJ;AACA,UAAM,cAAc,QAAQ,sBAAsB,MAAM,eAAe,CAAA,CAAe;AACtF,UAAM,YAAY,KAAK,cAAc,WAAW;AAChD,QAAI,YAAY,IAAI;AAChB,WAAK,UAAU,SAAS,IAAI,iBAAiB,SAAS,GAAG,OAAO;AAChE,kBAAY,SAAS,IAAI;AACzB,cAAQ,sBAAsB,MAAM,eAAe,WAAW;AAC9D,WAAK,cAAc,SAAS,EAAE,gBAAgB,OAAO;IACzD;EACJ;;;;EAKgB,eAAY;AACxB,WAAA;EACJ;;;;;EAMgB,UAAU,qBAAyB;AAC/C,UAAM,UAAU,mBAAmB;AACnC,wBAAoB,OAAO,oBAAoB,KAAK,OAAO;AAC3D,wBAAoB,OAAO,WAAW,KAAK,OAAO;AAClD,wBAAoB,OAAO,OAAO,KAAK,OAAO;AAC9C,wBAAoB,OAAO,aAAa,KAAK,OAAO;EACxD;;AAEJ,cAAa,2BAAgC,uBAAuB;",
  "names": []
}
