import {
  getNumericValue,
  isNumeric
} from "./chunk-2EXF6GXX.js";
import {
  FlowGraphBlock,
  RichTypeAny
} from "./chunk-QU5NJF7N.js";
import {
  RegisterClass
} from "./chunk-LMH7SWDS.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Data/flowGraphDataSwitchBlock.js
var FlowGraphDataSwitchBlock = class extends FlowGraphBlock {
  constructor(config) {
    super(config);
    this.config = config;
    this._inputCases = /* @__PURE__ */ new Map();
    this.case = this.registerDataInput("case", RichTypeAny, NaN);
    this.default = this.registerDataInput("default", RichTypeAny);
    this.value = this.registerDataOutput("value", RichTypeAny);
    (this.config.cases || []).forEach((caseValue) => {
      caseValue = getNumericValue(caseValue);
      if (this.config.treatCasesAsIntegers) {
        caseValue = caseValue | 0;
        if (this._inputCases.has(caseValue)) {
          return;
        }
      }
      this._inputCases.set(caseValue, this.registerDataInput(`in_${caseValue}`, RichTypeAny));
    });
  }
  _updateOutputs(context) {
    const selectionValue = this.case.getValue(context);
    let outputValue;
    if (isNumeric(selectionValue)) {
      outputValue = this._getOutputValueForCase(getNumericValue(selectionValue), context);
    } else {
      outputValue = this.default.getValue(context);
    }
    this.value.setValue(outputValue, context);
  }
  _getOutputValueForCase(caseValue, context) {
    var _a;
    return (_a = this._inputCases.get(caseValue)) == null ? void 0 : _a.getValue(context);
  }
  getClassName() {
    return "FlowGraphDataSwitchBlock";
  }
};
RegisterClass("FlowGraphDataSwitchBlock", FlowGraphDataSwitchBlock);

export {
  FlowGraphDataSwitchBlock
};
//# sourceMappingURL=chunk-6I5FS6WQ.js.map
