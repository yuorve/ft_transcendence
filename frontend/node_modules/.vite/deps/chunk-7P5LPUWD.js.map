{
  "version": 3,
  "sources": ["../../../dev/core/src/Maths/math.frustum.ts", "../../../dev/core/src/PostProcesses/postProcessManager.ts", "../../../dev/core/src/Misc/smartArray.ts", "../../../dev/core/src/Rendering/renderingGroup.ts", "../../../dev/core/src/Rendering/renderingManager.ts"],
  "sourcesContent": ["import type { Matrix, Vector3 } from \"./math.vector\";\r\nimport type { DeepImmutable } from \"../types\";\r\nimport { Plane } from \"./math.plane\";\r\n\r\n/**\r\n * Represents a camera frustum\r\n */\r\nexport class Frustum {\r\n    /**\r\n     * Gets the planes representing the frustum\r\n     * @param transform matrix to be applied to the returned planes\r\n     * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\r\n     */\r\n    public static GetPlanes(transform: DeepImmutable<Matrix>): Plane[] {\r\n        const frustumPlanes = [];\r\n        for (let index = 0; index < 6; index++) {\r\n            frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\r\n        }\r\n        Frustum.GetPlanesToRef(transform, frustumPlanes);\r\n        return frustumPlanes;\r\n    }\r\n\r\n    /**\r\n     * Gets the near frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetNearPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[2];\r\n        frustumPlane.normal.y = m[7] + m[6];\r\n        frustumPlane.normal.z = m[11] + m[10];\r\n        frustumPlane.d = m[15] + m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the far frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetFarPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[2];\r\n        frustumPlane.normal.y = m[7] - m[6];\r\n        frustumPlane.normal.z = m[11] - m[10];\r\n        frustumPlane.d = m[15] - m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the left frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetLeftPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[0];\r\n        frustumPlane.normal.y = m[7] + m[4];\r\n        frustumPlane.normal.z = m[11] + m[8];\r\n        frustumPlane.d = m[15] + m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the right frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetRightPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[0];\r\n        frustumPlane.normal.y = m[7] - m[4];\r\n        frustumPlane.normal.z = m[11] - m[8];\r\n        frustumPlane.d = m[15] - m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the top frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetTopPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[1];\r\n        frustumPlane.normal.y = m[7] - m[5];\r\n        frustumPlane.normal.z = m[11] - m[9];\r\n        frustumPlane.d = m[15] - m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the bottom frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetBottomPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[1];\r\n        frustumPlane.normal.y = m[7] + m[5];\r\n        frustumPlane.normal.z = m[11] + m[9];\r\n        frustumPlane.d = m[15] + m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\r\n     * @param transform transformation matrix to be applied to the resulting frustum planes\r\n     * @param frustumPlanes the resulting frustum planes\r\n     */\r\n    public static GetPlanesToRef(transform: DeepImmutable<Matrix>, frustumPlanes: Plane[]): void {\r\n        // Near\r\n        Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\r\n\r\n        // Far\r\n        Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\r\n\r\n        // Left\r\n        Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\r\n\r\n        // Right\r\n        Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\r\n\r\n        // Top\r\n        Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\r\n\r\n        // Bottom\r\n        Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is located between the frustum planes.\r\n     * @param point defines the point to test\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if the point is located between the frustum planes\r\n     */\r\n    public static IsPointInFrustum(point: Vector3, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(point) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport type { PostProcess } from \"./postProcess\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport type { RenderTargetWrapper } from \"../Engines/renderTargetWrapper\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * PostProcessManager is used to manage one or more post processes or post process pipelines\r\n * See https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\r\n */\r\nexport class PostProcessManager {\r\n    private _scene: Scene;\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _vertexBuffers: { [key: string]: Nullable<VertexBuffer> } = {};\r\n\r\n    /**\r\n     * Creates a new instance PostProcess\r\n     * @param scene The scene that the post process is associated with.\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n    }\r\n\r\n    private _prepareBuffers(): void {\r\n        if (this._vertexBuffers[VertexBuffer.PositionKind]) {\r\n            return;\r\n        }\r\n\r\n        // VBO\r\n        const vertices = [];\r\n        vertices.push(1, 1);\r\n        vertices.push(-1, 1);\r\n        vertices.push(-1, -1);\r\n        vertices.push(1, -1);\r\n\r\n        this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(this._scene.getEngine(), vertices, VertexBuffer.PositionKind, false, false, 2);\r\n\r\n        this._buildIndexBuffer();\r\n    }\r\n\r\n    private _buildIndexBuffer(): void {\r\n        // Indices\r\n        const indices = [];\r\n        indices.push(0);\r\n        indices.push(1);\r\n        indices.push(2);\r\n\r\n        indices.push(0);\r\n        indices.push(2);\r\n        indices.push(3);\r\n\r\n        this._indexBuffer = this._scene.getEngine().createIndexBuffer(indices);\r\n    }\r\n\r\n    public onBeforeRenderObservable = new Observable<PostProcessManager>();\r\n\r\n    /**\r\n     * Rebuilds the vertex buffers of the manager.\r\n     * @internal\r\n     */\r\n    public _rebuild(): void {\r\n        const vb = this._vertexBuffers[VertexBuffer.PositionKind];\r\n\r\n        if (!vb) {\r\n            return;\r\n        }\r\n        vb._rebuild();\r\n        this._buildIndexBuffer();\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Prepares a frame to be run through a post process.\r\n     * @param sourceTexture The input texture to the post processes. (default: null)\r\n     * @param postProcesses An array of post processes to be run. (default: null)\r\n     * @returns True if the post processes were able to be run.\r\n     * @internal\r\n     */\r\n    public _prepareFrame(sourceTexture: Nullable<InternalTexture> = null, postProcesses: Nullable<PostProcess[]> = null): boolean {\r\n        const camera = this._scene.activeCamera;\r\n        if (!camera) {\r\n            return false;\r\n        }\r\n\r\n        postProcesses = postProcesses || <Nullable<PostProcess[]>>camera._postProcesses.filter((pp) => {\r\n                return pp != null;\r\n            });\r\n\r\n        if (!postProcesses || postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\r\n            return false;\r\n        }\r\n\r\n        postProcesses[0].activate(camera, sourceTexture, postProcesses !== null && postProcesses !== undefined);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Manually render a set of post processes to a texture.\r\n     * Please note, the frame buffer won't be unbound after the call in case you have more render to do.\r\n     * @param postProcesses An array of post processes to be run.\r\n     * @param targetTexture The render target wrapper to render to.\r\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight\r\n     * @param faceIndex defines the face to render to if a cubemap is defined as the target\r\n     * @param lodLevel defines which lod of the texture to render to\r\n     * @param doNotBindFrambuffer If set to true, assumes that the framebuffer has been bound previously\r\n     */\r\n    public directRender(\r\n        postProcesses: PostProcess[],\r\n        targetTexture: Nullable<RenderTargetWrapper> = null,\r\n        forceFullscreenViewport = false,\r\n        faceIndex = 0,\r\n        lodLevel = 0,\r\n        doNotBindFrambuffer = false\r\n    ): void {\r\n        const engine = this._scene.getEngine();\r\n\r\n        for (let index = 0; index < postProcesses.length; index++) {\r\n            if (index < postProcesses.length - 1) {\r\n                postProcesses[index + 1].activate(this._scene.activeCamera || this._scene, targetTexture?.texture);\r\n            } else {\r\n                if (targetTexture) {\r\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport, lodLevel);\r\n                } else if (!doNotBindFrambuffer) {\r\n                    engine.restoreDefaultFramebuffer();\r\n                }\r\n                engine._debugInsertMarker?.(`post process ${postProcesses[index].name} output`);\r\n            }\r\n\r\n            const pp = postProcesses[index];\r\n            const effect = pp.apply();\r\n\r\n            if (effect) {\r\n                pp.onBeforeRenderObservable.notifyObservers(effect);\r\n\r\n                // VBOs\r\n                this._prepareBuffers();\r\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\r\n\r\n                // Draw order\r\n                engine.drawElementsType(Constants.MATERIAL_TriangleFillMode, 0, 6);\r\n\r\n                pp.onAfterRenderObservable.notifyObservers(effect);\r\n            }\r\n        }\r\n\r\n        // Restore depth buffer\r\n        engine.setDepthBuffer(true);\r\n        engine.setDepthWrite(true);\r\n    }\r\n\r\n    /**\r\n     * Finalize the result of the output of the postprocesses.\r\n     * @param doNotPresent If true the result will not be displayed to the screen.\r\n     * @param targetTexture The render target wrapper to render to.\r\n     * @param faceIndex The index of the face to bind the target texture to.\r\n     * @param postProcesses The array of post processes to render.\r\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight (default: false)\r\n     * @internal\r\n     */\r\n    public _finalizeFrame(\r\n        doNotPresent?: boolean,\r\n        targetTexture?: RenderTargetWrapper,\r\n        faceIndex?: number,\r\n        postProcesses?: Array<PostProcess>,\r\n        forceFullscreenViewport = false\r\n    ): void {\r\n        const camera = this._scene.activeCamera;\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        this.onBeforeRenderObservable.notifyObservers(this);\r\n\r\n        postProcesses = postProcesses || <Array<PostProcess>>camera._postProcesses.filter((pp) => {\r\n                return pp != null;\r\n            });\r\n        if (postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\r\n            return;\r\n        }\r\n        const engine = this._scene.getEngine();\r\n\r\n        for (let index = 0, len = postProcesses.length; index < len; index++) {\r\n            const pp = postProcesses[index];\r\n\r\n            if (index < len - 1) {\r\n                pp._outputTexture = postProcesses[index + 1].activate(camera, targetTexture?.texture);\r\n            } else {\r\n                if (targetTexture) {\r\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport);\r\n                    pp._outputTexture = targetTexture;\r\n                } else {\r\n                    engine.restoreDefaultFramebuffer();\r\n                    pp._outputTexture = null;\r\n                }\r\n                engine._debugInsertMarker?.(`post process ${postProcesses[index].name} output`);\r\n            }\r\n\r\n            if (doNotPresent) {\r\n                break;\r\n            }\r\n\r\n            const effect = pp.apply();\r\n\r\n            if (effect) {\r\n                pp.onBeforeRenderObservable.notifyObservers(effect);\r\n\r\n                // VBOs\r\n                this._prepareBuffers();\r\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\r\n\r\n                // Draw order\r\n                engine.drawElementsType(Constants.MATERIAL_TriangleFillMode, 0, 6);\r\n\r\n                pp.onAfterRenderObservable.notifyObservers(effect);\r\n            }\r\n        }\r\n\r\n        // Restore states\r\n        engine.setDepthBuffer(true);\r\n        engine.setDepthWrite(true);\r\n        engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n    }\r\n\r\n    /**\r\n     * Disposes of the post process manager.\r\n     */\r\n    public dispose(): void {\r\n        const buffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (buffer) {\r\n            buffer.dispose();\r\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\r\n        }\r\n\r\n        if (this._indexBuffer) {\r\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\r\n            this._indexBuffer = null;\r\n        }\r\n    }\r\n}\r\n", "/**\r\n * Defines an array and its length.\r\n * It can be helpful to group result from both Arrays and smart arrays in one structure.\r\n */\r\nexport interface ISmartArrayLike<T> {\r\n    /**\r\n     * The data of the array.\r\n     */\r\n    data: Array<T>;\r\n    /**\r\n     * The active length of the array.\r\n     */\r\n    length: number;\r\n}\r\n\r\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n */\r\nexport class SmartArray<T> implements ISmartArrayLike<T> {\r\n    /**\r\n     * The full set of data from the array.\r\n     */\r\n    public data: Array<T>;\r\n\r\n    /**\r\n     * The active length of the array.\r\n     */\r\n    public length: number = 0;\r\n\r\n    protected _id: number;\r\n\r\n    /**\r\n     * Instantiates a Smart Array.\r\n     * @param capacity defines the default capacity of the array.\r\n     */\r\n    constructor(capacity: number) {\r\n        this.data = new Array(capacity);\r\n        this._id = SmartArray._GlobalId++;\r\n    }\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * @param value defines the object to push in the array.\r\n     */\r\n    public push(value: T): void {\r\n        this.data[this.length++] = value;\r\n\r\n        if (this.length > this.data.length) {\r\n            this.data.length *= 2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates over the active data and apply the lambda to them.\r\n     * @param func defines the action to apply on each value.\r\n     */\r\n    public forEach(func: (content: T) => void): void {\r\n        for (let index = 0; index < this.length; index++) {\r\n            func(this.data[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sorts the full sets of data.\r\n     * @param compareFn defines the comparison function to apply.\r\n     */\r\n    public sort(compareFn: (a: T, b: T) => number): void {\r\n        this.data.sort(compareFn);\r\n    }\r\n\r\n    /**\r\n     * Resets the active data to an empty array.\r\n     */\r\n    public reset(): void {\r\n        this.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Releases all the data from the array as well as the array.\r\n     */\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        if (this.data) {\r\n            this.data.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Concats the active data with a given array.\r\n     * @param array defines the data to concatenate with.\r\n     */\r\n    public concat(array: any): void {\r\n        if (array.length === 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (let index = 0; index < array.length; index++) {\r\n            this.data[this.length++] = (array.data || array)[index];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the position of a value in the active data.\r\n     * @param value defines the value to find the index for\r\n     * @returns the index if found in the active data otherwise -1\r\n     */\r\n    public indexOf(value: T): number {\r\n        const position = this.data.indexOf(value);\r\n\r\n        if (position >= this.length) {\r\n            return -1;\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    /**\r\n     * Returns whether an element is part of the active data.\r\n     * @param value defines the value to look for\r\n     * @returns true if found in the active data otherwise false\r\n     */\r\n    public contains(value: T): boolean {\r\n        return this.indexOf(value) !== -1;\r\n    }\r\n\r\n    // Statics\r\n    private static _GlobalId = 0;\r\n}\r\n\r\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n * The data in this array can only be present once\r\n */\r\nexport class SmartArrayNoDuplicate<T> extends SmartArray<T> {\r\n    private _duplicateId = 0;\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * THIS DOES NOT PREVENT DUPPLICATE DATA\r\n     * @param value defines the object to push in the array.\r\n     */\r\n    public override push(value: T): void {\r\n        super.push(value);\r\n\r\n        if (!(<any>value).__smartArrayFlags) {\r\n            (<any>value).__smartArrayFlags = {};\r\n        }\r\n\r\n        (<any>value).__smartArrayFlags[this._id] = this._duplicateId;\r\n    }\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * If the data is already present, it won t be added again\r\n     * @param value defines the object to push in the array.\r\n     * @returns true if added false if it was already present\r\n     */\r\n    public pushNoDuplicate(value: T): boolean {\r\n        if ((<any>value).__smartArrayFlags && (<any>value).__smartArrayFlags[this._id] === this._duplicateId) {\r\n            return false;\r\n        }\r\n        this.push(value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Resets the active data to an empty array.\r\n     */\r\n    public override reset(): void {\r\n        super.reset();\r\n        this._duplicateId++;\r\n    }\r\n\r\n    /**\r\n     * Concats the active data with a given array.\r\n     * This ensures no duplicate will be present in the result.\r\n     * @param array defines the data to concatenate with.\r\n     */\r\n    public concatWithNoDuplicate(array: any): void {\r\n        if (array.length === 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (let index = 0; index < array.length; index++) {\r\n            const item = (array.data || array)[index];\r\n            this.pushNoDuplicate(item);\r\n        }\r\n    }\r\n}\r\n", "import { SmartArray, SmartArrayNoDuplicate } from \"../Misc/smartArray\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Nullable, DeepImmutable } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport type { IEdgesRenderer } from \"./edgesRenderer\";\r\nimport type { ISpriteManager } from \"../Sprites/spriteManager\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\n\r\n/**\r\n * This represents the object necessary to create a rendering group.\r\n * This is exclusively used and created by the rendering manager.\r\n * To modify the behavior, you use the available helpers in your scene or meshes.\r\n * @internal\r\n */\r\nexport class RenderingGroup {\r\n    private static _ZeroVector: DeepImmutable<Vector3> = Vector3.Zero();\r\n    private _scene: Scene;\r\n    private _opaqueSubMeshes = new SmartArray<SubMesh>(256);\r\n    private _transparentSubMeshes = new SmartArray<SubMesh>(256);\r\n    private _alphaTestSubMeshes = new SmartArray<SubMesh>(256);\r\n    private _depthOnlySubMeshes = new SmartArray<SubMesh>(256);\r\n    private _particleSystems = new SmartArray<IParticleSystem>(256);\r\n    private _spriteManagers = new SmartArray<ISpriteManager>(256);\r\n\r\n    private _opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number>;\r\n    private _alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number>;\r\n    private _transparentSortCompareFn: (a: SubMesh, b: SubMesh) => number;\r\n\r\n    private _renderOpaque: (subMeshes: SmartArray<SubMesh>) => void;\r\n    private _renderAlphaTest: (subMeshes: SmartArray<SubMesh>) => void;\r\n    private _renderTransparent: (subMeshes: SmartArray<SubMesh>) => void;\r\n\r\n    /** @internal */\r\n    public _empty = true;\r\n\r\n    /** @internal */\r\n    public _edgesRenderers = new SmartArrayNoDuplicate<IEdgesRenderer>(16);\r\n\r\n    public onBeforeTransparentRendering: () => void;\r\n\r\n    /**\r\n     * Set the opaque sort comparison function.\r\n     * If null the sub meshes will be render in the order they were created\r\n     */\r\n    public set opaqueSortCompareFn(value: Nullable<(a: SubMesh, b: SubMesh) => number>) {\r\n        if (value) {\r\n            this._opaqueSortCompareFn = value;\r\n        } else {\r\n            this._opaqueSortCompareFn = RenderingGroup.PainterSortCompare;\r\n        }\r\n        this._renderOpaque = this._renderOpaqueSorted;\r\n    }\r\n\r\n    /**\r\n     * Set the alpha test sort comparison function.\r\n     * If null the sub meshes will be render in the order they were created\r\n     */\r\n    public set alphaTestSortCompareFn(value: Nullable<(a: SubMesh, b: SubMesh) => number>) {\r\n        if (value) {\r\n            this._alphaTestSortCompareFn = value;\r\n        } else {\r\n            this._alphaTestSortCompareFn = RenderingGroup.PainterSortCompare;\r\n        }\r\n        this._renderAlphaTest = this._renderAlphaTestSorted;\r\n    }\r\n\r\n    /**\r\n     * Set the transparent sort comparison function.\r\n     * If null the sub meshes will be render in the order they were created\r\n     */\r\n    public set transparentSortCompareFn(value: Nullable<(a: SubMesh, b: SubMesh) => number>) {\r\n        if (value) {\r\n            this._transparentSortCompareFn = value;\r\n        } else {\r\n            this._transparentSortCompareFn = RenderingGroup.defaultTransparentSortCompare;\r\n        }\r\n        this._renderTransparent = this._renderTransparentSorted;\r\n    }\r\n\r\n    /**\r\n     * Creates a new rendering group.\r\n     * @param index The rendering group index\r\n     * @param scene\r\n     * @param opaqueSortCompareFn The opaque sort comparison function. If null no order is applied\r\n     * @param alphaTestSortCompareFn The alpha test sort comparison function. If null no order is applied\r\n     * @param transparentSortCompareFn The transparent sort comparison function. If null back to front + alpha index sort is applied\r\n     */\r\n    constructor(\r\n        public index: number,\r\n        scene: Scene,\r\n        opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        transparentSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null\r\n    ) {\r\n        this._scene = scene;\r\n\r\n        this.opaqueSortCompareFn = opaqueSortCompareFn;\r\n        this.alphaTestSortCompareFn = alphaTestSortCompareFn;\r\n        this.transparentSortCompareFn = transparentSortCompareFn;\r\n    }\r\n\r\n    /**\r\n     * Render all the sub meshes contained in the group.\r\n     * @param customRenderFunction Used to override the default render behaviour of the group.\r\n     * @param renderSprites\r\n     * @param renderParticles\r\n     * @param activeMeshes\r\n     */\r\n    public render(\r\n        customRenderFunction: Nullable<\r\n            (\r\n                opaqueSubMeshes: SmartArray<SubMesh>,\r\n                transparentSubMeshes: SmartArray<SubMesh>,\r\n                alphaTestSubMeshes: SmartArray<SubMesh>,\r\n                depthOnlySubMeshes: SmartArray<SubMesh>\r\n            ) => void\r\n        >,\r\n        renderSprites: boolean,\r\n        renderParticles: boolean,\r\n        activeMeshes: Nullable<AbstractMesh[]>\r\n    ): void {\r\n        if (customRenderFunction) {\r\n            customRenderFunction(this._opaqueSubMeshes, this._alphaTestSubMeshes, this._transparentSubMeshes, this._depthOnlySubMeshes);\r\n            return;\r\n        }\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        // Depth only\r\n        if (this._depthOnlySubMeshes.length !== 0) {\r\n            engine.setColorWrite(false);\r\n            this._renderAlphaTest(this._depthOnlySubMeshes);\r\n            engine.setColorWrite(true);\r\n        }\r\n\r\n        // Opaque\r\n        if (this._opaqueSubMeshes.length !== 0) {\r\n            this._renderOpaque(this._opaqueSubMeshes);\r\n        }\r\n\r\n        // Alpha test\r\n        if (this._alphaTestSubMeshes.length !== 0) {\r\n            this._renderAlphaTest(this._alphaTestSubMeshes);\r\n        }\r\n\r\n        const stencilState = engine.getStencilBuffer();\r\n        engine.setStencilBuffer(false);\r\n\r\n        // Sprites\r\n        if (renderSprites) {\r\n            this._renderSprites();\r\n        }\r\n\r\n        // Particles\r\n        if (renderParticles) {\r\n            this._renderParticles(activeMeshes);\r\n        }\r\n\r\n        if (this.onBeforeTransparentRendering) {\r\n            this.onBeforeTransparentRendering();\r\n        }\r\n\r\n        // Transparent\r\n        if (this._transparentSubMeshes.length !== 0 || this._scene.useOrderIndependentTransparency) {\r\n            engine.setStencilBuffer(stencilState);\r\n            if (this._scene.useOrderIndependentTransparency) {\r\n                const excludedMeshes = this._scene.depthPeelingRenderer!.render(this._transparentSubMeshes);\r\n                if (excludedMeshes.length) {\r\n                    // Render leftover meshes that could not be processed by depth peeling\r\n                    this._renderTransparent(excludedMeshes);\r\n                }\r\n            } else {\r\n                this._renderTransparent(this._transparentSubMeshes);\r\n            }\r\n            engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n        }\r\n\r\n        // Set back stencil to false in case it changes before the edge renderer.\r\n        engine.setStencilBuffer(false);\r\n\r\n        // Edges\r\n        if (this._edgesRenderers.length) {\r\n            for (let edgesRendererIndex = 0; edgesRendererIndex < this._edgesRenderers.length; edgesRendererIndex++) {\r\n                this._edgesRenderers.data[edgesRendererIndex].render();\r\n            }\r\n\r\n            engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n        }\r\n\r\n        // Restore Stencil state.\r\n        engine.setStencilBuffer(stencilState);\r\n    }\r\n\r\n    /**\r\n     * Renders the opaque submeshes in the order from the opaqueSortCompareFn.\r\n     * @param subMeshes The submeshes to render\r\n     */\r\n    private _renderOpaqueSorted(subMeshes: SmartArray<SubMesh>): void {\r\n        RenderingGroup._RenderSorted(subMeshes, this._opaqueSortCompareFn, this._scene.activeCamera, false);\r\n    }\r\n\r\n    /**\r\n     * Renders the opaque submeshes in the order from the alphatestSortCompareFn.\r\n     * @param subMeshes The submeshes to render\r\n     */\r\n    private _renderAlphaTestSorted(subMeshes: SmartArray<SubMesh>): void {\r\n        RenderingGroup._RenderSorted(subMeshes, this._alphaTestSortCompareFn, this._scene.activeCamera, false);\r\n    }\r\n\r\n    /**\r\n     * Renders the opaque submeshes in the order from the transparentSortCompareFn.\r\n     * @param subMeshes The submeshes to render\r\n     */\r\n    private _renderTransparentSorted(subMeshes: SmartArray<SubMesh>): void {\r\n        RenderingGroup._RenderSorted(subMeshes, this._transparentSortCompareFn, this._scene.activeCamera, true);\r\n    }\r\n\r\n    /**\r\n     * Renders the submeshes in a specified order.\r\n     * @param subMeshes The submeshes to sort before render\r\n     * @param sortCompareFn The comparison function use to sort\r\n     * @param camera The camera position use to preprocess the submeshes to help sorting\r\n     * @param transparent Specifies to activate blending if true\r\n     */\r\n    private static _RenderSorted(\r\n        subMeshes: SmartArray<SubMesh>,\r\n        sortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number>,\r\n        camera: Nullable<Camera>,\r\n        transparent: boolean\r\n    ): void {\r\n        let subIndex = 0;\r\n        let subMesh: SubMesh;\r\n        const cameraPosition = camera ? camera.globalPosition : RenderingGroup._ZeroVector;\r\n\r\n        if (transparent) {\r\n            for (; subIndex < subMeshes.length; subIndex++) {\r\n                subMesh = subMeshes.data[subIndex];\r\n                subMesh._alphaIndex = subMesh.getMesh().alphaIndex;\r\n                subMesh._distanceToCamera = Vector3.Distance(subMesh.getBoundingInfo().boundingSphere.centerWorld, cameraPosition);\r\n            }\r\n        }\r\n\r\n        const sortedArray = subMeshes.length === subMeshes.data.length ? subMeshes.data : subMeshes.data.slice(0, subMeshes.length);\r\n\r\n        if (sortCompareFn) {\r\n            sortedArray.sort(sortCompareFn);\r\n        }\r\n\r\n        const scene = sortedArray[0].getMesh().getScene();\r\n        for (subIndex = 0; subIndex < sortedArray.length; subIndex++) {\r\n            subMesh = sortedArray[subIndex];\r\n\r\n            if (scene._activeMeshesFrozenButKeepClipping && !subMesh.isInFrustum(scene._frustumPlanes)) {\r\n                continue;\r\n            }\r\n\r\n            if (transparent) {\r\n                const material = subMesh.getMaterial();\r\n\r\n                if (material && material.needDepthPrePass) {\r\n                    const engine = material.getScene().getEngine();\r\n                    engine.setColorWrite(false);\r\n                    engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n                    subMesh.render(false);\r\n                    engine.setColorWrite(true);\r\n                }\r\n            }\r\n\r\n            subMesh.render(transparent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\r\n     * are rendered back to front if in the same alpha index.\r\n     *\r\n     * @param a The first submesh\r\n     * @param b The second submesh\r\n     * @returns The result of the comparison\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static defaultTransparentSortCompare(a: SubMesh, b: SubMesh): number {\r\n        // Alpha index first\r\n        if (a._alphaIndex > b._alphaIndex) {\r\n            return 1;\r\n        }\r\n        if (a._alphaIndex < b._alphaIndex) {\r\n            return -1;\r\n        }\r\n\r\n        // Then distance to camera\r\n        return RenderingGroup.backToFrontSortCompare(a, b);\r\n    }\r\n\r\n    /**\r\n     * Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\r\n     * are rendered back to front.\r\n     *\r\n     * @param a The first submesh\r\n     * @param b The second submesh\r\n     * @returns The result of the comparison\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static backToFrontSortCompare(a: SubMesh, b: SubMesh): number {\r\n        // Then distance to camera\r\n        if (a._distanceToCamera < b._distanceToCamera) {\r\n            return 1;\r\n        }\r\n        if (a._distanceToCamera > b._distanceToCamera) {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\r\n     * are rendered front to back (prevent overdraw).\r\n     *\r\n     * @param a The first submesh\r\n     * @param b The second submesh\r\n     * @returns The result of the comparison\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static frontToBackSortCompare(a: SubMesh, b: SubMesh): number {\r\n        // Then distance to camera\r\n        if (a._distanceToCamera < b._distanceToCamera) {\r\n            return -1;\r\n        }\r\n        if (a._distanceToCamera > b._distanceToCamera) {\r\n            return 1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\r\n     * are grouped by material then geometry.\r\n     *\r\n     * @param a The first submesh\r\n     * @param b The second submesh\r\n     * @returns The result of the comparison\r\n     */\r\n    public static PainterSortCompare(a: SubMesh, b: SubMesh): number {\r\n        const meshA = a.getMesh();\r\n        const meshB = b.getMesh();\r\n\r\n        if (meshA.material && meshB.material) {\r\n            return meshA.material.uniqueId - meshB.material.uniqueId;\r\n        }\r\n\r\n        return meshA.uniqueId - meshB.uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Resets the different lists of submeshes to prepare a new frame.\r\n     */\r\n    public prepare(): void {\r\n        this._opaqueSubMeshes.reset();\r\n        this._transparentSubMeshes.reset();\r\n        this._alphaTestSubMeshes.reset();\r\n        this._depthOnlySubMeshes.reset();\r\n        this._particleSystems.reset();\r\n        this.prepareSprites();\r\n        this._edgesRenderers.reset();\r\n        this._empty = true;\r\n    }\r\n\r\n    /**\r\n     * Resets the different lists of sprites to prepare a new frame.\r\n     */\r\n    public prepareSprites(): void {\r\n        this._spriteManagers.reset();\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._opaqueSubMeshes.dispose();\r\n        this._transparentSubMeshes.dispose();\r\n        this._alphaTestSubMeshes.dispose();\r\n        this._depthOnlySubMeshes.dispose();\r\n        this._particleSystems.dispose();\r\n        this._spriteManagers.dispose();\r\n        this._edgesRenderers.dispose();\r\n    }\r\n\r\n    /**\r\n     * Inserts the submesh in its correct queue depending on its material.\r\n     * @param subMesh The submesh to dispatch\r\n     * @param [mesh] Optional reference to the submeshes's mesh. Provide if you have an exiting reference to improve performance.\r\n     * @param [material] Optional reference to the submeshes's material. Provide if you have an exiting reference to improve performance.\r\n     */\r\n    public dispatch(subMesh: SubMesh, mesh?: AbstractMesh, material?: Nullable<Material>): void {\r\n        // Get mesh and materials if not provided\r\n        if (mesh === undefined) {\r\n            mesh = subMesh.getMesh();\r\n        }\r\n        if (material === undefined) {\r\n            material = subMesh.getMaterial();\r\n        }\r\n\r\n        if (material === null || material === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (material.needAlphaBlendingForMesh(mesh)) {\r\n            // Transparent\r\n            this._transparentSubMeshes.push(subMesh);\r\n        } else if (material.needAlphaTestingForMesh(mesh)) {\r\n            // Alpha test\r\n            if (material.needDepthPrePass) {\r\n                this._depthOnlySubMeshes.push(subMesh);\r\n            }\r\n\r\n            this._alphaTestSubMeshes.push(subMesh);\r\n        } else {\r\n            if (material.needDepthPrePass) {\r\n                this._depthOnlySubMeshes.push(subMesh);\r\n            }\r\n\r\n            this._opaqueSubMeshes.push(subMesh); // Opaque\r\n        }\r\n\r\n        mesh._renderingGroup = this;\r\n\r\n        if (mesh._edgesRenderer && mesh.isEnabled() && mesh.isVisible && mesh._edgesRenderer.isEnabled) {\r\n            this._edgesRenderers.pushNoDuplicate(mesh._edgesRenderer);\r\n        }\r\n\r\n        this._empty = false;\r\n    }\r\n\r\n    public dispatchSprites(spriteManager: ISpriteManager) {\r\n        this._spriteManagers.push(spriteManager);\r\n        this._empty = false;\r\n    }\r\n\r\n    public dispatchParticles(particleSystem: IParticleSystem) {\r\n        this._particleSystems.push(particleSystem);\r\n        this._empty = false;\r\n    }\r\n\r\n    private _renderParticles(activeMeshes: Nullable<AbstractMesh[]>): void {\r\n        if (this._particleSystems.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Particles\r\n        const activeCamera = this._scene.activeCamera;\r\n        this._scene.onBeforeParticlesRenderingObservable.notifyObservers(this._scene);\r\n        for (let particleIndex = 0; particleIndex < this._particleSystems.length; particleIndex++) {\r\n            const particleSystem = this._particleSystems.data[particleIndex];\r\n\r\n            if ((activeCamera && activeCamera.layerMask & particleSystem.layerMask) === 0) {\r\n                continue;\r\n            }\r\n\r\n            const emitter: any = particleSystem.emitter;\r\n            if (!emitter.position || !activeMeshes || activeMeshes.indexOf(emitter) !== -1) {\r\n                this._scene._activeParticles.addCount(particleSystem.render(), false);\r\n            }\r\n        }\r\n        this._scene.onAfterParticlesRenderingObservable.notifyObservers(this._scene);\r\n    }\r\n\r\n    private _renderSprites(): void {\r\n        if (!this._scene.spritesEnabled || this._spriteManagers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Sprites\r\n        const activeCamera = this._scene.activeCamera;\r\n        this._scene.onBeforeSpritesRenderingObservable.notifyObservers(this._scene);\r\n        for (let id = 0; id < this._spriteManagers.length; id++) {\r\n            const spriteManager = this._spriteManagers.data[id];\r\n\r\n            if ((activeCamera && activeCamera.layerMask & spriteManager.layerMask) !== 0) {\r\n                spriteManager.render();\r\n            }\r\n        }\r\n        this._scene.onAfterSpritesRenderingObservable.notifyObservers(this._scene);\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport type { ISpriteManager } from \"../Sprites/spriteManager\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport { RenderingGroup } from \"./renderingGroup\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * Interface describing the different options available in the rendering manager\r\n * regarding Auto Clear between groups.\r\n */\r\nexport interface IRenderingManagerAutoClearSetup {\r\n    /**\r\n     * Defines whether or not autoclear is enable.\r\n     */\r\n    autoClear: boolean;\r\n    /**\r\n     * Defines whether or not to autoclear the depth buffer.\r\n     */\r\n    depth: boolean;\r\n    /**\r\n     * Defines whether or not to autoclear the stencil buffer.\r\n     */\r\n    stencil: boolean;\r\n}\r\n\r\n/**\r\n * This class is used by the onRenderingGroupObservable\r\n */\r\nexport class RenderingGroupInfo {\r\n    /**\r\n     * The Scene that being rendered\r\n     */\r\n    scene: Scene;\r\n\r\n    /**\r\n     * The camera currently used for the rendering pass\r\n     */\r\n    camera: Nullable<Camera>;\r\n\r\n    /**\r\n     * The ID of the renderingGroup being processed\r\n     */\r\n    renderingGroupId: number;\r\n\r\n    /**\r\n     * The rendering manager\r\n     */\r\n    renderingManager: RenderingManager;\r\n}\r\n\r\n/**\r\n * This is the manager responsible of all the rendering for meshes sprites and particles.\r\n * It is enable to manage the different groups as well as the different necessary sort functions.\r\n * This should not be used directly aside of the few static configurations\r\n */\r\nexport class RenderingManager {\r\n    /**\r\n     * The max id used for rendering groups (not included)\r\n     */\r\n    public static MAX_RENDERINGGROUPS = 4;\r\n\r\n    /**\r\n     * The min id used for rendering groups (included)\r\n     */\r\n    public static MIN_RENDERINGGROUPS = 0;\r\n\r\n    /**\r\n     * Used to globally prevent autoclearing scenes.\r\n     */\r\n    public static AUTOCLEAR = true;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _useSceneAutoClearSetup = false;\r\n\r\n    private _scene: Scene;\r\n    private _renderingGroups = new Array<RenderingGroup>();\r\n    private _depthStencilBufferAlreadyCleaned: boolean;\r\n\r\n    private _autoClearDepthStencil: { [id: number]: IRenderingManagerAutoClearSetup } = {};\r\n    private _customOpaqueSortCompareFn: { [id: number]: Nullable<(a: SubMesh, b: SubMesh) => number> } = {};\r\n    private _customAlphaTestSortCompareFn: { [id: number]: Nullable<(a: SubMesh, b: SubMesh) => number> } = {};\r\n    private _customTransparentSortCompareFn: { [id: number]: Nullable<(a: SubMesh, b: SubMesh) => number> } = {};\r\n    private _renderingGroupInfo: Nullable<RenderingGroupInfo> = new RenderingGroupInfo();\r\n\r\n    private _maintainStateBetweenFrames = false;\r\n    /**\r\n     * Gets or sets a boolean indicating that the manager will not reset between frames.\r\n     * This means that if a mesh becomes invisible or transparent it will not be visible until this boolean is set to false again.\r\n     * By default, the rendering manager will dispatch all active meshes per frame (moving them to the transparent, opaque or alpha testing lists).\r\n     * By turning this property on, you will accelerate the rendering by keeping all these lists unchanged between frames.\r\n     */\r\n    public get maintainStateBetweenFrames() {\r\n        return this._maintainStateBetweenFrames;\r\n    }\r\n\r\n    public set maintainStateBetweenFrames(value: boolean) {\r\n        if (value === this._maintainStateBetweenFrames) {\r\n            return;\r\n        }\r\n\r\n        this._maintainStateBetweenFrames = value;\r\n        if (!this._maintainStateBetweenFrames) {\r\n            this.restoreDispachedFlags();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restore wasDispatched flags on the lists of elements to render.\r\n     */\r\n    public restoreDispachedFlags() {\r\n        for (const mesh of this._scene.meshes) {\r\n            if (mesh.subMeshes) {\r\n                for (const subMesh of mesh.subMeshes) {\r\n                    subMesh._wasDispatched = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._scene.spriteManagers) {\r\n            for (const spriteManager of this._scene.spriteManagers) {\r\n                spriteManager._wasDispatched = false;\r\n            }\r\n        }\r\n\r\n        for (const particleSystem of this._scene.particleSystems) {\r\n            particleSystem._wasDispatched = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new rendering group for a particular scene\r\n     * @param scene Defines the scene the groups belongs to\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n\r\n        for (let i = RenderingManager.MIN_RENDERINGGROUPS; i < RenderingManager.MAX_RENDERINGGROUPS; i++) {\r\n            this._autoClearDepthStencil[i] = { autoClear: true, depth: true, stencil: true };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns the rendering group with the specified id.\r\n     * @param id the id of the rendering group (0 by default)\r\n     */\r\n    public getRenderingGroup(id: number): RenderingGroup {\r\n        const renderingGroupId = id || 0;\r\n\r\n        this._prepareRenderingGroup(renderingGroupId);\r\n\r\n        return this._renderingGroups[renderingGroupId];\r\n    }\r\n\r\n    private _clearDepthStencilBuffer(depth = true, stencil = true): void {\r\n        if (this._depthStencilBufferAlreadyCleaned) {\r\n            return;\r\n        }\r\n\r\n        this._scene.getEngine().clear(null, false, depth, stencil);\r\n        this._depthStencilBufferAlreadyCleaned = true;\r\n    }\r\n\r\n    /**\r\n     * Renders the entire managed groups. This is used by the scene or the different render targets.\r\n     * @internal\r\n     */\r\n    public render(\r\n        customRenderFunction: Nullable<\r\n            (\r\n                opaqueSubMeshes: SmartArray<SubMesh>,\r\n                transparentSubMeshes: SmartArray<SubMesh>,\r\n                alphaTestSubMeshes: SmartArray<SubMesh>,\r\n                depthOnlySubMeshes: SmartArray<SubMesh>\r\n            ) => void\r\n        >,\r\n        activeMeshes: Nullable<AbstractMesh[]>,\r\n        renderParticles: boolean,\r\n        renderSprites: boolean\r\n    ): void {\r\n        // Update the observable context (not null as it only goes away on dispose)\r\n        const info = this._renderingGroupInfo!;\r\n        info.scene = this._scene;\r\n        info.camera = this._scene.activeCamera;\r\n        info.renderingManager = this;\r\n\r\n        // Dispatch sprites\r\n        if (this._scene.spriteManagers && renderSprites) {\r\n            for (let index = 0; index < this._scene.spriteManagers.length; index++) {\r\n                const manager = this._scene.spriteManagers[index];\r\n                this.dispatchSprites(manager);\r\n            }\r\n        }\r\n\r\n        // Render\r\n        for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\r\n            this._depthStencilBufferAlreadyCleaned = index === RenderingManager.MIN_RENDERINGGROUPS;\r\n            const renderingGroup = this._renderingGroups[index];\r\n            if (!renderingGroup || renderingGroup._empty) {\r\n                continue;\r\n            }\r\n\r\n            const renderingGroupMask = 1 << index;\r\n            info.renderingGroupId = index;\r\n\r\n            // Before Observable\r\n            this._scene.onBeforeRenderingGroupObservable.notifyObservers(info, renderingGroupMask);\r\n\r\n            // Clear depth/stencil if needed\r\n            if (RenderingManager.AUTOCLEAR) {\r\n                const autoClear = this._useSceneAutoClearSetup ? this._scene.getAutoClearDepthStencilSetup(index) : this._autoClearDepthStencil[index];\r\n\r\n                if (autoClear && autoClear.autoClear) {\r\n                    this._clearDepthStencilBuffer(autoClear.depth, autoClear.stencil);\r\n                }\r\n            }\r\n\r\n            // Render\r\n            for (const step of this._scene._beforeRenderingGroupDrawStage) {\r\n                step.action(index);\r\n            }\r\n            renderingGroup.render(customRenderFunction, renderSprites, renderParticles, activeMeshes);\r\n            for (const step of this._scene._afterRenderingGroupDrawStage) {\r\n                step.action(index);\r\n            }\r\n\r\n            // After Observable\r\n            this._scene.onAfterRenderingGroupObservable.notifyObservers(info, renderingGroupMask);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the different information of the group to prepare a new frame\r\n     * @internal\r\n     */\r\n    public reset(): void {\r\n        if (this.maintainStateBetweenFrames) {\r\n            return;\r\n        }\r\n\r\n        for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\r\n            const renderingGroup = this._renderingGroups[index];\r\n            if (renderingGroup) {\r\n                renderingGroup.prepare();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the sprites information of the group to prepare a new frame\r\n     * @internal\r\n     */\r\n    public resetSprites(): void {\r\n        if (this.maintainStateBetweenFrames) {\r\n            return;\r\n        }\r\n\r\n        for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\r\n            const renderingGroup = this._renderingGroups[index];\r\n            if (renderingGroup) {\r\n                renderingGroup.prepareSprites();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose and release the group and its associated resources.\r\n     * @internal\r\n     */\r\n    public dispose(): void {\r\n        this.freeRenderingGroups();\r\n        this._renderingGroups.length = 0;\r\n        this._renderingGroupInfo = null;\r\n    }\r\n\r\n    /**\r\n     * Clear the info related to rendering groups preventing retention points during dispose.\r\n     */\r\n    public freeRenderingGroups(): void {\r\n        for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\r\n            const renderingGroup = this._renderingGroups[index];\r\n            if (renderingGroup) {\r\n                renderingGroup.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _prepareRenderingGroup(renderingGroupId: number): void {\r\n        if (this._renderingGroups[renderingGroupId] === undefined) {\r\n            this._renderingGroups[renderingGroupId] = new RenderingGroup(\r\n                renderingGroupId,\r\n                this._scene,\r\n                this._customOpaqueSortCompareFn[renderingGroupId],\r\n                this._customAlphaTestSortCompareFn[renderingGroupId],\r\n                this._customTransparentSortCompareFn[renderingGroupId]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a sprite manager to the rendering manager in order to render it this frame.\r\n     * @param spriteManager Define the sprite manager to render\r\n     */\r\n    public dispatchSprites(spriteManager: ISpriteManager) {\r\n        if (this.maintainStateBetweenFrames && spriteManager._wasDispatched) {\r\n            return;\r\n        }\r\n        spriteManager._wasDispatched = true;\r\n        this.getRenderingGroup(spriteManager.renderingGroupId).dispatchSprites(spriteManager);\r\n    }\r\n\r\n    /**\r\n     * Add a particle system to the rendering manager in order to render it this frame.\r\n     * @param particleSystem Define the particle system to render\r\n     */\r\n    public dispatchParticles(particleSystem: IParticleSystem) {\r\n        if (this.maintainStateBetweenFrames && particleSystem._wasDispatched) {\r\n            return;\r\n        }\r\n        particleSystem._wasDispatched = true;\r\n        this.getRenderingGroup(particleSystem.renderingGroupId).dispatchParticles(particleSystem);\r\n    }\r\n\r\n    /**\r\n     * Add a submesh to the manager in order to render it this frame\r\n     * @param subMesh The submesh to dispatch\r\n     * @param mesh Optional reference to the submeshes's mesh. Provide if you have an exiting reference to improve performance.\r\n     * @param material Optional reference to the submeshes's material. Provide if you have an exiting reference to improve performance.\r\n     */\r\n    public dispatch(subMesh: SubMesh, mesh?: AbstractMesh, material?: Nullable<Material>): void {\r\n        if (mesh === undefined) {\r\n            mesh = subMesh.getMesh();\r\n        }\r\n        if (this.maintainStateBetweenFrames && subMesh._wasDispatched) {\r\n            return;\r\n        }\r\n        subMesh._wasDispatched = true;\r\n        this.getRenderingGroup(mesh.renderingGroupId).dispatch(subMesh, mesh, material);\r\n    }\r\n\r\n    /**\r\n     * Overrides the default sort function applied in the rendering group to prepare the meshes.\r\n     * This allowed control for front to back rendering or reversely depending of the special needs.\r\n     *\r\n     * @param renderingGroupId The rendering group id corresponding to its index\r\n     * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\r\n     * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\r\n     * @param transparentSortCompareFn The transparent queue comparison function use to sort.\r\n     */\r\n    public setRenderingOrder(\r\n        renderingGroupId: number,\r\n        opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        transparentSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null\r\n    ) {\r\n        this._customOpaqueSortCompareFn[renderingGroupId] = opaqueSortCompareFn;\r\n        this._customAlphaTestSortCompareFn[renderingGroupId] = alphaTestSortCompareFn;\r\n        this._customTransparentSortCompareFn[renderingGroupId] = transparentSortCompareFn;\r\n\r\n        if (this._renderingGroups[renderingGroupId]) {\r\n            const group = this._renderingGroups[renderingGroupId];\r\n            group.opaqueSortCompareFn = this._customOpaqueSortCompareFn[renderingGroupId];\r\n            group.alphaTestSortCompareFn = this._customAlphaTestSortCompareFn[renderingGroupId];\r\n            group.transparentSortCompareFn = this._customTransparentSortCompareFn[renderingGroupId];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\r\n     *\r\n     * @param renderingGroupId The rendering group id corresponding to its index\r\n     * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\r\n     * @param depth Automatically clears depth between groups if true and autoClear is true.\r\n     * @param stencil Automatically clears stencil between groups if true and autoClear is true.\r\n     */\r\n    public setRenderingAutoClearDepthStencil(renderingGroupId: number, autoClearDepthStencil: boolean, depth = true, stencil = true): void {\r\n        this._autoClearDepthStencil[renderingGroupId] = {\r\n            autoClear: autoClearDepthStencil,\r\n            depth: depth,\r\n            stencil: stencil,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the current auto clear configuration for one rendering group of the rendering\r\n     * manager.\r\n     * @param index the rendering group index to get the information for\r\n     * @returns The auto clear setup for the requested rendering group\r\n     */\r\n    public getAutoClearDepthStencilSetup(index: number): IRenderingManagerAutoClearSetup {\r\n        return this._autoClearDepthStencil[index];\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
