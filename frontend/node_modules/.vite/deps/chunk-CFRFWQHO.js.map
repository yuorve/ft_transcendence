{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphGetAssetBlock.ts"],
  "sourcesContent": ["import type { AssetType, FlowGraphAssetType } from \"core/FlowGraph/flowGraphAssetsContext\";\nimport { GetFlowGraphAssetWithType } from \"core/FlowGraph/flowGraphAssetsContext\";\nimport type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\nimport type { Nullable } from \"core/types\";\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\nimport type { FlowGraphNumber } from \"core/FlowGraph/utils\";\nimport { getNumericValue } from \"core/FlowGraph/utils\";\n\n/**\n * Configuration for the get asset block.\n */\nexport interface IFlowGraphGetAssetBlockConfiguration<T> extends IFlowGraphBlockConfiguration {\n    /**\n     * The type of the asset that will be retrieved.\n     */\n    type: T;\n    /**\n     * The index of the asset in the corresponding array in the assets context.\n     * If not provided you can still change it using the input connection.\n     */\n    index?: number | FlowGraphInteger;\n\n    /**\n     * If set to true, instead of the index in the array it will search for the unique id of the asset.\n     * The value of index will be used as the unique id.\n     */\n    useIndexAsUniqueId?: boolean;\n}\n\n/**\n * A block that will deliver an asset as an output, based on its type and place in the assets index.\n *\n * The assets are loaded from the assetsContext defined in the context running this block. The assetsContext is a class extending AbstractClass,\n * meaning it can be a Scene, an AssetsContainers, and any other class that extends AbstractClass.\n */\nexport class FlowGraphGetAssetBlock<T extends FlowGraphAssetType> extends FlowGraphBlock {\n    /**\n     * Output connection: The value of the property.\n     */\n    public readonly value: FlowGraphDataConnection<Nullable<AssetType<T>>>;\n\n    /**\n     * Input connection: The type of the asset.\n     */\n    public readonly type: FlowGraphDataConnection<T>;\n\n    /**\n     * Input connection: The index of the asset in the corresponding array in the assets context.\n     */\n    public readonly index: FlowGraphDataConnection<FlowGraphNumber>;\n\n    public constructor(\n        /**\n         * the configuration of the block\n         */\n        public override config: IFlowGraphGetAssetBlockConfiguration<T>\n    ) {\n        super(config);\n        this.type = this.registerDataInput(\"type\", RichTypeAny, config.type);\n        this.value = this.registerDataOutput(\"value\", RichTypeAny);\n        this.index = this.registerDataInput(\"index\", RichTypeAny, new FlowGraphInteger(getNumericValue(config.index ?? -1)));\n    }\n\n    public override _updateOutputs(context: FlowGraphContext): void {\n        const type = this.type.getValue(context);\n        const index = this.index.getValue(context);\n        // get the asset from the context\n        const asset = GetFlowGraphAssetWithType(context.assetsContext, type, getNumericValue(index), this.config.useIndexAsUniqueId);\n        this.value.setValue(asset, context);\n    }\n\n    /**\n     * Gets the class name of this block\n     * @returns the class name\n     */\n    public override getClassName(): string {\n        return FlowGraphBlockNames.GetAsset;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.GetAsset, FlowGraphGetAssetBlock);\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAyCM,IAAO,yBAAP,cAAoE,eAAc;EAgBpF,YAIoB,QAA+C;AAE/D,UAAM,MAAM;AAFI,SAAA,SAAA;AAGhB,SAAK,OAAO,KAAK,kBAAkB,QAAQ,aAAa,OAAO,IAAI;AACnE,SAAK,QAAQ,KAAK,mBAAmB,SAAS,WAAW;AACzD,SAAK,QAAQ,KAAK,kBAAkB,SAAS,aAAa,IAAI,iBAAiB,gBAAgB,OAAO,SAAS,EAAE,CAAC,CAAC;EACvH;EAEgB,eAAe,SAAyB;AACpD,UAAM,OAAO,KAAK,KAAK,SAAS,OAAO;AACvC,UAAM,QAAQ,KAAK,MAAM,SAAS,OAAO;AAEzC,UAAM,QAAQ,0BAA0B,QAAQ,eAAe,MAAM,gBAAgB,KAAK,GAAG,KAAK,OAAO,kBAAkB;AAC3H,SAAK,MAAM,SAAS,OAAO,OAAO;EACtC;;;;;EAMgB,eAAY;AACxB,WAAA;EACJ;;AAGJ,cAAa,0BAA+B,sBAAsB;",
  "names": []
}
