{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/flowGraphEventBlock.ts"],
  "sourcesContent": ["import { FlowGraphAsyncExecutionBlock } from \"./flowGraphAsyncExecutionBlock\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { FlowGraphEventType } from \"./flowGraphEventType\";\r\n\r\n/**\r\n * A type of block that listens to an event observable and activates\r\n * its output signal when the event is triggered.\r\n */\r\nexport abstract class FlowGraphEventBlock extends FlowGraphAsyncExecutionBlock {\r\n    /**\r\n     * the priority of initialization of this block.\r\n     * For example, scene start should have a negative priority because it should be initialized last.\r\n     */\r\n    public initPriority: number = 0;\r\n\r\n    /**\r\n     * The type of the event\r\n     */\r\n    public readonly type: FlowGraphEventType = FlowGraphEventType.NoTrigger;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _execute(context: FlowGraphContext): void {\r\n        context._notifyExecuteNode(this);\r\n        this.done._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * Execute the event. This function should be called by the flow graph when the event is triggered.\r\n     * @param context the context in which the event is executed\r\n     * @param payload the payload of the event\r\n     * @returns a boolean indicating if the event should stop propagation. if false, the event will stop propagating.\r\n     */\r\n    public abstract _executeEvent(context: FlowGraphContext, payload: any): boolean;\r\n}\r\n"],
  "mappings": ";;;;;AAQM,IAAgB,sBAAhB,cAA4C,6BAA4B;EAA9E,cAAA;;AAKW,SAAA,eAAuB;AAKd,SAAA,OAAI;EAgBxB;;;;EAZW,SAAS,SAAyB;AACrC,YAAQ,mBAAmB,IAAI;AAC/B,SAAK,KAAK,gBAAgB,OAAO;EACrC;;",
  "names": []
}
