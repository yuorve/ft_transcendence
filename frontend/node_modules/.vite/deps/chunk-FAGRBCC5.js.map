{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphSequenceBlock.ts"],
  "sourcesContent": ["import { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\n\r\n/**\r\n * Configuration for the sequence block.\r\n */\r\nexport interface IFlowGraphSequenceBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The number of output signals. Defaults to 1.\r\n     */\r\n    outputSignalCount?: number;\r\n}\r\n\r\n/**\r\n * A block that executes its output flows in sequence.\r\n */\r\nexport class FlowGraphSequenceBlock extends FlowGraphExecutionBlock {\r\n    /**\r\n     * The output flows.\r\n     */\r\n    public executionSignals: FlowGraphSignalConnection[] = [];\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public override config: IFlowGraphSequenceBlockConfiguration\r\n    ) {\r\n        super(config);\r\n        this.setNumberOfOutputSignals(this.config.outputSignalCount);\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext) {\r\n        for (let i = 0; i < this.executionSignals.length; i++) {\r\n            this.executionSignals[i]._activateSignal(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the block's output flows. Would usually be passed from the constructor but can be changed afterwards.\r\n     * @param outputSignalCount the number of output flows\r\n     */\r\n    public setNumberOfOutputSignals(outputSignalCount: number = 1) {\r\n        // check the size of the outFlow Array, see if it is not larger than needed\r\n        while (this.executionSignals.length > outputSignalCount) {\r\n            const flow = this.executionSignals.pop();\r\n            if (flow) {\r\n                flow.disconnectFromAll();\r\n                this._unregisterSignalOutput(flow.name);\r\n            }\r\n        }\r\n\r\n        while (this.executionSignals.length < outputSignalCount) {\r\n            this.executionSignals.push(this._registerSignalOutput(`out_${this.executionSignals.length}`));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.Sequence;\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.Sequence, FlowGraphSequenceBlock);\r\n"],
  "mappings": ";;;;;;;;AAoBM,IAAO,yBAAP,cAAsC,wBAAuB;EAM/D,YAIoB,QAA4C;AAE5D,UAAM,MAAM;AAFI,SAAA,SAAA;AANb,SAAA,mBAAgD,CAAA;AASnD,SAAK,yBAAyB,KAAK,OAAO,iBAAiB;EAC/D;EAEO,SAAS,SAAyB;AACrC,aAAS,IAAI,GAAG,IAAI,KAAK,iBAAiB,QAAQ,KAAK;AACnD,WAAK,iBAAiB,CAAC,EAAE,gBAAgB,OAAO;IACpD;EACJ;;;;;EAMO,yBAAyB,oBAA4B,GAAC;AAEzD,WAAO,KAAK,iBAAiB,SAAS,mBAAmB;AACrD,YAAM,OAAO,KAAK,iBAAiB,IAAG;AACtC,UAAI,MAAM;AACN,aAAK,kBAAiB;AACtB,aAAK,wBAAwB,KAAK,IAAI;MAC1C;IACJ;AAEA,WAAO,KAAK,iBAAiB,SAAS,mBAAmB;AACrD,WAAK,iBAAiB,KAAK,KAAK,sBAAsB,OAAO,KAAK,iBAAiB,MAAM,EAAE,CAAC;IAChG;EACJ;;;;EAKgB,eAAY;AACxB,WAAA;EACJ;;AAGJ,cAAa,0BAA+B,sBAAsB;",
  "names": []
}
