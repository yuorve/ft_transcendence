{
  "version": 3,
  "sources": ["../../../dev/core/src/Events/pointerEvents.ts", "../../../dev/core/src/Misc/stringDictionary.ts", "../../../dev/core/src/Materials/colorCurves.functions.ts", "../../../dev/core/src/Materials/colorCurves.ts", "../../../dev/core/src/Materials/imageProcessingConfiguration.functions.ts", "../../../dev/core/src/Materials/imageProcessingConfiguration.ts", "../../../dev/core/src/Collisions/pickingInfo.ts", "../../../dev/core/src/Actions/actionEvent.ts", "../../../dev/core/src/sceneComponent.ts", "../../../dev/core/src/Actions/abstractActionManager.ts", "../../../dev/core/src/Events/keyboardEvents.ts", "../../../dev/core/src/DeviceInput/InputDevices/deviceEnums.ts", "../../../dev/core/src/Events/deviceInputEvents.ts", "../../../dev/core/src/DeviceInput/InputDevices/deviceSource.ts", "../../../dev/core/src/DeviceInput/eventFactory.ts", "../../../dev/core/src/DeviceInput/nativeDeviceInputSystem.ts", "../../../dev/core/src/DeviceInput/webDeviceInputSystem.ts", "../../../dev/core/src/DeviceInput/internalDeviceSourceManager.ts", "../../../dev/core/src/DeviceInput/InputDevices/deviceSourceManager.ts", "../../../dev/core/src/import.helper.ts", "../../../dev/core/src/Inputs/scene.inputManager.ts", "../../../dev/core/src/Inputs/pointerPickingConfiguration.ts", "../../../dev/core/src/scene.ts"],
  "sourcesContent": ["import type { Nullable } from \"../types\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\nimport type { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport type { IMouseEvent, IPointerEvent } from \"./deviceInputEvents\";\r\nimport type { InputManager } from \"../Inputs/scene.inputManager\";\r\n\r\nimport type { Ray } from \"../Culling/ray\";\r\n\r\n/**\r\n * Gather the list of pointer event types as constants.\r\n */\r\nexport class PointerEventTypes {\r\n    /**\r\n     * The pointerdown event is fired when a pointer becomes active. For mouse, it is fired when the device transitions from no buttons depressed to at least one button depressed. For touch, it is fired when physical contact is made with the digitizer. For pen, it is fired when the stylus makes physical contact with the digitizer.\r\n     */\r\n    public static readonly POINTERDOWN = 0x01;\r\n    /**\r\n     * The pointerup event is fired when a pointer is no longer active.\r\n     */\r\n    public static readonly POINTERUP = 0x02;\r\n    /**\r\n     * The pointermove event is fired when a pointer changes coordinates.\r\n     */\r\n    public static readonly POINTERMOVE = 0x04;\r\n    /**\r\n     * The pointerwheel event is fired when a mouse wheel has been rotated.\r\n     */\r\n    public static readonly POINTERWHEEL = 0x08;\r\n    /**\r\n     * The pointerpick event is fired when a mesh or sprite has been picked by the pointer.\r\n     */\r\n    public static readonly POINTERPICK = 0x10;\r\n    /**\r\n     * The pointertap event is fired when a the object has been touched and released without drag.\r\n     */\r\n    public static readonly POINTERTAP = 0x20;\r\n    /**\r\n     * The pointerdoubletap event is fired when a the object has been touched and released twice without drag.\r\n     */\r\n    public static readonly POINTERDOUBLETAP = 0x40;\r\n}\r\n\r\n/**\r\n * Base class of pointer info types.\r\n */\r\nexport class PointerInfoBase {\r\n    /**\r\n     * Instantiates the base class of pointers info.\r\n     * @param type Defines the type of event (PointerEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (PointerEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IMouseEvent\r\n    ) {}\r\n}\r\n\r\n/**\r\n * This class is used to store pointer related info for the onPrePointerObservable event.\r\n * Set the skipOnPointerObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onPointerObservable\r\n */\r\nexport class PointerInfoPre extends PointerInfoBase {\r\n    /**\r\n     * Ray from a pointer if available (eg. 6dof controller)\r\n     */\r\n    public ray: Nullable<Ray> = null;\r\n\r\n    /**\r\n     * Defines picking info coming from a near interaction (proximity instead of ray-based picking)\r\n     */\r\n    public nearInteractionPickingInfo: Nullable<PickingInfo>;\r\n\r\n    /**\r\n     * The original picking info that was used to trigger the pointer event\r\n     */\r\n    public originalPickingInfo: Nullable<PickingInfo> = null;\r\n\r\n    /**\r\n     * Defines the local position of the pointer on the canvas.\r\n     */\r\n    public localPosition: Vector2;\r\n\r\n    /**\r\n     * Defines whether the engine should skip the next OnPointerObservable associated to this pre.\r\n     */\r\n    public skipOnPointerObservable: boolean;\r\n\r\n    /**\r\n     * Instantiates a PointerInfoPre to store pointer related info to the onPrePointerObservable event.\r\n     * @param type Defines the type of event (PointerEventTypes)\r\n     * @param event Defines the related dom event\r\n     * @param localX Defines the local x coordinates of the pointer when the event occured\r\n     * @param localY Defines the local y coordinates of the pointer when the event occured\r\n     */\r\n    constructor(type: number, event: IMouseEvent, localX: number, localY: number) {\r\n        super(type, event);\r\n        this.skipOnPointerObservable = false;\r\n        this.localPosition = new Vector2(localX, localY);\r\n    }\r\n}\r\n\r\n/**\r\n * This type contains all the data related to a pointer event in Babylon.js.\r\n * The event member is an instance of PointerEvent for all types except PointerWheel and is of type MouseWheelEvent when type equals PointerWheel. The different event types can be found in the PointerEventTypes class.\r\n */\r\nexport class PointerInfo extends PointerInfoBase {\r\n    private _pickInfo: Nullable<PickingInfo>;\r\n    private _inputManager: Nullable<InputManager>;\r\n\r\n    /**\r\n     * Defines the picking info associated with this PointerInfo object (if applicable)\r\n     */\r\n    public get pickInfo(): Nullable<PickingInfo> {\r\n        if (!this._pickInfo) {\r\n            this._generatePickInfo();\r\n        }\r\n\r\n        return this._pickInfo;\r\n    }\r\n    /**\r\n     * Instantiates a PointerInfo to store pointer related info to the onPointerObservable event.\r\n     * @param type Defines the type of event (PointerEventTypes)\r\n     * @param event Defines the related dom event\r\n     * @param pickInfo Defines the picking info associated to the info (if any)\r\n     * @param inputManager Defines the InputManager to use if there is no pickInfo\r\n     */\r\n    constructor(type: number, event: IMouseEvent, pickInfo: Nullable<PickingInfo>, inputManager: Nullable<InputManager> = null) {\r\n        super(type, event);\r\n        this._pickInfo = pickInfo;\r\n        this._inputManager = inputManager;\r\n    }\r\n\r\n    /**\r\n     * Generates the picking info if needed\r\n     */\r\n    /** @internal */\r\n    public _generatePickInfo(): void {\r\n        if (this._inputManager) {\r\n            this._pickInfo = this._inputManager._pickMove(this.event as IPointerEvent);\r\n            this._inputManager._setRayOnPointerInfo(this._pickInfo, this.event);\r\n            this._inputManager = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Data relating to a touch event on the screen.\r\n */\r\nexport interface PointerTouch {\r\n    /**\r\n     * X coordinate of touch.\r\n     */\r\n    x: number;\r\n    /**\r\n     * Y coordinate of touch.\r\n     */\r\n    y: number;\r\n    /**\r\n     * Id of touch. Unique for each finger.\r\n     */\r\n    pointerId: number;\r\n    /**\r\n     * Event type passed from DOM.\r\n     */\r\n    type: any;\r\n}\r\n", "import type { Nullable } from \"../types\";\r\n\r\n/**\r\n * This class implement a typical dictionary using a string as key and the generic type T as value.\r\n * The underlying implementation relies on an associative array to ensure the best performances.\r\n * The value can be anything including 'null' but except 'undefined'\r\n */\r\nexport class StringDictionary<T> {\r\n    /**\r\n     * This will clear this dictionary and copy the content from the 'source' one.\r\n     * If the T value is a custom object, it won't be copied/cloned, the same object will be used\r\n     * @param source the dictionary to take the content from and copy to this dictionary\r\n     */\r\n    public copyFrom(source: StringDictionary<T>) {\r\n        this.clear();\r\n        source.forEach((t, v) => this.add(t, v));\r\n    }\r\n\r\n    /**\r\n     * Get a value based from its key\r\n     * @param key the given key to get the matching value from\r\n     * @returns the value if found, otherwise undefined is returned\r\n     */\r\n    public get(key: string): T | undefined {\r\n        const val = this._data[key];\r\n        if (val !== undefined) {\r\n            return val;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get a value from its key or add it if it doesn't exist.\r\n     * This method will ensure you that a given key/data will be present in the dictionary.\r\n     * @param key the given key to get the matching value from\r\n     * @param factory the factory that will create the value if the key is not present in the dictionary.\r\n     * The factory will only be invoked if there's no data for the given key.\r\n     * @returns the value corresponding to the key.\r\n     */\r\n    public getOrAddWithFactory(key: string, factory: (key: string) => T): T {\r\n        let val = this.get(key);\r\n        if (val !== undefined) {\r\n            return val;\r\n        }\r\n\r\n        val = factory(key);\r\n        if (val) {\r\n            this.add(key, val);\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Get a value from its key if present in the dictionary otherwise add it\r\n     * @param key the key to get the value from\r\n     * @param val if there's no such key/value pair in the dictionary add it with this value\r\n     * @returns the value corresponding to the key\r\n     */\r\n    public getOrAdd(key: string, val: T): T {\r\n        const curVal = this.get(key);\r\n        if (curVal !== undefined) {\r\n            return curVal;\r\n        }\r\n\r\n        this.add(key, val);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Check if there's a given key in the dictionary\r\n     * @param key the key to check for\r\n     * @returns true if the key is present, false otherwise\r\n     */\r\n    public contains(key: string): boolean {\r\n        return this._data[key] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Add a new key and its corresponding value\r\n     * @param key the key to add\r\n     * @param value the value corresponding to the key\r\n     * @returns true if the operation completed successfully, false if we couldn't insert the key/value because there was already this key in the dictionary\r\n     */\r\n    public add(key: string, value: T): boolean {\r\n        if (this._data[key] !== undefined) {\r\n            return false;\r\n        }\r\n        this._data[key] = value;\r\n        ++this._count;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Update a specific value associated to a key\r\n     * @param key defines the key to use\r\n     * @param value defines the value to store\r\n     * @returns true if the value was updated (or false if the key was not found)\r\n     */\r\n    public set(key: string, value: T): boolean {\r\n        if (this._data[key] === undefined) {\r\n            return false;\r\n        }\r\n        this._data[key] = value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the element of the given key and remove it from the dictionary\r\n     * @param key defines the key to search\r\n     * @returns the value associated with the key or null if not found\r\n     */\r\n    public getAndRemove(key: string): Nullable<T> {\r\n        const val = this.get(key);\r\n        if (val !== undefined) {\r\n            delete this._data[key];\r\n            --this._count;\r\n            return val;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Remove a key/value from the dictionary.\r\n     * @param key the key to remove\r\n     * @returns true if the item was successfully deleted, false if no item with such key exist in the dictionary\r\n     */\r\n    public remove(key: string): boolean {\r\n        if (this.contains(key)) {\r\n            delete this._data[key];\r\n            --this._count;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Clear the whole content of the dictionary\r\n     */\r\n    public clear() {\r\n        this._data = {};\r\n        this._count = 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the current count\r\n     */\r\n    public get count() {\r\n        return this._count;\r\n    }\r\n\r\n    /**\r\n     * Execute a callback on each key/val of the dictionary.\r\n     * Note that you can remove any element in this dictionary in the callback implementation\r\n     * @param callback the callback to execute on a given key/value pair\r\n     */\r\n    public forEach(callback: (key: string, val: T) => void) {\r\n        for (const cur in this._data) {\r\n            const val = this._data[cur];\r\n            callback(cur, val);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a callback on every occurrence of the dictionary until it returns a valid TRes object.\r\n     * If the callback returns null or undefined the method will iterate to the next key/value pair\r\n     * Note that you can remove any element in this dictionary in the callback implementation\r\n     * @param callback the callback to execute, if it return a valid T instanced object the enumeration will stop and the object will be returned\r\n     * @returns the first item\r\n     */\r\n    public first<TRes>(callback: (key: string, val: T) => TRes) {\r\n        for (const cur in this._data) {\r\n            const val = this._data[cur];\r\n            const res = callback(cur, val);\r\n            if (res) {\r\n                return res;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _count = 0;\r\n    private _data: { [key: string]: T } = {};\r\n}\r\n", "/**\r\n * Prepare the list of uniforms associated with the ColorCurves effects.\r\n * @param uniformsList The list of uniforms used in the effect\r\n */\r\nexport function PrepareUniformsForColorCurves(uniformsList: string[]): void {\r\n    uniformsList.push(\"vCameraColorCurveNeutral\", \"vCameraColorCurvePositive\", \"vCameraColorCurveNegative\");\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { PrepareUniformsForColorCurves } from \"./colorCurves.functions\";\r\n\r\n/**\r\n * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\r\n * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n */\r\nexport class ColorCurves {\r\n    private _dirty = true;\r\n\r\n    private _tempColor = new Color4(0, 0, 0, 0);\r\n\r\n    private _globalCurve = new Color4(0, 0, 0, 0);\r\n    private _highlightsCurve = new Color4(0, 0, 0, 0);\r\n    private _midtonesCurve = new Color4(0, 0, 0, 0);\r\n    private _shadowsCurve = new Color4(0, 0, 0, 0);\r\n\r\n    private _positiveCurve = new Color4(0, 0, 0, 0);\r\n    private _negativeCurve = new Color4(0, 0, 0, 0);\r\n\r\n    @serialize()\r\n    private _globalHue = 30;\r\n\r\n    @serialize()\r\n    private _globalDensity = 0;\r\n\r\n    @serialize()\r\n    private _globalSaturation = 0;\r\n\r\n    @serialize()\r\n    private _globalExposure = 0;\r\n\r\n    /**\r\n     * Gets the global Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get globalHue(): number {\r\n        return this._globalHue;\r\n    }\r\n    /**\r\n     * Sets the global Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set globalHue(value: number) {\r\n        this._globalHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the global Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get globalDensity(): number {\r\n        return this._globalDensity;\r\n    }\r\n    /**\r\n     * Sets the global Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set globalDensity(value: number) {\r\n        this._globalDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the global Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get globalSaturation(): number {\r\n        return this._globalSaturation;\r\n    }\r\n    /**\r\n     * Sets the global Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set globalSaturation(value: number) {\r\n        this._globalSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the global Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get globalExposure(): number {\r\n        return this._globalExposure;\r\n    }\r\n    /**\r\n     * Sets the global Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set globalExposure(value: number) {\r\n        this._globalExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    @serialize()\r\n    private _highlightsHue = 30;\r\n\r\n    @serialize()\r\n    private _highlightsDensity = 0;\r\n\r\n    @serialize()\r\n    private _highlightsSaturation = 0;\r\n\r\n    @serialize()\r\n    private _highlightsExposure = 0;\r\n\r\n    /**\r\n     * Gets the highlights Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get highlightsHue(): number {\r\n        return this._highlightsHue;\r\n    }\r\n    /**\r\n     * Sets the highlights Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set highlightsHue(value: number) {\r\n        this._highlightsHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get highlightsDensity(): number {\r\n        return this._highlightsDensity;\r\n    }\r\n    /**\r\n     * Sets the highlights Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set highlightsDensity(value: number) {\r\n        this._highlightsDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get highlightsSaturation(): number {\r\n        return this._highlightsSaturation;\r\n    }\r\n    /**\r\n     * Sets the highlights Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set highlightsSaturation(value: number) {\r\n        this._highlightsSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get highlightsExposure(): number {\r\n        return this._highlightsExposure;\r\n    }\r\n    /**\r\n     * Sets the highlights Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set highlightsExposure(value: number) {\r\n        this._highlightsExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    @serialize()\r\n    private _midtonesHue = 30;\r\n\r\n    @serialize()\r\n    private _midtonesDensity = 0;\r\n\r\n    @serialize()\r\n    private _midtonesSaturation = 0;\r\n\r\n    @serialize()\r\n    private _midtonesExposure = 0;\r\n\r\n    /**\r\n     * Gets the midtones Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get midtonesHue(): number {\r\n        return this._midtonesHue;\r\n    }\r\n    /**\r\n     * Sets the midtones Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set midtonesHue(value: number) {\r\n        this._midtonesHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get midtonesDensity(): number {\r\n        return this._midtonesDensity;\r\n    }\r\n    /**\r\n     * Sets the midtones Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set midtonesDensity(value: number) {\r\n        this._midtonesDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get midtonesSaturation(): number {\r\n        return this._midtonesSaturation;\r\n    }\r\n    /**\r\n     * Sets the midtones Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set midtonesSaturation(value: number) {\r\n        this._midtonesSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get midtonesExposure(): number {\r\n        return this._midtonesExposure;\r\n    }\r\n    /**\r\n     * Sets the midtones Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set midtonesExposure(value: number) {\r\n        this._midtonesExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    private _shadowsHue = 30;\r\n    private _shadowsDensity = 0;\r\n    private _shadowsSaturation = 0;\r\n    private _shadowsExposure = 0;\r\n\r\n    /**\r\n     * Gets the shadows Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get shadowsHue(): number {\r\n        return this._shadowsHue;\r\n    }\r\n    /**\r\n     * Sets the shadows Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set shadowsHue(value: number) {\r\n        this._shadowsHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get shadowsDensity(): number {\r\n        return this._shadowsDensity;\r\n    }\r\n    /**\r\n     * Sets the shadows Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set shadowsDensity(value: number) {\r\n        this._shadowsDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get shadowsSaturation(): number {\r\n        return this._shadowsSaturation;\r\n    }\r\n    /**\r\n     * Sets the shadows Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set shadowsSaturation(value: number) {\r\n        this._shadowsSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get shadowsExposure(): number {\r\n        return this._shadowsExposure;\r\n    }\r\n    /**\r\n     * Sets the shadows Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set shadowsExposure(value: number) {\r\n        this._shadowsExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Returns the class name\r\n     * @returns The class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ColorCurves\";\r\n    }\r\n\r\n    /**\r\n     * Binds the color curves to the shader.\r\n     * @param colorCurves The color curve to bind\r\n     * @param effect The effect to bind to\r\n     * @param positiveUniform The positive uniform shader parameter\r\n     * @param neutralUniform The neutral uniform shader parameter\r\n     * @param negativeUniform The negative uniform shader parameter\r\n     */\r\n    public static Bind(\r\n        colorCurves: ColorCurves,\r\n        effect: Effect,\r\n        positiveUniform = \"vCameraColorCurvePositive\",\r\n        neutralUniform = \"vCameraColorCurveNeutral\",\r\n        negativeUniform = \"vCameraColorCurveNegative\"\r\n    ): void {\r\n        if (colorCurves._dirty) {\r\n            colorCurves._dirty = false;\r\n\r\n            // Fill in global info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._globalHue,\r\n                colorCurves._globalDensity,\r\n                colorCurves._globalSaturation,\r\n                colorCurves._globalExposure,\r\n                colorCurves._globalCurve\r\n            );\r\n\r\n            // Compute highlights info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._highlightsHue,\r\n                colorCurves._highlightsDensity,\r\n                colorCurves._highlightsSaturation,\r\n                colorCurves._highlightsExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._highlightsCurve);\r\n\r\n            // Compute midtones info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._midtonesHue,\r\n                colorCurves._midtonesDensity,\r\n                colorCurves._midtonesSaturation,\r\n                colorCurves._midtonesExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._midtonesCurve);\r\n\r\n            // Compute shadows info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._shadowsHue,\r\n                colorCurves._shadowsDensity,\r\n                colorCurves._shadowsSaturation,\r\n                colorCurves._shadowsExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._shadowsCurve);\r\n\r\n            // Compute deltas (neutral is midtones).\r\n            colorCurves._highlightsCurve.subtractToRef(colorCurves._midtonesCurve, colorCurves._positiveCurve);\r\n            colorCurves._midtonesCurve.subtractToRef(colorCurves._shadowsCurve, colorCurves._negativeCurve);\r\n        }\r\n\r\n        if (effect) {\r\n            effect.setFloat4(positiveUniform, colorCurves._positiveCurve.r, colorCurves._positiveCurve.g, colorCurves._positiveCurve.b, colorCurves._positiveCurve.a);\r\n            effect.setFloat4(neutralUniform, colorCurves._midtonesCurve.r, colorCurves._midtonesCurve.g, colorCurves._midtonesCurve.b, colorCurves._midtonesCurve.a);\r\n            effect.setFloat4(negativeUniform, colorCurves._negativeCurve.r, colorCurves._negativeCurve.g, colorCurves._negativeCurve.b, colorCurves._negativeCurve.a);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of uniforms associated with the ColorCurves effects.\r\n     * @param uniformsList The list of uniforms used in the effect\r\n     */\r\n    public static PrepareUniforms: (uniformsList: string[]) => void = PrepareUniformsForColorCurves;\r\n\r\n    /**\r\n     * Returns color grading data based on a hue, density, saturation and exposure value.\r\n     * @param hue\r\n     * @param density\r\n     * @param saturation The saturation.\r\n     * @param exposure The exposure.\r\n     * @param result The result data container.\r\n     */\r\n    private _getColorGradingDataToRef(hue: number, density: number, saturation: number, exposure: number, result: Color4): void {\r\n        if (hue == null) {\r\n            return;\r\n        }\r\n\r\n        hue = ColorCurves._Clamp(hue, 0, 360);\r\n        density = ColorCurves._Clamp(density, -100, 100);\r\n        saturation = ColorCurves._Clamp(saturation, -100, 100);\r\n        exposure = ColorCurves._Clamp(exposure, -100, 100);\r\n\r\n        // Remap the slider/config filter density with non-linear mapping and also scale by half\r\n        // so that the maximum filter density is only 50% control. This provides fine control\r\n        // for small values and reasonable range.\r\n        density = ColorCurves._ApplyColorGradingSliderNonlinear(density);\r\n        density *= 0.5;\r\n\r\n        exposure = ColorCurves._ApplyColorGradingSliderNonlinear(exposure);\r\n\r\n        if (density < 0) {\r\n            density *= -1;\r\n            hue = (hue + 180) % 360;\r\n        }\r\n\r\n        ColorCurves._FromHSBToRef(hue, density, 50 + 0.25 * exposure, result);\r\n        result.scaleToRef(2, result);\r\n        result.a = 1 + 0.01 * saturation;\r\n    }\r\n\r\n    /**\r\n     * Takes an input slider value and returns an adjusted value that provides extra control near the centre.\r\n     * @param value The input slider value in range [-100,100].\r\n     * @returns Adjusted value.\r\n     */\r\n    private static _ApplyColorGradingSliderNonlinear(value: number): number {\r\n        value /= 100;\r\n\r\n        let x: number = Math.abs(value);\r\n        x = Math.pow(x, 2);\r\n\r\n        if (value < 0) {\r\n            x *= -1;\r\n        }\r\n\r\n        x *= 100;\r\n\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * Returns an RGBA Color4 based on Hue, Saturation and Brightness (also referred to as value, HSV).\r\n     * @param hue The hue (H) input.\r\n     * @param saturation The saturation (S) input.\r\n     * @param brightness The brightness (B) input.\r\n     * @param result\r\n     * @result An RGBA color represented as Vector4.\r\n     */\r\n    private static _FromHSBToRef(hue: number, saturation: number, brightness: number, result: Color4): void {\r\n        let h: number = ColorCurves._Clamp(hue, 0, 360);\r\n        const s: number = ColorCurves._Clamp(saturation / 100, 0, 1);\r\n        const v: number = ColorCurves._Clamp(brightness / 100, 0, 1);\r\n\r\n        if (s === 0) {\r\n            result.r = v;\r\n            result.g = v;\r\n            result.b = v;\r\n        } else {\r\n            // sector 0 to 5\r\n            h /= 60;\r\n            const i = Math.floor(h);\r\n\r\n            // fractional part of h\r\n            const f = h - i;\r\n            const p = v * (1 - s);\r\n            const q = v * (1 - s * f);\r\n            const t = v * (1 - s * (1 - f));\r\n\r\n            switch (i) {\r\n                case 0:\r\n                    result.r = v;\r\n                    result.g = t;\r\n                    result.b = p;\r\n                    break;\r\n                case 1:\r\n                    result.r = q;\r\n                    result.g = v;\r\n                    result.b = p;\r\n                    break;\r\n                case 2:\r\n                    result.r = p;\r\n                    result.g = v;\r\n                    result.b = t;\r\n                    break;\r\n                case 3:\r\n                    result.r = p;\r\n                    result.g = q;\r\n                    result.b = v;\r\n                    break;\r\n                case 4:\r\n                    result.r = t;\r\n                    result.g = p;\r\n                    result.b = v;\r\n                    break;\r\n                default:\r\n                    // case 5:\r\n                    result.r = v;\r\n                    result.g = p;\r\n                    result.b = q;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        result.a = 1;\r\n    }\r\n\r\n    /**\r\n     * Returns a value clamped between min and max\r\n     * @param value The value to clamp\r\n     * @param min The minimum of value\r\n     * @param max The maximum of value\r\n     * @returns The clamped value.\r\n     */\r\n    private static _Clamp(value: number, min: number, max: number): number {\r\n        return Math.min(Math.max(value, min), max);\r\n    }\r\n\r\n    /**\r\n     * Clones the current color curve instance.\r\n     * @returns The cloned curves\r\n     */\r\n    public clone(): ColorCurves {\r\n        return SerializationHelper.Clone(() => new ColorCurves(), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current color curve instance to a json representation.\r\n     * @returns a JSON representation\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses the color curve from a json representation.\r\n     * @param source the JSON source to parse\r\n     * @returns The parsed curves\r\n     */\r\n    public static Parse(source: any): ColorCurves {\r\n        return SerializationHelper.Parse(() => new ColorCurves(), source, null, null);\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._ColorCurvesParser = ColorCurves.Parse;\r\n", "import { PrepareUniformsForColorCurves } from \"./colorCurves.functions\";\r\nimport type { IImageProcessingConfigurationDefines } from \"./imageProcessingConfiguration.defines\";\r\n\r\n/**\r\n * Prepare the list of uniforms associated with the Image Processing effects.\r\n * @param uniforms The list of uniforms used in the effect\r\n * @param defines the list of defines currently in use\r\n */\r\nexport function PrepareUniformsForImageProcessing(uniforms: string[], defines: IImageProcessingConfigurationDefines): void {\r\n    if (defines.EXPOSURE) {\r\n        uniforms.push(\"exposureLinear\");\r\n    }\r\n    if (defines.CONTRAST) {\r\n        uniforms.push(\"contrast\");\r\n    }\r\n    if (defines.COLORGRADING) {\r\n        uniforms.push(\"colorTransformSettings\");\r\n    }\r\n    if (defines.VIGNETTE || defines.DITHER) {\r\n        uniforms.push(\"vInverseScreenSize\");\r\n    }\r\n    if (defines.VIGNETTE) {\r\n        uniforms.push(\"vignetteSettings1\");\r\n        uniforms.push(\"vignetteSettings2\");\r\n    }\r\n    if (defines.COLORCURVES) {\r\n        PrepareUniformsForColorCurves(uniforms);\r\n    }\r\n    if (defines.DITHER) {\r\n        uniforms.push(\"ditherIntensity\");\r\n    }\r\n}\r\n\r\n/**\r\n * Prepare the list of samplers associated with the Image Processing effects.\r\n * @param samplersList The list of uniforms used in the effect\r\n * @param defines the list of defines currently in use\r\n */\r\nexport function PrepareSamplersForImageProcessing(samplersList: string[], defines: IImageProcessingConfigurationDefines): void {\r\n    if (defines.COLORGRADING) {\r\n        samplersList.push(\"txColorTransform\");\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { ColorCurves } from \"../Materials/colorCurves\";\r\n\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Mix } from \"../Misc/tools.functions\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport type { IImageProcessingConfigurationDefines } from \"./imageProcessingConfiguration.defines\";\r\nimport { PrepareSamplersForImageProcessing, PrepareUniformsForImageProcessing } from \"./imageProcessingConfiguration.functions\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * This groups together the common properties used for image processing either in direct forward pass\r\n * or through post processing effect depending on the use of the image processing pipeline in your scene\r\n * or not.\r\n */\r\nexport class ImageProcessingConfiguration {\r\n    /**\r\n     * Default tone mapping applied in BabylonJS.\r\n     */\r\n    public static readonly TONEMAPPING_STANDARD = 0;\r\n\r\n    /**\r\n     * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\r\n     * to other engines rendering to increase portability.\r\n     */\r\n    public static readonly TONEMAPPING_ACES = 1;\r\n\r\n    /**\r\n     * Neutral Tone mapping developped by the Khronos group in order to constrain\r\n     * values between 0 and 1 without shifting Hue.\r\n     */\r\n    public static readonly TONEMAPPING_KHR_PBR_NEUTRAL = 2;\r\n\r\n    /**\r\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\r\n     */\r\n    @serializeAsColorCurves()\r\n    public colorCurves: Nullable<ColorCurves> = new ColorCurves();\r\n\r\n    @serialize()\r\n    private _colorCurvesEnabled = false;\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get colorCurvesEnabled(): boolean {\r\n        return this._colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set colorCurvesEnabled(value: boolean) {\r\n        if (this._colorCurvesEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorCurvesEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serializeAsTexture(\"colorGradingTexture\")\r\n    private _colorGradingTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public get colorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._colorGradingTexture;\r\n    }\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public set colorGradingTexture(value: Nullable<BaseTexture>) {\r\n        if (this._colorGradingTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingTexture = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingEnabled = false;\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get colorGradingEnabled(): boolean {\r\n        return this._colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is enabled.\r\n     */\r\n    public set colorGradingEnabled(value: boolean) {\r\n        if (this._colorGradingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingWithGreenDepth = true;\r\n    /**\r\n     * Gets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public get colorGradingWithGreenDepth(): boolean {\r\n        return this._colorGradingWithGreenDepth;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public set colorGradingWithGreenDepth(value: boolean) {\r\n        if (this._colorGradingWithGreenDepth === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingWithGreenDepth = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingBGR = true;\r\n    /**\r\n     * Gets whether the color grading texture contains BGR values.\r\n     */\r\n    public get colorGradingBGR(): boolean {\r\n        return this._colorGradingBGR;\r\n    }\r\n    /**\r\n     * Sets whether the color grading texture contains BGR values.\r\n     */\r\n    public set colorGradingBGR(value: boolean) {\r\n        if (this._colorGradingBGR === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingBGR = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _exposure = 1.0;\r\n    /**\r\n     * Gets the Exposure used in the effect.\r\n     */\r\n    public get exposure(): number {\r\n        return this._exposure;\r\n    }\r\n    /**\r\n     * Sets the Exposure used in the effect.\r\n     */\r\n    public set exposure(value: number) {\r\n        if (this._exposure === value) {\r\n            return;\r\n        }\r\n\r\n        this._exposure = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingEnabled = false;\r\n    /**\r\n     * Gets whether the tone mapping effect is enabled.\r\n     */\r\n    public get toneMappingEnabled(): boolean {\r\n        return this._toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the tone mapping effect is enabled.\r\n     */\r\n    public set toneMappingEnabled(value: boolean) {\r\n        if (this._toneMappingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\r\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\r\n    public get toneMappingType(): number {\r\n        return this._toneMappingType;\r\n    }\r\n    /**\r\n     * Sets the type of tone mapping effect used in BabylonJS.\r\n     */\r\n    public set toneMappingType(value: number) {\r\n        if (this._toneMappingType === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingType = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    protected _contrast = 1.0;\r\n    /**\r\n     * Gets the contrast used in the effect.\r\n     */\r\n    public get contrast(): number {\r\n        return this._contrast;\r\n    }\r\n    /**\r\n     * Sets the contrast used in the effect.\r\n     */\r\n    public set contrast(value: number) {\r\n        if (this._contrast === value) {\r\n            return;\r\n        }\r\n\r\n        this._contrast = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Vignette stretch size.\r\n     */\r\n    @serialize()\r\n    public vignetteStretch = 0;\r\n\r\n    /**\r\n     * Vignette center X Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCenterX = 0;\r\n\r\n    /**\r\n     * Vignette center Y Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCenterY = 0;\r\n\r\n    /**\r\n     * Back Compat: Vignette center Y Offset.\r\n     * @deprecated use vignetteCenterY instead\r\n     */\r\n    public get vignetteCentreY(): number {\r\n        return this.vignetteCenterY;\r\n    }\r\n    public set vignetteCentreY(value: number) {\r\n        this.vignetteCenterY = value;\r\n    }\r\n\r\n    /**\r\n     * Back Compat: Vignette center X Offset.\r\n     * @deprecated use vignetteCenterX instead\r\n     */\r\n    public get vignetteCentreX(): number {\r\n        return this.vignetteCenterX;\r\n    }\r\n    public set vignetteCentreX(value: number) {\r\n        this.vignetteCenterX = value;\r\n    }\r\n\r\n    /**\r\n     * Vignette weight or intensity of the vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteWeight = 1.5;\r\n\r\n    /**\r\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    @serializeAsColor4()\r\n    public vignetteColor: Color4 = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Camera field of view used by the Vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteCameraFov = 0.5;\r\n\r\n    @serialize()\r\n    private _vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\r\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public get vignetteBlendMode(): number {\r\n        return this._vignetteBlendMode;\r\n    }\r\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public set vignetteBlendMode(value: number) {\r\n        if (this._vignetteBlendMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteBlendMode = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _vignetteEnabled = false;\r\n    /**\r\n     * Gets whether the vignette effect is enabled.\r\n     */\r\n    public get vignetteEnabled(): boolean {\r\n        return this._vignetteEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the vignette effect is enabled.\r\n     */\r\n    public set vignetteEnabled(value: boolean) {\r\n        if (this._vignetteEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _ditheringEnabled = false;\r\n    /**\r\n     * Gets whether the dithering effect is enabled.\r\n     * The dithering effect can be used to reduce banding.\r\n     */\r\n    public get ditheringEnabled(): boolean {\r\n        return this._ditheringEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the dithering effect is enabled.\r\n     * The dithering effect can be used to reduce banding.\r\n     */\r\n    public set ditheringEnabled(value: boolean) {\r\n        if (this._ditheringEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ditheringEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _ditheringIntensity = 1.0 / 255.0;\r\n    /**\r\n     * Gets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\r\n     */\r\n    public get ditheringIntensity(): number {\r\n        return this._ditheringIntensity;\r\n    }\r\n    /**\r\n     * Sets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\r\n     */\r\n    public set ditheringIntensity(value: number) {\r\n        if (this._ditheringIntensity === value) {\r\n            return;\r\n        }\r\n\r\n        this._ditheringIntensity = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _skipFinalColorClamp = false;\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public get skipFinalColorClamp(): boolean {\r\n        return this._skipFinalColorClamp;\r\n    }\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public set skipFinalColorClamp(value: boolean) {\r\n        if (this._skipFinalColorClamp === value) {\r\n            return;\r\n        }\r\n\r\n        this._skipFinalColorClamp = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _applyByPostProcess = false;\r\n    /**\r\n     * Gets whether the image processing is applied through a post process or not.\r\n     */\r\n    public get applyByPostProcess(): boolean {\r\n        return this._applyByPostProcess;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is applied through a post process or not.\r\n     */\r\n    public set applyByPostProcess(value: boolean) {\r\n        if (this._applyByPostProcess === value) {\r\n            return;\r\n        }\r\n\r\n        this._applyByPostProcess = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _isEnabled = true;\r\n    /**\r\n     * Gets whether the image processing is enabled or not.\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is enabled or not.\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the configuration changes and requires Shader to Update some parameters.\r\n     */\r\n    public onUpdateParameters = new Observable<ImageProcessingConfiguration>();\r\n\r\n    /**\r\n     * Method called each time the image processing information changes requires to recompile the effect.\r\n     */\r\n    protected _updateParameters(): void {\r\n        this.onUpdateParameters.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name.\r\n     * @returns \"ImageProcessingConfiguration\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ImageProcessingConfiguration\";\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of uniforms associated with the Image Processing effects.\r\n     * @param uniforms The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareUniforms: (uniforms: string[], defines: IImageProcessingConfigurationDefines) => void = PrepareUniformsForImageProcessing;\r\n\r\n    /**\r\n     * Prepare the list of samplers associated with the Image Processing effects.\r\n     * @param samplersList The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareSamplers: (samplersList: string[], defines: IImageProcessingConfigurationDefines) => void = PrepareSamplersForImageProcessing;\r\n\r\n    /**\r\n     * Prepare the list of defines associated to the shader.\r\n     * @param defines the list of defines to complete\r\n     * @param forPostProcess Define if we are currently in post process mode or not\r\n     */\r\n    public prepareDefines(defines: IImageProcessingConfigurationDefines, forPostProcess = false): void {\r\n        if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\r\n            defines.VIGNETTE = false;\r\n            defines.TONEMAPPING = 0;\r\n            defines.CONTRAST = false;\r\n            defines.EXPOSURE = false;\r\n            defines.COLORCURVES = false;\r\n            defines.COLORGRADING = false;\r\n            defines.COLORGRADING3D = false;\r\n            defines.DITHER = false;\r\n            defines.IMAGEPROCESSING = false;\r\n            defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\r\n            return;\r\n        }\r\n\r\n        defines.VIGNETTE = this.vignetteEnabled;\r\n        defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\r\n        defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\r\n\r\n        if (!this._toneMappingEnabled) {\r\n            defines.TONEMAPPING = 0;\r\n        } else {\r\n            switch (this._toneMappingType) {\r\n                case ImageProcessingConfiguration.TONEMAPPING_KHR_PBR_NEUTRAL:\r\n                    defines.TONEMAPPING = 3;\r\n                    break;\r\n                case ImageProcessingConfiguration.TONEMAPPING_ACES:\r\n                    defines.TONEMAPPING = 2;\r\n                    break;\r\n                default:\r\n                    defines.TONEMAPPING = 1;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        defines.CONTRAST = this.contrast !== 1.0;\r\n        defines.EXPOSURE = this.exposure !== 1.0;\r\n        defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\r\n        defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\r\n        if (defines.COLORGRADING) {\r\n            defines.COLORGRADING3D = this.colorGradingTexture!.is3D;\r\n        } else {\r\n            defines.COLORGRADING3D = false;\r\n        }\r\n        defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\r\n        defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\r\n        defines.DITHER = this._ditheringEnabled;\r\n        defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\r\n        defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n        defines.IMAGEPROCESSING =\r\n            defines.VIGNETTE || !!defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING || defines.DITHER;\r\n    }\r\n\r\n    /**\r\n     * Returns true if all the image processing information are ready.\r\n     * @returns True if ready, otherwise, false\r\n     */\r\n    public isReady() {\r\n        // Color Grading texture can not be none blocking.\r\n        return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\r\n    }\r\n\r\n    /**\r\n     * Binds the image processing to the shader.\r\n     * @param effect The effect to bind to\r\n     * @param overrideAspectRatio Override the aspect ratio of the effect\r\n     */\r\n    public bind(effect: Effect, overrideAspectRatio?: number): void {\r\n        // Color Curves\r\n        if (this._colorCurvesEnabled && this.colorCurves) {\r\n            ColorCurves.Bind(this.colorCurves, effect);\r\n        }\r\n\r\n        // Vignette and dither handled together due to common uniform.\r\n        if (this._vignetteEnabled || this._ditheringEnabled) {\r\n            const inverseWidth = 1 / effect.getEngine().getRenderWidth();\r\n            const inverseHeight = 1 / effect.getEngine().getRenderHeight();\r\n            effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\r\n\r\n            if (this._ditheringEnabled) {\r\n                effect.setFloat(\"ditherIntensity\", 0.5 * this._ditheringIntensity);\r\n            }\r\n\r\n            if (this._vignetteEnabled) {\r\n                const aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\r\n\r\n                let vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\r\n                let vignetteScaleX = vignetteScaleY * aspectRatio;\r\n\r\n                const vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\r\n                vignetteScaleX = Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\r\n                vignetteScaleY = Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\r\n\r\n                effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCenterX, -vignetteScaleY * this.vignetteCenterY);\r\n\r\n                const vignettePower = -2.0 * this.vignetteWeight;\r\n                effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\r\n            }\r\n        }\r\n\r\n        // Exposure\r\n        effect.setFloat(\"exposureLinear\", this.exposure);\r\n\r\n        // Contrast\r\n        effect.setFloat(\"contrast\", this.contrast);\r\n\r\n        // Color transform settings\r\n        if (this.colorGradingTexture) {\r\n            effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\r\n            const textureSize = this.colorGradingTexture.getSize().height;\r\n\r\n            effect.setFloat4(\r\n                \"colorTransformSettings\",\r\n                (textureSize - 1) / textureSize, // textureScale\r\n                0.5 / textureSize, // textureOffset\r\n                textureSize, // textureSize\r\n                this.colorGradingTexture.level // weight\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current image processing instance.\r\n     * @returns The cloned image processing\r\n     */\r\n    public clone(): ImageProcessingConfiguration {\r\n        return SerializationHelper.Clone(() => new ImageProcessingConfiguration(), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current image processing instance to a json representation.\r\n     * @returns a JSON representation\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses the image processing from a json representation.\r\n     * @param source the JSON source to parse\r\n     * @returns The parsed image processing\r\n     */\r\n    public static Parse(source: any): ImageProcessingConfiguration {\r\n        const parsed = SerializationHelper.Parse(() => new ImageProcessingConfiguration(), source, null, null);\r\n        // Backward compatibility\r\n        if (source.vignetteCentreX !== undefined) {\r\n            parsed.vignetteCenterX = source.vignetteCentreX;\r\n        }\r\n        if (source.vignetteCentreY !== undefined) {\r\n            parsed.vignetteCenterY = source.vignetteCentreY;\r\n        }\r\n\r\n        return parsed;\r\n    }\r\n\r\n    // Static constants associated to the image processing.\r\n    private static _VIGNETTEMODE_MULTIPLY = 0;\r\n    private static _VIGNETTEMODE_OPAQUE = 1;\r\n\r\n    /**\r\n     * Used to apply the vignette as a mix with the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_MULTIPLY(): number {\r\n        return this._VIGNETTEMODE_MULTIPLY;\r\n    }\r\n\r\n    /**\r\n     * Used to apply the vignette as a replacement of the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_OPAQUE(): number {\r\n        return this._VIGNETTEMODE_OPAQUE;\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.ImageProcessingConfiguration\", ImageProcessingConfiguration);\r\n", "import type { Nullable, FloatArray } from \"../types\";\r\nimport { Vector3, Vector2, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { Sprite } from \"../Sprites/sprite\";\r\n\r\nimport type { Ray } from \"../Culling/ray\";\r\n\r\n/**\r\n * Information about the result of picking within a scene\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/picking_collisions\r\n */\r\nexport class PickingInfo {\r\n    /**\r\n     * If the pick collided with an object\r\n     */\r\n    public hit = false;\r\n    /**\r\n     * Distance away where the pick collided\r\n     */\r\n    public distance = 0;\r\n    /**\r\n     * The location of pick collision\r\n     */\r\n    public pickedPoint: Nullable<Vector3> = null;\r\n    /**\r\n     * The mesh corresponding the pick collision\r\n     */\r\n    public pickedMesh: Nullable<AbstractMesh> = null;\r\n    /** (See getTextureCoordinates) The barycentric U coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bu = 0;\r\n    /** (See getTextureCoordinates) The barycentric V coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bv = 0;\r\n    /** The index of the face on the mesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public faceId = -1;\r\n    /** The index of the face on the subMesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public subMeshFaceId = -1;\r\n    /** Id of the submesh that was picked */\r\n    public subMeshId = 0;\r\n    /** If a sprite was picked, this will be the sprite the pick collided with */\r\n    public pickedSprite: Nullable<Sprite> = null;\r\n    /** If we are picking a mesh with thin instance, this will give you the picked thin instance */\r\n    public thinInstanceIndex = -1;\r\n    /**\r\n     * The ray that was used to perform the picking.\r\n     */\r\n    public ray: Nullable<Ray> = null;\r\n    /**\r\n     * If a mesh was used to do the picking (eg. 6dof controller) as a \"near interaction\", this will be populated.\r\n     */\r\n    public originMesh: Nullable<AbstractMesh> = null;\r\n    /**\r\n     * The aim-space transform of the input used for picking, if it is an XR input source.\r\n     */\r\n    public aimTransform: Nullable<TransformNode> = null;\r\n    /**\r\n     * The grip-space transform of the input used for picking, if it is an XR input source.\r\n     * Some XR sources, such as input coming from head mounted displays, do not have this.\r\n     */\r\n    public gripTransform: Nullable<TransformNode> = null;\r\n\r\n    /**\r\n     * Gets the normal corresponding to the face the pick collided with\r\n     * @param useWorldCoordinates If the resulting normal should be relative to the world (default: false)\r\n     * @param useVerticesNormals If the vertices normals should be used to calculate the normal instead of the normal map (default: true)\r\n     * @returns The normal corresponding to the face the pick collided with\r\n     * @remarks Note that the returned normal will always point towards the picking ray.\r\n     */\r\n    public getNormal(useWorldCoordinates = false, useVerticesNormals = true): Nullable<Vector3> {\r\n        if (!this.pickedMesh || (useVerticesNormals && !this.pickedMesh.isVerticesDataPresent(VertexBuffer.NormalKind))) {\r\n            return null;\r\n        }\r\n\r\n        let indices = this.pickedMesh.getIndices();\r\n\r\n        if (indices?.length === 0) {\r\n            indices = null;\r\n        }\r\n\r\n        let result: Vector3;\r\n\r\n        const tmp0 = TmpVectors.Vector3[0];\r\n        const tmp1 = TmpVectors.Vector3[1];\r\n        const tmp2 = TmpVectors.Vector3[2];\r\n\r\n        if (useVerticesNormals) {\r\n            const normals = <FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            let normal0 = indices\r\n                ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3] * 3, tmp0)\r\n                : tmp0.copyFromFloats(normals[this.faceId * 3 * 3], normals[this.faceId * 3 * 3 + 1], normals[this.faceId * 3 * 3 + 2]);\r\n            let normal1 = indices\r\n                ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3 + 1] * 3, tmp1)\r\n                : tmp1.copyFromFloats(normals[(this.faceId * 3 + 1) * 3], normals[(this.faceId * 3 + 1) * 3 + 1], normals[(this.faceId * 3 + 1) * 3 + 2]);\r\n            let normal2 = indices\r\n                ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3 + 2] * 3, tmp2)\r\n                : tmp2.copyFromFloats(normals[(this.faceId * 3 + 2) * 3], normals[(this.faceId * 3 + 2) * 3 + 1], normals[(this.faceId * 3 + 2) * 3 + 2]);\r\n\r\n            normal0 = normal0.scale(this.bu);\r\n            normal1 = normal1.scale(this.bv);\r\n            normal2 = normal2.scale(1.0 - this.bu - this.bv);\r\n\r\n            result = new Vector3(normal0.x + normal1.x + normal2.x, normal0.y + normal1.y + normal2.y, normal0.z + normal1.z + normal2.z);\r\n        } else {\r\n            const positions = <FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n            const vertex1 = indices\r\n                ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3] * 3, tmp0)\r\n                : tmp0.copyFromFloats(positions[this.faceId * 3 * 3], positions[this.faceId * 3 * 3 + 1], positions[this.faceId * 3 * 3 + 2]);\r\n            const vertex2 = indices\r\n                ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3 + 1] * 3, tmp1)\r\n                : tmp1.copyFromFloats(positions[(this.faceId * 3 + 1) * 3], positions[(this.faceId * 3 + 1) * 3 + 1], positions[(this.faceId * 3 + 1) * 3 + 2]);\r\n            const vertex3 = indices\r\n                ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3 + 2] * 3, tmp2)\r\n                : tmp2.copyFromFloats(positions[(this.faceId * 3 + 2) * 3], positions[(this.faceId * 3 + 2) * 3 + 1], positions[(this.faceId * 3 + 2) * 3 + 2]);\r\n\r\n            const p1p2 = vertex1.subtract(vertex2);\r\n            const p3p2 = vertex3.subtract(vertex2);\r\n\r\n            result = Vector3.Cross(p1p2, p3p2);\r\n        }\r\n\r\n        const transformNormalToWorld = (pickedMesh: AbstractMesh, n: Vector3) => {\r\n            let wm = pickedMesh.getWorldMatrix();\r\n\r\n            if (pickedMesh.nonUniformScaling) {\r\n                TmpVectors.Matrix[0].copyFrom(wm);\r\n                wm = TmpVectors.Matrix[0];\r\n                wm.setTranslationFromFloats(0, 0, 0);\r\n                wm.invert();\r\n                wm.transposeToRef(TmpVectors.Matrix[1]);\r\n\r\n                wm = TmpVectors.Matrix[1];\r\n            }\r\n\r\n            Vector3.TransformNormalToRef(n, wm, n);\r\n        };\r\n\r\n        if (useWorldCoordinates) {\r\n            transformNormalToWorld(this.pickedMesh, result);\r\n        }\r\n\r\n        if (this.ray) {\r\n            const normalForDirectionChecking = TmpVectors.Vector3[0].copyFrom(result);\r\n\r\n            if (!useWorldCoordinates) {\r\n                // the normal has not been transformed to world space as part as the normal processing, so we must do it now\r\n                transformNormalToWorld(this.pickedMesh, normalForDirectionChecking);\r\n            }\r\n\r\n            // Flip the normal if the picking ray is in the same direction.\r\n            if (Vector3.Dot(normalForDirectionChecking, this.ray.direction) > 0) {\r\n                result.negateInPlace();\r\n            }\r\n        }\r\n\r\n        result.normalize();\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the texture coordinates of where the pick occurred\r\n     * @param uvSet The UV set to use to calculate the texture coordinates (default: VertexBuffer.UVKind)\r\n     * @returns The vector containing the coordinates of the texture\r\n     */\r\n    public getTextureCoordinates(uvSet = VertexBuffer.UVKind): Nullable<Vector2> {\r\n        if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(uvSet)) {\r\n            return null;\r\n        }\r\n\r\n        const indices = this.pickedMesh.getIndices();\r\n        if (!indices) {\r\n            return null;\r\n        }\r\n\r\n        const uvs = this.pickedMesh.getVerticesData(uvSet);\r\n        if (!uvs) {\r\n            return null;\r\n        }\r\n\r\n        let uv0 = Vector2.FromArray(uvs, indices[this.faceId * 3] * 2);\r\n        let uv1 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 1] * 2);\r\n        let uv2 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 2] * 2);\r\n\r\n        uv0 = uv0.scale(this.bu);\r\n        uv1 = uv1.scale(this.bv);\r\n        uv2 = uv2.scale(1.0 - this.bu - this.bv);\r\n\r\n        return new Vector2(uv0.x + uv1.x + uv2.x, uv0.y + uv1.y + uv2.y);\r\n    }\r\n}\r\n", "import type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Sprite } from \"../Sprites/sprite\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\n\r\n/**\r\n * Interface used to define ActionEvent\r\n */\r\nexport interface IActionEvent {\r\n    /** The mesh or sprite that triggered the action */\r\n    source: any;\r\n    /** The X mouse cursor position at the time of the event */\r\n    pointerX: number;\r\n    /** The Y mouse cursor position at the time of the event */\r\n    pointerY: number;\r\n    /** The mesh that is currently pointed at (can be null) */\r\n    meshUnderPointer: Nullable<AbstractMesh>;\r\n    /** the original (browser) event that triggered the ActionEvent */\r\n    sourceEvent?: any;\r\n    /** additional data for the event */\r\n    additionalData?: any;\r\n}\r\n\r\n/**\r\n * ActionEvent is the event being sent when an action is triggered.\r\n */\r\nexport class ActionEvent implements IActionEvent {\r\n    /**\r\n     * Creates a new ActionEvent\r\n     * @param source The mesh or sprite that triggered the action\r\n     * @param pointerX The X mouse cursor position at the time of the event\r\n     * @param pointerY The Y mouse cursor position at the time of the event\r\n     * @param meshUnderPointer The mesh that is currently pointed at (can be null)\r\n     * @param sourceEvent the original (browser) event that triggered the ActionEvent\r\n     * @param additionalData additional data for the event\r\n     */\r\n    constructor(\r\n        /** The mesh or sprite that triggered the action */\r\n        public source: any,\r\n        /** The X mouse cursor position at the time of the event */\r\n        public pointerX: number,\r\n        /** The Y mouse cursor position at the time of the event */\r\n        public pointerY: number,\r\n        /** The mesh that is currently pointed at (can be null) */\r\n        public meshUnderPointer: Nullable<AbstractMesh>,\r\n        /** the original (browser) event that triggered the ActionEvent */\r\n        public sourceEvent?: any,\r\n        /** additional data for the event */\r\n        public additionalData?: any\r\n    ) {}\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source mesh.\r\n     * @param source The source mesh that triggered the event\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNew(source: AbstractMesh, evt?: any, additionalData?: any): ActionEvent {\r\n        const scene = source.getScene();\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer || source, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source sprite\r\n     * @param source The source sprite that triggered the event\r\n     * @param scene Scene associated with the sprite\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromSprite(source: Sprite, scene: Scene, evt?: any, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew\r\n     * @param scene the scene where the event occurred\r\n     * @param evt The original (browser) event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromScene(scene: Scene, evt: any): ActionEvent {\r\n        return new ActionEvent(null, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a primitive\r\n     * @param prim defines the target primitive\r\n     * @param pointerPos defines the pointer position\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromPrimitive(prim: any, pointerPos: Vector2, evt?: Event, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(prim, pointerPos.x, pointerPos.y, null, evt, additionalData);\r\n    }\r\n}\r\n", "import type { Scene } from \"./scene\";\r\nimport type { SmartArrayNoDuplicate } from \"./Misc/smartArray\";\r\nimport type { Nullable } from \"./types\";\r\nimport type { PickingInfo } from \"./Collisions/pickingInfo\";\r\nimport type { IPointerEvent } from \"./Events/deviceInputEvents\";\r\n\r\nimport type { Mesh } from \"./Meshes/mesh\";\r\nimport type { Effect } from \"./Materials/effect\";\r\nimport type { Camera } from \"./Cameras/camera\";\r\nimport type { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"./Meshes/subMesh\";\r\nimport type { RenderTargetTexture } from \"./Materials/Textures/renderTargetTexture\";\r\nimport type { IAssetContainer } from \"./IAssetContainer\";\r\n\r\n/**\r\n * Groups all the scene component constants in one place to ease maintenance.\r\n * @internal\r\n */\r\nexport class SceneComponentConstants {\r\n    public static readonly NAME_EFFECTLAYER = \"EffectLayer\";\r\n    public static readonly NAME_LAYER = \"Layer\";\r\n    public static readonly NAME_LENSFLARESYSTEM = \"LensFlareSystem\";\r\n    public static readonly NAME_BOUNDINGBOXRENDERER = \"BoundingBoxRenderer\";\r\n    public static readonly NAME_PARTICLESYSTEM = \"ParticleSystem\";\r\n    public static readonly NAME_GAMEPAD = \"Gamepad\";\r\n    public static readonly NAME_SIMPLIFICATIONQUEUE = \"SimplificationQueue\";\r\n    public static readonly NAME_GEOMETRYBUFFERRENDERER = \"GeometryBufferRenderer\";\r\n    public static readonly NAME_PREPASSRENDERER = \"PrePassRenderer\";\r\n    public static readonly NAME_DEPTHRENDERER = \"DepthRenderer\";\r\n    public static readonly NAME_DEPTHPEELINGRENDERER = \"DepthPeelingRenderer\";\r\n    public static readonly NAME_POSTPROCESSRENDERPIPELINEMANAGER = \"PostProcessRenderPipelineManager\";\r\n    public static readonly NAME_SPRITE = \"Sprite\";\r\n    public static readonly NAME_SUBSURFACE = \"SubSurface\";\r\n    public static readonly NAME_OUTLINERENDERER = \"Outline\";\r\n    public static readonly NAME_PROCEDURALTEXTURE = \"ProceduralTexture\";\r\n    public static readonly NAME_SHADOWGENERATOR = \"ShadowGenerator\";\r\n    public static readonly NAME_OCTREE = \"Octree\";\r\n    public static readonly NAME_PHYSICSENGINE = \"PhysicsEngine\";\r\n    public static readonly NAME_AUDIO = \"Audio\";\r\n    public static readonly NAME_FLUIDRENDERER = \"FluidRenderer\";\r\n    public static readonly NAME_IBLCDFGENERATOR = \"iblCDFGenerator\";\r\n\r\n    public static readonly STEP_ISREADYFORMESH_EFFECTLAYER = 0;\r\n\r\n    public static readonly STEP_BEFOREEVALUATEACTIVEMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_EVALUATESUBMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_PREACTIVEMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_CAMERADRAWRENDERTARGET_EFFECTLAYER = 1;\r\n\r\n    public static readonly STEP_BEFORECAMERADRAW_PREPASS = 0;\r\n    public static readonly STEP_BEFORECAMERADRAW_EFFECTLAYER = 1;\r\n    public static readonly STEP_BEFORECAMERADRAW_LAYER = 2;\r\n\r\n    public static readonly STEP_BEFORERENDERTARGETDRAW_PREPASS = 0;\r\n    public static readonly STEP_BEFORERENDERTARGETDRAW_LAYER = 1;\r\n\r\n    public static readonly STEP_BEFORERENDERINGMESH_PREPASS = 0;\r\n    public static readonly STEP_BEFORERENDERINGMESH_OUTLINE = 1;\r\n\r\n    public static readonly STEP_AFTERRENDERINGMESH_PREPASS = 0;\r\n    public static readonly STEP_AFTERRENDERINGMESH_OUTLINE = 1;\r\n\r\n    public static readonly STEP_AFTERRENDERINGGROUPDRAW_EFFECTLAYER_DRAW = 0;\r\n    public static readonly STEP_AFTERRENDERINGGROUPDRAW_BOUNDINGBOXRENDERER = 1;\r\n\r\n    public static readonly STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE = 0;\r\n\r\n    public static readonly STEP_BEFORECLEAR_PROCEDURALTEXTURE = 0;\r\n    public static readonly STEP_BEFORECLEAR_PREPASS = 1;\r\n\r\n    public static readonly STEP_BEFORERENDERTARGETCLEAR_PREPASS = 0;\r\n\r\n    public static readonly STEP_AFTERRENDERTARGETDRAW_PREPASS = 0;\r\n    public static readonly STEP_AFTERRENDERTARGETDRAW_LAYER = 1;\r\n\r\n    public static readonly STEP_AFTERCAMERADRAW_PREPASS = 0;\r\n    public static readonly STEP_AFTERCAMERADRAW_EFFECTLAYER = 1;\r\n    public static readonly STEP_AFTERCAMERADRAW_LENSFLARESYSTEM = 2;\r\n    public static readonly STEP_AFTERCAMERADRAW_EFFECTLAYER_DRAW = 3;\r\n    public static readonly STEP_AFTERCAMERADRAW_LAYER = 4;\r\n    public static readonly STEP_AFTERCAMERADRAW_FLUIDRENDERER = 5;\r\n\r\n    public static readonly STEP_AFTERCAMERAPOSTPROCESS_LAYER = 0;\r\n\r\n    public static readonly STEP_AFTERRENDERTARGETPOSTPROCESS_LAYER = 0;\r\n\r\n    public static readonly STEP_AFTERRENDER_AUDIO = 0;\r\n\r\n    public static readonly STEP_GATHERRENDERTARGETS_DEPTHRENDERER = 0;\r\n    public static readonly STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER = 1;\r\n    public static readonly STEP_GATHERRENDERTARGETS_SHADOWGENERATOR = 2;\r\n    public static readonly STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER = 3;\r\n\r\n    public static readonly STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER = 0;\r\n    public static readonly STEP_GATHERACTIVECAMERARENDERTARGETS_FLUIDRENDERER = 1;\r\n\r\n    public static readonly STEP_POINTERMOVE_SPRITE = 0;\r\n    public static readonly STEP_POINTERDOWN_SPRITE = 0;\r\n    public static readonly STEP_POINTERUP_SPRITE = 0;\r\n}\r\n\r\n/**\r\n * This represents a scene component.\r\n *\r\n * This is used to decouple the dependency the scene is having on the different workloads like\r\n * layers, post processes...\r\n */\r\nexport interface ISceneComponent {\r\n    /**\r\n     * The name of the component. Each component must have a unique name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    scene: Scene;\r\n\r\n    /**\r\n     * Register the component to one instance of a scene.\r\n     */\r\n    register(): void;\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    rebuild(): void;\r\n\r\n    /**\r\n     * Disposes the component and the associated ressources.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\n/**\r\n * This represents a SERIALIZABLE scene component.\r\n *\r\n * This extends Scene Component to add Serialization methods on top.\r\n */\r\nexport interface ISceneSerializableComponent extends ISceneComponent {\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    addFromContainer(container: IAssetContainer): void;\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    removeFromContainer(container: IAssetContainer, dispose?: boolean): void;\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    serialize(serializationObject: any): void;\r\n}\r\n\r\n/**\r\n * Strong typing of a Mesh related stage step action\r\n */\r\nexport type MeshStageAction = (mesh: AbstractMesh, hardwareInstancedRendering: boolean) => boolean;\r\n\r\n/**\r\n * Strong typing of a Evaluate Sub Mesh related stage step action\r\n */\r\nexport type EvaluateSubMeshStageAction = (mesh: AbstractMesh, subMesh: SubMesh) => void;\r\n\r\n/**\r\n * Strong typing of a pre active Mesh related stage step action\r\n */\r\nexport type PreActiveMeshStageAction = (mesh: AbstractMesh) => void;\r\n\r\n/**\r\n * Strong typing of a Camera related stage step action\r\n */\r\nexport type CameraStageAction = (camera: Camera) => void;\r\n\r\n/**\r\n * Strong typing of a Camera Frame buffer related stage step action\r\n */\r\nexport type CameraStageFrameBufferAction = (camera: Camera) => boolean;\r\n\r\n/**\r\n * Strong typing of a Render Target related stage step action\r\n */\r\nexport type RenderTargetStageAction = (renderTarget: RenderTargetTexture, faceIndex?: number, layer?: number) => void;\r\n\r\n/**\r\n * Strong typing of a RenderingGroup related stage step action\r\n */\r\nexport type RenderingGroupStageAction = (renderingGroupId: number) => void;\r\n\r\n/**\r\n * Strong typing of a Mesh Render related stage step action\r\n */\r\nexport type RenderingMeshStageAction = (mesh: Mesh, subMesh: SubMesh, batch: any, effect: Nullable<Effect>) => void;\r\n\r\n/**\r\n * Strong typing of a simple stage step action\r\n */\r\nexport type SimpleStageAction = () => void;\r\n\r\n/**\r\n * Strong typing of a render target action.\r\n */\r\nexport type RenderTargetsStageAction = (renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>) => void;\r\n\r\n/**\r\n * Strong typing of a pointer move action.\r\n */\r\nexport type PointerMoveStageAction = (\r\n    unTranslatedPointerX: number,\r\n    unTranslatedPointerY: number,\r\n    pickResult: Nullable<PickingInfo>,\r\n    isMeshPicked: boolean,\r\n    element: Nullable<HTMLElement>\r\n) => Nullable<PickingInfo>;\r\n\r\n/**\r\n * Strong typing of a pointer up/down action.\r\n */\r\nexport type PointerUpDownStageAction = (\r\n    unTranslatedPointerX: number,\r\n    unTranslatedPointerY: number,\r\n    pickResult: Nullable<PickingInfo>,\r\n    evt: IPointerEvent,\r\n    doubleClick: boolean\r\n) => Nullable<PickingInfo>;\r\n\r\n/**\r\n * Representation of a stage in the scene (Basically a list of ordered steps)\r\n * @internal\r\n */\r\nexport class Stage<T extends Function> extends Array<{ index: number; component: ISceneComponent; action: T }> {\r\n    /**\r\n     * Hide ctor from the rest of the world.\r\n     * @param items The items to add.\r\n     */\r\n    private constructor(items?: { index: number; component: ISceneComponent; action: T }[]) {\r\n        super(...(<any>items));\r\n    }\r\n\r\n    /**\r\n     * Creates a new Stage.\r\n     * @returns A new instance of a Stage\r\n     */\r\n    static Create<T extends Function>(): Stage<T> {\r\n        return Object.create(Stage.prototype);\r\n    }\r\n\r\n    /**\r\n     * Registers a step in an ordered way in the targeted stage.\r\n     * @param index Defines the position to register the step in\r\n     * @param component Defines the component attached to the step\r\n     * @param action Defines the action to launch during the step\r\n     */\r\n    public registerStep(index: number, component: ISceneComponent, action: T): void {\r\n        let i = 0;\r\n        let maxIndex = Number.MAX_VALUE;\r\n        for (; i < this.length; i++) {\r\n            const step = this[i];\r\n            maxIndex = step.index;\r\n            if (index < maxIndex) {\r\n                break;\r\n            }\r\n        }\r\n        this.splice(i, 0, { index, component, action: action.bind(component) });\r\n    }\r\n\r\n    /**\r\n     * Clears all the steps from the stage.\r\n     */\r\n    public clear(): void {\r\n        this.length = 0;\r\n    }\r\n}\r\n", "import type { IDisposable } from \"../scene\";\r\nimport type { IActionEvent } from \"./actionEvent\";\r\nimport type { IAction } from \"./action\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Abstract class used to decouple action Manager from scene and meshes.\r\n * Do not instantiate.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport abstract class AbstractActionManager implements IDisposable {\r\n    /** Gets the list of active triggers */\r\n    public static Triggers: { [key: string]: number } = {};\r\n\r\n    /** Gets the cursor to use when hovering items */\r\n    public hoverCursor: string = \"\";\r\n\r\n    /** Gets the list of actions */\r\n    public actions: IAction[] = [];\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the manager is recursive meaning that it can trigger action from children\r\n     */\r\n    public isRecursive = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if this ActionManager should be disposed once the last Mesh using it is disposed\r\n     */\r\n    public disposeWhenUnowned = true;\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public abstract dispose(): void;\r\n\r\n    /**\r\n     * Does this action manager has pointer triggers\r\n     */\r\n    public abstract get hasPointerTriggers(): boolean;\r\n\r\n    /**\r\n     * Does this action manager has pick triggers\r\n     */\r\n    public abstract get hasPickTriggers(): boolean;\r\n\r\n    /**\r\n     * Process a specific trigger\r\n     * @param trigger defines the trigger to process\r\n     * @param evt defines the event details to be processed\r\n     */\r\n    public abstract processTrigger(trigger: number, evt?: IActionEvent): void;\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers\r\n     * @param triggers defines the triggers to be tested\r\n     * @returns a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public abstract hasSpecificTriggers(triggers: number[]): boolean;\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers. This function takes two arguments for\r\n     * speed.\r\n     * @param triggerA defines the trigger to be tested\r\n     * @param triggerB defines the trigger to be tested\r\n     * @returns a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public abstract hasSpecificTriggers2(triggerA: number, triggerB: number): boolean;\r\n\r\n    /**\r\n     * Does this action manager handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @param parameterPredicate defines an optional predicate to filter triggers by parameter\r\n     * @returns whether the trigger is handled\r\n     */\r\n    public abstract hasSpecificTrigger(trigger: number, parameterPredicate?: (parameter: any) => boolean): boolean;\r\n\r\n    /**\r\n     * Serialize this manager to a JSON object\r\n     * @param name defines the property name to store this manager\r\n     * @returns a JSON representation of this manager\r\n     */\r\n    public abstract serialize(name: string): any;\r\n\r\n    /**\r\n     * Registers an action to this action manager\r\n     * @param action defines the action to be registered\r\n     * @returns the action amended (prepared) after registration\r\n     */\r\n    public abstract registerAction(action: IAction): Nullable<IAction>;\r\n\r\n    /**\r\n     * Unregisters an action to this action manager\r\n     * @param action defines the action to be unregistered\r\n     * @returns a boolean indicating whether the action has been unregistered\r\n     */\r\n    public abstract unregisterAction(action: IAction): Boolean;\r\n\r\n    /**\r\n     * Does exist one action manager with at least one trigger\r\n     **/\r\n    public static get HasTriggers(): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does exist one action manager with at least one pick trigger\r\n     **/\r\n    public static get HasPickTriggers(): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                const tAsInt = parseInt(t);\r\n                if (tAsInt >= Constants.ACTION_OnPickTrigger && tAsInt <= Constants.ACTION_OnPickUpTrigger) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does exist one action manager that handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @returns a boolean indicating whether the trigger is handled by at least one action manager\r\n     **/\r\n    public static HasSpecificTrigger(trigger: number): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                const tAsInt = parseInt(t);\r\n                if (tAsInt === trigger) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n", "import type { IKeyboardEvent } from \"./deviceInputEvents\";\r\n\r\n/**\r\n * Gather the list of keyboard event types as constants.\r\n */\r\nexport class KeyboardEventTypes {\r\n    /**\r\n     * The keydown event is fired when a key becomes active (pressed).\r\n     */\r\n    public static readonly KEYDOWN = 0x01;\r\n    /**\r\n     * The keyup event is fired when a key has been released.\r\n     */\r\n    public static readonly KEYUP = 0x02;\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n */\r\nexport class KeyboardInfo {\r\n    /**\r\n     * Instantiates a new keyboard info.\r\n     * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IKeyboardEvent\r\n    ) {}\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\r\n */\r\nexport class KeyboardInfoPre extends KeyboardInfo {\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     */\r\n    public skipOnKeyboardObservable: boolean;\r\n\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     * @deprecated use skipOnKeyboardObservable property instead\r\n     */\r\n    public get skipOnPointerObservable() {\r\n        return this.skipOnKeyboardObservable;\r\n    }\r\n    public set skipOnPointerObservable(value) {\r\n        this.skipOnKeyboardObservable = value;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new keyboard pre info.\r\n     * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public override type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public override event: IKeyboardEvent\r\n    ) {\r\n        super(type, event);\r\n        this.skipOnKeyboardObservable = false;\r\n    }\r\n}\r\n", "/**\r\n * Enum for Device Types\r\n */\r\nexport enum DeviceType {\r\n    /** Generic */\r\n    Generic = 0,\r\n    /** Keyboard */\r\n    Keyboard = 1,\r\n    /** Mouse */\r\n    Mouse = 2,\r\n    /** Touch Pointers */\r\n    Touch = 3,\r\n    /** PS4 Dual Shock */\r\n    DualShock = 4,\r\n    /** Xbox */\r\n    Xbox = 5,\r\n    /** Switch Controller */\r\n    Switch = 6,\r\n    /** PS5 DualSense */\r\n    DualSense = 7,\r\n}\r\n\r\n// Device Enums\r\n/**\r\n * Enum for All Pointers (Touch/Mouse)\r\n */\r\nexport enum PointerInput {\r\n    /** Horizontal Axis (Not used in events/observables; only in polling) */\r\n    Horizontal = 0,\r\n    /** Vertical Axis (Not used in events/observables; only in polling) */\r\n    Vertical = 1,\r\n    /** Left Click or Touch */\r\n    LeftClick = 2,\r\n    /** Middle Click */\r\n    MiddleClick = 3,\r\n    /** Right Click */\r\n    RightClick = 4,\r\n    /** Browser Back */\r\n    BrowserBack = 5,\r\n    /** Browser Forward */\r\n    BrowserForward = 6,\r\n    /** Mouse Wheel X */\r\n    MouseWheelX = 7,\r\n    /** Mouse Wheel Y */\r\n    MouseWheelY = 8,\r\n    /** Mouse Wheel Z */\r\n    MouseWheelZ = 9,\r\n    /** Used in events/observables to identify if x/y changes occurred */\r\n    Move = 12,\r\n}\r\n\r\n/** @internal */\r\nexport const enum NativePointerInput {\r\n    /** Horizontal Axis */\r\n    Horizontal = PointerInput.Horizontal,\r\n    /** Vertical Axis */\r\n    Vertical = 1,\r\n    /** Left Click or Touch */\r\n    LeftClick = 2,\r\n    /** Middle Click */\r\n    MiddleClick = 3,\r\n    /** Right Click */\r\n    RightClick = 4,\r\n    /** Browser Back */\r\n    BrowserBack = 5,\r\n    /** Browser Forward */\r\n    BrowserForward = 6,\r\n    /** Mouse Wheel X */\r\n    MouseWheelX = 7,\r\n    /** Mouse Wheel Y */\r\n    MouseWheelY = 8,\r\n    /** Mouse Wheel Z */\r\n    MouseWheelZ = 9,\r\n    /** Delta X */\r\n    DeltaHorizontal = 10,\r\n    /** Delta Y */\r\n    DeltaVertical = 11,\r\n}\r\n\r\n/**\r\n * Enum for Dual Shock Gamepad\r\n */\r\nexport const enum DualShockInput {\r\n    /** Cross */\r\n    Cross = 0,\r\n    /** Circle */\r\n    Circle = 1,\r\n    /** Square */\r\n    Square = 2,\r\n    /** Triangle */\r\n    Triangle = 3,\r\n    /** L1 */\r\n    L1 = 4,\r\n    /** R1 */\r\n    R1 = 5,\r\n    /** L2 */\r\n    L2 = 6,\r\n    /** R2 */\r\n    R2 = 7,\r\n    /** Share */\r\n    Share = 8,\r\n    /** Options */\r\n    Options = 9,\r\n    /** L3 */\r\n    L3 = 10,\r\n    /** R3 */\r\n    R3 = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** TouchPad */\r\n    TouchPad = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n\r\n/**\r\n * Enum for Dual Sense Gamepad\r\n */\r\nexport const enum DualSenseInput {\r\n    /** Cross */\r\n    Cross = 0,\r\n    /** Circle */\r\n    Circle = 1,\r\n    /** Square */\r\n    Square = 2,\r\n    /** Triangle */\r\n    Triangle = 3,\r\n    /** L1 */\r\n    L1 = 4,\r\n    /** R1 */\r\n    R1 = 5,\r\n    /** L2 */\r\n    L2 = 6,\r\n    /** R2 */\r\n    R2 = 7,\r\n    /** Create */\r\n    Create = 8,\r\n    /** Options */\r\n    Options = 9,\r\n    /** L3 */\r\n    L3 = 10,\r\n    /** R3 */\r\n    R3 = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** TouchPad */\r\n    TouchPad = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n\r\n/**\r\n * Enum for Xbox Gamepad\r\n */\r\nexport const enum XboxInput {\r\n    /** A */\r\n    A = 0,\r\n    /** B */\r\n    B = 1,\r\n    /** X */\r\n    X = 2,\r\n    /** Y */\r\n    Y = 3,\r\n    /** LB */\r\n    LB = 4,\r\n    /** RB */\r\n    RB = 5,\r\n    /** LT */\r\n    LT = 6,\r\n    /** RT */\r\n    RT = 7,\r\n    /** Back */\r\n    Back = 8,\r\n    /** Start */\r\n    Start = 9,\r\n    /** LS */\r\n    LS = 10,\r\n    /** RS */\r\n    RS = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 17,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 18,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 19,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 20,\r\n}\r\n\r\n/**\r\n * Enum for Switch (Pro/JoyCon L+R) Gamepad\r\n */\r\nexport const enum SwitchInput {\r\n    /** B */\r\n    B = 0,\r\n    /** A */\r\n    A = 1,\r\n    /** Y */\r\n    Y = 2,\r\n    /** X */\r\n    X = 3,\r\n    /** L */\r\n    L = 4,\r\n    /** R */\r\n    R = 5,\r\n    /** ZL */\r\n    ZL = 6,\r\n    /** ZR */\r\n    ZR = 7,\r\n    /** Minus */\r\n    Minus = 8,\r\n    /** Plus */\r\n    Plus = 9,\r\n    /** LS */\r\n    LS = 10,\r\n    /** RS */\r\n    RS = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** Capture */\r\n    Capture = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n", "import type { PointerInput } from \"../DeviceInput/InputDevices/deviceEnums\";\r\n\r\n/**\r\n * Event Types\r\n */\r\nexport const enum DeviceInputEventType {\r\n    // Pointers\r\n    /** PointerMove */\r\n    PointerMove,\r\n    /** PointerDown */\r\n    PointerDown,\r\n    /** PointerUp */\r\n    PointerUp,\r\n}\r\n\r\n/**\r\n * Native friendly interface for Event Object\r\n */\r\nexport interface IUIEvent {\r\n    /**\r\n     * Input array index\r\n     */\r\n    inputIndex: number;\r\n\r\n    /**\r\n     * Current target for an event\r\n     */\r\n    currentTarget?: any;\r\n\r\n    /**\r\n     * Alias for target\r\n     * @deprecated Use target instead\r\n     */\r\n    srcElement?: any;\r\n\r\n    /**\r\n     * Type of event\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Reference to object where object was dispatched\r\n     */\r\n    target: any;\r\n\r\n    /**\r\n     * Tells user agent what to do when not explicitly handled\r\n     */\r\n    preventDefault: () => void;\r\n}\r\n\r\n/**\r\n * Native friendly interface for KeyboardEvent Object\r\n */\r\nexport interface IKeyboardEvent extends IUIEvent {\r\n    /**\r\n     * Status of Alt key being pressed\r\n     */\r\n    altKey: boolean;\r\n\r\n    /**\r\n     * Unicode value of character pressed\r\n     * @deprecated Required for event, use keyCode instead.\r\n     */\r\n    charCode?: number;\r\n\r\n    /**\r\n     * Code for key based on layout\r\n     */\r\n    code: string;\r\n\r\n    /**\r\n     * Status of Ctrl key being pressed\r\n     */\r\n    ctrlKey: boolean;\r\n\r\n    /**\r\n     * String representation of key\r\n     */\r\n    key: string;\r\n    /**\r\n     * ASCII value of key\r\n     * @deprecated Used with DeviceSourceManager\r\n     */\r\n    keyCode: number;\r\n\r\n    /**\r\n     * Status of Meta key (eg. Windows key) being pressed\r\n     */\r\n    metaKey: boolean;\r\n\r\n    /**\r\n     * Status of Shift key being pressed\r\n     */\r\n    shiftKey: boolean;\r\n}\r\n\r\n/**\r\n * Native friendly interface for MouseEvent Object\r\n */\r\nexport interface IMouseEvent extends IUIEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events, excluding ones that CANNOT be in events organically\r\n     */\r\n    inputIndex: Exclude<PointerInput, PointerInput.Horizontal | PointerInput.Vertical>;\r\n\r\n    /**\r\n     * Status of Alt key being pressed\r\n     */\r\n    altKey: boolean;\r\n\r\n    /**\r\n     * Value of single mouse button pressed\r\n     */\r\n    button: number;\r\n\r\n    /**\r\n     * Value of all mouse buttons pressed\r\n     */\r\n    buttons: number;\r\n\r\n    /**\r\n     * Current X coordinate\r\n     */\r\n    clientX: number;\r\n\r\n    /**\r\n     * Current Y coordinate\r\n     */\r\n    clientY: number;\r\n\r\n    /**\r\n     * Status of Ctrl key being pressed\r\n     */\r\n    ctrlKey: boolean;\r\n\r\n    /**\r\n     * Provides current click count\r\n     */\r\n    detail?: number;\r\n\r\n    /**\r\n     * Status of Meta key (eg. Windows key) being pressed\r\n     */\r\n    metaKey: boolean;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     */\r\n    movementX: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     */\r\n    movementY: number;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    mozMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    mozMovementY?: number;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    msMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    msMovementY?: number;\r\n\r\n    /**\r\n     * Current coordinate of X within container\r\n     */\r\n    offsetX: number;\r\n\r\n    /**\r\n     * Current coordinate of Y within container\r\n     */\r\n    offsetY: number;\r\n\r\n    /**\r\n     * Horizontal coordinate of event\r\n     */\r\n    pageX: number;\r\n\r\n    /**\r\n     * Vertical coordinate of event\r\n     */\r\n    pageY: number;\r\n\r\n    /**\r\n     * Status of Shift key being pressed\r\n     */\r\n    shiftKey: boolean;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    webkitMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    webkitMovementY?: number;\r\n\r\n    /**\r\n     * Alias of clientX\r\n     */\r\n    x: number;\r\n\r\n    /**\r\n     * Alias of clientY\r\n     */\r\n    y: number;\r\n}\r\n\r\n/**\r\n * Native friendly interface for PointerEvent Object\r\n */\r\nexport interface IPointerEvent extends IMouseEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events, excluding ones that CANNOT be in events organically and mouse wheel values\r\n     */\r\n    inputIndex: Exclude<PointerInput, PointerInput.Horizontal | PointerInput.Vertical | PointerInput.MouseWheelX | PointerInput.MouseWheelY | PointerInput.MouseWheelZ>;\r\n\r\n    /**\r\n     * Pointer Event ID\r\n     */\r\n    pointerId: number;\r\n\r\n    /**\r\n     * Type of pointer\r\n     */\r\n    pointerType: string;\r\n}\r\n\r\n/**\r\n * Native friendly interface for WheelEvent Object\r\n */\r\nexport interface IWheelEvent extends IMouseEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events that can only be used with mouse wheel\r\n     */\r\n    inputIndex: PointerInput.MouseWheelX | PointerInput.MouseWheelY | PointerInput.MouseWheelZ;\r\n\r\n    /**\r\n     * Units for delta value\r\n     */\r\n    deltaMode: number;\r\n\r\n    /**\r\n     * Horizontal scroll delta\r\n     */\r\n    deltaX: number;\r\n\r\n    /**\r\n     * Vertical scroll delta\r\n     */\r\n    deltaY: number;\r\n\r\n    /**\r\n     * Z-Axis scroll delta\r\n     */\r\n    deltaZ: number;\r\n\r\n    /**\r\n     * WheelDelta (From MouseWheel Event)\r\n     * @deprecated\r\n     */\r\n    wheelDelta?: number;\r\n}\r\n\r\n/**\r\n * Constants used for Events\r\n */\r\nexport class EventConstants {\r\n    /**\r\n     * Pixel delta for Wheel Events (Default)\r\n     */\r\n    public static DOM_DELTA_PIXEL = 0x00;\r\n\r\n    /**\r\n     * Line delta for Wheel Events\r\n     */\r\n    public static DOM_DELTA_LINE = 0x01;\r\n\r\n    /**\r\n     * Page delta for Wheel Events\r\n     */\r\n    public static DOM_DELTA_PAGE = 0x02;\r\n}\r\n", "import type { DeviceType } from \"./deviceEnums\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { DeviceInput } from \"./deviceTypes\";\r\nimport type { IDeviceInputSystem } from \"../inputInterfaces\";\r\nimport type { IKeyboardEvent, IPointerEvent, IWheelEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Subset of DeviceInput that only handles pointers and keyboard\r\n */\r\nexport type DeviceSourceEvent<T extends DeviceType> = T extends DeviceType.Keyboard\r\n    ? IKeyboardEvent\r\n    : T extends DeviceType.Mouse\r\n      ? IWheelEvent | IPointerEvent\r\n      : T extends DeviceType.Touch\r\n        ? IPointerEvent\r\n        : never;\r\n\r\n/**\r\n * Class that handles all input for a specific device\r\n */\r\nexport class DeviceSource<T extends DeviceType> {\r\n    // Public Members\r\n    /**\r\n     * Observable to handle device input changes per device\r\n     */\r\n    public readonly onInputChangedObservable = new Observable<DeviceSourceEvent<T>>();\r\n\r\n    // Private Members\r\n    private readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    /**\r\n     * Default Constructor\r\n     * @param deviceInputSystem - Reference to DeviceInputSystem\r\n     * @param deviceType - Type of device\r\n     * @param deviceSlot - \"Slot\" or index that device is referenced in\r\n     */\r\n    constructor(\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        /** Type of device */\r\n        public readonly deviceType: T,\r\n        /** [0] \"Slot\" or index that device is referenced in */\r\n        public readonly deviceSlot: number = 0\r\n    ) {\r\n        this._deviceInputSystem = deviceInputSystem;\r\n    }\r\n\r\n    /**\r\n     * Get input for specific input\r\n     * @param inputIndex - index of specific input on device\r\n     * @returns Input value from DeviceInputSystem\r\n     */\r\n    public getInput(inputIndex: DeviceInput<T>): number {\r\n        return this._deviceInputSystem.pollInput(this.deviceType, this.deviceSlot, inputIndex);\r\n    }\r\n}\r\n", "import { Constants } from \"../Engines/constants\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { EventConstants } from \"../Events/deviceInputEvents\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DeviceType, NativePointerInput, PointerInput } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n/**\r\n * Class to wrap DeviceInputSystem data into an event object\r\n */\r\nexport class DeviceEventFactory {\r\n    /**\r\n     * Create device input events based on provided type and slot\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @param pointerId PointerId to use for pointer events\r\n     * @returns IUIEvent object\r\n     */\r\n    public static CreateDeviceEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any,\r\n        pointerId?: number\r\n    ): IUIEvent {\r\n        switch (deviceType) {\r\n            case DeviceType.Keyboard:\r\n                return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n            case DeviceType.Mouse:\r\n                if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\r\n                    return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n                }\r\n            // eslint-disable-next-line no-fallthrough\r\n            case DeviceType.Touch:\r\n                return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId);\r\n            default:\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw `Unable to generate event for device ${DeviceType[deviceType]}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates pointer event\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @param pointerId PointerId to use for pointer events\r\n     * @returns IUIEvent object (Pointer)\r\n     */\r\n    private static _CreatePointerEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any,\r\n        pointerId?: number\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        if (deviceType === DeviceType.Mouse) {\r\n            evt.deviceType = DeviceType.Mouse;\r\n            evt.pointerId = 1;\r\n            evt.pointerType = \"mouse\";\r\n        } else {\r\n            evt.deviceType = DeviceType.Touch;\r\n            evt.pointerId = pointerId ?? deviceSlot;\r\n            evt.pointerType = \"touch\";\r\n        }\r\n\r\n        let buttons = 0;\r\n\r\n        // Populate buttons property with current state of all mouse buttons\r\n        // Uses values found on: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.LeftClick);\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.RightClick) * 2;\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.MiddleClick) * 4;\r\n        evt.buttons = buttons;\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            evt.type = \"pointermove\";\r\n        } else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\r\n            evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\r\n            evt.button = inputIndex - 2;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Wheel Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Wheel)\r\n     */\r\n    private static _CreateWheelEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo: any\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        // While WheelEvents don't generally have a pointerId, we used to add one in the InputManager\r\n        // This line has been added to make the InputManager more platform-agnostic\r\n        // Similar code exists in the WebDeviceInputSystem to handle browser created events\r\n        evt.pointerId = 1;\r\n        evt.type = \"wheel\";\r\n        evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\r\n        evt.deltaX = 0;\r\n        evt.deltaY = 0;\r\n        evt.deltaZ = 0;\r\n\r\n        switch (inputIndex) {\r\n            case PointerInput.MouseWheelX:\r\n                evt.deltaX = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelY:\r\n                evt.deltaY = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelZ:\r\n                evt.deltaZ = currentState;\r\n                break;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Mouse)\r\n     */\r\n    private static _CreateMouseEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\r\n        const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical);\r\n\r\n        // Handle offsets/deltas based on existence of HTMLElement\r\n        if (elementToAttachTo) {\r\n            evt.movementX = 0;\r\n            evt.movementY = 0;\r\n            evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\r\n            evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\r\n        } else {\r\n            evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\r\n            evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\r\n            evt.offsetX = 0;\r\n            evt.offsetY = 0;\r\n        }\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n\r\n        evt.clientX = pointerX;\r\n        evt.clientY = pointerY;\r\n        evt.x = pointerX;\r\n        evt.y = pointerY;\r\n\r\n        evt.deviceType = deviceType;\r\n        evt.deviceSlot = deviceSlot;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Keyboard Event\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IEvent object (Keyboard)\r\n     */\r\n    private static _CreateKeyboardEvent(inputIndex: number, currentState: Nullable<number>, deviceInputSystem: IDeviceInputSystem, elementToAttachTo?: any): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n        evt.deviceType = DeviceType.Keyboard;\r\n        evt.deviceSlot = 0;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\r\n        evt.key = String.fromCharCode(inputIndex);\r\n        evt.keyCode = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\r\n     * @param evt Event object to add parameters to\r\n     * @param deviceInputSystem DeviceInputSystem to pull values from\r\n     */\r\n    private static _CheckNonCharacterKeys(evt: any, deviceInputSystem: IDeviceInputSystem): void {\r\n        const isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\r\n        const altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_ALT_KEY) === 1;\r\n        const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_CTRL_KEY) === 1;\r\n        const metaKey =\r\n            isKeyboardActive &&\r\n            (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY1) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY2) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY3) === 1);\r\n        const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_SHIFT_KEY) === 1;\r\n\r\n        evt.altKey = altKey;\r\n        evt.ctrlKey = ctrlKey;\r\n        evt.metaKey = metaKey;\r\n        evt.shiftKey = shiftKey;\r\n    }\r\n\r\n    /**\r\n     * Create base event object\r\n     * @param elementToAttachTo Value to use as event target\r\n     * @returns\r\n     */\r\n    private static _CreateEvent(elementToAttachTo: any): any {\r\n        const evt: { [k: string]: any } = {};\r\n        evt.preventDefault = () => {};\r\n        evt.target = elementToAttachTo;\r\n\r\n        return evt;\r\n    }\r\n}\r\n", "import type { INative } from \"../Engines/Native/nativeInterfaces\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { DeviceEventFactory } from \"./eventFactory\";\r\nimport { DeviceType } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\ndeclare const _native: INative;\r\n\r\n/** @internal */\r\nexport class NativeDeviceInputSystem implements IDeviceInputSystem {\r\n    private readonly _nativeInput: IDeviceInputSystem;\r\n\r\n    public constructor(\r\n        onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void\r\n    ) {\r\n        this._nativeInput = _native.DeviceInputSystem\r\n            ? new _native.DeviceInputSystem(onDeviceConnected, onDeviceDisconnected, (deviceType, deviceSlot, inputIndex, currentState) => {\r\n                  const evt = DeviceEventFactory.CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, this);\r\n\r\n                  onInputChanged(deviceType, deviceSlot, evt);\r\n              })\r\n            : this._createDummyNativeInput();\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        return this._nativeInput.pollInput(deviceType, deviceSlot, inputIndex);\r\n    }\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    public isDeviceAvailable(deviceType: DeviceType): boolean {\r\n        //TODO: FIx native side first\r\n        return deviceType === DeviceType.Mouse || deviceType === DeviceType.Touch;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the observables\r\n     */\r\n    public dispose(): void {\r\n        this._nativeInput.dispose();\r\n    }\r\n\r\n    /**\r\n     * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version\r\n     * @returns Object with dummy functions\r\n     */\r\n    private _createDummyNativeInput() {\r\n        const nativeInput = {\r\n            pollInput: () => {\r\n                return 0;\r\n            },\r\n            isDeviceAvailable: () => {\r\n                return false;\r\n            },\r\n            dispose: () => {},\r\n        };\r\n\r\n        return nativeInput;\r\n    }\r\n}\r\n", "import type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { IPointerEvent, IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { IsNavigatorAvailable } from \"../Misc/domManagement\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DeviceEventFactory } from \"./eventFactory\";\r\nimport { DeviceType, PointerInput } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst MAX_KEYCODES = 255;\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst MAX_POINTER_INPUTS = Object.keys(PointerInput).length / 2;\r\n\r\n/** @internal */\r\nexport class WebDeviceInputSystem implements IDeviceInputSystem {\r\n    // Private Members\r\n    private _inputs: Array<{ [deviceSlot: number]: Array<number> }> = [];\r\n    private _gamepads: Array<DeviceType>;\r\n    private _keyboardActive: boolean = false;\r\n    private _pointerActive: boolean = false;\r\n    private _elementToAttachTo: HTMLElement;\r\n    private _metaKeys: Array<number>;\r\n    private readonly _engine: AbstractEngine;\r\n    private readonly _usingSafari: boolean = Tools.IsSafari();\r\n    // Found solution for determining if MacOS is being used here:\r\n    // https://stackoverflow.com/questions/10527983/best-way-to-detect-mac-os-x-or-windows-computers-with-javascript-or-jquery\r\n    private readonly _usingMacOS: boolean = IsNavigatorAvailable() && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\r\n\r\n    private _onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void;\r\n    private _onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void;\r\n    private _onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardDownEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardUpEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardBlurEvent = (evt: any) => {};\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerMoveEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerDownEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerUpEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerCancelEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerCancelTouch = (pointerId: number) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerLeaveEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerWheelEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerBlurEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerMacOSChromeOutEvent = (evt: any) => {};\r\n    private _wheelEventName: string;\r\n    private _eventsAttached: boolean = false;\r\n\r\n    private _mouseId = -1;\r\n    private readonly _isUsingFirefox = IsNavigatorAvailable() && navigator.userAgent && navigator.userAgent.indexOf(\"Firefox\") !== -1;\r\n    private readonly _isUsingChromium = IsNavigatorAvailable() && navigator.userAgent && navigator.userAgent.indexOf(\"Chrome\") !== -1;\r\n\r\n    // Array to store active Pointer ID values; prevents issues with negative pointerIds\r\n    private _activeTouchIds: Array<number>;\r\n    private _maxTouchPoints: number = 0;\r\n\r\n    private _pointerInputClearObserver: Nullable<Observer<AbstractEngine>> = null;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _gamepadConnectedEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _gamepadDisconnectedEvent = (evt: any) => {};\r\n\r\n    private _eventPrefix: string;\r\n\r\n    /**\r\n     * Constructor for the WebDeviceInputSystem\r\n     * @param engine Engine to reference\r\n     * @param onDeviceConnected Callback to execute when device is connected\r\n     * @param onDeviceDisconnected Callback to execute when device is disconnected\r\n     * @param onInputChanged Callback to execute when input changes on device\r\n     */\r\n    constructor(\r\n        engine: AbstractEngine,\r\n        onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void\r\n    ) {\r\n        this._eventPrefix = Tools.GetPointerPrefix(engine);\r\n        this._engine = engine;\r\n\r\n        this._onDeviceConnected = onDeviceConnected;\r\n        this._onDeviceDisconnected = onDeviceDisconnected;\r\n        this._onInputChanged = onInputChanged;\r\n\r\n        // If we need a pointerId, set one for future use\r\n        this._mouseId = this._isUsingFirefox ? 0 : 1;\r\n\r\n        this._enableEvents();\r\n\r\n        if (this._usingMacOS) {\r\n            this._metaKeys = [];\r\n        }\r\n\r\n        // Set callback to enable event handler switching when inputElement changes\r\n        if (!this._engine._onEngineViewChanged) {\r\n            this._engine._onEngineViewChanged = () => {\r\n                this._enableEvents();\r\n            };\r\n        }\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        const device = this._inputs[deviceType][deviceSlot];\r\n\r\n        if (!device) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `Unable to find device ${DeviceType[deviceType]}`;\r\n        }\r\n\r\n        if (deviceType >= DeviceType.DualShock && deviceType <= DeviceType.DualSense) {\r\n            this._updateDevice(deviceType, deviceSlot, inputIndex);\r\n        }\r\n\r\n        const currentValue = device[inputIndex];\r\n        if (currentValue === undefined) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `Unable to find input ${inputIndex} for device ${DeviceType[deviceType]} in slot ${deviceSlot}`;\r\n        }\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            Tools.Warn(`Unable to provide information for PointerInput.Move.  Try using PointerInput.Horizontal or PointerInput.Vertical for move data.`);\r\n        }\r\n\r\n        return currentValue;\r\n    }\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    public isDeviceAvailable(deviceType: DeviceType): boolean {\r\n        return this._inputs[deviceType] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the eventlisteners\r\n     */\r\n    public dispose(): void {\r\n        // Callbacks\r\n        this._onDeviceConnected = () => {};\r\n        this._onDeviceDisconnected = () => {};\r\n        this._onInputChanged = () => {};\r\n        delete this._engine._onEngineViewChanged;\r\n\r\n        if (this._elementToAttachTo) {\r\n            this._disableEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable listening for user input events\r\n     */\r\n    private _enableEvents(): void {\r\n        const inputElement = this?._engine.getInputElement();\r\n        if (inputElement && (!this._eventsAttached || this._elementToAttachTo !== inputElement)) {\r\n            // Remove events before adding to avoid double events or simultaneous events on multiple canvases\r\n            this._disableEvents();\r\n\r\n            // If the inputs array has already been created, zero it out to before setting up events\r\n            if (this._inputs) {\r\n                for (const inputs of this._inputs) {\r\n                    if (inputs) {\r\n                        for (const deviceSlotKey in inputs) {\r\n                            const deviceSlot = +deviceSlotKey;\r\n                            const device = inputs[deviceSlot];\r\n                            if (device) {\r\n                                for (let inputIndex = 0; inputIndex < device.length; inputIndex++) {\r\n                                    device[inputIndex] = 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this._elementToAttachTo = inputElement;\r\n            // Set tab index for the inputElement to the engine's canvasTabIndex, if and only if the element's tab index is -1\r\n            this._elementToAttachTo.tabIndex = this._elementToAttachTo.tabIndex !== -1 ? this._elementToAttachTo.tabIndex : this._engine.canvasTabIndex;\r\n            this._handleKeyActions();\r\n            this._handlePointerActions();\r\n            this._handleGamepadActions();\r\n            this._eventsAttached = true;\r\n\r\n            // Check for devices that are already connected but aren't registered. Currently, only checks for gamepads and mouse\r\n            this._checkForConnectedDevices();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disable listening for user input events\r\n     */\r\n    private _disableEvents(): void {\r\n        if (this._elementToAttachTo) {\r\n            // Blur Events\r\n            this._elementToAttachTo.removeEventListener(\"blur\", this._keyboardBlurEvent);\r\n            this._elementToAttachTo.removeEventListener(\"blur\", this._pointerBlurEvent);\r\n\r\n            // Keyboard Events\r\n            this._elementToAttachTo.removeEventListener(\"keydown\", this._keyboardDownEvent);\r\n            this._elementToAttachTo.removeEventListener(\"keyup\", this._keyboardUpEvent);\r\n\r\n            // Pointer Events\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"leave\", this._pointerLeaveEvent);\r\n            this._elementToAttachTo.removeEventListener(this._wheelEventName, this._pointerWheelEvent);\r\n            if (this._usingMacOS && this._isUsingChromium) {\r\n                this._elementToAttachTo.removeEventListener(\"lostpointercapture\", this._pointerMacOSChromeOutEvent);\r\n            }\r\n\r\n            // Gamepad Events\r\n            window.removeEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\r\n            window.removeEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\r\n        }\r\n\r\n        if (this._pointerInputClearObserver) {\r\n            this._engine.onEndFrameObservable.remove(this._pointerInputClearObserver);\r\n        }\r\n\r\n        this._eventsAttached = false;\r\n    }\r\n\r\n    /**\r\n     * Checks for existing connections to devices and register them, if necessary\r\n     * Currently handles gamepads and mouse\r\n     */\r\n    private _checkForConnectedDevices(): void {\r\n        if (navigator.getGamepads) {\r\n            const gamepads = navigator.getGamepads();\r\n\r\n            for (const gamepad of gamepads) {\r\n                if (gamepad) {\r\n                    this._addGamePad(gamepad);\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the device in use has mouse capabilities, pre-register mouse\r\n        if (typeof matchMedia === \"function\" && matchMedia(\"(pointer:fine)\").matches) {\r\n            // This will provide a dummy value for the cursor position and is expected to be overridden when the first mouse event happens.\r\n            // There isn't any good way to get the current position outside of a pointer event so that's why this was done.\r\n            this._addPointerDevice(DeviceType.Mouse, 0, 0, 0);\r\n        }\r\n    }\r\n\r\n    // Private functions\r\n    /**\r\n     * Add a gamepad to the DeviceInputSystem\r\n     * @param gamepad A single DOM Gamepad object\r\n     */\r\n    private _addGamePad(gamepad: any): void {\r\n        const deviceType = this._getGamepadDeviceType(gamepad.id);\r\n        const deviceSlot = gamepad.index;\r\n\r\n        this._gamepads = this._gamepads || new Array<DeviceType>(gamepad.index + 1);\r\n        this._registerDevice(deviceType, deviceSlot, gamepad.buttons.length + gamepad.axes.length);\r\n\r\n        this._gamepads[deviceSlot] = deviceType;\r\n    }\r\n\r\n    /**\r\n     * Add pointer device to DeviceInputSystem\r\n     * @param deviceType Type of Pointer to add\r\n     * @param deviceSlot Pointer ID (0 for mouse, pointerId for Touch)\r\n     * @param currentX Current X at point of adding\r\n     * @param currentY Current Y at point of adding\r\n     */\r\n    private _addPointerDevice(deviceType: DeviceType, deviceSlot: number, currentX: number, currentY: number): void {\r\n        if (!this._pointerActive) {\r\n            this._pointerActive = true;\r\n        }\r\n        this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\r\n        const pointer = this._inputs[deviceType][deviceSlot]; /* initialize our pointer position immediately after registration */\r\n        pointer[0] = currentX;\r\n        pointer[1] = currentY;\r\n    }\r\n\r\n    /**\r\n     * Add device and inputs to device array\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param numberOfInputs Number of input entries to create for given device\r\n     */\r\n    private _registerDevice(deviceType: DeviceType, deviceSlot: number, numberOfInputs: number): void {\r\n        if (deviceSlot === undefined) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `Unable to register device ${DeviceType[deviceType]} to undefined slot.`;\r\n        }\r\n\r\n        if (!this._inputs[deviceType]) {\r\n            this._inputs[deviceType] = {};\r\n        }\r\n\r\n        if (!this._inputs[deviceType][deviceSlot]) {\r\n            const device = new Array<number>(numberOfInputs);\r\n\r\n            device.fill(0);\r\n\r\n            this._inputs[deviceType][deviceSlot] = device;\r\n            this._onDeviceConnected(deviceType, deviceSlot);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a specific device name, remove that device from the device map\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     */\r\n    private _unregisterDevice(deviceType: DeviceType, deviceSlot: number): void {\r\n        if (this._inputs[deviceType][deviceSlot]) {\r\n            delete this._inputs[deviceType][deviceSlot];\r\n            this._onDeviceDisconnected(deviceType, deviceSlot);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from keyboard interaction\r\n     */\r\n    private _handleKeyActions(): void {\r\n        this._keyboardDownEvent = (evt) => {\r\n            if (!this._keyboardActive) {\r\n                this._keyboardActive = true;\r\n                this._registerDevice(DeviceType.Keyboard, 0, MAX_KEYCODES);\r\n            }\r\n\r\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n            if (kbKey) {\r\n                kbKey[evt.keyCode] = 1;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n                deviceEvent.inputIndex = evt.keyCode;\r\n\r\n                if (this._usingMacOS && evt.metaKey && evt.key !== \"Meta\") {\r\n                    if (!this._metaKeys.includes(evt.keyCode)) {\r\n                        this._metaKeys.push(evt.keyCode);\r\n                    }\r\n                }\r\n\r\n                this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n            }\r\n        };\r\n\r\n        this._keyboardUpEvent = (evt) => {\r\n            if (!this._keyboardActive) {\r\n                this._keyboardActive = true;\r\n                this._registerDevice(DeviceType.Keyboard, 0, MAX_KEYCODES);\r\n            }\r\n\r\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n            if (kbKey) {\r\n                kbKey[evt.keyCode] = 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n                deviceEvent.inputIndex = evt.keyCode;\r\n\r\n                if (this._usingMacOS && evt.key === \"Meta\" && this._metaKeys.length > 0) {\r\n                    for (const keyCode of this._metaKeys) {\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Keyboard, 0, keyCode, 0, this, this._elementToAttachTo);\r\n                        kbKey[keyCode] = 0;\r\n                        this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n                    }\r\n                    this._metaKeys.splice(0, this._metaKeys.length);\r\n                }\r\n\r\n                this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n            }\r\n        };\r\n\r\n        this._keyboardBlurEvent = () => {\r\n            if (this._keyboardActive) {\r\n                const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n\r\n                for (let i = 0; i < kbKey.length; i++) {\r\n                    if (kbKey[i] !== 0) {\r\n                        kbKey[i] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Keyboard, 0, i, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n                    }\r\n                }\r\n                if (this._usingMacOS) {\r\n                    this._metaKeys.splice(0, this._metaKeys.length);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._elementToAttachTo.addEventListener(\"keydown\", this._keyboardDownEvent);\r\n        this._elementToAttachTo.addEventListener(\"keyup\", this._keyboardUpEvent);\r\n        this._elementToAttachTo.addEventListener(\"blur\", this._keyboardBlurEvent);\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from pointer interaction\r\n     */\r\n    private _handlePointerActions(): void {\r\n        // If maxTouchPoints is defined, use that value.  Otherwise, allow for a minimum for supported gestures like pinch\r\n        this._maxTouchPoints = (IsNavigatorAvailable() && navigator.maxTouchPoints) || 2;\r\n        if (!this._activeTouchIds) {\r\n            this._activeTouchIds = new Array<number>(this._maxTouchPoints);\r\n        }\r\n\r\n        for (let i = 0; i < this._maxTouchPoints; i++) {\r\n            this._activeTouchIds[i] = -1;\r\n        }\r\n\r\n        this._pointerMoveEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            let deviceSlot = deviceType === DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\r\n\r\n            // In the event that we're getting pointermove events from touch inputs that we aren't tracking,\r\n            // look for an available slot and retroactively connect it.\r\n            if (deviceType === DeviceType.Touch && deviceSlot === -1) {\r\n                const idx = this._activeTouchIds.indexOf(-1);\r\n\r\n                if (idx >= 0) {\r\n                    deviceSlot = idx;\r\n                    this._activeTouchIds[idx] = evt.pointerId;\r\n                    // Because this is a \"new\" input, inform the connected callback\r\n                    this._onDeviceConnected(deviceType, deviceSlot);\r\n                } else {\r\n                    // We can't find an open slot to store new pointer so just return (can only support max number of touches)\r\n                    Tools.Warn(`Max number of touches exceeded.  Ignoring touches in excess of ${this._maxTouchPoints}`);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = {};\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                const deviceEvent = evt as IPointerEvent;\r\n                deviceEvent.inputIndex = PointerInput.Move;\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n\r\n                // For touches that aren't started with a down, we need to set the button state to 1\r\n                if (deviceType === DeviceType.Touch && pointer[PointerInput.LeftClick] === 0) {\r\n                    pointer[PointerInput.LeftClick] = 1;\r\n                }\r\n\r\n                if (evt.pointerId === undefined) {\r\n                    evt.pointerId = this._mouseId;\r\n                }\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                // Lets Propagate the event for move with same position.\r\n                if (!this._usingSafari && evt.button !== -1) {\r\n                    deviceEvent.inputIndex = evt.button + 2;\r\n                    pointer[evt.button + 2] = pointer[evt.button + 2] ? 0 : 1; // Reverse state of button if evt.button has value\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerDownEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            let deviceSlot = deviceType === DeviceType.Mouse ? 0 : evt.pointerId;\r\n\r\n            if (deviceType === DeviceType.Touch) {\r\n                // See if this pointerId is already using an existing slot\r\n                // (possible on some devices which raise the pointerMove event before the pointerDown event, e.g. when using a pen)\r\n                let idx = this._activeTouchIds.indexOf(evt.pointerId);\r\n                if (idx === -1) {\r\n                    // If the pointerId wasn't already using a slot, find an open one\r\n                    idx = this._activeTouchIds.indexOf(-1);\r\n                }\r\n\r\n                if (idx >= 0) {\r\n                    deviceSlot = idx;\r\n                    this._activeTouchIds[idx] = evt.pointerId;\r\n                } else {\r\n                    // We can't find an open slot to store new pointer so just return (can only support max number of touches)\r\n                    Tools.Warn(`Max number of touches exceeded.  Ignoring touches in excess of ${this._maxTouchPoints}`);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = {};\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\r\n            } else if (deviceType === DeviceType.Touch) {\r\n                this._onDeviceConnected(deviceType, deviceSlot);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                const previousHorizontal = pointer[PointerInput.Horizontal];\r\n                const previousVertical = pointer[PointerInput.Vertical];\r\n\r\n                if (deviceType === DeviceType.Mouse) {\r\n                    // Mouse; Set pointerId if undefined\r\n                    if (evt.pointerId === undefined) {\r\n                        evt.pointerId = this._mouseId;\r\n                    }\r\n\r\n                    if (!document.pointerLockElement) {\r\n                        try {\r\n                            this._elementToAttachTo.setPointerCapture(this._mouseId);\r\n                        } catch (e) {\r\n                            // DO NOTHING\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Touch; Since touches are dynamically assigned, only set capture if we have an id\r\n                    if (evt.pointerId && !document.pointerLockElement) {\r\n                        try {\r\n                            this._elementToAttachTo.setPointerCapture(evt.pointerId);\r\n                        } catch (e) {\r\n                            // DO NOTHING\r\n                        }\r\n                    }\r\n                }\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n                pointer[evt.button + 2] = 1;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n\r\n                // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\r\n                // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\r\n                // EG. ([X, Y, Left-click], Middle-click, etc...)\r\n                deviceEvent.inputIndex = evt.button + 2;\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\r\n                    deviceEvent.inputIndex = PointerInput.Move;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerUpEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            const deviceSlot = deviceType === DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\r\n\r\n            if (deviceType === DeviceType.Touch) {\r\n                // If we're getting a pointerup event for a touch that isn't active, just return.\r\n                if (deviceSlot === -1) {\r\n                    return;\r\n                } else {\r\n                    this._activeTouchIds[deviceSlot] = -1;\r\n                }\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType]?.[deviceSlot];\r\n            if (pointer && pointer[evt.button + 2] !== 0) {\r\n                const previousHorizontal = pointer[PointerInput.Horizontal];\r\n                const previousVertical = pointer[PointerInput.Vertical];\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n                pointer[evt.button + 2] = 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n\r\n                if (evt.pointerId === undefined) {\r\n                    evt.pointerId = this._mouseId;\r\n                }\r\n\r\n                if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\r\n                    deviceEvent.inputIndex = PointerInput.Move;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n\r\n                // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\r\n                // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\r\n                // EG. ([X, Y, Left-click], Middle-click, etc...)\r\n                deviceEvent.inputIndex = evt.button + 2;\r\n\r\n                if (deviceType === DeviceType.Mouse && this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                } else if (evt.pointerId && this._elementToAttachTo.hasPointerCapture?.(evt.pointerId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(evt.pointerId);\r\n                }\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                if (deviceType === DeviceType.Touch) {\r\n                    this._onDeviceDisconnected(deviceType, deviceSlot);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerCancelTouch = (pointerId: number) => {\r\n            const deviceSlot = this._activeTouchIds.indexOf(pointerId);\r\n\r\n            // If we're getting a pointercancel event for a touch that isn't active, just return\r\n            if (deviceSlot === -1) {\r\n                return;\r\n            }\r\n\r\n            if (this._elementToAttachTo.hasPointerCapture?.(pointerId)) {\r\n                this._elementToAttachTo.releasePointerCapture(pointerId);\r\n            }\r\n\r\n            this._inputs[DeviceType.Touch][deviceSlot][PointerInput.LeftClick] = 0;\r\n\r\n            const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Touch, deviceSlot, PointerInput.LeftClick, 0, this, this._elementToAttachTo, pointerId);\r\n\r\n            this._onInputChanged(DeviceType.Touch, deviceSlot, deviceEvent);\r\n\r\n            this._activeTouchIds[deviceSlot] = -1;\r\n            this._onDeviceDisconnected(DeviceType.Touch, deviceSlot);\r\n        };\r\n\r\n        this._pointerCancelEvent = (evt) => {\r\n            if (evt.pointerType === \"mouse\") {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n\r\n                if (this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                }\r\n\r\n                for (let inputIndex = PointerInput.LeftClick; inputIndex <= PointerInput.BrowserForward; inputIndex++) {\r\n                    if (pointer[inputIndex] === 1) {\r\n                        pointer[inputIndex] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Mouse, 0, deviceEvent);\r\n                    }\r\n                }\r\n            } else {\r\n                this._pointerCancelTouch(evt.pointerId);\r\n            }\r\n        };\r\n\r\n        this._pointerLeaveEvent = (evt) => {\r\n            if (evt.pointerType === \"pen\") {\r\n                // If a pen leaves the hover range detectible by the hardware this event is raised and we need to cancel the operation\r\n                // Note that pen operations are treated as touch operations\r\n                this._pointerCancelTouch(evt.pointerId);\r\n            }\r\n        };\r\n\r\n        // Set Wheel Event Name, code originally from scene.inputManager\r\n        this._wheelEventName =\r\n            \"onwheel\" in document.createElement(\"div\")\r\n                ? \"wheel\" // Modern browsers support \"wheel\"\r\n                : (<any>document).onmousewheel !== undefined\r\n                  ? \"mousewheel\" // Webkit and IE support at least \"mousewheel\"\r\n                  : \"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\r\n\r\n        // Code originally in scene.inputManager.ts\r\n        // Chrome reports warning in console if wheel listener doesn't set an explicit passive option.\r\n        // IE11 only supports captureEvent:boolean, not options:object, and it defaults to false.\r\n        // Feature detection technique copied from: https://github.com/github/eventlistener-polyfill (MIT license)\r\n        let passiveSupported = false;\r\n        const noop = function () {};\r\n\r\n        try {\r\n            const options = Object.defineProperty({}, \"passive\", {\r\n                get: function () {\r\n                    passiveSupported = true;\r\n                },\r\n            });\r\n\r\n            this._elementToAttachTo.addEventListener(\"test\", noop, options);\r\n            this._elementToAttachTo.removeEventListener(\"test\", noop, options);\r\n        } catch (e) {\r\n            /* */\r\n        }\r\n\r\n        this._pointerBlurEvent = () => {\r\n            // Handle mouse buttons\r\n            if (this.isDeviceAvailable(DeviceType.Mouse)) {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n\r\n                if (this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                }\r\n\r\n                for (let inputIndex = PointerInput.LeftClick; inputIndex <= PointerInput.BrowserForward; inputIndex++) {\r\n                    if (pointer[inputIndex] === 1) {\r\n                        pointer[inputIndex] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Mouse, 0, deviceEvent);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Handle Active Touches\r\n            if (this.isDeviceAvailable(DeviceType.Touch)) {\r\n                const pointer = this._inputs[DeviceType.Touch];\r\n\r\n                for (let deviceSlot = 0; deviceSlot < this._activeTouchIds.length; deviceSlot++) {\r\n                    const pointerId = this._activeTouchIds[deviceSlot];\r\n\r\n                    if (this._elementToAttachTo.hasPointerCapture?.(pointerId)) {\r\n                        this._elementToAttachTo.releasePointerCapture(pointerId);\r\n                    }\r\n\r\n                    if (pointerId !== -1 && pointer[deviceSlot]?.[PointerInput.LeftClick] === 1) {\r\n                        pointer[deviceSlot][PointerInput.LeftClick] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(\r\n                            DeviceType.Touch,\r\n                            deviceSlot,\r\n                            PointerInput.LeftClick,\r\n                            0,\r\n                            this,\r\n                            this._elementToAttachTo,\r\n                            pointerId\r\n                        );\r\n\r\n                        this._onInputChanged(DeviceType.Touch, deviceSlot, deviceEvent);\r\n\r\n                        this._activeTouchIds[deviceSlot] = -1;\r\n                        this._onDeviceDisconnected(DeviceType.Touch, deviceSlot);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerWheelEvent = (evt) => {\r\n            const deviceType = DeviceType.Mouse;\r\n            const deviceSlot = 0;\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = [];\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._pointerActive = true;\r\n                this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                pointer[PointerInput.MouseWheelX] = evt.deltaX || 0;\r\n                pointer[PointerInput.MouseWheelY] = evt.deltaY || evt.wheelDelta || 0;\r\n                pointer[PointerInput.MouseWheelZ] = evt.deltaZ || 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n                // By default, there is no pointerId for mouse wheel events so we'll add one here\r\n                // This logic was originally in the InputManager but was added here to make the\r\n                // InputManager more platform-agnostic\r\n                if (evt.pointerId === undefined) {\r\n                    evt.pointerId = this._mouseId;\r\n                }\r\n\r\n                if (pointer[PointerInput.MouseWheelX] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelX;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n                if (pointer[PointerInput.MouseWheelY] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelY;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n                if (pointer[PointerInput.MouseWheelZ] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelZ;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        // Workaround for MacOS Chromium Browsers for lost pointer capture bug\r\n        if (this._usingMacOS && this._isUsingChromium) {\r\n            this._pointerMacOSChromeOutEvent = (evt) => {\r\n                if (evt.buttons > 1) {\r\n                    this._pointerCancelEvent(evt);\r\n                }\r\n            };\r\n            this._elementToAttachTo.addEventListener(\"lostpointercapture\", this._pointerMacOSChromeOutEvent);\r\n        }\r\n\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"leave\", this._pointerLeaveEvent);\r\n        this._elementToAttachTo.addEventListener(\"blur\", this._pointerBlurEvent);\r\n        this._elementToAttachTo.addEventListener(this._wheelEventName, this._pointerWheelEvent, passiveSupported ? { passive: false } : false);\r\n\r\n        // Since there's no up or down event for mouse wheel or delta x/y, clear mouse values at end of frame\r\n        this._pointerInputClearObserver = this._engine.onEndFrameObservable.add(() => {\r\n            if (this.isDeviceAvailable(DeviceType.Mouse)) {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n                pointer[PointerInput.MouseWheelX] = 0;\r\n                pointer[PointerInput.MouseWheelY] = 0;\r\n                pointer[PointerInput.MouseWheelZ] = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from gamepad interaction\r\n     */\r\n    private _handleGamepadActions(): void {\r\n        this._gamepadConnectedEvent = (evt: any) => {\r\n            this._addGamePad(evt.gamepad);\r\n        };\r\n\r\n        this._gamepadDisconnectedEvent = (evt: any) => {\r\n            if (this._gamepads) {\r\n                const deviceType = this._getGamepadDeviceType(evt.gamepad.id);\r\n                const deviceSlot = evt.gamepad.index;\r\n\r\n                this._unregisterDevice(deviceType, deviceSlot);\r\n                delete this._gamepads[deviceSlot];\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\r\n        window.addEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\r\n    }\r\n\r\n    /**\r\n     * Update all non-event based devices with each frame\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     */\r\n    private _updateDevice(deviceType: DeviceType, deviceSlot: number, inputIndex: number): void {\r\n        // Gamepads\r\n        const gp = navigator.getGamepads()[deviceSlot];\r\n\r\n        if (gp && deviceType === this._gamepads[deviceSlot]) {\r\n            const device = this._inputs[deviceType][deviceSlot];\r\n\r\n            if (inputIndex >= gp.buttons.length) {\r\n                device[inputIndex] = gp.axes[inputIndex - gp.buttons.length].valueOf();\r\n            } else {\r\n                device[inputIndex] = gp.buttons[inputIndex].value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets DeviceType from the device name\r\n     * @param deviceName Name of Device from DeviceInputSystem\r\n     * @returns DeviceType enum value\r\n     */\r\n    private _getGamepadDeviceType(deviceName: string): DeviceType {\r\n        if (deviceName.indexOf(\"054c\") !== -1) {\r\n            // DualShock 4 Gamepad\r\n            return deviceName.indexOf(\"0ce6\") !== -1 ? DeviceType.DualSense : DeviceType.DualShock;\r\n        } else if (deviceName.indexOf(\"Xbox One\") !== -1 || deviceName.search(\"Xbox 360\") !== -1 || deviceName.search(\"xinput\") !== -1) {\r\n            // Xbox Gamepad\r\n            return DeviceType.Xbox;\r\n        } else if (deviceName.indexOf(\"057e\") !== -1) {\r\n            // Switch Gamepad\r\n            return DeviceType.Switch;\r\n        }\r\n\r\n        return DeviceType.Generic;\r\n    }\r\n\r\n    /**\r\n     * Get DeviceType from a given pointer/mouse/touch event.\r\n     * @param evt PointerEvent to evaluate\r\n     * @returns DeviceType interpreted from event\r\n     */\r\n    private _getPointerType(evt: any): DeviceType {\r\n        let deviceType = DeviceType.Mouse;\r\n\r\n        if (evt.pointerType === \"touch\" || evt.pointerType === \"pen\" || evt.touches) {\r\n            deviceType = DeviceType.Touch;\r\n        }\r\n\r\n        return deviceType;\r\n    }\r\n}\r\n", "import type { IDisposable } from \"../scene\";\r\nimport { DeviceType } from \"./InputDevices/deviceEnums\";\r\nimport type { Observable } from \"../Misc/observable\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\nimport { NativeDeviceInputSystem } from \"./nativeDeviceInputSystem\";\r\nimport { WebDeviceInputSystem } from \"./webDeviceInputSystem\";\r\nimport { DeviceSource } from \"./InputDevices/deviceSource\";\r\nimport type { INative } from \"../Engines/Native/nativeInterfaces\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\n\r\ntype Distribute<T> = T extends DeviceType ? DeviceSource<T> : never;\r\n\r\nexport type DeviceSourceType = Distribute<DeviceType>;\r\n\r\ndeclare const _native: INative;\r\n\r\ndeclare module \"../Engines/abstractEngine\" {\r\n    interface AbstractEngine {\r\n        /** @internal */\r\n        _deviceSourceManager?: InternalDeviceSourceManager;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport interface IObservableManager {\r\n    onDeviceConnectedObservable: Observable<DeviceSourceType>;\r\n    onDeviceDisconnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    // Functions\r\n    _onInputChanged(deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent): void;\r\n    _addDevice(deviceSource: DeviceSource<DeviceType>): void;\r\n    _removeDevice(deviceType: DeviceType, deviceSlot: number): void;\r\n}\r\n\r\n/** @internal */\r\nexport class InternalDeviceSourceManager implements IDisposable {\r\n    // Public Members\r\n    public readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    // Private Members\r\n    // This is a master list of all device type/slot combos\r\n    private readonly _devices: Array<Array<number>>;\r\n\r\n    private readonly _registeredManagers = new Array<IObservableManager>();\r\n\r\n    public _refCount = 0;\r\n\r\n    public constructor(engine: AbstractEngine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array<Array<number>>(numberOfDeviceTypes);\r\n\r\n        const onDeviceConnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (!this._devices[deviceType]) {\r\n                this._devices[deviceType] = new Array<number>();\r\n            }\r\n\r\n            if (!this._devices[deviceType][deviceSlot]) {\r\n                this._devices[deviceType][deviceSlot] = deviceSlot;\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                const deviceSource = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\r\n                manager._addDevice(deviceSource);\r\n            }\r\n        };\r\n\r\n        const onDeviceDisconnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (this._devices[deviceType]?.[deviceSlot]) {\r\n                delete this._devices[deviceType][deviceSlot];\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                manager._removeDevice(deviceType, deviceSlot);\r\n            }\r\n        };\r\n\r\n        const onInputChanged = (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => {\r\n            if (eventData) {\r\n                for (const manager of this._registeredManagers) {\r\n                    manager._onInputChanged(deviceType, deviceSlot, eventData);\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeof _native !== \"undefined\") {\r\n            this._deviceInputSystem = new NativeDeviceInputSystem(onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        } else {\r\n            this._deviceInputSystem = new WebDeviceInputSystem(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        }\r\n    }\r\n\r\n    // Public Functions\r\n    public readonly registerManager = (manager: IObservableManager): void => {\r\n        for (let deviceType = 0; deviceType < this._devices.length; deviceType++) {\r\n            const device = this._devices[deviceType];\r\n            for (const deviceSlotKey in device) {\r\n                const deviceSlot = +deviceSlotKey;\r\n                manager._addDevice(new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot));\r\n            }\r\n        }\r\n        this._registeredManagers.push(manager);\r\n    };\r\n\r\n    public readonly unregisterManager = (manager: IObservableManager): void => {\r\n        const idx = this._registeredManagers.indexOf(manager);\r\n\r\n        if (idx > -1) {\r\n            this._registeredManagers.splice(idx, 1);\r\n        }\r\n    };\r\n\r\n    public dispose(): void {\r\n        this._deviceInputSystem.dispose();\r\n    }\r\n}\r\n", "import { DeviceType } from \"./deviceEnums\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { DeviceSource } from \"./deviceSource\";\r\nimport type { IObservableManager, DeviceSourceType } from \"../internalDeviceSourceManager\";\r\nimport { InternalDeviceSourceManager } from \"../internalDeviceSourceManager\";\r\nimport type { IDisposable } from \"../../scene\";\r\nimport type { AbstractEngine } from \"../../Engines/abstractEngine\";\r\nimport type { IKeyboardEvent, IPointerEvent, IUIEvent, IWheelEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class to keep track of devices\r\n */\r\nexport class DeviceSourceManager implements IDisposable, IObservableManager {\r\n    // Public Members\r\n    /**\r\n     * Observable to be triggered when after a device is connected, any new observers added will be triggered against already connected devices\r\n     */\r\n    public readonly onDeviceConnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    /**\r\n     * Observable to be triggered when after a device is disconnected\r\n     */\r\n    public readonly onDeviceDisconnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    // Private Members\r\n    private _engine: AbstractEngine;\r\n    private _onDisposeObserver: Nullable<Observer<AbstractEngine>>;\r\n    private readonly _devices: Array<Array<DeviceSource<DeviceType>>>;\r\n    private readonly _firstDevice: Array<number>;\r\n\r\n    // Public Functions\r\n    /**\r\n     * Gets a DeviceSource, given a type and slot\r\n     * @param deviceType - Type of Device\r\n     * @param deviceSlot - Slot or ID of device\r\n     * @returns DeviceSource\r\n     */\r\n    public getDeviceSource<T extends DeviceType>(deviceType: T, deviceSlot?: number): Nullable<DeviceSource<T>> {\r\n        if (deviceSlot === undefined) {\r\n            if (this._firstDevice[deviceType] === undefined) {\r\n                return null;\r\n            }\r\n\r\n            deviceSlot = this._firstDevice[deviceType];\r\n        }\r\n\r\n        if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\r\n            return null;\r\n        }\r\n\r\n        return this._devices[deviceType][deviceSlot] as DeviceSource<T>;\r\n    }\r\n    /**\r\n     * Gets an array of DeviceSource objects for a given device type\r\n     * @param deviceType - Type of Device\r\n     * @returns All available DeviceSources of a given type\r\n     */\r\n    public getDeviceSources<T extends DeviceType>(deviceType: T): ReadonlyArray<DeviceSource<T>> {\r\n        // If device type hasn't had any devices connected yet, return empty array.\r\n        if (!this._devices[deviceType]) {\r\n            return [];\r\n        }\r\n        return this._devices[deviceType].filter((source) => {\r\n            return !!source;\r\n        }) as Array<DeviceSource<T>>;\r\n    }\r\n\r\n    /**\r\n     * Default constructor\r\n     * @param engine - Used to get canvas (if applicable)\r\n     */\r\n    constructor(engine: AbstractEngine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array(numberOfDeviceTypes);\r\n        this._firstDevice = new Array(numberOfDeviceTypes);\r\n        this._engine = engine;\r\n\r\n        if (!this._engine._deviceSourceManager) {\r\n            this._engine._deviceSourceManager = new InternalDeviceSourceManager(engine);\r\n        }\r\n        this._engine._deviceSourceManager._refCount++;\r\n\r\n        // Observables\r\n        this.onDeviceConnectedObservable = new Observable((observer) => {\r\n            for (const devices of this._devices) {\r\n                if (devices) {\r\n                    for (const device of devices) {\r\n                        if (device) {\r\n                            this.onDeviceConnectedObservable.notifyObserver(observer, device as DeviceSourceType);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.onDeviceDisconnectedObservable = new Observable();\r\n\r\n        this._engine._deviceSourceManager.registerManager(this);\r\n\r\n        this._onDisposeObserver = engine.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose of DeviceSourceManager\r\n     */\r\n    public dispose(): void {\r\n        // Null out observable refs\r\n        this.onDeviceConnectedObservable.clear();\r\n        this.onDeviceDisconnectedObservable.clear();\r\n\r\n        if (this._engine._deviceSourceManager) {\r\n            this._engine._deviceSourceManager.unregisterManager(this);\r\n            if (--this._engine._deviceSourceManager._refCount < 1) {\r\n                this._engine._deviceSourceManager.dispose();\r\n                delete this._engine._deviceSourceManager;\r\n            }\r\n        }\r\n        this._engine.onDisposeObservable.remove(this._onDisposeObserver);\r\n    }\r\n\r\n    // Hidden Functions\r\n    /**\r\n     * @param deviceSource - Source to add\r\n     * @internal\r\n     */\r\n    public _addDevice(deviceSource: DeviceSourceType): void {\r\n        if (!this._devices[deviceSource.deviceType]) {\r\n            this._devices[deviceSource.deviceType] = new Array();\r\n        }\r\n\r\n        if (!this._devices[deviceSource.deviceType][deviceSource.deviceSlot]) {\r\n            this._devices[deviceSource.deviceType][deviceSource.deviceSlot] = deviceSource;\r\n            this._updateFirstDevices(deviceSource.deviceType);\r\n        }\r\n\r\n        this.onDeviceConnectedObservable.notifyObservers(deviceSource);\r\n    }\r\n\r\n    /**\r\n     * @param deviceType - DeviceType\r\n     * @param deviceSlot - DeviceSlot\r\n     * @internal\r\n     */\r\n    public _removeDevice(deviceType: DeviceType, deviceSlot: number): void {\r\n        const deviceSource = this._devices[deviceType]?.[deviceSlot]; // Grab local reference to use before removing from devices\r\n        this.onDeviceDisconnectedObservable.notifyObservers(deviceSource as DeviceSourceType);\r\n        if (this._devices[deviceType]?.[deviceSlot]) {\r\n            delete this._devices[deviceType][deviceSlot];\r\n        }\r\n        // Even if we don't delete a device, we should still check for the first device as things may have gotten out of sync.\r\n        this._updateFirstDevices(deviceType);\r\n    }\r\n\r\n    /**\r\n     * @param deviceType - DeviceType\r\n     * @param deviceSlot - DeviceSlot\r\n     * @param eventData - Event\r\n     * @internal\r\n     */\r\n    public _onInputChanged<T extends DeviceType>(deviceType: T, deviceSlot: number, eventData: IUIEvent): void {\r\n        this._devices[deviceType]?.[deviceSlot]?.onInputChangedObservable.notifyObservers(eventData as IKeyboardEvent | IWheelEvent | IPointerEvent);\r\n    }\r\n\r\n    // Private Functions\r\n    private _updateFirstDevices(type: DeviceType): void {\r\n        switch (type) {\r\n            case DeviceType.Keyboard:\r\n            case DeviceType.Mouse:\r\n                this._firstDevice[type] = 0;\r\n                break;\r\n            case DeviceType.Touch:\r\n            case DeviceType.DualSense:\r\n            case DeviceType.DualShock:\r\n            case DeviceType.Xbox:\r\n            case DeviceType.Switch:\r\n            case DeviceType.Generic: {\r\n                delete this._firstDevice[type];\r\n                // eslint-disable-next-line no-case-declarations\r\n                const devices = this._devices[type];\r\n                if (devices) {\r\n                    for (let i = 0; i < devices.length; i++) {\r\n                        if (devices[i]) {\r\n                            this._firstDevice[type] = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n", "/** @internal */\r\nexport class _ImportHelper {\r\n    /** @internal */\r\n    public static _IsPickingAvailable = false;\r\n}\r\n", "import type { EventState, Observable, Observer } from \"../Misc/observable\";\r\nimport { PointerInfoPre, PointerInfo, PointerEventTypes } from \"../Events/pointerEvents\";\r\nimport type { Nullable } from \"../types\";\r\nimport { AbstractActionManager } from \"../Actions/abstractActionManager\";\r\nimport { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport { Vector2, Matrix } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { ActionEvent } from \"../Actions/actionEvent\";\r\nimport { KeyboardEventTypes, KeyboardInfoPre, KeyboardInfo } from \"../Events/keyboardEvents\";\r\nimport { DeviceType, PointerInput } from \"../DeviceInput/InputDevices/deviceEnums\";\r\nimport type { IKeyboardEvent, IMouseEvent, IPointerEvent } from \"../Events/deviceInputEvents\";\r\nimport { DeviceSourceManager } from \"../DeviceInput/InputDevices/deviceSourceManager\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport { _ImportHelper } from \"core/import.helper\";\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass _ClickInfo {\r\n    private _singleClick = false;\r\n    private _doubleClick = false;\r\n    private _hasSwiped = false;\r\n    private _ignore = false;\r\n\r\n    public get singleClick(): boolean {\r\n        return this._singleClick;\r\n    }\r\n    public get doubleClick(): boolean {\r\n        return this._doubleClick;\r\n    }\r\n    public get hasSwiped(): boolean {\r\n        return this._hasSwiped;\r\n    }\r\n    public get ignore(): boolean {\r\n        return this._ignore;\r\n    }\r\n\r\n    public set singleClick(b: boolean) {\r\n        this._singleClick = b;\r\n    }\r\n    public set doubleClick(b: boolean) {\r\n        this._doubleClick = b;\r\n    }\r\n    public set hasSwiped(b: boolean) {\r\n        this._hasSwiped = b;\r\n    }\r\n    public set ignore(b: boolean) {\r\n        this._ignore = b;\r\n    }\r\n}\r\n\r\n/** @internal */\r\ninterface _IClickEvent {\r\n    clickInfo: _ClickInfo;\r\n    evt: IPointerEvent;\r\n    timeoutId: number;\r\n}\r\n\r\n/**\r\n * Class used to manage all inputs for the scene.\r\n */\r\nexport class InputManager {\r\n    /** The distance in pixel that you have to move to prevent some events */\r\n    public static DragMovementThreshold = 10; // in pixels\r\n    /** Time in milliseconds to wait to raise long press events if button is still pressed */\r\n    public static LongPressDelay = 500; // in milliseconds\r\n    /** Time in milliseconds with two consecutive clicks will be considered as a double click */\r\n    public static DoubleClickDelay = 300; // in milliseconds\r\n    /**\r\n     * This flag will modify the behavior so that, when true, a click will happen if and only if\r\n     * another click DOES NOT happen within the DoubleClickDelay time frame.  If another click does\r\n     * happen within that time frame, the first click will not fire an event and and a double click will occur.\r\n     */\r\n    public static ExclusiveDoubleClickMode = false;\r\n\r\n    /** This is a defensive check to not allow control attachment prior to an already active one. If already attached, previous control is unattached before attaching the new one. */\r\n    private _alreadyAttached = false;\r\n    private _alreadyAttachedTo: Nullable<HTMLElement>;\r\n\r\n    // Pointers\r\n    private _onPointerMove: (evt: IMouseEvent) => void;\r\n    private _onPointerDown: (evt: IPointerEvent) => void;\r\n    private _onPointerUp: (evt: IPointerEvent) => void;\r\n\r\n    private _initClickEvent: (\r\n        obs1: Observable<PointerInfoPre>,\r\n        obs2: Observable<PointerInfo>,\r\n        evt: IPointerEvent,\r\n        cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void\r\n    ) => void;\r\n    private _initActionManager: (act: Nullable<AbstractActionManager>, clickInfo: _ClickInfo) => Nullable<AbstractActionManager>;\r\n    private _delayedSimpleClick: (btn: number, clickInfo: _ClickInfo, cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void) => void;\r\n    private _meshPickProceed = false;\r\n\r\n    private _previousButtonPressed: number;\r\n    private _currentPickResult: Nullable<PickingInfo> = null;\r\n    private _previousPickResult: Nullable<PickingInfo> = null;\r\n\r\n    private _activePointerIds: Array<number> = new Array<number>();\r\n    /** Tracks the count of used slots in _activePointerIds for perf */\r\n    private _activePointerIdsCount: number = 0;\r\n\r\n    private _doubleClickOccured = false;\r\n    private _isSwiping: boolean = false;\r\n    private _swipeButtonPressed: number = -1;\r\n    private _skipPointerTap: boolean = false;\r\n    private _isMultiTouchGesture: boolean = false;\r\n\r\n    private _pointerOverMesh: Nullable<AbstractMesh>;\r\n\r\n    private _pickedDownMesh: Nullable<AbstractMesh>;\r\n    private _pickedUpMesh: Nullable<AbstractMesh>;\r\n\r\n    private _pointerX: number = 0;\r\n    private _pointerY: number = 0;\r\n    private _unTranslatedPointerX: number;\r\n    private _unTranslatedPointerY: number;\r\n    private _startingPointerPosition = new Vector2(0, 0);\r\n    private _previousStartingPointerPosition = new Vector2(0, 0);\r\n    private _startingPointerTime = 0;\r\n    private _previousStartingPointerTime = 0;\r\n    private _pointerCaptures: { [pointerId: number]: boolean } = {};\r\n    private _meshUnderPointerId: { [pointerId: number]: Nullable<AbstractMesh> } = {};\r\n    private _movePointerInfo: Nullable<PointerInfo> = null;\r\n    private _cameraObserverCount = 0;\r\n    private _delayedClicks: Array<Nullable<_IClickEvent>> = [null, null, null, null, null];\r\n\r\n    // Keyboard\r\n    private _onKeyDown: (evt: IKeyboardEvent) => void;\r\n    private _onKeyUp: (evt: IKeyboardEvent) => void;\r\n\r\n    private _scene: Scene;\r\n    private _deviceSourceManager: Nullable<DeviceSourceManager> = null;\r\n\r\n    // origin MouseEvent\r\n    _originMouseEvent: IMouseEvent;\r\n    /**\r\n     * Creates a new InputManager\r\n     * @param scene - defines the hosting scene\r\n     */\r\n    constructor(scene?: Scene) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh that is currently under the pointer\r\n     * @returns Mesh that the pointer is pointer is hovering over\r\n     */\r\n    public get meshUnderPointer(): Nullable<AbstractMesh> {\r\n        if (this._movePointerInfo) {\r\n            // Because _pointerOverMesh is populated as part of _pickMove, we need to force a pick to update it.\r\n            // Calling _pickMove calls _setCursorAndPointerOverMesh which calls setPointerOverMesh\r\n            this._movePointerInfo._generatePickInfo();\r\n            // Once we have what we need, we can clear _movePointerInfo because we don't need it anymore\r\n            this._movePointerInfo = null;\r\n        }\r\n        return this._pointerOverMesh;\r\n    }\r\n\r\n    /**\r\n     * When using more than one pointer (for example in XR) you can get the mesh under the specific pointer\r\n     * @param pointerId - the pointer id to use\r\n     * @returns The mesh under this pointer id or null if not found\r\n     */\r\n    public getMeshUnderPointerByPointerId(pointerId: number): Nullable<AbstractMesh> {\r\n        return this._meshUnderPointerId[pointerId] || null;\r\n    }\r\n\r\n    /**\r\n     * Gets the pointer coordinates in 2D without any translation (ie. straight out of the pointer event)\r\n     * @returns Vector with X/Y values directly from pointer event\r\n     */\r\n    public get unTranslatedPointer(): Vector2 {\r\n        return new Vector2(this._unTranslatedPointerX, this._unTranslatedPointerY);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current on-screen X position of the pointer\r\n     * @returns Translated X with respect to screen\r\n     */\r\n    public get pointerX(): number {\r\n        return this._pointerX;\r\n    }\r\n\r\n    public set pointerX(value: number) {\r\n        this._pointerX = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current on-screen Y position of the pointer\r\n     * @returns Translated Y with respect to screen\r\n     */\r\n    public get pointerY(): number {\r\n        return this._pointerY;\r\n    }\r\n\r\n    public set pointerY(value: number) {\r\n        this._pointerY = value;\r\n    }\r\n\r\n    private _updatePointerPosition(evt: IPointerEvent): void {\r\n        const canvasRect = this._scene.getEngine().getInputElementClientRect();\r\n\r\n        if (!canvasRect) {\r\n            return;\r\n        }\r\n\r\n        this._pointerX = evt.clientX - canvasRect.left;\r\n        this._pointerY = evt.clientY - canvasRect.top;\r\n\r\n        this._unTranslatedPointerX = this._pointerX;\r\n        this._unTranslatedPointerY = this._pointerY;\r\n    }\r\n\r\n    private _processPointerMove(pickResult: Nullable<PickingInfo>, evt: IPointerEvent) {\r\n        const scene = this._scene;\r\n        const engine = scene.getEngine();\r\n        const canvas = engine.getInputElement();\r\n\r\n        if (canvas) {\r\n            canvas.tabIndex = engine.canvasTabIndex;\r\n\r\n            // Restore pointer\r\n            if (!scene.doNotHandleCursors) {\r\n                canvas.style.cursor = scene.defaultCursor;\r\n            }\r\n        }\r\n\r\n        this._setCursorAndPointerOverMesh(pickResult, evt, scene);\r\n\r\n        for (const step of scene._pointerMoveStage) {\r\n            // If _pointerMoveState is defined, we have an active spriteManager and can't use Lazy Picking\r\n            // Therefore, we need to force a pick to update the pickResult\r\n            pickResult = pickResult || this._pickMove(evt);\r\n            const isMeshPicked = pickResult?.pickedMesh ? true : false;\r\n            pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, isMeshPicked, canvas);\r\n        }\r\n\r\n        const type = evt.inputIndex >= PointerInput.MouseWheelX && evt.inputIndex <= PointerInput.MouseWheelZ ? PointerEventTypes.POINTERWHEEL : PointerEventTypes.POINTERMOVE;\r\n\r\n        if (scene.onPointerMove) {\r\n            // Because of lazy picking, we need to force a pick to update the pickResult\r\n            pickResult = pickResult || this._pickMove(evt);\r\n            scene.onPointerMove(evt, pickResult, type);\r\n        }\r\n\r\n        let pointerInfo: PointerInfo;\r\n        if (pickResult) {\r\n            pointerInfo = new PointerInfo(type, evt, pickResult);\r\n            this._setRayOnPointerInfo(pickResult, evt);\r\n        } else {\r\n            pointerInfo = new PointerInfo(type, evt, null, this);\r\n            this._movePointerInfo = pointerInfo;\r\n        }\r\n\r\n        if (scene.onPointerObservable.hasObservers()) {\r\n            scene.onPointerObservable.notifyObservers(pointerInfo, type);\r\n        }\r\n    }\r\n\r\n    // Pointers handling\r\n    /** @internal */\r\n    public _setRayOnPointerInfo(pickInfo: Nullable<PickingInfo>, event: IMouseEvent) {\r\n        const scene = this._scene;\r\n        if (pickInfo && _ImportHelper._IsPickingAvailable) {\r\n            if (!pickInfo.ray) {\r\n                pickInfo.ray = scene.createPickingRay(event.offsetX, event.offsetY, Matrix.Identity(), scene.activeCamera);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _addCameraPointerObserver(observer: (p: PointerInfo, s: EventState) => void, mask?: number): Nullable<Observer<PointerInfo>> {\r\n        this._cameraObserverCount++;\r\n        return this._scene.onPointerObservable.add(observer, mask);\r\n    }\r\n\r\n    /** @internal */\r\n    public _removeCameraPointerObserver(observer: Observer<PointerInfo>): boolean {\r\n        this._cameraObserverCount--;\r\n        return this._scene.onPointerObservable.remove(observer);\r\n    }\r\n\r\n    private _checkForPicking(): boolean {\r\n        return !!(this._scene.onPointerObservable.observers.length > this._cameraObserverCount || this._scene.onPointerPick);\r\n    }\r\n\r\n    private _checkPrePointerObservable(pickResult: Nullable<PickingInfo>, evt: IPointerEvent, type: number) {\r\n        const scene = this._scene;\r\n        const pi = new PointerInfoPre(type, evt, this._unTranslatedPointerX, this._unTranslatedPointerY);\r\n        if (pickResult) {\r\n            pi.originalPickingInfo = pickResult;\r\n            pi.ray = pickResult.ray;\r\n            if (evt.pointerType === \"xr-near\" && pickResult.originMesh) {\r\n                pi.nearInteractionPickingInfo = pickResult;\r\n            }\r\n        }\r\n\r\n        scene.onPrePointerObservable.notifyObservers(pi, type);\r\n        if (pi.skipOnPointerObservable) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _pickMove(evt: IPointerEvent): PickingInfo {\r\n        const scene = this._scene;\r\n        const pickResult = scene.pick(\r\n            this._unTranslatedPointerX,\r\n            this._unTranslatedPointerY,\r\n            scene.pointerMovePredicate,\r\n            scene.pointerMoveFastCheck,\r\n            scene.cameraToUseForPointers,\r\n            scene.pointerMoveTrianglePredicate\r\n        );\r\n\r\n        this._setCursorAndPointerOverMesh(pickResult, evt, scene);\r\n\r\n        return pickResult;\r\n    }\r\n\r\n    private _setCursorAndPointerOverMesh(pickResult: Nullable<PickingInfo>, evt: IPointerEvent, scene: Scene) {\r\n        const engine = scene.getEngine();\r\n        const canvas = engine.getInputElement();\r\n\r\n        if (pickResult?.pickedMesh) {\r\n            this.setPointerOverMesh(pickResult.pickedMesh, evt.pointerId, pickResult, evt);\r\n\r\n            if (!scene.doNotHandleCursors && canvas && this._pointerOverMesh) {\r\n                const actionManager = this._pointerOverMesh._getActionManagerForTrigger();\r\n                if (actionManager && actionManager.hasPointerTriggers) {\r\n                    canvas.style.cursor = actionManager.hoverCursor || scene.hoverCursor;\r\n                }\r\n            }\r\n        } else {\r\n            this.setPointerOverMesh(null, evt.pointerId, pickResult, evt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer move on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     */\r\n    public simulatePointerMove(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): void {\r\n        const evt = new PointerEvent(\"pointermove\", pointerEventInit);\r\n        evt.inputIndex = PointerInput.Move;\r\n\r\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERMOVE)) {\r\n            return;\r\n        }\r\n        this._processPointerMove(pickResult, evt);\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer down on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     */\r\n    public simulatePointerDown(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): void {\r\n        const evt = new PointerEvent(\"pointerdown\", pointerEventInit);\r\n        evt.inputIndex = evt.button + 2;\r\n\r\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERDOWN)) {\r\n            return;\r\n        }\r\n\r\n        this._processPointerDown(pickResult, evt);\r\n    }\r\n\r\n    private _processPointerDown(pickResult: Nullable<PickingInfo>, evt: IPointerEvent): void {\r\n        const scene = this._scene;\r\n        if (pickResult?.pickedMesh) {\r\n            this._pickedDownMesh = pickResult.pickedMesh;\r\n            const actionManager = pickResult.pickedMesh._getActionManagerForTrigger();\r\n            if (actionManager) {\r\n                if (actionManager.hasPickTriggers) {\r\n                    actionManager.processTrigger(\r\n                        Constants.ACTION_OnPickDownTrigger,\r\n                        new ActionEvent(pickResult.pickedMesh, scene.pointerX, scene.pointerY, pickResult.pickedMesh, evt, pickResult)\r\n                    );\r\n                    switch (evt.button) {\r\n                        case 0:\r\n                            actionManager.processTrigger(\r\n                                Constants.ACTION_OnLeftPickTrigger,\r\n                                new ActionEvent(pickResult.pickedMesh, scene.pointerX, scene.pointerY, pickResult.pickedMesh, evt, pickResult)\r\n                            );\r\n                            break;\r\n                        case 1:\r\n                            actionManager.processTrigger(\r\n                                Constants.ACTION_OnCenterPickTrigger,\r\n                                new ActionEvent(pickResult.pickedMesh, scene.pointerX, scene.pointerY, pickResult.pickedMesh, evt, pickResult)\r\n                            );\r\n                            break;\r\n                        case 2:\r\n                            actionManager.processTrigger(\r\n                                Constants.ACTION_OnRightPickTrigger,\r\n                                new ActionEvent(pickResult.pickedMesh, scene.pointerX, scene.pointerY, pickResult.pickedMesh, evt, pickResult)\r\n                            );\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                if (actionManager.hasSpecificTrigger(Constants.ACTION_OnLongPressTrigger)) {\r\n                    window.setTimeout(() => {\r\n                        const pickResult = scene.pick(\r\n                            this._unTranslatedPointerX,\r\n                            this._unTranslatedPointerY,\r\n                            (mesh: AbstractMesh): boolean =>\r\n                                <boolean>(\r\n                                    (mesh.isPickable &&\r\n                                        mesh.isVisible &&\r\n                                        mesh.isReady() &&\r\n                                        mesh.actionManager &&\r\n                                        mesh.actionManager.hasSpecificTrigger(Constants.ACTION_OnLongPressTrigger) &&\r\n                                        mesh === this._pickedDownMesh)\r\n                                ),\r\n                            false,\r\n                            scene.cameraToUseForPointers\r\n                        );\r\n\r\n                        if (pickResult?.pickedMesh && actionManager) {\r\n                            if (this._activePointerIdsCount !== 0 && Date.now() - this._startingPointerTime > InputManager.LongPressDelay && !this._isPointerSwiping()) {\r\n                                this._startingPointerTime = 0;\r\n                                actionManager.processTrigger(Constants.ACTION_OnLongPressTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\r\n                            }\r\n                        }\r\n                    }, InputManager.LongPressDelay);\r\n                }\r\n            }\r\n        } else {\r\n            for (const step of scene._pointerDownStage) {\r\n                pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, evt, false);\r\n            }\r\n        }\r\n\r\n        let pointerInfo: PointerInfo;\r\n        const type = PointerEventTypes.POINTERDOWN;\r\n\r\n        if (pickResult) {\r\n            if (scene.onPointerDown) {\r\n                scene.onPointerDown(evt, pickResult, type);\r\n            }\r\n\r\n            pointerInfo = new PointerInfo(type, evt, pickResult);\r\n            this._setRayOnPointerInfo(pickResult, evt);\r\n        } else {\r\n            pointerInfo = new PointerInfo(type, evt, null, this);\r\n        }\r\n\r\n        if (scene.onPointerObservable.hasObservers()) {\r\n            scene.onPointerObservable.notifyObservers(pointerInfo, type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @internals Boolean if delta for pointer exceeds drag movement threshold\r\n     */\r\n    public _isPointerSwiping(): boolean {\r\n        return this._isSwiping;\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer up on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     * @param doubleTap - indicates that the pointer up event should be considered as part of a double click (false by default)\r\n     */\r\n    public simulatePointerUp(pickResult: PickingInfo, pointerEventInit?: PointerEventInit, doubleTap?: boolean): void {\r\n        const evt = new PointerEvent(\"pointerup\", pointerEventInit);\r\n        evt.inputIndex = PointerInput.Move;\r\n        const clickInfo = new _ClickInfo();\r\n\r\n        if (doubleTap) {\r\n            clickInfo.doubleClick = true;\r\n        } else {\r\n            clickInfo.singleClick = true;\r\n        }\r\n\r\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERUP)) {\r\n            return;\r\n        }\r\n\r\n        this._processPointerUp(pickResult, evt, clickInfo);\r\n    }\r\n\r\n    private _processPointerUp(pickResult: Nullable<PickingInfo>, evt: IPointerEvent, clickInfo: _ClickInfo): void {\r\n        const scene = this._scene;\r\n        if (pickResult?.pickedMesh) {\r\n            this._pickedUpMesh = pickResult.pickedMesh;\r\n            if (this._pickedDownMesh === this._pickedUpMesh) {\r\n                if (scene.onPointerPick) {\r\n                    scene.onPointerPick(evt, pickResult);\r\n                }\r\n                if (clickInfo.singleClick && !clickInfo.ignore && scene.onPointerObservable.observers.length > this._cameraObserverCount) {\r\n                    const type = PointerEventTypes.POINTERPICK;\r\n                    const pi = new PointerInfo(type, evt, pickResult);\r\n                    this._setRayOnPointerInfo(pickResult, evt);\r\n                    scene.onPointerObservable.notifyObservers(pi, type);\r\n                }\r\n            }\r\n            const actionManager = pickResult.pickedMesh._getActionManagerForTrigger();\r\n            if (actionManager && !clickInfo.ignore) {\r\n                actionManager.processTrigger(Constants.ACTION_OnPickUpTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\r\n\r\n                if (!clickInfo.hasSwiped && clickInfo.singleClick) {\r\n                    actionManager.processTrigger(Constants.ACTION_OnPickTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\r\n                }\r\n\r\n                const doubleClickActionManager = pickResult.pickedMesh._getActionManagerForTrigger(Constants.ACTION_OnDoublePickTrigger);\r\n                if (clickInfo.doubleClick && doubleClickActionManager) {\r\n                    doubleClickActionManager.processTrigger(Constants.ACTION_OnDoublePickTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\r\n                }\r\n            }\r\n        } else {\r\n            if (!clickInfo.ignore) {\r\n                for (const step of scene._pointerUpStage) {\r\n                    pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, evt, clickInfo.doubleClick);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._pickedDownMesh && this._pickedDownMesh !== this._pickedUpMesh) {\r\n            const pickedDownActionManager = this._pickedDownMesh._getActionManagerForTrigger(Constants.ACTION_OnPickOutTrigger);\r\n            if (pickedDownActionManager) {\r\n                pickedDownActionManager.processTrigger(Constants.ACTION_OnPickOutTrigger, ActionEvent.CreateNew(this._pickedDownMesh, evt));\r\n            }\r\n        }\r\n\r\n        if (!clickInfo.ignore) {\r\n            const pi = new PointerInfo(PointerEventTypes.POINTERUP, evt, pickResult);\r\n            // Set ray on picking info.  Note that this info will also be reused for the tap notification.\r\n            this._setRayOnPointerInfo(pickResult, evt);\r\n            scene.onPointerObservable.notifyObservers(pi, PointerEventTypes.POINTERUP);\r\n\r\n            if (scene.onPointerUp) {\r\n                scene.onPointerUp(evt, pickResult, PointerEventTypes.POINTERUP);\r\n            }\r\n\r\n            if (!clickInfo.hasSwiped && !this._skipPointerTap && !this._isMultiTouchGesture) {\r\n                let type = 0;\r\n                if (clickInfo.singleClick) {\r\n                    type = PointerEventTypes.POINTERTAP;\r\n                } else if (clickInfo.doubleClick) {\r\n                    type = PointerEventTypes.POINTERDOUBLETAP;\r\n                }\r\n\r\n                if (type) {\r\n                    const pi = new PointerInfo(type, evt, pickResult);\r\n                    if (scene.onPointerObservable.hasObservers() && scene.onPointerObservable.hasSpecificMask(type)) {\r\n                        scene.onPointerObservable.notifyObservers(pi, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\r\n     * @param pointerId - defines the pointer id to use in a multi-touch scenario (0 by default)\r\n     * @returns true if the pointer was captured\r\n     */\r\n    public isPointerCaptured(pointerId = 0): boolean {\r\n        return this._pointerCaptures[pointerId];\r\n    }\r\n\r\n    /**\r\n     * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\r\n     * @param attachUp - defines if you want to attach events to pointerup\r\n     * @param attachDown - defines if you want to attach events to pointerdown\r\n     * @param attachMove - defines if you want to attach events to pointermove\r\n     * @param elementToAttachTo - defines the target DOM element to attach to (will use the canvas by default)\r\n     */\r\n    public attachControl(attachUp = true, attachDown = true, attachMove = true, elementToAttachTo: Nullable<HTMLElement> = null): void {\r\n        const scene = this._scene;\r\n        const engine = scene.getEngine();\r\n\r\n        if (!elementToAttachTo) {\r\n            elementToAttachTo = engine.getInputElement();\r\n        }\r\n\r\n        if (this._alreadyAttached) {\r\n            this.detachControl();\r\n        }\r\n\r\n        if (elementToAttachTo) {\r\n            this._alreadyAttachedTo = elementToAttachTo;\r\n        }\r\n        this._deviceSourceManager = new DeviceSourceManager(engine);\r\n\r\n        // Because this is only called from _initClickEvent, which is called in _onPointerUp, we'll use the pointerUpPredicate for the pick call\r\n        this._initActionManager = (act: Nullable<AbstractActionManager>): Nullable<AbstractActionManager> => {\r\n            if (!this._meshPickProceed) {\r\n                const pickResult =\r\n                    scene.skipPointerUpPicking || (scene._registeredActions === 0 && !this._checkForPicking() && !scene.onPointerUp)\r\n                        ? null\r\n                        : scene.pick(\r\n                              this._unTranslatedPointerX,\r\n                              this._unTranslatedPointerY,\r\n                              scene.pointerUpPredicate,\r\n                              scene.pointerUpFastCheck,\r\n                              scene.cameraToUseForPointers,\r\n                              scene.pointerUpTrianglePredicate\r\n                          );\r\n                this._currentPickResult = pickResult;\r\n                if (pickResult) {\r\n                    act = pickResult.hit && pickResult.pickedMesh ? pickResult.pickedMesh._getActionManagerForTrigger() : null;\r\n                }\r\n                this._meshPickProceed = true;\r\n            }\r\n            return act;\r\n        };\r\n\r\n        this._delayedSimpleClick = (btn: number, clickInfo: _ClickInfo, cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void) => {\r\n            // double click delay is over and that no double click has been raised since, or the 2 consecutive keys pressed are different\r\n            if ((Date.now() - this._previousStartingPointerTime > InputManager.DoubleClickDelay && !this._doubleClickOccured) || btn !== this._previousButtonPressed) {\r\n                this._doubleClickOccured = false;\r\n                clickInfo.singleClick = true;\r\n                clickInfo.ignore = false;\r\n\r\n                // If we have a delayed click, we need to resolve the TAP event\r\n                if (this._delayedClicks[btn]) {\r\n                    const evt = this._delayedClicks[btn]!.evt;\r\n                    const type = PointerEventTypes.POINTERTAP;\r\n                    const pi = new PointerInfo(type, evt, this._currentPickResult);\r\n                    if (scene.onPointerObservable.hasObservers() && scene.onPointerObservable.hasSpecificMask(type)) {\r\n                        scene.onPointerObservable.notifyObservers(pi, type);\r\n                    }\r\n\r\n                    // Clear the delayed click\r\n                    this._delayedClicks[btn] = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        this._initClickEvent = (\r\n            obs1: Observable<PointerInfoPre>,\r\n            obs2: Observable<PointerInfo>,\r\n            evt: IPointerEvent,\r\n            cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void\r\n        ): void => {\r\n            const clickInfo = new _ClickInfo();\r\n            this._currentPickResult = null;\r\n            let act: Nullable<AbstractActionManager> = null;\r\n\r\n            let checkPicking =\r\n                obs1.hasSpecificMask(PointerEventTypes.POINTERPICK) ||\r\n                obs2.hasSpecificMask(PointerEventTypes.POINTERPICK) ||\r\n                obs1.hasSpecificMask(PointerEventTypes.POINTERTAP) ||\r\n                obs2.hasSpecificMask(PointerEventTypes.POINTERTAP) ||\r\n                obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) ||\r\n                obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\r\n            if (!checkPicking && AbstractActionManager) {\r\n                act = this._initActionManager(act, clickInfo);\r\n                if (act) {\r\n                    checkPicking = act.hasPickTriggers;\r\n                }\r\n            }\r\n\r\n            let needToIgnoreNext = false;\r\n\r\n            // Never pick if this is a multi-touch gesture (e.g. pinch)\r\n            checkPicking = checkPicking && !this._isMultiTouchGesture;\r\n\r\n            if (checkPicking) {\r\n                const btn = evt.button;\r\n                clickInfo.hasSwiped = this._isPointerSwiping();\r\n\r\n                if (!clickInfo.hasSwiped) {\r\n                    let checkSingleClickImmediately = !InputManager.ExclusiveDoubleClickMode;\r\n\r\n                    if (!checkSingleClickImmediately) {\r\n                        checkSingleClickImmediately = !obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) && !obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\r\n\r\n                        if (checkSingleClickImmediately && !AbstractActionManager.HasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger)) {\r\n                            act = this._initActionManager(act, clickInfo);\r\n                            if (act) {\r\n                                checkSingleClickImmediately = !act.hasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (checkSingleClickImmediately) {\r\n                        // single click detected if double click delay is over or two different successive keys pressed without exclusive double click or no double click required\r\n                        if (Date.now() - this._previousStartingPointerTime > InputManager.DoubleClickDelay || btn !== this._previousButtonPressed) {\r\n                            clickInfo.singleClick = true;\r\n                            cb(clickInfo, this._currentPickResult);\r\n                            needToIgnoreNext = true;\r\n                        }\r\n                    }\r\n                    // at least one double click is required to be check and exclusive double click is enabled\r\n                    else {\r\n                        // Queue up a delayed click, just in case this isn't a double click\r\n                        // It should be noted that while this delayed event happens\r\n                        // because of user input, it shouldn't be considered as a direct,\r\n                        // timing-dependent result of that input.  It's meant to just fire the TAP event\r\n                        const delayedClick = {\r\n                            evt: evt,\r\n                            clickInfo: clickInfo,\r\n                            timeoutId: window.setTimeout(this._delayedSimpleClick.bind(this, btn, clickInfo, cb), InputManager.DoubleClickDelay),\r\n                        };\r\n\r\n                        this._delayedClicks[btn] = delayedClick;\r\n                    }\r\n\r\n                    let checkDoubleClick = obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) || obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\r\n                    if (!checkDoubleClick && AbstractActionManager.HasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger)) {\r\n                        act = this._initActionManager(act, clickInfo);\r\n                        if (act) {\r\n                            checkDoubleClick = act.hasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger);\r\n                        }\r\n                    }\r\n                    if (checkDoubleClick) {\r\n                        // two successive keys pressed are equal, double click delay is not over and double click has not just occurred\r\n                        if (btn === this._previousButtonPressed && Date.now() - this._previousStartingPointerTime < InputManager.DoubleClickDelay && !this._doubleClickOccured) {\r\n                            // pointer has not moved for 2 clicks, it's a double click\r\n                            if (!clickInfo.hasSwiped && !this._isPointerSwiping()) {\r\n                                this._previousStartingPointerTime = 0;\r\n                                this._doubleClickOccured = true;\r\n                                clickInfo.doubleClick = true;\r\n                                clickInfo.ignore = false;\r\n                                // If we have a pending click, we need to cancel it\r\n                                if (InputManager.ExclusiveDoubleClickMode && this._delayedClicks[btn]) {\r\n                                    clearTimeout(this._delayedClicks[btn]?.timeoutId);\r\n                                    this._delayedClicks[btn] = null;\r\n                                }\r\n\r\n                                cb(clickInfo, this._currentPickResult);\r\n                            }\r\n                            // if the two successive clicks are too far, it's just two simple clicks\r\n                            else {\r\n                                this._doubleClickOccured = false;\r\n                                this._previousStartingPointerTime = this._startingPointerTime;\r\n                                this._previousStartingPointerPosition.x = this._startingPointerPosition.x;\r\n                                this._previousStartingPointerPosition.y = this._startingPointerPosition.y;\r\n                                this._previousButtonPressed = btn;\r\n                                if (InputManager.ExclusiveDoubleClickMode) {\r\n                                    // If we have a delayed click, we need to cancel it\r\n                                    if (this._delayedClicks[btn]) {\r\n                                        clearTimeout(this._delayedClicks[btn]?.timeoutId);\r\n                                        this._delayedClicks[btn] = null;\r\n                                    }\r\n                                    cb(clickInfo, this._previousPickResult);\r\n                                } else {\r\n                                    cb(clickInfo, this._currentPickResult);\r\n                                }\r\n                            }\r\n                            needToIgnoreNext = true;\r\n                        }\r\n                        // just the first click of the double has been raised\r\n                        else {\r\n                            this._doubleClickOccured = false;\r\n                            this._previousStartingPointerTime = this._startingPointerTime;\r\n                            this._previousStartingPointerPosition.x = this._startingPointerPosition.x;\r\n                            this._previousStartingPointerPosition.y = this._startingPointerPosition.y;\r\n                            this._previousButtonPressed = btn!;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Even if ExclusiveDoubleClickMode is true, we need to always handle\r\n            // up events at time of execution, unless we're explicitly ignoring them.\r\n            if (!needToIgnoreNext) {\r\n                cb(clickInfo, this._currentPickResult);\r\n            }\r\n        };\r\n\r\n        this._onPointerMove = (evt: IMouseEvent) => {\r\n            this._updatePointerPosition(evt as IPointerEvent);\r\n\r\n            // Check if pointer leaves DragMovementThreshold range to determine if swipe is occurring\r\n            if (!this._isSwiping && this._swipeButtonPressed !== -1) {\r\n                this._isSwiping =\r\n                    Math.abs(this._startingPointerPosition.x - this._pointerX) > InputManager.DragMovementThreshold ||\r\n                    Math.abs(this._startingPointerPosition.y - this._pointerY) > InputManager.DragMovementThreshold;\r\n            }\r\n\r\n            // Because there's a race condition between pointermove and pointerlockchange events, we need to\r\n            // verify that the pointer is still locked after each pointermove event.\r\n            if (engine.isPointerLock) {\r\n                engine._verifyPointerLock();\r\n            }\r\n\r\n            // PreObservable support\r\n            if (\r\n                this._checkPrePointerObservable(\r\n                    null,\r\n                    evt as IPointerEvent,\r\n                    evt.inputIndex >= PointerInput.MouseWheelX && evt.inputIndex <= PointerInput.MouseWheelZ ? PointerEventTypes.POINTERWHEEL : PointerEventTypes.POINTERMOVE\r\n                )\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (!scene.cameraToUseForPointers && !scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            if (scene.skipPointerMovePicking) {\r\n                this._processPointerMove(new PickingInfo(), evt as IPointerEvent);\r\n                return;\r\n            }\r\n\r\n            if (!scene.pointerMovePredicate) {\r\n                scene.pointerMovePredicate = (mesh: AbstractMesh): boolean =>\r\n                    mesh.isPickable &&\r\n                    mesh.isVisible &&\r\n                    mesh.isReady() &&\r\n                    mesh.isEnabled() &&\r\n                    (mesh.enablePointerMoveEvents || scene.constantlyUpdateMeshUnderPointer || mesh._getActionManagerForTrigger() !== null) &&\r\n                    (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0);\r\n            }\r\n\r\n            const pickResult = scene._registeredActions > 0 || scene.constantlyUpdateMeshUnderPointer ? this._pickMove(evt as IPointerEvent) : null;\r\n            this._processPointerMove(pickResult, evt as IPointerEvent);\r\n        };\r\n\r\n        this._onPointerDown = (evt: IPointerEvent) => {\r\n            const freeIndex = this._activePointerIds.indexOf(-1);\r\n            if (freeIndex === -1) {\r\n                this._activePointerIds.push(evt.pointerId);\r\n            } else {\r\n                this._activePointerIds[freeIndex] = evt.pointerId;\r\n            }\r\n            this._activePointerIdsCount++;\r\n            this._pickedDownMesh = null;\r\n            this._meshPickProceed = false;\r\n\r\n            // If ExclusiveDoubleClickMode is true, we need to resolve any pending delayed clicks\r\n            if (InputManager.ExclusiveDoubleClickMode) {\r\n                for (let i = 0; i < this._delayedClicks.length; i++) {\r\n                    if (this._delayedClicks[i]) {\r\n                        // If the button that was pressed is the same as the one that was released,\r\n                        // just clear the timer.  This will be resolved in the up event.\r\n                        if (evt.button === i) {\r\n                            clearTimeout(this._delayedClicks[i]?.timeoutId);\r\n                        } else {\r\n                            // Otherwise, we need to resolve the click\r\n                            const clickInfo = this._delayedClicks[i]!.clickInfo;\r\n                            this._doubleClickOccured = false;\r\n                            clickInfo.singleClick = true;\r\n                            clickInfo.ignore = false;\r\n\r\n                            const prevEvt = this._delayedClicks[i]!.evt;\r\n                            const type = PointerEventTypes.POINTERTAP;\r\n                            const pi = new PointerInfo(type, prevEvt, this._currentPickResult);\r\n                            if (scene.onPointerObservable.hasObservers() && scene.onPointerObservable.hasSpecificMask(type)) {\r\n                                scene.onPointerObservable.notifyObservers(pi, type);\r\n                            }\r\n\r\n                            // Clear the delayed click\r\n                            this._delayedClicks[i] = null;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this._updatePointerPosition(evt);\r\n\r\n            if (this._swipeButtonPressed === -1) {\r\n                this._swipeButtonPressed = evt.button;\r\n            }\r\n\r\n            if (scene.preventDefaultOnPointerDown && elementToAttachTo) {\r\n                evt.preventDefault();\r\n                elementToAttachTo.focus();\r\n            }\r\n\r\n            this._startingPointerPosition.x = this._pointerX;\r\n            this._startingPointerPosition.y = this._pointerY;\r\n            this._startingPointerTime = Date.now();\r\n\r\n            // PreObservable support\r\n            if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERDOWN)) {\r\n                return;\r\n            }\r\n\r\n            if (!scene.cameraToUseForPointers && !scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            this._pointerCaptures[evt.pointerId] = true;\r\n\r\n            if (!scene.pointerDownPredicate) {\r\n                scene.pointerDownPredicate = (mesh: AbstractMesh): boolean => {\r\n                    return (\r\n                        mesh.isPickable &&\r\n                        mesh.isVisible &&\r\n                        mesh.isReady() &&\r\n                        mesh.isEnabled() &&\r\n                        (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0)\r\n                    );\r\n                };\r\n            }\r\n\r\n            // Meshes\r\n            this._pickedDownMesh = null;\r\n            let pickResult;\r\n            if (scene.skipPointerDownPicking || (scene._registeredActions === 0 && !this._checkForPicking() && !scene.onPointerDown)) {\r\n                pickResult = new PickingInfo();\r\n            } else {\r\n                pickResult = scene.pick(\r\n                    this._unTranslatedPointerX,\r\n                    this._unTranslatedPointerY,\r\n                    scene.pointerDownPredicate,\r\n                    scene.pointerDownFastCheck,\r\n                    scene.cameraToUseForPointers,\r\n                    scene.pointerDownTrianglePredicate\r\n                );\r\n            }\r\n\r\n            this._processPointerDown(pickResult, evt);\r\n        };\r\n\r\n        this._onPointerUp = (evt: IPointerEvent) => {\r\n            const pointerIdIndex = this._activePointerIds.indexOf(evt.pointerId);\r\n            if (pointerIdIndex === -1) {\r\n                // We are attaching the pointer up to windows because of a bug in FF\r\n                // If this pointerId is not paired with an _onPointerDown call, ignore it\r\n                return;\r\n            }\r\n\r\n            this._activePointerIds[pointerIdIndex] = -1;\r\n            this._activePointerIdsCount--;\r\n            this._pickedUpMesh = null;\r\n            this._meshPickProceed = false;\r\n\r\n            this._updatePointerPosition(evt);\r\n\r\n            if (scene.preventDefaultOnPointerUp && elementToAttachTo) {\r\n                evt.preventDefault();\r\n                elementToAttachTo.focus();\r\n            }\r\n\r\n            this._initClickEvent(scene.onPrePointerObservable, scene.onPointerObservable, evt, (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => {\r\n                // PreObservable support\r\n                if (scene.onPrePointerObservable.hasObservers()) {\r\n                    this._skipPointerTap = false;\r\n                    if (!clickInfo.ignore) {\r\n                        if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERUP)) {\r\n                            // If we're skipping the next observable, we need to reset the swipe state before returning\r\n                            if (this._swipeButtonPressed === evt.button) {\r\n                                this._isSwiping = false;\r\n                                this._swipeButtonPressed = -1;\r\n                            }\r\n\r\n                            // If we're going to skip the POINTERUP, we need to reset the pointer capture\r\n                            if (evt.buttons === 0) {\r\n                                this._pointerCaptures[evt.pointerId] = false;\r\n                            }\r\n\r\n                            return;\r\n                        }\r\n                        if (!clickInfo.hasSwiped) {\r\n                            if (clickInfo.singleClick && scene.onPrePointerObservable.hasSpecificMask(PointerEventTypes.POINTERTAP)) {\r\n                                if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERTAP)) {\r\n                                    this._skipPointerTap = true;\r\n                                }\r\n                            }\r\n                            if (clickInfo.doubleClick && scene.onPrePointerObservable.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP)) {\r\n                                if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERDOUBLETAP)) {\r\n                                    this._skipPointerTap = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // There should be a pointer captured at this point so if there isn't we should reset and return\r\n                if (!this._pointerCaptures[evt.pointerId]) {\r\n                    if (this._swipeButtonPressed === evt.button) {\r\n                        this._isSwiping = false;\r\n                        this._swipeButtonPressed = -1;\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                // Only release capture if all buttons are released\r\n                if (evt.buttons === 0) {\r\n                    this._pointerCaptures[evt.pointerId] = false;\r\n                }\r\n                if (!scene.cameraToUseForPointers && !scene.activeCamera) {\r\n                    return;\r\n                }\r\n\r\n                if (!scene.pointerUpPredicate) {\r\n                    scene.pointerUpPredicate = (mesh: AbstractMesh): boolean => {\r\n                        return (\r\n                            mesh.isPickable &&\r\n                            mesh.isVisible &&\r\n                            mesh.isReady() &&\r\n                            mesh.isEnabled() &&\r\n                            (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0)\r\n                        );\r\n                    };\r\n                }\r\n\r\n                // Meshes\r\n                if (!this._meshPickProceed && ((AbstractActionManager && AbstractActionManager.HasTriggers) || this._checkForPicking() || scene.onPointerUp)) {\r\n                    this._initActionManager(null, clickInfo);\r\n                }\r\n                if (!pickResult) {\r\n                    pickResult = this._currentPickResult;\r\n                }\r\n\r\n                this._processPointerUp(pickResult, evt, clickInfo);\r\n\r\n                this._previousPickResult = this._currentPickResult;\r\n\r\n                if (this._swipeButtonPressed === evt.button) {\r\n                    this._isSwiping = false;\r\n                    this._swipeButtonPressed = -1;\r\n                }\r\n            });\r\n        };\r\n\r\n        this._onKeyDown = (evt: IKeyboardEvent) => {\r\n            const type = KeyboardEventTypes.KEYDOWN;\r\n            if (scene.onPreKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfoPre(type, evt);\r\n                scene.onPreKeyboardObservable.notifyObservers(pi, type);\r\n                if (pi.skipOnKeyboardObservable) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (scene.onKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfo(type, evt);\r\n                scene.onKeyboardObservable.notifyObservers(pi, type);\r\n            }\r\n\r\n            if (scene.actionManager) {\r\n                scene.actionManager.processTrigger(Constants.ACTION_OnKeyDownTrigger, ActionEvent.CreateNewFromScene(scene, evt));\r\n            }\r\n        };\r\n\r\n        this._onKeyUp = (evt: IKeyboardEvent) => {\r\n            const type = KeyboardEventTypes.KEYUP;\r\n            if (scene.onPreKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfoPre(type, evt);\r\n                scene.onPreKeyboardObservable.notifyObservers(pi, type);\r\n                if (pi.skipOnKeyboardObservable) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (scene.onKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfo(type, evt);\r\n                scene.onKeyboardObservable.notifyObservers(pi, type);\r\n            }\r\n\r\n            if (scene.actionManager) {\r\n                scene.actionManager.processTrigger(Constants.ACTION_OnKeyUpTrigger, ActionEvent.CreateNewFromScene(scene, evt));\r\n            }\r\n        };\r\n\r\n        // If a device connects that we can handle, wire up the observable\r\n        this._deviceSourceManager.onDeviceConnectedObservable.add((deviceSource) => {\r\n            if (deviceSource.deviceType === DeviceType.Mouse) {\r\n                deviceSource.onInputChangedObservable.add((eventData) => {\r\n                    this._originMouseEvent = eventData;\r\n                    if (\r\n                        eventData.inputIndex === PointerInput.LeftClick ||\r\n                        eventData.inputIndex === PointerInput.MiddleClick ||\r\n                        eventData.inputIndex === PointerInput.RightClick ||\r\n                        eventData.inputIndex === PointerInput.BrowserBack ||\r\n                        eventData.inputIndex === PointerInput.BrowserForward\r\n                    ) {\r\n                        if (attachDown && deviceSource.getInput(eventData.inputIndex) === 1) {\r\n                            this._onPointerDown(eventData);\r\n                        } else if (attachUp && deviceSource.getInput(eventData.inputIndex) === 0) {\r\n                            this._onPointerUp(eventData);\r\n                        }\r\n                    } else if (attachMove) {\r\n                        if (eventData.inputIndex === PointerInput.Move) {\r\n                            this._onPointerMove(eventData);\r\n                        } else if (\r\n                            eventData.inputIndex === PointerInput.MouseWheelX ||\r\n                            eventData.inputIndex === PointerInput.MouseWheelY ||\r\n                            eventData.inputIndex === PointerInput.MouseWheelZ\r\n                        ) {\r\n                            this._onPointerMove(eventData);\r\n                        }\r\n                    }\r\n                });\r\n            } else if (deviceSource.deviceType === DeviceType.Touch) {\r\n                deviceSource.onInputChangedObservable.add((eventData) => {\r\n                    if (eventData.inputIndex === PointerInput.LeftClick) {\r\n                        if (attachDown && deviceSource.getInput(eventData.inputIndex) === 1) {\r\n                            this._onPointerDown(eventData);\r\n                            if (this._activePointerIdsCount > 1) {\r\n                                this._isMultiTouchGesture = true;\r\n                            }\r\n                        } else if (attachUp && deviceSource.getInput(eventData.inputIndex) === 0) {\r\n                            this._onPointerUp(eventData);\r\n                            if (this._activePointerIdsCount === 0) {\r\n                                this._isMultiTouchGesture = false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (attachMove && eventData.inputIndex === PointerInput.Move) {\r\n                        this._onPointerMove(eventData);\r\n                    }\r\n                });\r\n            } else if (deviceSource.deviceType === DeviceType.Keyboard) {\r\n                deviceSource.onInputChangedObservable.add((eventData) => {\r\n                    if (eventData.type === \"keydown\") {\r\n                        this._onKeyDown(eventData);\r\n                    } else if (eventData.type === \"keyup\") {\r\n                        this._onKeyUp(eventData);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        this._alreadyAttached = true;\r\n    }\r\n\r\n    /**\r\n     * Detaches all event handlers\r\n     */\r\n    public detachControl() {\r\n        if (this._alreadyAttached) {\r\n            this._deviceSourceManager!.dispose();\r\n            this._deviceSourceManager = null;\r\n\r\n            // Cursor\r\n            if (this._alreadyAttachedTo && !this._scene.doNotHandleCursors) {\r\n                this._alreadyAttachedTo.style.cursor = this._scene.defaultCursor;\r\n            }\r\n\r\n            this._alreadyAttached = false;\r\n            this._alreadyAttachedTo = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the value of meshUnderPointer for a given pointerId\r\n     * @param mesh - defines the mesh to use\r\n     * @param pointerId - optional pointer id when using more than one pointer. Defaults to 0\r\n     * @param pickResult - optional pickingInfo data used to find mesh\r\n     * @param evt - optional pointer event\r\n     */\r\n    public setPointerOverMesh(mesh: Nullable<AbstractMesh>, pointerId: number = 0, pickResult?: Nullable<PickingInfo>, evt?: IPointerEvent): void {\r\n        if (this._meshUnderPointerId[pointerId] === mesh && (!mesh || !mesh._internalAbstractMeshDataInfo._pointerOverDisableMeshTesting)) {\r\n            return;\r\n        }\r\n\r\n        const underPointerMesh = this._meshUnderPointerId[pointerId];\r\n\r\n        let actionManager: Nullable<AbstractActionManager>;\r\n        if (underPointerMesh) {\r\n            actionManager = underPointerMesh._getActionManagerForTrigger(Constants.ACTION_OnPointerOutTrigger);\r\n            if (actionManager) {\r\n                actionManager.processTrigger(Constants.ACTION_OnPointerOutTrigger, new ActionEvent(underPointerMesh, this._pointerX, this._pointerY, mesh, evt, { pointerId }));\r\n            }\r\n        }\r\n\r\n        if (mesh) {\r\n            this._meshUnderPointerId[pointerId] = mesh;\r\n            this._pointerOverMesh = mesh;\r\n\r\n            actionManager = mesh._getActionManagerForTrigger(Constants.ACTION_OnPointerOverTrigger);\r\n            if (actionManager) {\r\n                actionManager.processTrigger(Constants.ACTION_OnPointerOverTrigger, new ActionEvent(mesh, this._pointerX, this._pointerY, mesh, evt, { pointerId, pickResult }));\r\n            }\r\n        } else {\r\n            delete this._meshUnderPointerId[pointerId];\r\n            this._pointerOverMesh = null;\r\n        }\r\n        // if we reached this point, meshUnderPointerId has been updated. We need to notify observers that are registered.\r\n        if (this._scene.onMeshUnderPointerUpdatedObservable.hasObservers()) {\r\n            this._scene.onMeshUnderPointerUpdatedObservable.notifyObservers({\r\n                mesh,\r\n                pointerId,\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh under the pointer\r\n     * @returns a Mesh or null if no mesh is under the pointer\r\n     */\r\n    public getPointerOverMesh(): Nullable<AbstractMesh> {\r\n        return this.meshUnderPointer;\r\n    }\r\n\r\n    /**\r\n     * @param mesh - Mesh to invalidate\r\n     * @internal\r\n     */\r\n    public _invalidateMesh(mesh: AbstractMesh) {\r\n        if (this._pointerOverMesh === mesh) {\r\n            this._pointerOverMesh = null;\r\n        }\r\n        if (this._pickedDownMesh === mesh) {\r\n            this._pickedDownMesh = null;\r\n        }\r\n        if (this._pickedUpMesh === mesh) {\r\n            this._pickedUpMesh = null;\r\n        }\r\n        for (const pointerId in this._meshUnderPointerId) {\r\n            if (this._meshUnderPointerId[pointerId] === mesh) {\r\n                delete this._meshUnderPointerId[pointerId];\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * Class used to store configuration data associated with pointer picking\r\n */\r\nexport class PointerPickingConfiguration {\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\r\n     */\r\n    public pointerDownPredicate: (Mesh: AbstractMesh) => boolean;\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\r\n     */\r\n    public pointerUpPredicate: (Mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\r\n     */\r\n    public pointerMovePredicate: (Mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\r\n     */\r\n    public pointerDownFastCheck = false;\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\r\n     */\r\n    public pointerUpFastCheck = false;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\r\n     */\r\n    public pointerMoveFastCheck = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\r\n     */\r\n    public skipPointerMovePicking = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\r\n     */\r\n    public skipPointerDownPicking = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer up event occurs.  Off by default.\r\n     */\r\n    public skipPointerUpPicking = false;\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable } from \"./types\";\r\nimport { Tools } from \"./Misc/tools\";\r\nimport type { IAnimatable } from \"./Animations/animatable.interface\";\r\nimport { PrecisionDate } from \"./Misc/precisionDate\";\r\nimport type { Observer } from \"./Misc/observable\";\r\nimport { Observable } from \"./Misc/observable\";\r\nimport type { ISmartArrayLike } from \"./Misc/smartArray\";\r\nimport { SmartArrayNoDuplicate, SmartArray } from \"./Misc/smartArray\";\r\nimport { StringDictionary } from \"./Misc/stringDictionary\";\r\nimport { Tags } from \"./Misc/tags\";\r\nimport type { Vector2, Vector4 } from \"./Maths/math.vector\";\r\nimport { Vector3, Matrix, TmpVectors } from \"./Maths/math.vector\";\r\nimport type { IParticleSystem } from \"./Particles/IParticleSystem\";\r\nimport { ImageProcessingConfiguration } from \"./Materials/imageProcessingConfiguration\";\r\nimport { UniformBuffer } from \"./Materials/uniformBuffer\";\r\nimport { PickingInfo } from \"./Collisions/pickingInfo\";\r\nimport type { ICollisionCoordinator } from \"./Collisions/collisionCoordinator\";\r\nimport type { PointerEventTypes, PointerInfoPre, PointerInfo } from \"./Events/pointerEvents\";\r\nimport type { KeyboardInfoPre, KeyboardInfo } from \"./Events/keyboardEvents\";\r\nimport { ActionEvent } from \"./Actions/actionEvent\";\r\nimport { PostProcessManager } from \"./PostProcesses/postProcessManager\";\r\nimport type { IOfflineProvider } from \"./Offline/IOfflineProvider\";\r\nimport type { RenderingGroupInfo, IRenderingManagerAutoClearSetup } from \"./Rendering/renderingManager\";\r\nimport { RenderingManager } from \"./Rendering/renderingManager\";\r\nimport type {\r\n    ISceneComponent,\r\n    ISceneSerializableComponent,\r\n    SimpleStageAction,\r\n    RenderTargetsStageAction,\r\n    RenderTargetStageAction,\r\n    MeshStageAction,\r\n    EvaluateSubMeshStageAction,\r\n    PreActiveMeshStageAction,\r\n    CameraStageAction,\r\n    RenderingGroupStageAction,\r\n    RenderingMeshStageAction,\r\n    PointerMoveStageAction,\r\n    PointerUpDownStageAction,\r\n    CameraStageFrameBufferAction,\r\n} from \"./sceneComponent\";\r\nimport { Stage } from \"./sceneComponent\";\r\nimport { Constants } from \"./Engines/constants\";\r\nimport { IsWindowObjectExist } from \"./Misc/domManagement\";\r\nimport { EngineStore } from \"./Engines/engineStore\";\r\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\r\nimport { _WarnImport } from \"./Misc/devTools\";\r\nimport type { WebRequest } from \"./Misc/webRequest\";\r\nimport { InputManager } from \"./Inputs/scene.inputManager\";\r\nimport { PerfCounter } from \"./Misc/perfCounter\";\r\nimport type { IFileRequest } from \"./Misc/fileRequest\";\r\nimport { Color4, Color3 } from \"./Maths/math.color\";\r\nimport type { Plane } from \"./Maths/math.plane\";\r\nimport { Frustum } from \"./Maths/math.frustum\";\r\nimport { UniqueIdGenerator } from \"./Misc/uniqueIdGenerator\";\r\nimport type { LoadFileError, RequestFileError, ReadFileError } from \"./Misc/fileTools\";\r\nimport { ReadFile, RequestFile, LoadFile } from \"./Misc/fileTools\";\r\nimport type { IClipPlanesHolder } from \"./Misc/interfaces/iClipPlanesHolder\";\r\nimport type { IPointerEvent } from \"./Events/deviceInputEvents\";\r\nimport { LightConstants } from \"./Lights/lightConstants\";\r\nimport { _ObserveArray } from \"./Misc/arrayTools\";\r\nimport type { IAction } from \"./Actions/action\";\r\nimport type { AnimationPropertiesOverride } from \"./Animations/animationPropertiesOverride\";\r\nimport type { AnimationGroup } from \"./Animations/animationGroup\";\r\nimport type { Skeleton } from \"./Bones/skeleton\";\r\nimport type { Bone } from \"./Bones/bone\";\r\nimport type { Camera } from \"./Cameras/camera\";\r\nimport type { Collider } from \"./Collisions/collider\";\r\nimport type { Ray, MeshPredicate, TrianglePickingPredicate } from \"./Culling/ray.core\";\r\nimport type { Light } from \"./Lights/light\";\r\nimport type { PerformanceViewerCollector } from \"./Misc/PerformanceViewer/performanceViewerCollector\";\r\nimport type { MorphTarget } from \"./Morph/morphTarget\";\r\nimport type { MorphTargetManager } from \"./Morph/morphTargetManager\";\r\nimport type { PostProcess } from \"./PostProcesses/postProcess\";\r\nimport type { Material } from \"./Materials/material\";\r\nimport type { BaseTexture } from \"./Materials/Textures/baseTexture\";\r\nimport type { Geometry } from \"./Meshes/geometry\";\r\nimport type { TransformNode } from \"./Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport type { MultiMaterial } from \"./Materials/multiMaterial\";\r\nimport type { Effect } from \"./Materials/effect\";\r\nimport type { RenderTargetTexture } from \"./Materials/Textures/renderTargetTexture\";\r\nimport type { Mesh } from \"./Meshes/mesh\";\r\nimport type { SubMesh } from \"./Meshes/subMesh\";\r\nimport type { Node } from \"./node\";\r\nimport type { Animation } from \"./Animations/animation\";\r\nimport type { Animatable } from \"./Animations/animatable.core\";\r\nimport type { Texture } from \"./Materials/Textures/texture\";\r\nimport { PointerPickingConfiguration } from \"./Inputs/pointerPickingConfiguration\";\r\nimport { Logger } from \"./Misc/logger\";\r\nimport type { AbstractEngine } from \"./Engines/abstractEngine\";\r\nimport { RegisterClass } from \"./Misc/typeStore\";\r\nimport type { FrameGraph } from \"./FrameGraph/frameGraph\";\r\nimport type { IAssetContainer } from \"./IAssetContainer\";\r\n\r\nimport type { EffectLayer } from \"./Layers/effectLayer\";\r\nimport type { Sound } from \"./Audio/sound\";\r\nimport type { Layer } from \"./Layers/layer\";\r\nimport type { LensFlareSystem } from \"./LensFlares/lensFlareSystem\";\r\nimport type { ProceduralTexture } from \"./Materials/Textures/Procedurals/proceduralTexture\";\r\n\r\n/**\r\n * Define an interface for all classes that will hold resources\r\n */\r\nexport interface IDisposable {\r\n    /**\r\n     * Releases all held resources\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\n/** Interface defining initialization parameters for Scene class */\r\nexport interface SceneOptions {\r\n    /**\r\n     * Defines that scene should keep up-to-date a map of geometry to enable fast look-up by uniqueId\r\n     * It will improve performance when the number of geometries becomes important.\r\n     */\r\n    useGeometryUniqueIdsMap?: boolean;\r\n\r\n    /**\r\n     * Defines that each material of the scene should keep up-to-date a map of referencing meshes for fast disposing\r\n     * It will improve performance when the number of mesh becomes important, but might consume a bit more memory\r\n     */\r\n    useMaterialMeshMap?: boolean;\r\n\r\n    /**\r\n     * Defines that each mesh of the scene should keep up-to-date a map of referencing cloned meshes for fast disposing\r\n     * It will improve performance when the number of mesh becomes important, but might consume a bit more memory\r\n     */\r\n    useClonedMeshMap?: boolean;\r\n\r\n    /** Defines if the creation of the scene should impact the engine (Eg. UtilityLayer's scene) */\r\n    virtual?: boolean;\r\n}\r\n\r\n/**\r\n * Define how the scene should favor performance over ease of use\r\n */\r\nexport const enum ScenePerformancePriority {\r\n    /** Default mode. No change. Performance will be treated as less important than backward compatibility */\r\n    BackwardCompatible,\r\n    /** Some performance options will be turned on trying to strike a balance between perf and ease of use */\r\n    Intermediate,\r\n    /** Performance will be top priority */\r\n    Aggressive,\r\n}\r\n\r\n/**\r\n * Represents a scene to be rendered by the engine.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene\r\n */\r\nexport class Scene implements IAnimatable, IClipPlanesHolder, IAssetContainer {\r\n    /** The fog is deactivated */\r\n    public static readonly FOGMODE_NONE = Constants.FOGMODE_NONE;\r\n    /** The fog density is following an exponential function */\r\n    public static readonly FOGMODE_EXP = Constants.FOGMODE_EXP;\r\n    /** The fog density is following an exponential function faster than FOGMODE_EXP */\r\n    public static readonly FOGMODE_EXP2 = Constants.FOGMODE_EXP2;\r\n    /** The fog density is following a linear function. */\r\n    public static readonly FOGMODE_LINEAR = Constants.FOGMODE_LINEAR;\r\n\r\n    /**\r\n     * Gets or sets the minimum deltatime when deterministic lock step is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     */\r\n    public static MinDeltaTime = 1.0;\r\n    /**\r\n     * Gets or sets the maximum deltatime when deterministic lock step is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     */\r\n    public static MaxDeltaTime = 1000.0;\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Factory used to create the default material.\r\n     * @param scene The scene to create the material for\r\n     * @returns The default material\r\n     */\r\n    public static DefaultMaterialFactory(scene: Scene): Material {\r\n        throw _WarnImport(\"StandardMaterial\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Factory used to create the a collision coordinator.\r\n     * @returns The collision coordinator\r\n     */\r\n    public static CollisionCoordinatorFactory(): ICollisionCoordinator {\r\n        throw _WarnImport(\"DefaultCollisionCoordinator\");\r\n    }\r\n\r\n    // Members\r\n\r\n    /** @internal */\r\n    public _tempPickingRay: Nullable<Ray>;\r\n\r\n    /** @internal */\r\n    public _cachedRayForTransform: Ray;\r\n\r\n    /** @internal */\r\n    public _pickWithRayInverseMatrix: Matrix;\r\n\r\n    /** @internal */\r\n    public _inputManager = new InputManager(this);\r\n\r\n    /** Define this parameter if you are using multiple cameras and you want to specify which one should be used for pointer position */\r\n    public cameraToUseForPointers: Nullable<Camera> = null;\r\n\r\n    /** @internal */\r\n    public readonly _isScene = true;\r\n\r\n    /** @internal */\r\n    public _blockEntityCollection = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean that indicates if the scene must clear the render buffer before rendering a frame\r\n     */\r\n    public autoClear = true;\r\n    /**\r\n     * Gets or sets a boolean that indicates if the scene must clear the depth and stencil buffers before rendering a frame\r\n     */\r\n    public autoClearDepthAndStencil = true;\r\n\r\n    private _clearColor: Color4 = new Color4(0.2, 0.2, 0.3, 1.0);\r\n\r\n    /**\r\n     * Observable triggered when the performance priority is changed\r\n     */\r\n    public onClearColorChangedObservable = new Observable<Color4>();\r\n\r\n    /**\r\n     * Defines the color used to clear the render buffer (Default is (0.2, 0.2, 0.3, 1.0))\r\n     */\r\n    public get clearColor(): Color4 {\r\n        return this._clearColor;\r\n    }\r\n\r\n    public set clearColor(value: Color4) {\r\n        if (value !== this._clearColor) {\r\n            this._clearColor = value;\r\n            this.onClearColorChangedObservable.notifyObservers(this._clearColor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines the color used to simulate the ambient color (Default is (0, 0, 0))\r\n     */\r\n    public ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * This is use to store the default BRDF lookup for PBR materials in your scene.\r\n     * It should only be one of the following (if not the default embedded one):\r\n     * * For uncorrelated BRDF (pbr.brdf.useEnergyConservation = false and pbr.brdf.useSmithVisibilityHeightCorrelated = false) : https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds\r\n     * * For correlated BRDF (pbr.brdf.useEnergyConservation = false and pbr.brdf.useSmithVisibilityHeightCorrelated = true) : https://assets.babylonjs.com/environments/correlatedBRDF.dds\r\n     * * For correlated multi scattering BRDF (pbr.brdf.useEnergyConservation = true and pbr.brdf.useSmithVisibilityHeightCorrelated = true) : https://assets.babylonjs.com/environments/correlatedMSBRDF.dds\r\n     * The material properties need to be setup according to the type of texture in use.\r\n     */\r\n    public environmentBRDFTexture: BaseTexture;\r\n\r\n    /**\r\n     * Intensity of the environment in all pbr material.\r\n     * This dims or reinforces the IBL lighting overall (reflection and diffuse).\r\n     * As in the majority of the scene they are the same (exception for multi room and so on),\r\n     * this is easier to reference from here than from all the materials.\r\n     */\r\n    public environmentIntensity: number = 1;\r\n\r\n    /** @internal */\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n    /**\r\n     * Default image processing configuration used either in the rendering\r\n     * Forward main pass or through the imageProcessingPostProcess if present.\r\n     * As in the majority of the scene they are the same (exception for multi camera),\r\n     * this is easier to reference from here than from all the materials and post process.\r\n     *\r\n     * No setter as we it is a shared configuration, you can set the values instead.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    private _performancePriority = ScenePerformancePriority.BackwardCompatible;\r\n\r\n    /**\r\n     * Observable triggered when the performance priority is changed\r\n     */\r\n    public onScenePerformancePriorityChangedObservable = new Observable<ScenePerformancePriority>();\r\n    /**\r\n     * Gets or sets a value indicating how to treat performance relatively to ease of use and backward compatibility\r\n     */\r\n    public get performancePriority() {\r\n        return this._performancePriority;\r\n    }\r\n\r\n    public set performancePriority(value) {\r\n        if (value === this._performancePriority) {\r\n            return;\r\n        }\r\n\r\n        this._performancePriority = value;\r\n\r\n        switch (value) {\r\n            case ScenePerformancePriority.BackwardCompatible:\r\n                this.skipFrustumClipping = false;\r\n                this._renderingManager.maintainStateBetweenFrames = false;\r\n                this.skipPointerMovePicking = false;\r\n                this.autoClear = true;\r\n                break;\r\n            case ScenePerformancePriority.Intermediate:\r\n                this.skipFrustumClipping = false;\r\n                this._renderingManager.maintainStateBetweenFrames = false;\r\n                this.skipPointerMovePicking = true;\r\n                this.autoClear = false;\r\n                break;\r\n            case ScenePerformancePriority.Aggressive:\r\n                this.skipFrustumClipping = true;\r\n                this._renderingManager.maintainStateBetweenFrames = true;\r\n                this.skipPointerMovePicking = true;\r\n                this.autoClear = false;\r\n                break;\r\n        }\r\n\r\n        this.onScenePerformancePriorityChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    private _forceWireframe = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if all rendering must be done in wireframe\r\n     */\r\n    public set forceWireframe(value: boolean) {\r\n        if (this._forceWireframe === value) {\r\n            return;\r\n        }\r\n        this._forceWireframe = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n    public get forceWireframe(): boolean {\r\n        return this._forceWireframe;\r\n    }\r\n\r\n    private _skipFrustumClipping = false;\r\n    /**\r\n     * Gets or sets a boolean indicating if we should skip the frustum clipping part of the active meshes selection\r\n     */\r\n    public set skipFrustumClipping(value: boolean) {\r\n        if (this._skipFrustumClipping === value) {\r\n            return;\r\n        }\r\n        this._skipFrustumClipping = value;\r\n    }\r\n    public get skipFrustumClipping(): boolean {\r\n        return this._skipFrustumClipping;\r\n    }\r\n\r\n    private _forcePointsCloud = false;\r\n    /**\r\n     * Gets or sets a boolean indicating if all rendering must be done in point cloud\r\n     */\r\n    public set forcePointsCloud(value: boolean) {\r\n        if (this._forcePointsCloud === value) {\r\n            return;\r\n        }\r\n        this._forcePointsCloud = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n    public get forcePointsCloud(): boolean {\r\n        return this._forcePointsCloud;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 1\r\n     */\r\n    public clipPlane: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 2\r\n     */\r\n    public clipPlane2: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 3\r\n     */\r\n    public clipPlane3: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 4\r\n     */\r\n    public clipPlane4: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 5\r\n     */\r\n    public clipPlane5: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 6\r\n     */\r\n    public clipPlane6: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets the list of root nodes (ie. nodes with no parent)\r\n     */\r\n    public rootNodes: Node[] = [];\r\n\r\n    /** All of the cameras added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n     */\r\n    public cameras: Camera[] = [];\r\n\r\n    /**\r\n     * All of the lights added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     */\r\n    public lights: Light[] = [];\r\n\r\n    /**\r\n     * All of the (abstract) meshes added to this scene\r\n     */\r\n    public meshes: AbstractMesh[] = [];\r\n\r\n    /**\r\n     * The list of skeletons added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\r\n     */\r\n    public skeletons: Skeleton[] = [];\r\n\r\n    /**\r\n     * All of the particle systems added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro\r\n     */\r\n    public particleSystems: IParticleSystem[] = [];\r\n\r\n    /**\r\n     * Gets the current delta time used by animation engine\r\n     */\r\n    deltaTime: number;\r\n\r\n    /**\r\n     * Gets a list of Animations associated with the scene\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    /**\r\n     * All of the animation groups added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/groupAnimations\r\n     */\r\n    public animationGroups: AnimationGroup[] = [];\r\n\r\n    /**\r\n     * All of the multi-materials added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n     */\r\n    public multiMaterials: MultiMaterial[] = [];\r\n\r\n    /**\r\n     * All of the materials added to this scene\r\n     * In the context of a Scene, it is not supposed to be modified manually.\r\n     * Any addition or removal should be done using the addMaterial and removeMaterial Scene methods.\r\n     * Note also that the order of the Material within the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\r\n     */\r\n    public materials: Material[] = [];\r\n\r\n    /**\r\n     * The list of morph target managers added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph\r\n     */\r\n    public morphTargetManagers: MorphTargetManager[] = [];\r\n\r\n    /**\r\n     * The list of geometries used in the scene.\r\n     */\r\n    public geometries: Geometry[] = [];\r\n\r\n    /**\r\n     * All of the transform nodes added to this scene\r\n     * In the context of a Scene, it is not supposed to be modified manually.\r\n     * Any addition or removal should be done using the addTransformNode and removeTransformNode Scene methods.\r\n     * Note also that the order of the TransformNode within the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node\r\n     */\r\n    public transformNodes: TransformNode[] = [];\r\n\r\n    /**\r\n     * ActionManagers available on the scene.\r\n     * @deprecated\r\n     */\r\n    public actionManagers: AbstractActionManager[] = [];\r\n\r\n    /**\r\n     * Textures to keep.\r\n     */\r\n    public textures: BaseTexture[] = [];\r\n\r\n    /** @internal */\r\n    protected _environmentTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Texture used in all pbr material as the reflection texture.\r\n     * As in the majority of the scene they are the same (exception for multi room and so on),\r\n     * this is easier to reference from here than from all the materials.\r\n     */\r\n    public get environmentTexture(): Nullable<BaseTexture> {\r\n        return this._environmentTexture;\r\n    }\r\n    /**\r\n     * Texture used in all pbr material as the reflection texture.\r\n     * As in the majority of the scene they are the same (exception for multi room and so on),\r\n     * this is easier to set here than in all the materials.\r\n     */\r\n    public set environmentTexture(value: Nullable<BaseTexture>) {\r\n        if (this._environmentTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._environmentTexture = value;\r\n        this.onEnvironmentTextureChangedObservable.notifyObservers(value);\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * The list of postprocesses added to the scene\r\n     */\r\n    public postProcesses: PostProcess[] = [];\r\n\r\n    /**\r\n     * The list of effect layers (highlights/glow) added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/highlightLayer\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/glowLayer\r\n     */\r\n    public effectLayers: Array<EffectLayer> = [];\r\n\r\n    /**\r\n     * The list of sounds used in the scene.\r\n     */\r\n    public sounds: Nullable<Array<Sound>> = null;\r\n\r\n    /**\r\n     * The list of layers (background and foreground) of the scene\r\n     */\r\n    public layers: Array<Layer> = [];\r\n\r\n    /**\r\n     * The list of lens flare system added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\r\n     */\r\n    public lensFlareSystems: Array<LensFlareSystem> = [];\r\n\r\n    /**\r\n     * The list of procedural textures added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/proceduralTextures\r\n     */\r\n    public proceduralTextures: Array<ProceduralTexture> = [];\r\n\r\n    /**\r\n     * @returns all meshes, lights, cameras, transformNodes and bones\r\n     */\r\n    public getNodes(): Array<Node> {\r\n        let nodes: Node[] = [];\r\n        nodes = nodes.concat(this.meshes);\r\n        nodes = nodes.concat(this.lights);\r\n        nodes = nodes.concat(this.cameras);\r\n        nodes = nodes.concat(this.transformNodes); // dummies\r\n        this.skeletons.forEach((skeleton) => (nodes = nodes.concat(skeleton.bones)));\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if animations are enabled\r\n     */\r\n    public animationsEnabled = true;\r\n\r\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\r\n\r\n    /**\r\n     * Gets or sets the animation properties override\r\n     */\r\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        return this._animationPropertiesOverride;\r\n    }\r\n\r\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\r\n        this._animationPropertiesOverride = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if a constant deltatime has to be used\r\n     * This is mostly useful for testing purposes when you do not want the animations to scale with the framerate\r\n     */\r\n    public useConstantAnimationDeltaTime = false;\r\n    /**\r\n     * Gets or sets a boolean indicating if the scene must keep the meshUnderPointer property updated\r\n     * Please note that it requires to run a ray cast through the scene on every frame\r\n     */\r\n    public constantlyUpdateMeshUnderPointer = false;\r\n\r\n    /**\r\n     * Defines the HTML cursor to use when hovering over interactive elements\r\n     */\r\n    public hoverCursor = \"pointer\";\r\n    /**\r\n     * Defines the HTML default cursor to use (empty by default)\r\n     */\r\n    public defaultCursor: string = \"\";\r\n    /**\r\n     * Defines whether cursors are handled by the scene.\r\n     */\r\n    public doNotHandleCursors = false;\r\n    /**\r\n     * This is used to call preventDefault() on pointer down\r\n     * in order to block unwanted artifacts like system double clicks\r\n     */\r\n    public preventDefaultOnPointerDown = true;\r\n\r\n    /**\r\n     * This is used to call preventDefault() on pointer up\r\n     * in order to block unwanted artifacts like system double clicks\r\n     */\r\n    public preventDefaultOnPointerUp = true;\r\n\r\n    // Metadata\r\n    /**\r\n     * Gets or sets user defined metadata\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /**\r\n     * For internal use only. Please do not use.\r\n     */\r\n    public reservedDataStore: any = null;\r\n\r\n    /**\r\n     * Gets the name of the plugin used to load this scene (null by default)\r\n     */\r\n    public loadingPluginName: string;\r\n\r\n    /**\r\n     * Use this array to add regular expressions used to disable offline support for specific urls\r\n     */\r\n    public disableOfflineSupportExceptionRules: RegExp[] = [];\r\n\r\n    /**\r\n     * An event triggered when the scene is disposed.\r\n     */\r\n    public onDisposeObservable = new Observable<Scene>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<Scene>> = null;\r\n    /** Sets a function to be executed when this scene is disposed. */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the scene (right after animations and physics)\r\n     */\r\n    public onBeforeRenderObservable = new Observable<Scene>();\r\n\r\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>> = null;\r\n    /** Sets a function to be executed before rendering this scene */\r\n    public set beforeRender(callback: Nullable<() => void>) {\r\n        if (this._onBeforeRenderObserver) {\r\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        }\r\n        if (callback) {\r\n            this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the scene\r\n     */\r\n    public onAfterRenderObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered after rendering the scene for an active camera (When scene.render is called this will be called after each camera)\r\n     * This is triggered for each \"sub\" camera in a Camera Rig unlike onAfterCameraRenderObservable\r\n     */\r\n    public onAfterRenderCameraObservable = new Observable<Camera>();\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<Scene>> = null;\r\n    /** Sets a function to be executed after rendering this scene */\r\n    public set afterRender(callback: Nullable<() => void>) {\r\n        if (this._onAfterRenderObserver) {\r\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        }\r\n\r\n        if (callback) {\r\n            this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * An event triggered before animating the scene\r\n     */\r\n    public onBeforeAnimationsObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered after animations processing\r\n     */\r\n    public onAfterAnimationsObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered before draw calls are ready to be sent\r\n     */\r\n    public onBeforeDrawPhaseObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered after draw calls have been sent\r\n     */\r\n    public onAfterDrawPhaseObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when the scene is ready\r\n     */\r\n    public onReadyObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered before rendering a camera\r\n     */\r\n    public onBeforeCameraRenderObservable = new Observable<Camera>();\r\n\r\n    private _onBeforeCameraRenderObserver: Nullable<Observer<Camera>> = null;\r\n    /** Sets a function to be executed before rendering a camera*/\r\n    public set beforeCameraRender(callback: () => void) {\r\n        if (this._onBeforeCameraRenderObserver) {\r\n            this.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\r\n        }\r\n\r\n        this._onBeforeCameraRenderObserver = this.onBeforeCameraRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering a camera\r\n     * This is triggered for the full rig Camera only unlike onAfterRenderCameraObservable\r\n     */\r\n    public onAfterCameraRenderObservable = new Observable<Camera>();\r\n\r\n    private _onAfterCameraRenderObserver: Nullable<Observer<Camera>> = null;\r\n    /** Sets a function to be executed after rendering a camera*/\r\n    public set afterCameraRender(callback: () => void) {\r\n        if (this._onAfterCameraRenderObserver) {\r\n            this.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\r\n        }\r\n        this._onAfterCameraRenderObserver = this.onAfterCameraRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when active meshes evaluation is about to start\r\n     */\r\n    public onBeforeActiveMeshesEvaluationObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when active meshes evaluation is done\r\n     */\r\n    public onAfterActiveMeshesEvaluationObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when particles rendering is about to start\r\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\r\n     */\r\n    public onBeforeParticlesRenderingObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when particles rendering is done\r\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\r\n     */\r\n    public onAfterParticlesRenderingObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when SceneLoader.Append or SceneLoader.Load or SceneLoader.ImportMesh were successfully executed\r\n     */\r\n    public onDataLoadedObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when a camera is created\r\n     */\r\n    public onNewCameraAddedObservable = new Observable<Camera>();\r\n\r\n    /**\r\n     * An event triggered when a camera is removed\r\n     */\r\n    public onCameraRemovedObservable = new Observable<Camera>();\r\n\r\n    /**\r\n     * An event triggered when a light is created\r\n     */\r\n    public onNewLightAddedObservable = new Observable<Light>();\r\n\r\n    /**\r\n     * An event triggered when a light is removed\r\n     */\r\n    public onLightRemovedObservable = new Observable<Light>();\r\n\r\n    /**\r\n     * An event triggered when a geometry is created\r\n     */\r\n    public onNewGeometryAddedObservable = new Observable<Geometry>();\r\n\r\n    /**\r\n     * An event triggered when a geometry is removed\r\n     */\r\n    public onGeometryRemovedObservable = new Observable<Geometry>();\r\n\r\n    /**\r\n     * An event triggered when a transform node is created\r\n     */\r\n    public onNewTransformNodeAddedObservable = new Observable<TransformNode>();\r\n\r\n    /**\r\n     * An event triggered when a transform node is removed\r\n     */\r\n    public onTransformNodeRemovedObservable = new Observable<TransformNode>();\r\n\r\n    /**\r\n     * An event triggered when a mesh is created\r\n     */\r\n    public onNewMeshAddedObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * An event triggered when a mesh is removed\r\n     */\r\n    public onMeshRemovedObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * An event triggered when a skeleton is created\r\n     */\r\n    public onNewSkeletonAddedObservable = new Observable<Skeleton>();\r\n\r\n    /**\r\n     * An event triggered when a skeleton is removed\r\n     */\r\n    public onSkeletonRemovedObservable = new Observable<Skeleton>();\r\n\r\n    /**\r\n     * An event triggered when a material is created\r\n     */\r\n    public onNewMaterialAddedObservable = new Observable<Material>();\r\n\r\n    /**\r\n     * An event triggered when a multi material is created\r\n     */\r\n    public onNewMultiMaterialAddedObservable = new Observable<MultiMaterial>();\r\n\r\n    /**\r\n     * An event triggered when a material is removed\r\n     */\r\n    public onMaterialRemovedObservable = new Observable<Material>();\r\n\r\n    /**\r\n     * An event triggered when a multi material is removed\r\n     */\r\n    public onMultiMaterialRemovedObservable = new Observable<MultiMaterial>();\r\n\r\n    /**\r\n     * An event triggered when a texture is created\r\n     */\r\n    public onNewTextureAddedObservable = new Observable<BaseTexture>();\r\n\r\n    /**\r\n     * An event triggered when a texture is removed\r\n     */\r\n    public onTextureRemovedObservable = new Observable<BaseTexture>();\r\n\r\n    /**\r\n     * An event triggered when render targets are about to be rendered\r\n     * Can happen multiple times per frame.\r\n     */\r\n    public onBeforeRenderTargetsRenderObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when render targets were rendered.\r\n     * Can happen multiple times per frame.\r\n     */\r\n    public onAfterRenderTargetsRenderObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered before calculating deterministic simulation step\r\n     */\r\n    public onBeforeStepObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered after calculating deterministic simulation step\r\n     */\r\n    public onAfterStepObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when the activeCamera property is updated\r\n     */\r\n    public onActiveCameraChanged = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when the activeCameras property is updated\r\n     */\r\n    public onActiveCamerasChanged = new Observable<Scene>();\r\n\r\n    /**\r\n     * This Observable will be triggered before rendering each renderingGroup of each rendered camera.\r\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\r\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\r\n     */\r\n    public onBeforeRenderingGroupObservable = new Observable<RenderingGroupInfo>();\r\n\r\n    /**\r\n     * This Observable will be triggered after rendering each renderingGroup of each rendered camera.\r\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\r\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\r\n     */\r\n    public onAfterRenderingGroupObservable = new Observable<RenderingGroupInfo>();\r\n\r\n    /**\r\n     * This Observable will when a mesh has been imported into the scene.\r\n     */\r\n    public onMeshImportedObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * This Observable will when an animation file has been imported into the scene.\r\n     */\r\n    public onAnimationFileImportedObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when the environmentTexture is changed.\r\n     */\r\n    public onEnvironmentTextureChangedObservable = new Observable<Nullable<BaseTexture>>();\r\n\r\n    /**\r\n     * An event triggered when the state of mesh under pointer, for a specific pointerId, changes.\r\n     */\r\n    public onMeshUnderPointerUpdatedObservable = new Observable<{ mesh: Nullable<AbstractMesh>; pointerId: number }>();\r\n\r\n    /**\r\n     * Gets or sets a user defined funtion to select LOD from a mesh and a camera.\r\n     * By default this function is undefined and Babylon.js will select LOD based on distance to camera\r\n     */\r\n    public customLODSelector: (mesh: AbstractMesh, camera: Camera) => Nullable<AbstractMesh>;\r\n\r\n    // Animations\r\n\r\n    /** @internal */\r\n    public _registeredForLateAnimationBindings = new SmartArrayNoDuplicate<any>(256);\r\n\r\n    // Pointers\r\n    private _pointerPickingConfiguration = new PointerPickingConfiguration();\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\r\n     */\r\n    public get pointerDownPredicate() {\r\n        return this._pointerPickingConfiguration.pointerDownPredicate;\r\n    }\r\n\r\n    public set pointerDownPredicate(value) {\r\n        this._pointerPickingConfiguration.pointerDownPredicate = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\r\n     */\r\n    public get pointerUpPredicate() {\r\n        return this._pointerPickingConfiguration.pointerUpPredicate;\r\n    }\r\n\r\n    public set pointerUpPredicate(value) {\r\n        this._pointerPickingConfiguration.pointerUpPredicate = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\r\n     */\r\n    public get pointerMovePredicate() {\r\n        return this._pointerPickingConfiguration.pointerMovePredicate;\r\n    }\r\n\r\n    public set pointerMovePredicate(value) {\r\n        this._pointerPickingConfiguration.pointerMovePredicate = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\r\n     */\r\n    public get pointerDownFastCheck() {\r\n        return this._pointerPickingConfiguration.pointerDownFastCheck;\r\n    }\r\n\r\n    public set pointerDownFastCheck(value) {\r\n        this._pointerPickingConfiguration.pointerDownFastCheck = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\r\n     */\r\n    public get pointerUpFastCheck() {\r\n        return this._pointerPickingConfiguration.pointerUpFastCheck;\r\n    }\r\n\r\n    public set pointerUpFastCheck(value) {\r\n        this._pointerPickingConfiguration.pointerUpFastCheck = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\r\n     */\r\n    public get pointerMoveFastCheck() {\r\n        return this._pointerPickingConfiguration.pointerMoveFastCheck;\r\n    }\r\n\r\n    public set pointerMoveFastCheck(value) {\r\n        this._pointerPickingConfiguration.pointerMoveFastCheck = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\r\n     */\r\n    public get skipPointerMovePicking() {\r\n        return this._pointerPickingConfiguration.skipPointerMovePicking;\r\n    }\r\n\r\n    public set skipPointerMovePicking(value) {\r\n        this._pointerPickingConfiguration.skipPointerMovePicking = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\r\n     */\r\n    public get skipPointerDownPicking() {\r\n        return this._pointerPickingConfiguration.skipPointerDownPicking;\r\n    }\r\n\r\n    public set skipPointerDownPicking(value) {\r\n        this._pointerPickingConfiguration.skipPointerDownPicking = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer up event occurs.  Off by default.\r\n     */\r\n    public get skipPointerUpPicking() {\r\n        return this._pointerPickingConfiguration.skipPointerUpPicking;\r\n    }\r\n\r\n    public set skipPointerUpPicking(value) {\r\n        this._pointerPickingConfiguration.skipPointerUpPicking = value;\r\n    }\r\n\r\n    /** Callback called when a pointer move is detected */\r\n    public onPointerMove?: (evt: IPointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) => void;\r\n    /** Callback called when a pointer down is detected  */\r\n    public onPointerDown?: (evt: IPointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) => void;\r\n    /** Callback called when a pointer up is detected  */\r\n    public onPointerUp?: (evt: IPointerEvent, pickInfo: Nullable<PickingInfo>, type: PointerEventTypes) => void;\r\n    /** Callback called when a pointer pick is detected */\r\n    public onPointerPick?: (evt: IPointerEvent, pickInfo: PickingInfo) => void;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate faces for a pointer move event\r\n     */\r\n    public pointerMoveTrianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) => boolean) | undefined;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate faces for a pointer down event\r\n     */\r\n    public pointerDownTrianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) => boolean) | undefined;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate faces for a pointer up event\r\n     */\r\n    public pointerUpTrianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) => boolean) | undefined;\r\n\r\n    /**\r\n     * This observable event is triggered when any ponter event is triggered. It is registered during Scene.attachControl() and it is called BEFORE the 3D engine process anything (mesh/sprite picking for instance).\r\n     * You have the possibility to skip the process and the call to onPointerObservable by setting PointerInfoPre.skipOnPointerObservable to true\r\n     */\r\n    public onPrePointerObservable = new Observable<PointerInfoPre>();\r\n\r\n    /**\r\n     * Observable event triggered each time an input event is received from the rendering canvas\r\n     */\r\n    public onPointerObservable = new Observable<PointerInfo>();\r\n\r\n    /**\r\n     * Gets the pointer coordinates without any translation (ie. straight out of the pointer event)\r\n     */\r\n    public get unTranslatedPointer(): Vector2 {\r\n        return this._inputManager.unTranslatedPointer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance in pixel that you have to move to prevent some events. Default is 10 pixels\r\n     */\r\n    public static get DragMovementThreshold() {\r\n        return InputManager.DragMovementThreshold;\r\n    }\r\n\r\n    public static set DragMovementThreshold(value: number) {\r\n        InputManager.DragMovementThreshold = value;\r\n    }\r\n\r\n    /**\r\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 500 ms\r\n     */\r\n    public static get LongPressDelay() {\r\n        return InputManager.LongPressDelay;\r\n    }\r\n\r\n    public static set LongPressDelay(value: number) {\r\n        InputManager.LongPressDelay = value;\r\n    }\r\n\r\n    /**\r\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 300 ms\r\n     */\r\n    public static get DoubleClickDelay() {\r\n        return InputManager.DoubleClickDelay;\r\n    }\r\n\r\n    public static set DoubleClickDelay(value: number) {\r\n        InputManager.DoubleClickDelay = value;\r\n    }\r\n\r\n    /** If you need to check double click without raising a single click at first click, enable this flag */\r\n    public static get ExclusiveDoubleClickMode() {\r\n        return InputManager.ExclusiveDoubleClickMode;\r\n    }\r\n\r\n    public static set ExclusiveDoubleClickMode(value: boolean) {\r\n        InputManager.ExclusiveDoubleClickMode = value;\r\n    }\r\n\r\n    /**\r\n     * Bind the current view position to an effect.\r\n     * @param effect The effect to be bound\r\n     * @param variableName name of the shader variable that will hold the eye position\r\n     * @param isVector3 true to indicates that variableName is a Vector3 and not a Vector4\r\n     * @returns the computed eye position\r\n     */\r\n    public bindEyePosition(effect: Nullable<Effect>, variableName = \"vEyePosition\", isVector3 = false): Vector4 {\r\n        const eyePosition = this._forcedViewPosition\r\n            ? this._forcedViewPosition\r\n            : this._mirroredCameraPosition\r\n              ? this._mirroredCameraPosition\r\n              : (this.activeCamera?.globalPosition ?? Vector3.ZeroReadOnly);\r\n\r\n        const invertNormal = this.useRightHandedSystem === (this._mirroredCameraPosition != null);\r\n\r\n        TmpVectors.Vector4[0].set(eyePosition.x, eyePosition.y, eyePosition.z, invertNormal ? -1 : 1);\r\n\r\n        if (effect) {\r\n            if (isVector3) {\r\n                effect.setFloat3(variableName, TmpVectors.Vector4[0].x, TmpVectors.Vector4[0].y, TmpVectors.Vector4[0].z);\r\n            } else {\r\n                effect.setVector4(variableName, TmpVectors.Vector4[0]);\r\n            }\r\n        }\r\n\r\n        return TmpVectors.Vector4[0];\r\n    }\r\n\r\n    /**\r\n     * Update the scene ubo before it can be used in rendering processing\r\n     * @returns the scene UniformBuffer\r\n     */\r\n    public finalizeSceneUbo(): UniformBuffer {\r\n        const ubo = this.getSceneUniformBuffer();\r\n        const eyePosition = this.bindEyePosition(null);\r\n        ubo.updateFloat4(\"vEyePosition\", eyePosition.x, eyePosition.y, eyePosition.z, eyePosition.w);\r\n\r\n        ubo.update();\r\n\r\n        return ubo;\r\n    }\r\n\r\n    // Mirror\r\n    /** @internal */\r\n    public _mirroredCameraPosition: Nullable<Vector3>;\r\n\r\n    // Keyboard\r\n\r\n    /**\r\n     * This observable event is triggered when any keyboard event si raised and registered during Scene.attachControl()\r\n     * You have the possibility to skip the process and the call to onKeyboardObservable by setting KeyboardInfoPre.skipOnPointerObservable to true\r\n     */\r\n    public onPreKeyboardObservable = new Observable<KeyboardInfoPre>();\r\n\r\n    /**\r\n     * Observable event triggered each time an keyboard event is received from the hosting window\r\n     */\r\n    public onKeyboardObservable = new Observable<KeyboardInfo>();\r\n\r\n    // Coordinates system\r\n\r\n    private _useRightHandedSystem = false;\r\n    /**\r\n     * Gets or sets a boolean indicating if the scene must use right-handed coordinates system\r\n     */\r\n    public set useRightHandedSystem(value: boolean) {\r\n        if (this._useRightHandedSystem === value) {\r\n            return;\r\n        }\r\n        this._useRightHandedSystem = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n    public get useRightHandedSystem(): boolean {\r\n        return this._useRightHandedSystem;\r\n    }\r\n\r\n    // Deterministic lockstep\r\n    private _timeAccumulator: number = 0;\r\n    private _currentStepId: number = 0;\r\n    private _currentInternalStep: number = 0;\r\n\r\n    /**\r\n     * Sets the step Id used by deterministic lock step\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @param newStepId defines the step Id\r\n     */\r\n    public setStepId(newStepId: number): void {\r\n        this._currentStepId = newStepId;\r\n    }\r\n\r\n    /**\r\n     * Gets the step Id used by deterministic lock step\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @returns the step Id\r\n     */\r\n    public getStepId(): number {\r\n        return this._currentStepId;\r\n    }\r\n\r\n    /**\r\n     * Gets the internal step used by deterministic lock step\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @returns the internal step\r\n     */\r\n    public getInternalStep(): number {\r\n        return this._currentInternalStep;\r\n    }\r\n\r\n    // Fog\r\n\r\n    private _fogEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if fog is enabled on this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * (Default is true)\r\n     */\r\n    public set fogEnabled(value: boolean) {\r\n        if (this._fogEnabled === value) {\r\n            return;\r\n        }\r\n        this._fogEnabled = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n    public get fogEnabled(): boolean {\r\n        return this._fogEnabled;\r\n    }\r\n\r\n    private _fogMode = Scene.FOGMODE_NONE;\r\n    /**\r\n     * Gets or sets the fog mode to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * | mode | value |\r\n     * | --- | --- |\r\n     * | FOGMODE_NONE | 0 |\r\n     * | FOGMODE_EXP | 1 |\r\n     * | FOGMODE_EXP2 | 2 |\r\n     * | FOGMODE_LINEAR | 3 |\r\n     */\r\n    public set fogMode(value: number) {\r\n        if (this._fogMode === value) {\r\n            return;\r\n        }\r\n        this._fogMode = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n    public get fogMode(): number {\r\n        return this._fogMode;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the fog color to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * (Default is Color3(0.2, 0.2, 0.3))\r\n     */\r\n    public fogColor = new Color3(0.2, 0.2, 0.3);\r\n    /**\r\n     * Gets or sets the fog density to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * (Default is 0.1)\r\n     */\r\n    public fogDensity = 0.1;\r\n    /**\r\n     * Gets or sets the fog start distance to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * (Default is 0)\r\n     */\r\n    public fogStart = 0;\r\n    /**\r\n     * Gets or sets the fog end distance to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * (Default is 1000)\r\n     */\r\n    public fogEnd = 1000.0;\r\n\r\n    /**\r\n     * Flag indicating that the frame buffer binding is handled by another component\r\n     */\r\n    public get prePass(): boolean {\r\n        return !!this.prePassRenderer && this.prePassRenderer.defaultRT.enabled;\r\n    }\r\n\r\n    /**\r\n     * Flag indicating if we need to store previous matrices when rendering\r\n     */\r\n    public needsPreviousWorldMatrices = false;\r\n\r\n    // Lights\r\n    private _shadowsEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if shadows are enabled on this scene\r\n     */\r\n    public set shadowsEnabled(value: boolean) {\r\n        if (this._shadowsEnabled === value) {\r\n            return;\r\n        }\r\n        this._shadowsEnabled = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_LightDirtyFlag);\r\n    }\r\n    public get shadowsEnabled(): boolean {\r\n        return this._shadowsEnabled;\r\n    }\r\n\r\n    private _lightsEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if lights are enabled on this scene\r\n     */\r\n    public set lightsEnabled(value: boolean) {\r\n        if (this._lightsEnabled === value) {\r\n            return;\r\n        }\r\n        this._lightsEnabled = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_LightDirtyFlag);\r\n    }\r\n\r\n    public get lightsEnabled(): boolean {\r\n        return this._lightsEnabled;\r\n    }\r\n\r\n    private _activeCameras: Nullable<Camera[]>;\r\n    private _unObserveActiveCameras: Nullable<() => void> = null;\r\n\r\n    /** All of the active cameras added to this scene. */\r\n    public get activeCameras(): Nullable<Camera[]> {\r\n        return this._activeCameras;\r\n    }\r\n\r\n    public set activeCameras(cameras: Nullable<Camera[]>) {\r\n        if (this._unObserveActiveCameras) {\r\n            this._unObserveActiveCameras();\r\n            this._unObserveActiveCameras = null;\r\n        }\r\n\r\n        if (cameras) {\r\n            this._unObserveActiveCameras = _ObserveArray(cameras, () => {\r\n                this.onActiveCamerasChanged.notifyObservers(this);\r\n            });\r\n        }\r\n\r\n        this._activeCameras = cameras;\r\n    }\r\n\r\n    /** @internal */\r\n    public _activeCamera: Nullable<Camera>;\r\n    /** Gets or sets the current active camera */\r\n    public get activeCamera(): Nullable<Camera> {\r\n        return this._activeCamera;\r\n    }\r\n\r\n    public set activeCamera(value: Nullable<Camera>) {\r\n        if (value === this._activeCamera) {\r\n            return;\r\n        }\r\n\r\n        this._activeCamera = value;\r\n        this.onActiveCameraChanged.notifyObservers(this);\r\n    }\r\n\r\n    private _defaultMaterial: Material;\r\n\r\n    /** The default material used on meshes when no material is affected */\r\n    public get defaultMaterial(): Material {\r\n        if (!this._defaultMaterial) {\r\n            this._defaultMaterial = Scene.DefaultMaterialFactory(this);\r\n        }\r\n\r\n        return this._defaultMaterial;\r\n    }\r\n\r\n    /** The default material used on meshes when no material is affected */\r\n    public set defaultMaterial(value: Material) {\r\n        this._defaultMaterial = value;\r\n    }\r\n\r\n    // Textures\r\n    private _texturesEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if textures are enabled on this scene\r\n     */\r\n    public set texturesEnabled(value: boolean) {\r\n        if (this._texturesEnabled === value) {\r\n            return;\r\n        }\r\n        this._texturesEnabled = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    public get texturesEnabled(): boolean {\r\n        return this._texturesEnabled;\r\n    }\r\n\r\n    private _frameGraph: Nullable<FrameGraph> = null;\r\n    private _currentCustomRenderFunction?: (updateCameras: boolean, ignoreAnimations: boolean) => void;\r\n    /**\r\n     * Gets or sets the frame graph used to render the scene. If set, the scene will use the frame graph to render the scene instead of the default render loop.\r\n     */\r\n    public get frameGraph() {\r\n        return this._frameGraph;\r\n    }\r\n\r\n    public set frameGraph(value: Nullable<FrameGraph>) {\r\n        if (this._frameGraph) {\r\n            this._frameGraph = value;\r\n            if (!value) {\r\n                this.customRenderFunction = this._currentCustomRenderFunction;\r\n            }\r\n            return;\r\n        }\r\n\r\n        this._frameGraph = value;\r\n        if (value) {\r\n            this._currentCustomRenderFunction = this.customRenderFunction;\r\n            this.customRenderFunction = this._renderWithFrameGraph;\r\n        }\r\n    }\r\n\r\n    // Physics\r\n    /**\r\n     * Gets or sets a boolean indicating if physic engines are enabled on this scene\r\n     */\r\n    public physicsEnabled = true;\r\n\r\n    // Particles\r\n    /**\r\n     * Gets or sets a boolean indicating if particles are enabled on this scene\r\n     */\r\n    public particlesEnabled = true;\r\n\r\n    // Sprites\r\n    /**\r\n     * Gets or sets a boolean indicating if sprites are enabled on this scene\r\n     */\r\n    public spritesEnabled = true;\r\n\r\n    // Skeletons\r\n    private _skeletonsEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if skeletons are enabled on this scene\r\n     */\r\n    public set skeletonsEnabled(value: boolean) {\r\n        if (this._skeletonsEnabled === value) {\r\n            return;\r\n        }\r\n        this._skeletonsEnabled = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_AttributesDirtyFlag);\r\n    }\r\n\r\n    public get skeletonsEnabled(): boolean {\r\n        return this._skeletonsEnabled;\r\n    }\r\n\r\n    // Lens flares\r\n    /**\r\n     * Gets or sets a boolean indicating if lens flares are enabled on this scene\r\n     */\r\n    public lensFlaresEnabled = true;\r\n\r\n    // Collisions\r\n    /**\r\n     * Gets or sets a boolean indicating if collisions are enabled on this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public collisionsEnabled = true;\r\n\r\n    private _collisionCoordinator: ICollisionCoordinator;\r\n\r\n    /** @internal */\r\n    public get collisionCoordinator(): ICollisionCoordinator {\r\n        if (!this._collisionCoordinator) {\r\n            this._collisionCoordinator = Scene.CollisionCoordinatorFactory();\r\n            this._collisionCoordinator.init(this);\r\n        }\r\n\r\n        return this._collisionCoordinator;\r\n    }\r\n\r\n    /**\r\n     * Defines the gravity applied to this scene (used only for collisions)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public gravity = new Vector3(0, -9.807, 0);\r\n\r\n    // Postprocesses\r\n    /**\r\n     * Gets or sets a boolean indicating if postprocesses are enabled on this scene\r\n     */\r\n    public postProcessesEnabled = true;\r\n    /**\r\n     * Gets the current postprocess manager\r\n     */\r\n    public postProcessManager: PostProcessManager;\r\n\r\n    // Customs render targets\r\n    /**\r\n     * Gets or sets a boolean indicating if render targets are enabled on this scene\r\n     */\r\n    public renderTargetsEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if next render targets must be dumped as image for debugging purposes\r\n     * We recommend not using it and instead rely on Spector.js: http://spector.babylonjs.com\r\n     */\r\n    public dumpNextRenderTargets = false;\r\n    /**\r\n     * The list of user defined render targets added to the scene\r\n     */\r\n    public customRenderTargets: RenderTargetTexture[] = [];\r\n\r\n    /**\r\n     * Defines if texture loading must be delayed\r\n     * If true, textures will only be loaded when they need to be rendered\r\n     */\r\n    public useDelayedTextureLoading: boolean;\r\n\r\n    /**\r\n     * Gets the list of meshes imported to the scene through SceneLoader\r\n     */\r\n    public importedMeshesFiles: string[] = [];\r\n\r\n    // Probes\r\n    /**\r\n     * Gets or sets a boolean indicating if probes are enabled on this scene\r\n     */\r\n    public probesEnabled = true;\r\n\r\n    // Offline support\r\n    /**\r\n     * Gets or sets the current offline provider to use to store scene data\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimizeCached\r\n     */\r\n    public offlineProvider: IOfflineProvider;\r\n\r\n    /**\r\n     * Gets or sets the action manager associated with the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n     */\r\n    public actionManager: AbstractActionManager;\r\n\r\n    private _meshesForIntersections = new SmartArrayNoDuplicate<AbstractMesh>(256);\r\n\r\n    // Procedural textures\r\n    /**\r\n     * Gets or sets a boolean indicating if procedural textures are enabled on this scene\r\n     */\r\n    public proceduralTexturesEnabled = true;\r\n\r\n    // Private\r\n    private _engine: AbstractEngine;\r\n\r\n    // Performance counters\r\n    private _totalVertices = new PerfCounter();\r\n    /** @internal */\r\n    public _activeIndices = new PerfCounter();\r\n    /** @internal */\r\n    public _activeParticles = new PerfCounter();\r\n    /** @internal */\r\n    public _activeBones = new PerfCounter();\r\n\r\n    private _animationRatio: number;\r\n\r\n    /** @internal */\r\n    public _animationTimeLast: number;\r\n\r\n    /** @internal */\r\n    public _animationTime: number = 0;\r\n\r\n    /**\r\n     * Gets or sets a general scale for animation speed\r\n     * @see https://www.babylonjs-playground.com/#IBU2W7#3\r\n     */\r\n    public animationTimeScale: number = 1;\r\n\r\n    /** @internal */\r\n    public _cachedMaterial: Nullable<Material>;\r\n    /** @internal */\r\n    public _cachedEffect: Nullable<Effect>;\r\n    /** @internal */\r\n    public _cachedVisibility: Nullable<number>;\r\n\r\n    private _renderId = 0;\r\n    private _frameId = 0;\r\n    private _executeWhenReadyTimeoutId: Nullable<ReturnType<typeof setTimeout>> = null;\r\n    private _intermediateRendering = false;\r\n    private _defaultFrameBufferCleared = false;\r\n\r\n    private _viewUpdateFlag = -1;\r\n    private _projectionUpdateFlag = -1;\r\n\r\n    /** @internal */\r\n    public _toBeDisposed = new Array<Nullable<IDisposable>>(256);\r\n    private _activeRequests = new Array<IFileRequest>();\r\n\r\n    /** @internal */\r\n    public _pendingData = new Array();\r\n    private _isDisposed = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that all submeshes of active meshes must be rendered\r\n     * Use this boolean to avoid computing frustum clipping on submeshes (This could help when you are CPU bound)\r\n     */\r\n    public dispatchAllSubMeshesOfActiveMeshes: boolean = false;\r\n    private _activeMeshes = new SmartArray<AbstractMesh>(256);\r\n    private _processedMaterials = new SmartArray<Material>(256);\r\n    private _renderTargets = new SmartArrayNoDuplicate<RenderTargetTexture>(256);\r\n    private _materialsRenderTargets = new SmartArrayNoDuplicate<RenderTargetTexture>(256);\r\n    /** @internal */\r\n    public _activeParticleSystems = new SmartArray<IParticleSystem>(256);\r\n    private _activeSkeletons = new SmartArrayNoDuplicate<Skeleton>(32);\r\n    private _softwareSkinnedMeshes = new SmartArrayNoDuplicate<Mesh>(32);\r\n\r\n    private _renderingManager: RenderingManager;\r\n\r\n    /**\r\n     * Gets the scene's rendering manager\r\n     */\r\n    public get renderingManager(): RenderingManager {\r\n        return this._renderingManager;\r\n    }\r\n\r\n    /** @internal */\r\n    public _activeAnimatables = new Array<Animatable>();\r\n\r\n    private _transformMatrix = Matrix.Zero();\r\n    private _sceneUbo: UniformBuffer;\r\n\r\n    /** @internal */\r\n    public _viewMatrix: Matrix;\r\n    /** @internal */\r\n    public _projectionMatrix: Matrix;\r\n    /** @internal */\r\n    public _forcedViewPosition: Nullable<Vector3>;\r\n\r\n    /** @internal */\r\n    public _frustumPlanes: Plane[];\r\n    /**\r\n     * Gets the list of frustum planes (built from the active camera)\r\n     */\r\n    public get frustumPlanes(): Plane[] {\r\n        return this._frustumPlanes;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if lights must be sorted by priority (off by default)\r\n     * This is useful if there are more lights that the maximum simulteanous authorized\r\n     */\r\n    public requireLightSorting = false;\r\n\r\n    /** @internal */\r\n    public readonly useMaterialMeshMap: boolean;\r\n    /** @internal */\r\n    public readonly useClonedMeshMap: boolean;\r\n\r\n    private _externalData: StringDictionary<Object>;\r\n    private _uid: Nullable<string>;\r\n\r\n    /**\r\n     * @internal\r\n     * Backing store of defined scene components.\r\n     */\r\n    public _components: ISceneComponent[] = [];\r\n\r\n    /**\r\n     * @internal\r\n     * Backing store of defined scene components.\r\n     */\r\n    public _serializableComponents: ISceneSerializableComponent[] = [];\r\n\r\n    /**\r\n     * List of components to register on the next registration step.\r\n     */\r\n    private _transientComponents: ISceneComponent[] = [];\r\n\r\n    /**\r\n     * Registers the transient components if needed.\r\n     */\r\n    private _registerTransientComponents(): void {\r\n        // Register components that have been associated lately to the scene.\r\n        if (this._transientComponents.length > 0) {\r\n            for (const component of this._transientComponents) {\r\n                component.register();\r\n            }\r\n            this._transientComponents.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Add a component to the scene.\r\n     * Note that the ccomponent could be registered on th next frame if this is called after\r\n     * the register component stage.\r\n     * @param component Defines the component to add to the scene\r\n     */\r\n    public _addComponent(component: ISceneComponent) {\r\n        this._components.push(component);\r\n        this._transientComponents.push(component);\r\n\r\n        const serializableComponent = component as any;\r\n        if (serializableComponent.addFromContainer && serializableComponent.serialize) {\r\n            this._serializableComponents.push(serializableComponent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Gets a component from the scene.\r\n     * @param name defines the name of the component to retrieve\r\n     * @returns the component or null if not present\r\n     */\r\n    public _getComponent(name: string): Nullable<ISceneComponent> {\r\n        for (const component of this._components) {\r\n            if (component.name === name) {\r\n                return component;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening before camera updates.\r\n     */\r\n    public _beforeCameraUpdateStage = Stage.Create<SimpleStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening before clear the canvas.\r\n     */\r\n    public _beforeClearStage = Stage.Create<SimpleStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening before clear the canvas.\r\n     */\r\n    public _beforeRenderTargetClearStage = Stage.Create<RenderTargetStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions when collecting render targets for the frame.\r\n     */\r\n    public _gatherRenderTargetsStage = Stage.Create<RenderTargetsStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening for one camera in the frame.\r\n     */\r\n    public _gatherActiveCameraRenderTargetsStage = Stage.Create<RenderTargetsStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening during the per mesh ready checks.\r\n     */\r\n    public _isReadyForMeshStage = Stage.Create<MeshStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening before evaluate active mesh checks.\r\n     */\r\n    public _beforeEvaluateActiveMeshStage = Stage.Create<SimpleStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening during the evaluate sub mesh checks.\r\n     */\r\n    public _evaluateSubMeshStage = Stage.Create<EvaluateSubMeshStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening during the active mesh stage.\r\n     */\r\n    public _preActiveMeshStage = Stage.Create<PreActiveMeshStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening during the per camera render target step.\r\n     */\r\n    public _cameraDrawRenderTargetStage = Stage.Create<CameraStageFrameBufferAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just before the active camera is drawing.\r\n     */\r\n    public _beforeCameraDrawStage = Stage.Create<CameraStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just before a render target is drawing.\r\n     */\r\n    public _beforeRenderTargetDrawStage = Stage.Create<RenderTargetStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just before a rendering group is drawing.\r\n     */\r\n    public _beforeRenderingGroupDrawStage = Stage.Create<RenderingGroupStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just before a mesh is drawing.\r\n     */\r\n    public _beforeRenderingMeshStage = Stage.Create<RenderingMeshStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after a mesh has been drawn.\r\n     */\r\n    public _afterRenderingMeshStage = Stage.Create<RenderingMeshStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after a rendering group has been drawn.\r\n     */\r\n    public _afterRenderingGroupDrawStage = Stage.Create<RenderingGroupStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after the active camera has been drawn.\r\n     */\r\n    public _afterCameraDrawStage = Stage.Create<CameraStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after the post processing\r\n     */\r\n    public _afterCameraPostProcessStage = Stage.Create<CameraStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after a render target has been drawn.\r\n     */\r\n    public _afterRenderTargetDrawStage = Stage.Create<RenderTargetStageAction>();\r\n    /**\r\n     * Defines the actions happening just after the post processing on a render target\r\n     */\r\n    public _afterRenderTargetPostProcessStage = Stage.Create<RenderTargetStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after rendering all cameras and computing intersections.\r\n     */\r\n    public _afterRenderStage = Stage.Create<SimpleStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening when a pointer move event happens.\r\n     */\r\n    public _pointerMoveStage = Stage.Create<PointerMoveStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening when a pointer down event happens.\r\n     */\r\n    public _pointerDownStage = Stage.Create<PointerUpDownStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening when a pointer up event happens.\r\n     */\r\n    public _pointerUpStage = Stage.Create<PointerUpDownStageAction>();\r\n\r\n    /**\r\n     * an optional map from Geometry Id to Geometry index in the 'geometries' array\r\n     */\r\n    private _geometriesByUniqueId: Nullable<{ [uniqueId: string]: number | undefined }> = null;\r\n\r\n    /**\r\n     * Creates a new Scene\r\n     * @param engine defines the engine to use to render this scene\r\n     * @param options defines the scene options\r\n     */\r\n    constructor(engine: AbstractEngine, options?: SceneOptions) {\r\n        this.activeCameras = [] as Camera[];\r\n\r\n        const fullOptions = {\r\n            useGeometryUniqueIdsMap: true,\r\n            useMaterialMeshMap: true,\r\n            useClonedMeshMap: true,\r\n            virtual: false,\r\n            ...options,\r\n        };\r\n\r\n        engine = this._engine = engine || EngineStore.LastCreatedEngine;\r\n        if (fullOptions.virtual) {\r\n            engine._virtualScenes.push(this);\r\n        } else {\r\n            EngineStore._LastCreatedScene = this;\r\n            engine.scenes.push(this);\r\n        }\r\n\r\n        this._uid = null;\r\n\r\n        this._renderingManager = new RenderingManager(this);\r\n\r\n        if (PostProcessManager) {\r\n            this.postProcessManager = new PostProcessManager(this);\r\n        }\r\n\r\n        if (IsWindowObjectExist()) {\r\n            this.attachControl();\r\n        }\r\n\r\n        // Uniform Buffer\r\n        this._createUbo();\r\n\r\n        // Default Image processing definition\r\n        if (ImageProcessingConfiguration) {\r\n            this._imageProcessingConfiguration = new ImageProcessingConfiguration();\r\n        }\r\n\r\n        this.setDefaultCandidateProviders();\r\n\r\n        if (fullOptions.useGeometryUniqueIdsMap) {\r\n            this._geometriesByUniqueId = {};\r\n        }\r\n\r\n        this.useMaterialMeshMap = fullOptions.useMaterialMeshMap;\r\n        this.useClonedMeshMap = fullOptions.useClonedMeshMap;\r\n\r\n        if (!options || !options.virtual) {\r\n            engine.onNewSceneAddedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"Scene\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"Scene\";\r\n    }\r\n\r\n    private _defaultMeshCandidates: ISmartArrayLike<AbstractMesh> = {\r\n        data: [],\r\n        length: 0,\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getDefaultMeshCandidates(): ISmartArrayLike<AbstractMesh> {\r\n        this._defaultMeshCandidates.data = this.meshes;\r\n        this._defaultMeshCandidates.length = this.meshes.length;\r\n        return this._defaultMeshCandidates;\r\n    }\r\n\r\n    private _defaultSubMeshCandidates: ISmartArrayLike<SubMesh> = {\r\n        data: [],\r\n        length: 0,\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getDefaultSubMeshCandidates(mesh: AbstractMesh): ISmartArrayLike<SubMesh> {\r\n        this._defaultSubMeshCandidates.data = mesh.subMeshes;\r\n        this._defaultSubMeshCandidates.length = mesh.subMeshes.length;\r\n        return this._defaultSubMeshCandidates;\r\n    }\r\n\r\n    /**\r\n     * Sets the default candidate providers for the scene.\r\n     * This sets the getActiveMeshCandidates, getActiveSubMeshCandidates, getIntersectingSubMeshCandidates\r\n     * and getCollidingSubMeshCandidates to their default function\r\n     */\r\n    public setDefaultCandidateProviders(): void {\r\n        this.getActiveMeshCandidates = () => this._getDefaultMeshCandidates();\r\n        this.getActiveSubMeshCandidates = (mesh: AbstractMesh) => this._getDefaultSubMeshCandidates(mesh);\r\n        this.getIntersectingSubMeshCandidates = (mesh: AbstractMesh, localRay: Ray) => this._getDefaultSubMeshCandidates(mesh);\r\n        this.getCollidingSubMeshCandidates = (mesh: AbstractMesh, collider: Collider) => this._getDefaultSubMeshCandidates(mesh);\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh that is currently under the pointer\r\n     */\r\n    public get meshUnderPointer(): Nullable<AbstractMesh> {\r\n        return this._inputManager.meshUnderPointer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current on-screen X position of the pointer\r\n     */\r\n    public get pointerX(): number {\r\n        return this._inputManager.pointerX;\r\n    }\r\n\r\n    public set pointerX(value: number) {\r\n        this._inputManager.pointerX = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current on-screen Y position of the pointer\r\n     */\r\n    public get pointerY(): number {\r\n        return this._inputManager.pointerY;\r\n    }\r\n\r\n    public set pointerY(value: number) {\r\n        this._inputManager.pointerY = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the cached material (ie. the latest rendered one)\r\n     * @returns the cached material\r\n     */\r\n    public getCachedMaterial(): Nullable<Material> {\r\n        return this._cachedMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the cached effect (ie. the latest rendered one)\r\n     * @returns the cached effect\r\n     */\r\n    public getCachedEffect(): Nullable<Effect> {\r\n        return this._cachedEffect;\r\n    }\r\n\r\n    /**\r\n     * Gets the cached visibility state (ie. the latest rendered one)\r\n     * @returns the cached visibility state\r\n     */\r\n    public getCachedVisibility(): Nullable<number> {\r\n        return this._cachedVisibility;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current material / effect / visibility must be bind again\r\n     * @param material defines the current material\r\n     * @param effect defines the current effect\r\n     * @param visibility defines the current visibility state\r\n     * @returns true if one parameter is not cached\r\n     */\r\n    public isCachedMaterialInvalid(material: Material, effect: Effect, visibility: number = 1) {\r\n        return this._cachedEffect !== effect || this._cachedMaterial !== material || this._cachedVisibility !== visibility;\r\n    }\r\n\r\n    /**\r\n     * Gets the engine associated with the scene\r\n     * @returns an Engine\r\n     */\r\n    public getEngine(): AbstractEngine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * Gets the total number of vertices rendered per frame\r\n     * @returns the total number of vertices rendered per frame\r\n     */\r\n    public getTotalVertices(): number {\r\n        return this._totalVertices.current;\r\n    }\r\n\r\n    /**\r\n     * Gets the performance counter for total vertices\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\r\n     */\r\n    public get totalVerticesPerfCounter(): PerfCounter {\r\n        return this._totalVertices;\r\n    }\r\n\r\n    /**\r\n     * Gets the total number of active indices rendered per frame (You can deduce the number of rendered triangles by dividing this number by 3)\r\n     * @returns the total number of active indices rendered per frame\r\n     */\r\n    public getActiveIndices(): number {\r\n        return this._activeIndices.current;\r\n    }\r\n\r\n    /**\r\n     * Gets the performance counter for active indices\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\r\n     */\r\n    public get totalActiveIndicesPerfCounter(): PerfCounter {\r\n        return this._activeIndices;\r\n    }\r\n\r\n    /**\r\n     * Gets the total number of active particles rendered per frame\r\n     * @returns the total number of active particles rendered per frame\r\n     */\r\n    public getActiveParticles(): number {\r\n        return this._activeParticles.current;\r\n    }\r\n\r\n    /**\r\n     * Gets the performance counter for active particles\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\r\n     */\r\n    public get activeParticlesPerfCounter(): PerfCounter {\r\n        return this._activeParticles;\r\n    }\r\n\r\n    /**\r\n     * Gets the total number of active bones rendered per frame\r\n     * @returns the total number of active bones rendered per frame\r\n     */\r\n    public getActiveBones(): number {\r\n        return this._activeBones.current;\r\n    }\r\n\r\n    /**\r\n     * Gets the performance counter for active bones\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\r\n     */\r\n    public get activeBonesPerfCounter(): PerfCounter {\r\n        return this._activeBones;\r\n    }\r\n\r\n    /**\r\n     * Gets the array of active meshes\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getActiveMeshes(): SmartArray<AbstractMesh> {\r\n        return this._activeMeshes;\r\n    }\r\n\r\n    /**\r\n     * Gets the animation ratio (which is 1.0 is the scene renders at 60fps and 2 if the scene renders at 30fps, etc.)\r\n     * @returns a number\r\n     */\r\n    public getAnimationRatio(): number {\r\n        return this._animationRatio !== undefined ? this._animationRatio : 1;\r\n    }\r\n\r\n    /**\r\n     * Gets an unique Id for the current render phase\r\n     * @returns a number\r\n     */\r\n    public getRenderId(): number {\r\n        return this._renderId;\r\n    }\r\n\r\n    /**\r\n     * Gets an unique Id for the current frame\r\n     * @returns a number\r\n     */\r\n    public getFrameId(): number {\r\n        return this._frameId;\r\n    }\r\n\r\n    /** Call this function if you want to manually increment the render Id*/\r\n    public incrementRenderId(): void {\r\n        this._renderId++;\r\n    }\r\n\r\n    private _createUbo(): void {\r\n        this.setSceneUniformBuffer(this.createSceneUniformBuffer());\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer move on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     * @returns the current scene\r\n     */\r\n    public simulatePointerMove(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): Scene {\r\n        this._inputManager.simulatePointerMove(pickResult, pointerEventInit);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer down on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     * @returns the current scene\r\n     */\r\n    public simulatePointerDown(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): Scene {\r\n        this._inputManager.simulatePointerDown(pickResult, pointerEventInit);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer up on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     * @param doubleTap indicates that the pointer up event should be considered as part of a double click (false by default)\r\n     * @returns the current scene\r\n     */\r\n    public simulatePointerUp(pickResult: PickingInfo, pointerEventInit?: PointerEventInit, doubleTap?: boolean): Scene {\r\n        this._inputManager.simulatePointerUp(pickResult, pointerEventInit, doubleTap);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\r\n     * @param pointerId defines the pointer id to use in a multi-touch scenario (0 by default)\r\n     * @returns true if the pointer was captured\r\n     */\r\n    public isPointerCaptured(pointerId = 0): boolean {\r\n        return this._inputManager.isPointerCaptured(pointerId);\r\n    }\r\n\r\n    /**\r\n     * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\r\n     * @param attachUp defines if you want to attach events to pointerup\r\n     * @param attachDown defines if you want to attach events to pointerdown\r\n     * @param attachMove defines if you want to attach events to pointermove\r\n     */\r\n    public attachControl(attachUp = true, attachDown = true, attachMove = true): void {\r\n        this._inputManager.attachControl(attachUp, attachDown, attachMove);\r\n    }\r\n\r\n    /** Detaches all event handlers*/\r\n    public detachControl() {\r\n        this._inputManager.detachControl();\r\n    }\r\n\r\n    /**\r\n     * This function will check if the scene can be rendered (textures are loaded, shaders are compiled)\r\n     * Delay loaded resources are not taking in account\r\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: true)\r\n     * @returns true if all required resources are ready\r\n     */\r\n    public isReady(checkRenderTargets = true): boolean {\r\n        if (this._isDisposed) {\r\n            return false;\r\n        }\r\n\r\n        let index: number;\r\n        const engine = this.getEngine();\r\n\r\n        const currentRenderPassId = engine.currentRenderPassId;\r\n\r\n        engine.currentRenderPassId = this.activeCamera?.renderPassId ?? currentRenderPassId;\r\n\r\n        let isReady = true;\r\n\r\n        // Pending data\r\n        if (this._pendingData.length > 0) {\r\n            isReady = false;\r\n        }\r\n\r\n        // Ensures that the pre-pass renderer is enabled if it is to be enabled.\r\n        this.prePassRenderer?.update();\r\n\r\n        // OIT\r\n        if (this.useOrderIndependentTransparency && this.depthPeelingRenderer) {\r\n            isReady &&= this.depthPeelingRenderer.isReady();\r\n        }\r\n\r\n        // Meshes\r\n        if (checkRenderTargets) {\r\n            this._processedMaterials.reset();\r\n            this._materialsRenderTargets.reset();\r\n        }\r\n\r\n        for (index = 0; index < this.meshes.length; index++) {\r\n            const mesh = this.meshes[index];\r\n\r\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\r\n                continue;\r\n            }\r\n\r\n            // Do not stop at the first encountered \"unready\" object as we want to ensure\r\n            // all materials are starting off their compilation in parallel.\r\n            if (!mesh.isReady(true)) {\r\n                isReady = false;\r\n                continue;\r\n            }\r\n\r\n            const hardwareInstancedRendering =\r\n                mesh.hasThinInstances ||\r\n                mesh.getClassName() === \"InstancedMesh\" ||\r\n                mesh.getClassName() === \"InstancedLinesMesh\" ||\r\n                (engine.getCaps().instancedArrays && (<Mesh>mesh).instances.length > 0);\r\n            // Is Ready For Mesh\r\n            for (const step of this._isReadyForMeshStage) {\r\n                if (!step.action(mesh, hardwareInstancedRendering)) {\r\n                    isReady = false;\r\n                }\r\n            }\r\n\r\n            if (!checkRenderTargets) {\r\n                continue;\r\n            }\r\n\r\n            const mat = mesh.material || this.defaultMaterial;\r\n            if (mat) {\r\n                if (mat._storeEffectOnSubMeshes) {\r\n                    for (const subMesh of mesh.subMeshes) {\r\n                        const material = subMesh.getMaterial();\r\n                        if (material && material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\r\n                            if (this._processedMaterials.indexOf(material) === -1) {\r\n                                this._processedMaterials.push(material);\r\n\r\n                                this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures!());\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (mat.hasRenderTargetTextures && mat.getRenderTargetTextures != null) {\r\n                        if (this._processedMaterials.indexOf(mat) === -1) {\r\n                            this._processedMaterials.push(mat);\r\n\r\n                            this._materialsRenderTargets.concatWithNoDuplicate(mat.getRenderTargetTextures!());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Render targets\r\n        if (checkRenderTargets) {\r\n            for (index = 0; index < this._materialsRenderTargets.length; ++index) {\r\n                const rtt = this._materialsRenderTargets.data[index];\r\n                if (!rtt.isReadyForRendering()) {\r\n                    isReady = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Geometries\r\n        for (index = 0; index < this.geometries.length; index++) {\r\n            const geometry = this.geometries[index];\r\n\r\n            if (geometry.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n                isReady = false;\r\n            }\r\n        }\r\n\r\n        // Post-processes\r\n        if (this.activeCameras && this.activeCameras.length > 0) {\r\n            for (const camera of this.activeCameras) {\r\n                if (!camera.isReady(true)) {\r\n                    isReady = false;\r\n                }\r\n            }\r\n        } else if (this.activeCamera) {\r\n            if (!this.activeCamera.isReady(true)) {\r\n                isReady = false;\r\n            }\r\n        }\r\n\r\n        // Particles\r\n        for (const particleSystem of this.particleSystems) {\r\n            if (!particleSystem.isReady()) {\r\n                isReady = false;\r\n            }\r\n        }\r\n\r\n        // Layers\r\n        if (this.layers) {\r\n            for (const layer of this.layers) {\r\n                if (!layer.isReady()) {\r\n                    isReady = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Effects\r\n        if (!engine.areAllEffectsReady()) {\r\n            isReady = false;\r\n        }\r\n\r\n        engine.currentRenderPassId = currentRenderPassId;\r\n\r\n        return isReady;\r\n    }\r\n\r\n    /** Resets all cached information relative to material (including effect and visibility) */\r\n    public resetCachedMaterial(): void {\r\n        this._cachedMaterial = null;\r\n        this._cachedEffect = null;\r\n        this._cachedVisibility = null;\r\n    }\r\n\r\n    /**\r\n     * Registers a function to be called before every frame render\r\n     * @param func defines the function to register\r\n     */\r\n    public registerBeforeRender(func: () => void): void {\r\n        this.onBeforeRenderObservable.add(func);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a function called before every frame render\r\n     * @param func defines the function to unregister\r\n     */\r\n    public unregisterBeforeRender(func: () => void): void {\r\n        this.onBeforeRenderObservable.removeCallback(func);\r\n    }\r\n\r\n    /**\r\n     * Registers a function to be called after every frame render\r\n     * @param func defines the function to register\r\n     */\r\n    public registerAfterRender(func: () => void): void {\r\n        this.onAfterRenderObservable.add(func);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a function called after every frame render\r\n     * @param func defines the function to unregister\r\n     */\r\n    public unregisterAfterRender(func: () => void): void {\r\n        this.onAfterRenderObservable.removeCallback(func);\r\n    }\r\n\r\n    private _executeOnceBeforeRender(func: () => void): void {\r\n        const execFunc = () => {\r\n            func();\r\n            setTimeout(() => {\r\n                this.unregisterBeforeRender(execFunc);\r\n            });\r\n        };\r\n        this.registerBeforeRender(execFunc);\r\n    }\r\n\r\n    /**\r\n     * The provided function will run before render once and will be disposed afterwards.\r\n     * A timeout delay can be provided so that the function will be executed in N ms.\r\n     * The timeout is using the browser's native setTimeout so time percision cannot be guaranteed.\r\n     * @param func The function to be executed.\r\n     * @param timeout optional delay in ms\r\n     */\r\n    public executeOnceBeforeRender(func: () => void, timeout?: number): void {\r\n        if (timeout !== undefined) {\r\n            setTimeout(() => {\r\n                this._executeOnceBeforeRender(func);\r\n            }, timeout);\r\n        } else {\r\n            this._executeOnceBeforeRender(func);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function can help adding any object to the list of data awaited to be ready in order to check for a complete scene loading.\r\n     * @param data defines the object to wait for\r\n     */\r\n    public addPendingData(data: any): void {\r\n        this._pendingData.push(data);\r\n    }\r\n\r\n    /**\r\n     * Remove a pending data from the loading list which has previously been added with addPendingData.\r\n     * @param data defines the object to remove from the pending list\r\n     */\r\n    public removePendingData(data: any): void {\r\n        const wasLoading = this.isLoading;\r\n        const index = this._pendingData.indexOf(data);\r\n\r\n        if (index !== -1) {\r\n            this._pendingData.splice(index, 1);\r\n        }\r\n\r\n        if (wasLoading && !this.isLoading) {\r\n            this.onDataLoadedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items waiting to be loaded\r\n     * @returns the number of items waiting to be loaded\r\n     */\r\n    public getWaitingItemsCount(): number {\r\n        return this._pendingData.length;\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean indicating if the scene is still loading data\r\n     */\r\n    public get isLoading(): boolean {\r\n        return this._pendingData.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Registers a function to be executed when the scene is ready\r\n     * @param func - the function to be executed\r\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\r\n     */\r\n    public executeWhenReady(func: () => void, checkRenderTargets = false): void {\r\n        this.onReadyObservable.addOnce(func);\r\n\r\n        if (this._executeWhenReadyTimeoutId !== null) {\r\n            return;\r\n        }\r\n\r\n        this._checkIsReady(checkRenderTargets);\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves when the scene is ready\r\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\r\n     * @returns A promise that resolves when the scene is ready\r\n     */\r\n    public whenReadyAsync(checkRenderTargets = false): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this.executeWhenReady(() => {\r\n                resolve();\r\n            }, checkRenderTargets);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkIsReady(checkRenderTargets = false) {\r\n        this._registerTransientComponents();\r\n\r\n        if (this.isReady(checkRenderTargets)) {\r\n            this.onReadyObservable.notifyObservers(this);\r\n\r\n            this.onReadyObservable.clear();\r\n            this._executeWhenReadyTimeoutId = null;\r\n            return;\r\n        }\r\n\r\n        if (this._isDisposed) {\r\n            this.onReadyObservable.clear();\r\n            this._executeWhenReadyTimeoutId = null;\r\n            return;\r\n        }\r\n\r\n        this._executeWhenReadyTimeoutId = setTimeout(() => {\r\n            // Ensure materials effects are checked outside render loops\r\n            this.incrementRenderId();\r\n            this._checkIsReady(checkRenderTargets);\r\n        }, 100);\r\n    }\r\n\r\n    /**\r\n     * Gets all animatable attached to the scene\r\n     */\r\n    public get animatables(): Animatable[] {\r\n        return this._activeAnimatables;\r\n    }\r\n\r\n    /**\r\n     * Resets the last animation time frame.\r\n     * Useful to override when animations start running when loading a scene for the first time.\r\n     */\r\n    public resetLastAnimationTimeFrame(): void {\r\n        this._animationTimeLast = PrecisionDate.Now;\r\n    }\r\n\r\n    // Matrix\r\n\r\n    /**\r\n     * Gets the current view matrix\r\n     * @returns a Matrix\r\n     */\r\n    public getViewMatrix(): Matrix {\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the current projection matrix\r\n     * @returns a Matrix\r\n     */\r\n    public getProjectionMatrix(): Matrix {\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the current transform matrix\r\n     * @returns a Matrix made of View * Projection\r\n     */\r\n    public getTransformMatrix(): Matrix {\r\n        return this._transformMatrix;\r\n    }\r\n\r\n    /**\r\n     * Sets the current transform matrix\r\n     * @param viewL defines the View matrix to use\r\n     * @param projectionL defines the Projection matrix to use\r\n     * @param viewR defines the right View matrix to use (if provided)\r\n     * @param projectionR defines the right Projection matrix to use (if provided)\r\n     */\r\n    public setTransformMatrix(viewL: Matrix, projectionL: Matrix, viewR?: Matrix, projectionR?: Matrix): void {\r\n        // clear the multiviewSceneUbo if no viewR and projectionR are defined\r\n        if (!viewR && !projectionR && this._multiviewSceneUbo) {\r\n            this._multiviewSceneUbo.dispose();\r\n            this._multiviewSceneUbo = null;\r\n        }\r\n        if (this._viewUpdateFlag === viewL.updateFlag && this._projectionUpdateFlag === projectionL.updateFlag) {\r\n            return;\r\n        }\r\n\r\n        this._viewUpdateFlag = viewL.updateFlag;\r\n        this._projectionUpdateFlag = projectionL.updateFlag;\r\n        this._viewMatrix = viewL;\r\n        this._projectionMatrix = projectionL;\r\n\r\n        this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\r\n\r\n        // Update frustum\r\n        if (!this._frustumPlanes) {\r\n            this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\r\n        } else {\r\n            Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\r\n        }\r\n\r\n        if (this._multiviewSceneUbo && this._multiviewSceneUbo.useUbo) {\r\n            this._updateMultiviewUbo(viewR, projectionR);\r\n        } else if (this._sceneUbo.useUbo) {\r\n            this._sceneUbo.updateMatrix(\"viewProjection\", this._transformMatrix);\r\n            this._sceneUbo.updateMatrix(\"view\", this._viewMatrix);\r\n            this._sceneUbo.updateMatrix(\"projection\", this._projectionMatrix);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the uniform buffer used to store scene data\r\n     * @returns a UniformBuffer\r\n     */\r\n    public getSceneUniformBuffer(): UniformBuffer {\r\n        return this._multiviewSceneUbo ? this._multiviewSceneUbo : this._sceneUbo;\r\n    }\r\n\r\n    /**\r\n     * Creates a scene UBO\r\n     * @param name name of the uniform buffer (optional, for debugging purpose only)\r\n     * @returns a new ubo\r\n     */\r\n    public createSceneUniformBuffer(name?: string): UniformBuffer {\r\n        const sceneUbo = new UniformBuffer(this._engine, undefined, false, name ?? \"scene\");\r\n        sceneUbo.addUniform(\"viewProjection\", 16);\r\n        sceneUbo.addUniform(\"view\", 16);\r\n        sceneUbo.addUniform(\"projection\", 16);\r\n        sceneUbo.addUniform(\"vEyePosition\", 4);\r\n\r\n        return sceneUbo;\r\n    }\r\n\r\n    /**\r\n     * Sets the scene ubo\r\n     * @param ubo the ubo to set for the scene\r\n     */\r\n    public setSceneUniformBuffer(ubo: UniformBuffer): void {\r\n        this._sceneUbo = ubo;\r\n        this._viewUpdateFlag = -1;\r\n        this._projectionUpdateFlag = -1;\r\n    }\r\n\r\n    /**\r\n     * Gets an unique (relatively to the current scene) Id\r\n     * @returns an unique number for the scene\r\n     */\r\n    public getUniqueId() {\r\n        return UniqueIdGenerator.UniqueId;\r\n    }\r\n\r\n    /**\r\n     * Add a mesh to the list of scene's meshes\r\n     * @param newMesh defines the mesh to add\r\n     * @param recursive if all child meshes should also be added to the scene\r\n     */\r\n    public addMesh(newMesh: AbstractMesh, recursive = false) {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n\r\n        this.meshes.push(newMesh);\r\n\r\n        newMesh._resyncLightSources();\r\n\r\n        if (!newMesh.parent) {\r\n            newMesh._addToSceneRootNodes();\r\n        }\r\n\r\n        Tools.SetImmediate(() => {\r\n            this.onNewMeshAddedObservable.notifyObservers(newMesh);\r\n        });\r\n\r\n        if (recursive) {\r\n            newMesh.getChildMeshes().forEach((m) => {\r\n                this.addMesh(m);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a mesh for the list of scene's meshes\r\n     * @param toRemove defines the mesh to remove\r\n     * @param recursive if all child meshes should also be removed from the scene\r\n     * @returns the index where the mesh was in the mesh list\r\n     */\r\n    public removeMesh(toRemove: AbstractMesh, recursive = false): number {\r\n        const index = this.meshes.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            // Remove from the scene if the mesh found\r\n\r\n            this.meshes.splice(index, 1);\r\n\r\n            if (!toRemove.parent) {\r\n                toRemove._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        this._inputManager._invalidateMesh(toRemove);\r\n\r\n        this.onMeshRemovedObservable.notifyObservers(toRemove);\r\n        if (recursive) {\r\n            toRemove.getChildMeshes().forEach((m) => {\r\n                this.removeMesh(m);\r\n            });\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Add a transform node to the list of scene's transform nodes\r\n     * @param newTransformNode defines the transform node to add\r\n     */\r\n    public addTransformNode(newTransformNode: TransformNode) {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n\r\n        if (newTransformNode.getScene() === this && newTransformNode._indexInSceneTransformNodesArray !== -1) {\r\n            // Already there?\r\n            return;\r\n        }\r\n\r\n        newTransformNode._indexInSceneTransformNodesArray = this.transformNodes.length;\r\n        this.transformNodes.push(newTransformNode);\r\n\r\n        if (!newTransformNode.parent) {\r\n            newTransformNode._addToSceneRootNodes();\r\n        }\r\n\r\n        this.onNewTransformNodeAddedObservable.notifyObservers(newTransformNode);\r\n    }\r\n\r\n    /**\r\n     * Remove a transform node for the list of scene's transform nodes\r\n     * @param toRemove defines the transform node to remove\r\n     * @returns the index where the transform node was in the transform node list\r\n     */\r\n    public removeTransformNode(toRemove: TransformNode): number {\r\n        const index = toRemove._indexInSceneTransformNodesArray;\r\n        if (index !== -1) {\r\n            if (index !== this.transformNodes.length - 1) {\r\n                const lastNode = this.transformNodes[this.transformNodes.length - 1];\r\n                this.transformNodes[index] = lastNode;\r\n                lastNode._indexInSceneTransformNodesArray = index;\r\n            }\r\n\r\n            toRemove._indexInSceneTransformNodesArray = -1;\r\n            this.transformNodes.pop();\r\n            if (!toRemove.parent) {\r\n                toRemove._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        this.onTransformNodeRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a skeleton for the list of scene's skeletons\r\n     * @param toRemove defines the skeleton to remove\r\n     * @returns the index where the skeleton was in the skeleton list\r\n     */\r\n    public removeSkeleton(toRemove: Skeleton): number {\r\n        const index = this.skeletons.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            // Remove from the scene if found\r\n            this.skeletons.splice(index, 1);\r\n            this.onSkeletonRemovedObservable.notifyObservers(toRemove);\r\n\r\n            // Clean active container\r\n            this._executeActiveContainerCleanup(this._activeSkeletons);\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a morph target for the list of scene's morph targets\r\n     * @param toRemove defines the morph target to remove\r\n     * @returns the index where the morph target was in the morph target list\r\n     */\r\n    public removeMorphTargetManager(toRemove: MorphTargetManager): number {\r\n        const index = this.morphTargetManagers.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            // Remove from the scene if found\r\n            this.morphTargetManagers.splice(index, 1);\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a light for the list of scene's lights\r\n     * @param toRemove defines the light to remove\r\n     * @returns the index where the light was in the light list\r\n     */\r\n    public removeLight(toRemove: Light): number {\r\n        const index = this.lights.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            // Remove from meshes\r\n            for (const mesh of this.meshes) {\r\n                mesh._removeLightSource(toRemove, false);\r\n            }\r\n\r\n            // Remove from the scene if mesh found\r\n            this.lights.splice(index, 1);\r\n            this.sortLightsByPriority();\r\n\r\n            if (!toRemove.parent) {\r\n                toRemove._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n        this.onLightRemovedObservable.notifyObservers(toRemove);\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a camera for the list of scene's cameras\r\n     * @param toRemove defines the camera to remove\r\n     * @returns the index where the camera was in the camera list\r\n     */\r\n    public removeCamera(toRemove: Camera): number {\r\n        const index = this.cameras.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            // Remove from the scene if mesh found\r\n            this.cameras.splice(index, 1);\r\n            if (!toRemove.parent) {\r\n                toRemove._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n        // Remove from activeCameras\r\n        if (this.activeCameras) {\r\n            const index2 = this.activeCameras.indexOf(toRemove);\r\n            if (index2 !== -1) {\r\n                // Remove from the scene if mesh found\r\n                this.activeCameras.splice(index2, 1);\r\n            }\r\n        }\r\n        // Reset the activeCamera\r\n        if (this.activeCamera === toRemove) {\r\n            if (this.cameras.length > 0) {\r\n                this.activeCamera = this.cameras[0];\r\n            } else {\r\n                this.activeCamera = null;\r\n            }\r\n        }\r\n        this.onCameraRemovedObservable.notifyObservers(toRemove);\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a particle system for the list of scene's particle systems\r\n     * @param toRemove defines the particle system to remove\r\n     * @returns the index where the particle system was in the particle system list\r\n     */\r\n    public removeParticleSystem(toRemove: IParticleSystem): number {\r\n        const index = this.particleSystems.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.particleSystems.splice(index, 1);\r\n\r\n            // Clean active container\r\n            this._executeActiveContainerCleanup(this._activeParticleSystems);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a animation for the list of scene's animations\r\n     * @param toRemove defines the animation to remove\r\n     * @returns the index where the animation was in the animation list\r\n     */\r\n    public removeAnimation(toRemove: Animation): number {\r\n        const index = this.animations.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.animations.splice(index, 1);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Will stop the animation of the given target\r\n     * @param target - the target\r\n     * @param animationName - the name of the animation to stop (all animations will be stopped if both this and targetMask are empty)\r\n     * @param targetMask - a function that determines if the animation should be stopped based on its target (all animations will be stopped if both this and animationName are empty)\r\n     */\r\n    public stopAnimation(target: any, animationName?: string, targetMask?: (target: any) => boolean): void {\r\n        // Do nothing as code will be provided by animation component\r\n    }\r\n\r\n    /**\r\n     * Removes the given animation group from this scene.\r\n     * @param toRemove The animation group to remove\r\n     * @returns The index of the removed animation group\r\n     */\r\n    public removeAnimationGroup(toRemove: AnimationGroup): number {\r\n        const index = this.animationGroups.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.animationGroups.splice(index, 1);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given multi-material from this scene.\r\n     * @param toRemove The multi-material to remove\r\n     * @returns The index of the removed multi-material\r\n     */\r\n    public removeMultiMaterial(toRemove: MultiMaterial): number {\r\n        const index = this.multiMaterials.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.multiMaterials.splice(index, 1);\r\n        }\r\n\r\n        this.onMultiMaterialRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given material from this scene.\r\n     * @param toRemove The material to remove\r\n     * @returns The index of the removed material\r\n     */\r\n    public removeMaterial(toRemove: Material): number {\r\n        const index = toRemove._indexInSceneMaterialArray;\r\n        if (index !== -1 && index < this.materials.length) {\r\n            if (index !== this.materials.length - 1) {\r\n                const lastMaterial = this.materials[this.materials.length - 1];\r\n                this.materials[index] = lastMaterial;\r\n                lastMaterial._indexInSceneMaterialArray = index;\r\n            }\r\n\r\n            toRemove._indexInSceneMaterialArray = -1;\r\n            this.materials.pop();\r\n        }\r\n\r\n        this.onMaterialRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given action manager from this scene.\r\n     * @deprecated\r\n     * @param toRemove The action manager to remove\r\n     * @returns The index of the removed action manager\r\n     */\r\n    public removeActionManager(toRemove: AbstractActionManager): number {\r\n        const index = this.actionManagers.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.actionManagers.splice(index, 1);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given texture from this scene.\r\n     * @param toRemove The texture to remove\r\n     * @returns The index of the removed texture\r\n     */\r\n    public removeTexture(toRemove: BaseTexture): number {\r\n        const index = this.textures.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.textures.splice(index, 1);\r\n        }\r\n        this.onTextureRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Adds the given light to this scene\r\n     * @param newLight The light to add\r\n     */\r\n    public addLight(newLight: Light): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.lights.push(newLight);\r\n        this.sortLightsByPriority();\r\n\r\n        if (!newLight.parent) {\r\n            newLight._addToSceneRootNodes();\r\n        }\r\n\r\n        // Add light to all meshes (To support if the light is removed and then re-added)\r\n        for (const mesh of this.meshes) {\r\n            if (mesh.lightSources.indexOf(newLight) === -1) {\r\n                mesh.lightSources.push(newLight);\r\n                mesh._resyncLightSources();\r\n            }\r\n        }\r\n\r\n        Tools.SetImmediate(() => {\r\n            this.onNewLightAddedObservable.notifyObservers(newLight);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sorts the list list based on light priorities\r\n     */\r\n    public sortLightsByPriority(): void {\r\n        if (this.requireLightSorting) {\r\n            this.lights.sort(LightConstants.CompareLightsPriority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the given camera to this scene\r\n     * @param newCamera The camera to add\r\n     */\r\n    public addCamera(newCamera: Camera): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n\r\n        this.cameras.push(newCamera);\r\n        Tools.SetImmediate(() => {\r\n            this.onNewCameraAddedObservable.notifyObservers(newCamera);\r\n        });\r\n\r\n        if (!newCamera.parent) {\r\n            newCamera._addToSceneRootNodes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the given skeleton to this scene\r\n     * @param newSkeleton The skeleton to add\r\n     */\r\n    public addSkeleton(newSkeleton: Skeleton): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.skeletons.push(newSkeleton);\r\n\r\n        Tools.SetImmediate(() => {\r\n            this.onNewSkeletonAddedObservable.notifyObservers(newSkeleton);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given particle system to this scene\r\n     * @param newParticleSystem The particle system to add\r\n     */\r\n    public addParticleSystem(newParticleSystem: IParticleSystem): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.particleSystems.push(newParticleSystem);\r\n    }\r\n\r\n    /**\r\n     * Adds the given animation to this scene\r\n     * @param newAnimation The animation to add\r\n     */\r\n    public addAnimation(newAnimation: Animation): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.animations.push(newAnimation);\r\n    }\r\n\r\n    /**\r\n     * Adds the given animation group to this scene.\r\n     * @param newAnimationGroup The animation group to add\r\n     */\r\n    public addAnimationGroup(newAnimationGroup: AnimationGroup): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.animationGroups.push(newAnimationGroup);\r\n    }\r\n\r\n    /**\r\n     * Adds the given multi-material to this scene\r\n     * @param newMultiMaterial The multi-material to add\r\n     */\r\n    public addMultiMaterial(newMultiMaterial: MultiMaterial): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.multiMaterials.push(newMultiMaterial);\r\n        Tools.SetImmediate(() => {\r\n            this.onNewMultiMaterialAddedObservable.notifyObservers(newMultiMaterial);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given material to this scene\r\n     * @param newMaterial The material to add\r\n     */\r\n    public addMaterial(newMaterial: Material): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n\r\n        if (newMaterial.getScene() === this && newMaterial._indexInSceneMaterialArray !== -1) {\r\n            // Already there??\r\n            return;\r\n        }\r\n\r\n        newMaterial._indexInSceneMaterialArray = this.materials.length;\r\n        this.materials.push(newMaterial);\r\n        Tools.SetImmediate(() => {\r\n            this.onNewMaterialAddedObservable.notifyObservers(newMaterial);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given morph target to this scene\r\n     * @param newMorphTargetManager The morph target to add\r\n     */\r\n    public addMorphTargetManager(newMorphTargetManager: MorphTargetManager): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.morphTargetManagers.push(newMorphTargetManager);\r\n    }\r\n\r\n    /**\r\n     * Adds the given geometry to this scene\r\n     * @param newGeometry The geometry to add\r\n     */\r\n    public addGeometry(newGeometry: Geometry): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n\r\n        if (this._geometriesByUniqueId) {\r\n            this._geometriesByUniqueId[newGeometry.uniqueId] = this.geometries.length;\r\n        }\r\n\r\n        this.geometries.push(newGeometry);\r\n    }\r\n\r\n    /**\r\n     * Adds the given action manager to this scene\r\n     * @deprecated\r\n     * @param newActionManager The action manager to add\r\n     */\r\n    public addActionManager(newActionManager: AbstractActionManager): void {\r\n        this.actionManagers.push(newActionManager);\r\n    }\r\n\r\n    /**\r\n     * Adds the given texture to this scene.\r\n     * @param newTexture The texture to add\r\n     */\r\n    public addTexture(newTexture: BaseTexture): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.textures.push(newTexture);\r\n        this.onNewTextureAddedObservable.notifyObservers(newTexture);\r\n    }\r\n\r\n    /**\r\n     * Switch active camera\r\n     * @param newCamera defines the new active camera\r\n     * @param attachControl defines if attachControl must be called for the new active camera (default: true)\r\n     */\r\n    public switchActiveCamera(newCamera: Camera, attachControl = true): void {\r\n        const canvas = this._engine.getInputElement();\r\n\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n\r\n        if (this.activeCamera) {\r\n            this.activeCamera.detachControl();\r\n        }\r\n        this.activeCamera = newCamera;\r\n        if (attachControl) {\r\n            newCamera.attachControl();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sets the active camera of the scene using its Id\r\n     * @param id defines the camera's Id\r\n     * @returns the new active camera or null if none found.\r\n     */\r\n    public setActiveCameraById(id: string): Nullable<Camera> {\r\n        const camera = this.getCameraById(id);\r\n\r\n        if (camera) {\r\n            this.activeCamera = camera;\r\n            return camera;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * sets the active camera of the scene using its name\r\n     * @param name defines the camera's name\r\n     * @returns the new active camera or null if none found.\r\n     */\r\n    public setActiveCameraByName(name: string): Nullable<Camera> {\r\n        const camera = this.getCameraByName(name);\r\n\r\n        if (camera) {\r\n            this.activeCamera = camera;\r\n            return camera;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * get an animation group using its name\r\n     * @param name defines the material's name\r\n     * @returns the animation group or null if none found.\r\n     */\r\n    public getAnimationGroupByName(name: string): Nullable<AnimationGroup> {\r\n        for (let index = 0; index < this.animationGroups.length; index++) {\r\n            if (this.animationGroups[index].name === name) {\r\n                return this.animationGroups[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _getMaterial(allowMultiMaterials: boolean, predicate: (m: Material) => boolean): Nullable<Material> {\r\n        for (let index = 0; index < this.materials.length; index++) {\r\n            const material = this.materials[index];\r\n            if (predicate(material)) {\r\n                return material;\r\n            }\r\n        }\r\n        if (allowMultiMaterials) {\r\n            for (let index = 0; index < this.multiMaterials.length; index++) {\r\n                const material = this.multiMaterials[index];\r\n                if (predicate(material)) {\r\n                    return material;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get a material using its unique id\r\n     * @param uniqueId defines the material's unique id\r\n     * @param allowMultiMaterials determines whether multimaterials should be considered\r\n     * @returns the material or null if none found.\r\n     */\r\n    public getMaterialByUniqueID(uniqueId: number, allowMultiMaterials: boolean = false): Nullable<Material> {\r\n        return this._getMaterial(allowMultiMaterials, (m) => m.uniqueId === uniqueId);\r\n    }\r\n\r\n    /**\r\n     * get a material using its id\r\n     * @param id defines the material's Id\r\n     * @param allowMultiMaterials determines whether multimaterials should be considered\r\n     * @returns the material or null if none found.\r\n     */\r\n    public getMaterialById(id: string, allowMultiMaterials: boolean = false): Nullable<Material> {\r\n        return this._getMaterial(allowMultiMaterials, (m) => m.id === id);\r\n    }\r\n\r\n    /**\r\n     * Gets a material using its name\r\n     * @param name defines the material's name\r\n     * @param allowMultiMaterials determines whether multimaterials should be considered\r\n     * @returns the material or null if none found.\r\n     */\r\n    public getMaterialByName(name: string, allowMultiMaterials: boolean = false): Nullable<Material> {\r\n        return this._getMaterial(allowMultiMaterials, (m) => m.name === name);\r\n    }\r\n\r\n    /**\r\n     * Gets a last added material using a given id\r\n     * @param id defines the material's id\r\n     * @param allowMultiMaterials determines whether multimaterials should be considered\r\n     * @returns the last material with the given id or null if none found.\r\n     */\r\n    public getLastMaterialById(id: string, allowMultiMaterials: boolean = false): Nullable<Material> {\r\n        for (let index = this.materials.length - 1; index >= 0; index--) {\r\n            if (this.materials[index].id === id) {\r\n                return this.materials[index];\r\n            }\r\n        }\r\n        if (allowMultiMaterials) {\r\n            for (let index = this.multiMaterials.length - 1; index >= 0; index--) {\r\n                if (this.multiMaterials[index].id === id) {\r\n                    return this.multiMaterials[index];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get a texture using its unique id\r\n     * @param uniqueId defines the texture's unique id\r\n     * @returns the texture or null if none found.\r\n     */\r\n    public getTextureByUniqueId(uniqueId: number): Nullable<BaseTexture> {\r\n        for (let index = 0; index < this.textures.length; index++) {\r\n            if (this.textures[index].uniqueId === uniqueId) {\r\n                return this.textures[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a texture using its name\r\n     * @param name defines the texture's name\r\n     * @returns the texture or null if none found.\r\n     */\r\n    public getTextureByName(name: string): Nullable<BaseTexture> {\r\n        for (let index = 0; index < this.textures.length; index++) {\r\n            if (this.textures[index].name === name) {\r\n                return this.textures[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a camera using its Id\r\n     * @param id defines the Id to look for\r\n     * @returns the camera or null if not found\r\n     */\r\n    public getCameraById(id: string): Nullable<Camera> {\r\n        for (let index = 0; index < this.cameras.length; index++) {\r\n            if (this.cameras[index].id === id) {\r\n                return this.cameras[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a camera using its unique Id\r\n     * @param uniqueId defines the unique Id to look for\r\n     * @returns the camera or null if not found\r\n     */\r\n    public getCameraByUniqueId(uniqueId: number): Nullable<Camera> {\r\n        for (let index = 0; index < this.cameras.length; index++) {\r\n            if (this.cameras[index].uniqueId === uniqueId) {\r\n                return this.cameras[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a camera using its name\r\n     * @param name defines the camera's name\r\n     * @returns the camera or null if none found.\r\n     */\r\n    public getCameraByName(name: string): Nullable<Camera> {\r\n        for (let index = 0; index < this.cameras.length; index++) {\r\n            if (this.cameras[index].name === name) {\r\n                return this.cameras[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a bone using its Id\r\n     * @param id defines the bone's Id\r\n     * @returns the bone or null if not found\r\n     */\r\n    public getBoneById(id: string): Nullable<Bone> {\r\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\r\n            const skeleton = this.skeletons[skeletonIndex];\r\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\r\n                if (skeleton.bones[boneIndex].id === id) {\r\n                    return skeleton.bones[boneIndex];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a bone using its id\r\n     * @param name defines the bone's name\r\n     * @returns the bone or null if not found\r\n     */\r\n    public getBoneByName(name: string): Nullable<Bone> {\r\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\r\n            const skeleton = this.skeletons[skeletonIndex];\r\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\r\n                if (skeleton.bones[boneIndex].name === name) {\r\n                    return skeleton.bones[boneIndex];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a light node using its name\r\n     * @param name defines the light's name\r\n     * @returns the light or null if none found.\r\n     */\r\n    public getLightByName(name: string): Nullable<Light> {\r\n        for (let index = 0; index < this.lights.length; index++) {\r\n            if (this.lights[index].name === name) {\r\n                return this.lights[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a light node using its Id\r\n     * @param id defines the light's Id\r\n     * @returns the light or null if none found.\r\n     */\r\n    public getLightById(id: string): Nullable<Light> {\r\n        for (let index = 0; index < this.lights.length; index++) {\r\n            if (this.lights[index].id === id) {\r\n                return this.lights[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a light node using its scene-generated unique Id\r\n     * @param uniqueId defines the light's unique Id\r\n     * @returns the light or null if none found.\r\n     */\r\n    public getLightByUniqueId(uniqueId: number): Nullable<Light> {\r\n        for (let index = 0; index < this.lights.length; index++) {\r\n            if (this.lights[index].uniqueId === uniqueId) {\r\n                return this.lights[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a particle system by Id\r\n     * @param id defines the particle system Id\r\n     * @returns the corresponding system or null if none found\r\n     */\r\n    public getParticleSystemById(id: string): Nullable<IParticleSystem> {\r\n        for (let index = 0; index < this.particleSystems.length; index++) {\r\n            if (this.particleSystems[index].id === id) {\r\n                return this.particleSystems[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a geometry using its Id\r\n     * @param id defines the geometry's Id\r\n     * @returns the geometry or null if none found.\r\n     */\r\n    public getGeometryById(id: string): Nullable<Geometry> {\r\n        for (let index = 0; index < this.geometries.length; index++) {\r\n            if (this.geometries[index].id === id) {\r\n                return this.geometries[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _getGeometryByUniqueId(uniqueId: number): Nullable<Geometry> {\r\n        if (this._geometriesByUniqueId) {\r\n            const index = this._geometriesByUniqueId[uniqueId];\r\n            if (index !== undefined) {\r\n                return this.geometries[index];\r\n            }\r\n        } else {\r\n            for (let index = 0; index < this.geometries.length; index++) {\r\n                if (this.geometries[index].uniqueId === uniqueId) {\r\n                    return this.geometries[index];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Add a new geometry to this scene\r\n     * @param geometry defines the geometry to be added to the scene.\r\n     * @param force defines if the geometry must be pushed even if a geometry with this id already exists\r\n     * @returns a boolean defining if the geometry was added or not\r\n     */\r\n    public pushGeometry(geometry: Geometry, force?: boolean): boolean {\r\n        if (!force && this._getGeometryByUniqueId(geometry.uniqueId)) {\r\n            return false;\r\n        }\r\n\r\n        this.addGeometry(geometry);\r\n\r\n        Tools.SetImmediate(() => {\r\n            this.onNewGeometryAddedObservable.notifyObservers(geometry);\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes an existing geometry\r\n     * @param geometry defines the geometry to be removed from the scene\r\n     * @returns a boolean defining if the geometry was removed or not\r\n     */\r\n    public removeGeometry(geometry: Geometry): boolean {\r\n        let index;\r\n        if (this._geometriesByUniqueId) {\r\n            index = this._geometriesByUniqueId[geometry.uniqueId];\r\n            if (index === undefined) {\r\n                return false;\r\n            }\r\n        } else {\r\n            index = this.geometries.indexOf(geometry);\r\n            if (index < 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (index !== this.geometries.length - 1) {\r\n            const lastGeometry = this.geometries[this.geometries.length - 1];\r\n            if (lastGeometry) {\r\n                this.geometries[index] = lastGeometry;\r\n                if (this._geometriesByUniqueId) {\r\n                    this._geometriesByUniqueId[lastGeometry.uniqueId] = index;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._geometriesByUniqueId) {\r\n            this._geometriesByUniqueId[geometry.uniqueId] = undefined;\r\n        }\r\n\r\n        this.geometries.pop();\r\n\r\n        this.onGeometryRemovedObservable.notifyObservers(geometry);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of geometries attached to the scene\r\n     * @returns an array of Geometry\r\n     */\r\n    public getGeometries(): Geometry[] {\r\n        return this.geometries;\r\n    }\r\n\r\n    /**\r\n     * Gets the first added mesh found of a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the mesh found or null if not found at all\r\n     */\r\n    public getMeshById(id: string): Nullable<AbstractMesh> {\r\n        for (let index = 0; index < this.meshes.length; index++) {\r\n            if (this.meshes[index].id === id) {\r\n                return this.meshes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of meshes using their Id\r\n     * @param id defines the Id to search for\r\n     * @returns a list of meshes\r\n     */\r\n    public getMeshesById(id: string): Array<AbstractMesh> {\r\n        return this.meshes.filter(function (m) {\r\n            return m.id === id;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the first added transform node found of a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found transform node or null if not found at all.\r\n     */\r\n    public getTransformNodeById(id: string): Nullable<TransformNode> {\r\n        for (let index = 0; index < this.transformNodes.length; index++) {\r\n            if (this.transformNodes[index].id === id) {\r\n                return this.transformNodes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a transform node with its auto-generated unique Id\r\n     * @param uniqueId defines the unique Id to search for\r\n     * @returns the found transform node or null if not found at all.\r\n     */\r\n    public getTransformNodeByUniqueId(uniqueId: number): Nullable<TransformNode> {\r\n        for (let index = 0; index < this.transformNodes.length; index++) {\r\n            if (this.transformNodes[index].uniqueId === uniqueId) {\r\n                return this.transformNodes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of transform nodes using their Id\r\n     * @param id defines the Id to search for\r\n     * @returns a list of transform nodes\r\n     */\r\n    public getTransformNodesById(id: string): Array<TransformNode> {\r\n        return this.transformNodes.filter(function (m) {\r\n            return m.id === id;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a mesh with its auto-generated unique Id\r\n     * @param uniqueId defines the unique Id to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     */\r\n    public getMeshByUniqueId(uniqueId: number): Nullable<AbstractMesh> {\r\n        for (let index = 0; index < this.meshes.length; index++) {\r\n            if (this.meshes[index].uniqueId === uniqueId) {\r\n                return this.meshes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a the last added mesh using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     */\r\n    public getLastMeshById(id: string): Nullable<AbstractMesh> {\r\n        for (let index = this.meshes.length - 1; index >= 0; index--) {\r\n            if (this.meshes[index].id === id) {\r\n                return this.meshes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a the last transform node using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     */\r\n    public getLastTransformNodeById(id: string): Nullable<TransformNode> {\r\n        for (let index = this.transformNodes.length - 1; index >= 0; index--) {\r\n            if (this.transformNodes[index].id === id) {\r\n                return this.transformNodes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a the last added node (Mesh, Camera, Light) using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found node or null if not found at all\r\n     */\r\n    public getLastEntryById(id: string): Nullable<Node> {\r\n        let index: number;\r\n        for (index = this.meshes.length - 1; index >= 0; index--) {\r\n            if (this.meshes[index].id === id) {\r\n                return this.meshes[index];\r\n            }\r\n        }\r\n\r\n        for (index = this.transformNodes.length - 1; index >= 0; index--) {\r\n            if (this.transformNodes[index].id === id) {\r\n                return this.transformNodes[index];\r\n            }\r\n        }\r\n\r\n        for (index = this.cameras.length - 1; index >= 0; index--) {\r\n            if (this.cameras[index].id === id) {\r\n                return this.cameras[index];\r\n            }\r\n        }\r\n\r\n        for (index = this.lights.length - 1; index >= 0; index--) {\r\n            if (this.lights[index].id === id) {\r\n                return this.lights[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a node (Mesh, Camera, Light) using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found node or null if not found at all\r\n     */\r\n    public getNodeById(id: string): Nullable<Node> {\r\n        const mesh = this.getMeshById(id);\r\n        if (mesh) {\r\n            return mesh;\r\n        }\r\n\r\n        const transformNode = this.getTransformNodeById(id);\r\n        if (transformNode) {\r\n            return transformNode;\r\n        }\r\n\r\n        const light = this.getLightById(id);\r\n        if (light) {\r\n            return light;\r\n        }\r\n\r\n        const camera = this.getCameraById(id);\r\n        if (camera) {\r\n            return camera;\r\n        }\r\n\r\n        const bone = this.getBoneById(id);\r\n        if (bone) {\r\n            return bone;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a node (Mesh, Camera, Light) using a given name\r\n     * @param name defines the name to search for\r\n     * @returns the found node or null if not found at all.\r\n     */\r\n    public getNodeByName(name: string): Nullable<Node> {\r\n        const mesh = this.getMeshByName(name);\r\n        if (mesh) {\r\n            return mesh;\r\n        }\r\n\r\n        const transformNode = this.getTransformNodeByName(name);\r\n        if (transformNode) {\r\n            return transformNode;\r\n        }\r\n\r\n        const light = this.getLightByName(name);\r\n        if (light) {\r\n            return light;\r\n        }\r\n\r\n        const camera = this.getCameraByName(name);\r\n        if (camera) {\r\n            return camera;\r\n        }\r\n\r\n        const bone = this.getBoneByName(name);\r\n        if (bone) {\r\n            return bone;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a mesh using a given name\r\n     * @param name defines the name to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     */\r\n    public getMeshByName(name: string): Nullable<AbstractMesh> {\r\n        for (let index = 0; index < this.meshes.length; index++) {\r\n            if (this.meshes[index].name === name) {\r\n                return this.meshes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a transform node using a given name\r\n     * @param name defines the name to search for\r\n     * @returns the found transform node or null if not found at all.\r\n     */\r\n    public getTransformNodeByName(name: string): Nullable<TransformNode> {\r\n        for (let index = 0; index < this.transformNodes.length; index++) {\r\n            if (this.transformNodes[index].name === name) {\r\n                return this.transformNodes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\r\n     * @param id defines the Id to search for\r\n     * @returns the found skeleton or null if not found at all.\r\n     */\r\n    public getLastSkeletonById(id: string): Nullable<Skeleton> {\r\n        for (let index = this.skeletons.length - 1; index >= 0; index--) {\r\n            if (this.skeletons[index].id === id) {\r\n                return this.skeletons[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a skeleton using a given auto generated unique id\r\n     * @param  uniqueId defines the unique id to search for\r\n     * @returns the found skeleton or null if not found at all.\r\n     */\r\n    public getSkeletonByUniqueId(uniqueId: number): Nullable<Skeleton> {\r\n        for (let index = 0; index < this.skeletons.length; index++) {\r\n            if (this.skeletons[index].uniqueId === uniqueId) {\r\n                return this.skeletons[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a skeleton using a given id (if many are found, this function will pick the first one)\r\n     * @param id defines the id to search for\r\n     * @returns the found skeleton or null if not found at all.\r\n     */\r\n    public getSkeletonById(id: string): Nullable<Skeleton> {\r\n        for (let index = 0; index < this.skeletons.length; index++) {\r\n            if (this.skeletons[index].id === id) {\r\n                return this.skeletons[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a skeleton using a given name\r\n     * @param name defines the name to search for\r\n     * @returns the found skeleton or null if not found at all.\r\n     */\r\n    public getSkeletonByName(name: string): Nullable<Skeleton> {\r\n        for (let index = 0; index < this.skeletons.length; index++) {\r\n            if (this.skeletons[index].name === name) {\r\n                return this.skeletons[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a morph target manager  using a given id (if many are found, this function will pick the last one)\r\n     * @param id defines the id to search for\r\n     * @returns the found morph target manager or null if not found at all.\r\n     */\r\n    public getMorphTargetManagerById(id: number): Nullable<MorphTargetManager> {\r\n        for (let index = 0; index < this.morphTargetManagers.length; index++) {\r\n            if (this.morphTargetManagers[index].uniqueId === id) {\r\n                return this.morphTargetManagers[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a morph target using a given id (if many are found, this function will pick the first one)\r\n     * @param id defines the id to search for\r\n     * @returns the found morph target or null if not found at all.\r\n     */\r\n    public getMorphTargetById(id: string): Nullable<MorphTarget> {\r\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\r\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\r\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\r\n                const target = morphTargetManager.getTarget(index);\r\n                if (target.id === id) {\r\n                    return target;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a morph target using a given name (if many are found, this function will pick the first one)\r\n     * @param name defines the name to search for\r\n     * @returns the found morph target or null if not found at all.\r\n     */\r\n    public getMorphTargetByName(name: string): Nullable<MorphTarget> {\r\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\r\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\r\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\r\n                const target = morphTargetManager.getTarget(index);\r\n                if (target.name === name) {\r\n                    return target;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a post process using a given name (if many are found, this function will pick the first one)\r\n     * @param name defines the name to search for\r\n     * @returns the found post process or null if not found at all.\r\n     */\r\n    public getPostProcessByName(name: string): Nullable<PostProcess> {\r\n        for (let postProcessIndex = 0; postProcessIndex < this.postProcesses.length; ++postProcessIndex) {\r\n            const postProcess = this.postProcesses[postProcessIndex];\r\n            if (postProcess.name === name) {\r\n                return postProcess;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given mesh is active\r\n     * @param mesh defines the mesh to look for\r\n     * @returns true if the mesh is in the active list\r\n     */\r\n    public isActiveMesh(mesh: AbstractMesh): boolean {\r\n        return this._activeMeshes.indexOf(mesh) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Return a unique id as a string which can serve as an identifier for the scene\r\n     */\r\n    public get uid(): string {\r\n        if (!this._uid) {\r\n            this._uid = Tools.RandomId();\r\n        }\r\n        return this._uid;\r\n    }\r\n\r\n    /**\r\n     * Add an externally attached data from its key.\r\n     * This method call will fail and return false, if such key already exists.\r\n     * If you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\r\n     * @param key the unique key that identifies the data\r\n     * @param data the data object to associate to the key for this Engine instance\r\n     * @returns true if no such key were already present and the data was added successfully, false otherwise\r\n     */\r\n    public addExternalData<T extends Object>(key: string, data: T): boolean {\r\n        if (!this._externalData) {\r\n            this._externalData = new StringDictionary<Object>();\r\n        }\r\n        return this._externalData.add(key, data);\r\n    }\r\n\r\n    /**\r\n     * Get an externally attached data from its key\r\n     * @param key the unique key that identifies the data\r\n     * @returns the associated data, if present (can be null), or undefined if not present\r\n     */\r\n    public getExternalData<T>(key: string): Nullable<T> {\r\n        if (!this._externalData) {\r\n            return null;\r\n        }\r\n        return <T>this._externalData.get(key);\r\n    }\r\n\r\n    /**\r\n     * Get an externally attached data from its key, create it using a factory if it's not already present\r\n     * @param key the unique key that identifies the data\r\n     * @param factory the factory that will be called to create the instance if and only if it doesn't exists\r\n     * @returns the associated data, can be null if the factory returned null.\r\n     */\r\n    public getOrAddExternalDataWithFactory<T extends Object>(key: string, factory: (k: string) => T): T {\r\n        if (!this._externalData) {\r\n            this._externalData = new StringDictionary<Object>();\r\n        }\r\n        return <T>this._externalData.getOrAddWithFactory(key, factory);\r\n    }\r\n\r\n    /**\r\n     * Remove an externally attached data from the Engine instance\r\n     * @param key the unique key that identifies the data\r\n     * @returns true if the data was successfully removed, false if it doesn't exist\r\n     */\r\n    public removeExternalData(key: string): boolean {\r\n        return this._externalData.remove(key);\r\n    }\r\n\r\n    private _evaluateSubMesh(subMesh: SubMesh, mesh: AbstractMesh, initialMesh: AbstractMesh, forcePush: boolean): void {\r\n        if (forcePush || subMesh.isInFrustum(this._frustumPlanes)) {\r\n            for (const step of this._evaluateSubMeshStage) {\r\n                step.action(mesh, subMesh);\r\n            }\r\n\r\n            const material = subMesh.getMaterial();\r\n            if (material !== null && material !== undefined) {\r\n                // Render targets\r\n                if (material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\r\n                    if (this._processedMaterials.indexOf(material) === -1) {\r\n                        this._processedMaterials.push(material);\r\n\r\n                        this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures!());\r\n                    }\r\n                }\r\n\r\n                // Dispatch\r\n                this._renderingManager.dispatch(subMesh, mesh, material);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the processed materials smart array preventing retention point in material dispose.\r\n     */\r\n    public freeProcessedMaterials(): void {\r\n        this._processedMaterials.dispose();\r\n    }\r\n\r\n    private _preventFreeActiveMeshesAndRenderingGroups = false;\r\n\r\n    /** Gets or sets a boolean blocking all the calls to freeActiveMeshes and freeRenderingGroups\r\n     * It can be used in order to prevent going through methods freeRenderingGroups and freeActiveMeshes several times to improve performance\r\n     * when disposing several meshes in a row or a hierarchy of meshes.\r\n     * When used, it is the responsibility of the user to blockfreeActiveMeshesAndRenderingGroups back to false.\r\n     */\r\n    public get blockfreeActiveMeshesAndRenderingGroups(): boolean {\r\n        return this._preventFreeActiveMeshesAndRenderingGroups;\r\n    }\r\n\r\n    public set blockfreeActiveMeshesAndRenderingGroups(value: boolean) {\r\n        if (this._preventFreeActiveMeshesAndRenderingGroups === value) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this.freeActiveMeshes();\r\n            this.freeRenderingGroups();\r\n        }\r\n\r\n        this._preventFreeActiveMeshesAndRenderingGroups = value;\r\n    }\r\n\r\n    /**\r\n     * Clear the active meshes smart array preventing retention point in mesh dispose.\r\n     */\r\n    public freeActiveMeshes(): void {\r\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\r\n            return;\r\n        }\r\n\r\n        this._activeMeshes.dispose();\r\n        if (this.activeCamera && this.activeCamera._activeMeshes) {\r\n            this.activeCamera._activeMeshes.dispose();\r\n        }\r\n        if (this.activeCameras) {\r\n            for (let i = 0; i < this.activeCameras.length; i++) {\r\n                const activeCamera = this.activeCameras[i];\r\n                if (activeCamera && activeCamera._activeMeshes) {\r\n                    activeCamera._activeMeshes.dispose();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the info related to rendering groups preventing retention points during dispose.\r\n     */\r\n    public freeRenderingGroups(): void {\r\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\r\n            return;\r\n        }\r\n\r\n        if (this._renderingManager) {\r\n            this._renderingManager.freeRenderingGroups();\r\n        }\r\n        if (this.textures) {\r\n            for (let i = 0; i < this.textures.length; i++) {\r\n                const texture = this.textures[i];\r\n                if (texture && (<RenderTargetTexture>texture).renderList) {\r\n                    (<RenderTargetTexture>texture).freeRenderingGroups();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _isInIntermediateRendering(): boolean {\r\n        return this._intermediateRendering;\r\n    }\r\n\r\n    /**\r\n     * Lambda returning the list of potentially active meshes.\r\n     */\r\n    public getActiveMeshCandidates: () => ISmartArrayLike<AbstractMesh>;\r\n\r\n    /**\r\n     * Lambda returning the list of potentially active sub meshes.\r\n     */\r\n    public getActiveSubMeshCandidates: (mesh: AbstractMesh) => ISmartArrayLike<SubMesh>;\r\n\r\n    /**\r\n     * Lambda returning the list of potentially intersecting sub meshes.\r\n     */\r\n    public getIntersectingSubMeshCandidates: (mesh: AbstractMesh, localRay: Ray) => ISmartArrayLike<SubMesh>;\r\n\r\n    /**\r\n     * Lambda returning the list of potentially colliding sub meshes.\r\n     */\r\n    public getCollidingSubMeshCandidates: (mesh: AbstractMesh, collider: Collider) => ISmartArrayLike<SubMesh>;\r\n\r\n    /** @internal */\r\n    public _activeMeshesFrozen = false;\r\n    /** @internal */\r\n    public _activeMeshesFrozenButKeepClipping = false;\r\n    private _skipEvaluateActiveMeshesCompletely = false;\r\n\r\n    /**\r\n     * Use this function to stop evaluating active meshes. The current list will be keep alive between frames\r\n     * @param skipEvaluateActiveMeshes defines an optional boolean indicating that the evaluate active meshes step must be completely skipped\r\n     * @param onSuccess optional success callback\r\n     * @param onError optional error callback\r\n     * @param freezeMeshes defines if meshes should be frozen (true by default)\r\n     * @param keepFrustumCulling defines if you want to keep running the frustum clipping (false by default)\r\n     * @returns the current scene\r\n     */\r\n    public freezeActiveMeshes(\r\n        skipEvaluateActiveMeshes = false,\r\n        onSuccess?: () => void,\r\n        onError?: (message: string) => void,\r\n        freezeMeshes = true,\r\n        keepFrustumCulling = false\r\n    ): Scene {\r\n        this.executeWhenReady(() => {\r\n            if (!this.activeCamera) {\r\n                onError && onError(\"No active camera found\");\r\n                return;\r\n            }\r\n\r\n            if (!this._frustumPlanes) {\r\n                this.updateTransformMatrix();\r\n            }\r\n\r\n            this._evaluateActiveMeshes();\r\n            this._activeMeshesFrozen = true;\r\n            this._activeMeshesFrozenButKeepClipping = keepFrustumCulling;\r\n            this._skipEvaluateActiveMeshesCompletely = skipEvaluateActiveMeshes;\r\n\r\n            if (freezeMeshes) {\r\n                for (let index = 0; index < this._activeMeshes.length; index++) {\r\n                    this._activeMeshes.data[index]._freeze();\r\n                }\r\n            }\r\n            onSuccess && onSuccess();\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Use this function to restart evaluating active meshes on every frame\r\n     * @returns the current scene\r\n     */\r\n    public unfreezeActiveMeshes(): Scene {\r\n        for (let index = 0; index < this.meshes.length; index++) {\r\n            const mesh = this.meshes[index];\r\n            if (mesh._internalAbstractMeshDataInfo) {\r\n                mesh._internalAbstractMeshDataInfo._isActive = false;\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < this._activeMeshes.length; index++) {\r\n            this._activeMeshes.data[index]._unFreeze();\r\n        }\r\n\r\n        this._activeMeshesFrozen = false;\r\n        return this;\r\n    }\r\n\r\n    private _executeActiveContainerCleanup(container: SmartArray<any>) {\r\n        const isInFastMode = this._engine.snapshotRendering && this._engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST;\r\n\r\n        if (!isInFastMode && this._activeMeshesFrozen && this._activeMeshes.length) {\r\n            return; // Do not execute in frozen mode\r\n        }\r\n\r\n        // We need to ensure we are not in the rendering loop\r\n        this.onBeforeRenderObservable.addOnce(() => container.dispose());\r\n    }\r\n\r\n    private _evaluateActiveMeshes(): void {\r\n        if (this._engine.snapshotRendering && this._engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST) {\r\n            if (this._activeMeshes.length > 0) {\r\n                this.activeCamera?._activeMeshes.reset();\r\n                this._activeMeshes.reset();\r\n                this._renderingManager.reset();\r\n                this._processedMaterials.reset();\r\n                this._activeParticleSystems.reset();\r\n                this._activeSkeletons.reset();\r\n                this._softwareSkinnedMeshes.reset();\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (this._activeMeshesFrozen && this._activeMeshes.length) {\r\n            if (!this._skipEvaluateActiveMeshesCompletely) {\r\n                const len = this._activeMeshes.length;\r\n                for (let i = 0; i < len; i++) {\r\n                    const mesh = this._activeMeshes.data[i];\r\n                    mesh.computeWorldMatrix();\r\n                }\r\n            }\r\n\r\n            if (this._activeParticleSystems) {\r\n                const psLength = this._activeParticleSystems.length;\r\n                for (let i = 0; i < psLength; i++) {\r\n                    this._activeParticleSystems.data[i].animate();\r\n                }\r\n            }\r\n\r\n            this._renderingManager.resetSprites();\r\n\r\n            return;\r\n        }\r\n\r\n        if (!this.activeCamera) {\r\n            return;\r\n        }\r\n\r\n        this.onBeforeActiveMeshesEvaluationObservable.notifyObservers(this);\r\n\r\n        this.activeCamera._activeMeshes.reset();\r\n        this._activeMeshes.reset();\r\n        this._renderingManager.reset();\r\n        this._processedMaterials.reset();\r\n        this._activeParticleSystems.reset();\r\n        this._activeSkeletons.reset();\r\n        this._softwareSkinnedMeshes.reset();\r\n        this._materialsRenderTargets.reset();\r\n\r\n        for (const step of this._beforeEvaluateActiveMeshStage) {\r\n            step.action();\r\n        }\r\n\r\n        // Determine mesh candidates\r\n        const meshes = this.getActiveMeshCandidates();\r\n\r\n        // Check each mesh\r\n        const len = meshes.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const mesh = meshes.data[i];\r\n            let currentLOD = mesh._internalAbstractMeshDataInfo._currentLOD.get(this.activeCamera);\r\n            if (currentLOD) {\r\n                currentLOD[1] = -1;\r\n            } else {\r\n                currentLOD = [mesh, -1];\r\n                mesh._internalAbstractMeshDataInfo._currentLOD.set(this.activeCamera, currentLOD);\r\n            }\r\n            if (mesh.isBlocked) {\r\n                continue;\r\n            }\r\n\r\n            this._totalVertices.addCount(mesh.getTotalVertices(), false);\r\n\r\n            if (!mesh.isReady() || !mesh.isEnabled() || mesh.scaling.hasAZeroComponent) {\r\n                continue;\r\n            }\r\n\r\n            mesh.computeWorldMatrix();\r\n\r\n            // Intersections\r\n            if (mesh.actionManager && mesh.actionManager.hasSpecificTriggers2(Constants.ACTION_OnIntersectionEnterTrigger, Constants.ACTION_OnIntersectionExitTrigger)) {\r\n                this._meshesForIntersections.pushNoDuplicate(mesh);\r\n            }\r\n\r\n            // Switch to current LOD\r\n            let meshToRender = this.customLODSelector ? this.customLODSelector(mesh, this.activeCamera) : mesh.getLOD(this.activeCamera);\r\n            currentLOD[0] = meshToRender;\r\n            currentLOD[1] = this._frameId;\r\n            if (meshToRender === undefined || meshToRender === null) {\r\n                continue;\r\n            }\r\n\r\n            // Compute world matrix if LOD is billboard\r\n            if (meshToRender !== mesh && meshToRender.billboardMode !== 0) {\r\n                meshToRender.computeWorldMatrix();\r\n            }\r\n\r\n            mesh._preActivate();\r\n\r\n            if (\r\n                mesh.isVisible &&\r\n                mesh.visibility > 0 &&\r\n                (mesh.layerMask & this.activeCamera.layerMask) !== 0 &&\r\n                (this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh || mesh.isInFrustum(this._frustumPlanes))\r\n            ) {\r\n                this._activeMeshes.push(mesh);\r\n                this.activeCamera._activeMeshes.push(mesh);\r\n\r\n                if (meshToRender !== mesh) {\r\n                    meshToRender._activate(this._renderId, false);\r\n                }\r\n\r\n                for (const step of this._preActiveMeshStage) {\r\n                    step.action(mesh);\r\n                }\r\n\r\n                if (mesh._activate(this._renderId, false)) {\r\n                    if (!mesh.isAnInstance) {\r\n                        meshToRender._internalAbstractMeshDataInfo._onlyForInstances = false;\r\n                    } else {\r\n                        if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {\r\n                            meshToRender = mesh;\r\n                        }\r\n                    }\r\n                    meshToRender._internalAbstractMeshDataInfo._isActive = true;\r\n                    this._activeMesh(mesh, meshToRender);\r\n                }\r\n\r\n                mesh._postActivate();\r\n            }\r\n        }\r\n\r\n        this.onAfterActiveMeshesEvaluationObservable.notifyObservers(this);\r\n\r\n        // Particle systems\r\n        if (this.particlesEnabled) {\r\n            this.onBeforeParticlesRenderingObservable.notifyObservers(this);\r\n            for (let particleIndex = 0; particleIndex < this.particleSystems.length; particleIndex++) {\r\n                const particleSystem = this.particleSystems[particleIndex];\r\n\r\n                if (!particleSystem.isStarted() || !particleSystem.emitter) {\r\n                    continue;\r\n                }\r\n\r\n                const emitter = <any>particleSystem.emitter;\r\n                if (!emitter.position || emitter.isEnabled()) {\r\n                    this._activeParticleSystems.push(particleSystem);\r\n                    particleSystem.animate();\r\n                    this._renderingManager.dispatchParticles(particleSystem);\r\n                }\r\n            }\r\n            this.onAfterParticlesRenderingObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepareSkeleton(mesh: AbstractMesh): void {\r\n        if (!this._skeletonsEnabled || !mesh.skeleton) {\r\n            return;\r\n        }\r\n\r\n        if (this._activeSkeletons.pushNoDuplicate(mesh.skeleton)) {\r\n            mesh.skeleton.prepare();\r\n            this._activeBones.addCount(mesh.skeleton.bones.length, false);\r\n        }\r\n\r\n        if (!mesh.computeBonesUsingShaders) {\r\n            if (this._softwareSkinnedMeshes.pushNoDuplicate(<Mesh>mesh) && this.frameGraph) {\r\n                (<Mesh>mesh).applySkeleton(mesh.skeleton);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _activeMesh(sourceMesh: AbstractMesh, mesh: AbstractMesh): void {\r\n        this._prepareSkeleton(mesh);\r\n\r\n        let forcePush = sourceMesh.hasInstances || sourceMesh.isAnInstance || this.dispatchAllSubMeshesOfActiveMeshes || this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh;\r\n\r\n        if (mesh && mesh.subMeshes && mesh.subMeshes.length > 0) {\r\n            const subMeshes = this.getActiveSubMeshCandidates(mesh);\r\n            const len = subMeshes.length;\r\n            forcePush = forcePush || len === 1;\r\n            for (let i = 0; i < len; i++) {\r\n                const subMesh = subMeshes.data[i];\r\n                this._evaluateSubMesh(subMesh, mesh, sourceMesh, forcePush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the transform matrix to update from the current active camera\r\n     * @param force defines a boolean used to force the update even if cache is up to date\r\n     */\r\n    public updateTransformMatrix(force?: boolean): void {\r\n        const activeCamera = this.activeCamera;\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        if (activeCamera._renderingMultiview) {\r\n            const leftCamera = activeCamera._rigCameras[0];\r\n            const rightCamera = activeCamera._rigCameras[1];\r\n            this.setTransformMatrix(leftCamera.getViewMatrix(), leftCamera.getProjectionMatrix(force), rightCamera.getViewMatrix(), rightCamera.getProjectionMatrix(force));\r\n        } else {\r\n            this.setTransformMatrix(activeCamera.getViewMatrix(), activeCamera.getProjectionMatrix(force));\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _useCurrentFrameBuffer = false;\r\n\r\n    private _bindFrameBuffer(camera: Nullable<Camera>, clear = true) {\r\n        if (!this._useCurrentFrameBuffer) {\r\n            if (camera && camera._multiviewTexture) {\r\n                camera._multiviewTexture._bindFrameBuffer();\r\n            } else if (camera && camera.outputRenderTarget) {\r\n                camera.outputRenderTarget._bindFrameBuffer();\r\n            } else {\r\n                if (!this._engine._currentFrameBufferIsDefaultFrameBuffer()) {\r\n                    this._engine.restoreDefaultFramebuffer();\r\n                }\r\n            }\r\n        }\r\n        if (clear) {\r\n            this._clearFrameBuffer(camera);\r\n        }\r\n    }\r\n\r\n    private _clearFrameBuffer(camera: Nullable<Camera>) {\r\n        // we assume the framebuffer currently bound is the right one\r\n        if (camera && camera._multiviewTexture) {\r\n            // no clearing\r\n        } else if (camera && camera.outputRenderTarget && !camera._renderingMultiview) {\r\n            const rtt = camera.outputRenderTarget;\r\n            if (rtt.onClearObservable.hasObservers()) {\r\n                rtt.onClearObservable.notifyObservers(this._engine);\r\n            } else if (!rtt.skipInitialClear && !camera.isRightCamera) {\r\n                if (this.autoClear) {\r\n                    this._engine.clear(rtt.clearColor || this._clearColor, !rtt._cleared, true, true);\r\n                }\r\n                rtt._cleared = true;\r\n            }\r\n        } else {\r\n            if (!this._defaultFrameBufferCleared) {\r\n                this._defaultFrameBufferCleared = true;\r\n                this._clear();\r\n            } else {\r\n                this._engine.clear(null, false, true, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _allowPostProcessClearColor = true;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderForCamera(camera: Camera, rigParent?: Camera, bindFrameBuffer = true): void {\r\n        if (camera && camera._skipRendering) {\r\n            return;\r\n        }\r\n\r\n        const engine = this._engine;\r\n\r\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\r\n        this._activeCamera = camera;\r\n\r\n        if (!this.activeCamera) {\r\n            throw new Error(\"Active camera not set\");\r\n        }\r\n\r\n        // Viewport\r\n        engine.setViewport(this.activeCamera.viewport);\r\n\r\n        // Camera\r\n        this.resetCachedMaterial();\r\n        this._renderId++;\r\n\r\n        if (!this.prePass && bindFrameBuffer) {\r\n            let skipInitialClear = true;\r\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\r\n                skipInitialClear = camera.outputRenderTarget.skipInitialClear;\r\n                if (this.autoClear) {\r\n                    this._defaultFrameBufferCleared = false;\r\n                    camera.outputRenderTarget.skipInitialClear = false;\r\n                }\r\n            }\r\n            this._bindFrameBuffer(this._activeCamera);\r\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\r\n                camera.outputRenderTarget.skipInitialClear = skipInitialClear;\r\n            }\r\n        }\r\n\r\n        this.updateTransformMatrix();\r\n\r\n        this.onBeforeCameraRenderObservable.notifyObservers(this.activeCamera);\r\n\r\n        // Meshes\r\n        this._evaluateActiveMeshes();\r\n\r\n        // Software skinning\r\n        for (let softwareSkinnedMeshIndex = 0; softwareSkinnedMeshIndex < this._softwareSkinnedMeshes.length; softwareSkinnedMeshIndex++) {\r\n            const mesh = this._softwareSkinnedMeshes.data[softwareSkinnedMeshIndex];\r\n\r\n            mesh.applySkeleton(<Skeleton>mesh.skeleton);\r\n        }\r\n\r\n        // Render targets\r\n        this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\r\n\r\n        this._renderTargets.concatWithNoDuplicate(this._materialsRenderTargets);\r\n\r\n        if (camera.customRenderTargets && camera.customRenderTargets.length > 0) {\r\n            this._renderTargets.concatWithNoDuplicate(camera.customRenderTargets);\r\n        }\r\n\r\n        if (rigParent && rigParent.customRenderTargets && rigParent.customRenderTargets.length > 0) {\r\n            this._renderTargets.concatWithNoDuplicate(rigParent.customRenderTargets);\r\n        }\r\n\r\n        if (this.environmentTexture && this.environmentTexture.isRenderTarget) {\r\n            this._renderTargets.pushNoDuplicate(this.environmentTexture as RenderTargetTexture);\r\n        }\r\n\r\n        // Collects render targets from external components.\r\n        for (const step of this._gatherActiveCameraRenderTargetsStage) {\r\n            step.action(this._renderTargets);\r\n        }\r\n\r\n        let needRebind = false;\r\n        if (this.renderTargetsEnabled) {\r\n            this._intermediateRendering = true;\r\n\r\n            if (this._renderTargets.length > 0) {\r\n                Tools.StartPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\r\n                for (let renderIndex = 0; renderIndex < this._renderTargets.length; renderIndex++) {\r\n                    const renderTarget = this._renderTargets.data[renderIndex];\r\n                    if (renderTarget._shouldRender()) {\r\n                        this._renderId++;\r\n                        const hasSpecialRenderTargetCamera = renderTarget.activeCamera && renderTarget.activeCamera !== this.activeCamera;\r\n                        renderTarget.render(<boolean>hasSpecialRenderTargetCamera, this.dumpNextRenderTargets);\r\n                        needRebind = true;\r\n                    }\r\n                }\r\n                Tools.EndPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\r\n\r\n                this._renderId++;\r\n            }\r\n\r\n            for (const step of this._cameraDrawRenderTargetStage) {\r\n                needRebind = step.action(this.activeCamera) || needRebind;\r\n            }\r\n\r\n            this._intermediateRendering = false;\r\n        }\r\n\r\n        this._engine.currentRenderPassId = camera.outputRenderTarget?.renderPassId ?? camera.renderPassId ?? Constants.RENDERPASS_MAIN;\r\n\r\n        // Restore framebuffer after rendering to targets\r\n        if (needRebind && !this.prePass) {\r\n            this._bindFrameBuffer(this._activeCamera, false);\r\n            this.updateTransformMatrix();\r\n        }\r\n\r\n        this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\r\n\r\n        // Prepare Frame\r\n        if (this.postProcessManager && !camera._multiviewTexture && !this.prePass) {\r\n            this.postProcessManager._prepareFrame();\r\n        }\r\n\r\n        // Before Camera Draw\r\n        for (const step of this._beforeCameraDrawStage) {\r\n            step.action(this.activeCamera);\r\n        }\r\n\r\n        // Render\r\n        this.onBeforeDrawPhaseObservable.notifyObservers(this);\r\n\r\n        if (engine.snapshotRendering && engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST) {\r\n            this.finalizeSceneUbo();\r\n        }\r\n        this._renderingManager.render(null, null, true, true);\r\n        this.onAfterDrawPhaseObservable.notifyObservers(this);\r\n\r\n        // After Camera Draw\r\n        for (const step of this._afterCameraDrawStage) {\r\n            step.action(this.activeCamera);\r\n        }\r\n\r\n        // Finalize frame\r\n        if (this.postProcessManager && !camera._multiviewTexture) {\r\n            // if the camera has an output render target, render the post process to the render target\r\n            const texture = camera.outputRenderTarget ? camera.outputRenderTarget.renderTarget! : undefined;\r\n            this.postProcessManager._finalizeFrame(camera.isIntermediate, texture);\r\n        }\r\n\r\n        // After post process\r\n        for (const step of this._afterCameraPostProcessStage) {\r\n            step.action(this.activeCamera);\r\n        }\r\n\r\n        // Reset some special arrays\r\n        this._renderTargets.reset();\r\n\r\n        this.onAfterCameraRenderObservable.notifyObservers(this.activeCamera);\r\n    }\r\n\r\n    private _processSubCameras(camera: Camera, bindFrameBuffer = true): void {\r\n        if (camera.cameraRigMode === Constants.RIG_MODE_NONE || camera._renderingMultiview) {\r\n            if (camera._renderingMultiview && !this._multiviewSceneUbo) {\r\n                this._createMultiviewUbo();\r\n            }\r\n            this._renderForCamera(camera, undefined, bindFrameBuffer);\r\n            this.onAfterRenderCameraObservable.notifyObservers(camera);\r\n            return;\r\n        }\r\n\r\n        if (camera._useMultiviewToSingleView) {\r\n            this._renderMultiviewToSingleView(camera);\r\n        } else {\r\n            // rig cameras\r\n            this.onBeforeCameraRenderObservable.notifyObservers(camera);\r\n            for (let index = 0; index < camera._rigCameras.length; index++) {\r\n                this._renderForCamera(camera._rigCameras[index], camera);\r\n            }\r\n        }\r\n\r\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\r\n        this._activeCamera = camera;\r\n        this.updateTransformMatrix();\r\n        this.onAfterRenderCameraObservable.notifyObservers(camera);\r\n    }\r\n\r\n    private _checkIntersections(): void {\r\n        for (let index = 0; index < this._meshesForIntersections.length; index++) {\r\n            const sourceMesh = this._meshesForIntersections.data[index];\r\n\r\n            if (!sourceMesh.actionManager) {\r\n                continue;\r\n            }\r\n\r\n            for (let actionIndex = 0; sourceMesh.actionManager && actionIndex < sourceMesh.actionManager.actions.length; actionIndex++) {\r\n                const action: IAction = sourceMesh.actionManager.actions[actionIndex];\r\n\r\n                if (action.trigger === Constants.ACTION_OnIntersectionEnterTrigger || action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\r\n                    const parameters = action.getTriggerParameter();\r\n                    const otherMesh = parameters.mesh ? parameters.mesh : parameters;\r\n\r\n                    const areIntersecting = otherMesh.intersectsMesh(sourceMesh, parameters.usePreciseIntersection);\r\n                    const currentIntersectionInProgress = sourceMesh._intersectionsInProgress.indexOf(otherMesh);\r\n\r\n                    if (areIntersecting && currentIntersectionInProgress === -1) {\r\n                        if (action.trigger === Constants.ACTION_OnIntersectionEnterTrigger) {\r\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\r\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\r\n                        } else if (action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\r\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\r\n                        }\r\n                    } else if (!areIntersecting && currentIntersectionInProgress > -1) {\r\n                        //They intersected, and now they don't.\r\n\r\n                        //is this trigger an exit trigger? execute an event.\r\n                        if (action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\r\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\r\n                        }\r\n\r\n                        //if this is an exit trigger, or no exit trigger exists, remove the id from the intersection in progress array.\r\n                        if (\r\n                            !sourceMesh.actionManager.hasSpecificTrigger(Constants.ACTION_OnIntersectionExitTrigger, (parameter) => {\r\n                                const parameterMesh = parameter.mesh ? parameter.mesh : parameter;\r\n                                return otherMesh === parameterMesh;\r\n                            }) ||\r\n                            action.trigger === Constants.ACTION_OnIntersectionExitTrigger\r\n                        ) {\r\n                            sourceMesh._intersectionsInProgress.splice(currentIntersectionInProgress, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _advancePhysicsEngineStep(step: number) {\r\n        // Do nothing. Code will be replaced if physics engine component is referenced\r\n    }\r\n\r\n    /**\r\n     * User updatable function that will return a deterministic frame time when engine is in deterministic lock step mode\r\n     * @returns the frame time\r\n     */\r\n    public getDeterministicFrameTime: () => number = () => {\r\n        return this._engine.getTimeStep();\r\n    };\r\n\r\n    /** @internal */\r\n    public _animate(customDeltaTime?: number): void {\r\n        // Nothing to do as long as Animatable have not been imported.\r\n    }\r\n\r\n    /** Execute all animations (for a frame) */\r\n    public animate() {\r\n        if (this._engine.isDeterministicLockStep()) {\r\n            let deltaTime = Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime)) + this._timeAccumulator;\r\n\r\n            const defaultFrameTime = this._engine.getTimeStep();\r\n            const defaultFPS = 1000.0 / defaultFrameTime / 1000.0;\r\n\r\n            let stepsTaken = 0;\r\n\r\n            const maxSubSteps = this._engine.getLockstepMaxSteps();\r\n\r\n            let internalSteps = Math.floor(deltaTime / defaultFrameTime);\r\n            internalSteps = Math.min(internalSteps, maxSubSteps);\r\n\r\n            while (deltaTime > 0 && stepsTaken < internalSteps) {\r\n                this.onBeforeStepObservable.notifyObservers(this);\r\n\r\n                // Animations\r\n                this._animationRatio = defaultFrameTime * defaultFPS;\r\n                this._animate(defaultFrameTime);\r\n                this.onAfterAnimationsObservable.notifyObservers(this);\r\n\r\n                // Physics\r\n                if (this.physicsEnabled) {\r\n                    this._advancePhysicsEngineStep(defaultFrameTime);\r\n                }\r\n\r\n                this.onAfterStepObservable.notifyObservers(this);\r\n                this._currentStepId++;\r\n\r\n                stepsTaken++;\r\n                deltaTime -= defaultFrameTime;\r\n            }\r\n\r\n            this._timeAccumulator = deltaTime < 0 ? 0 : deltaTime;\r\n        } else {\r\n            // Animations\r\n            const deltaTime = this.useConstantAnimationDeltaTime ? 16 : Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime));\r\n            this._animationRatio = deltaTime * (60.0 / 1000.0);\r\n            this._animate();\r\n            this.onAfterAnimationsObservable.notifyObservers(this);\r\n\r\n            // Physics\r\n            if (this.physicsEnabled) {\r\n                this._advancePhysicsEngineStep(deltaTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _clear(): void {\r\n        if (this.autoClearDepthAndStencil || this.autoClear) {\r\n            this._engine.clear(this._clearColor, this.autoClear || this.forceWireframe || this.forcePointsCloud, this.autoClearDepthAndStencil, this.autoClearDepthAndStencil);\r\n        }\r\n    }\r\n\r\n    private _checkCameraRenderTarget(camera: Nullable<Camera>) {\r\n        if (camera?.outputRenderTarget && !camera?.isRigCamera) {\r\n            camera.outputRenderTarget._cleared = false;\r\n        }\r\n        if (camera?.rigCameras?.length) {\r\n            for (let i = 0; i < camera.rigCameras.length; ++i) {\r\n                const rtt = camera.rigCameras[i].outputRenderTarget;\r\n                if (rtt) {\r\n                    rtt._cleared = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache of all meshes\r\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\r\n     */\r\n    public resetDrawCache(passId?: number): void {\r\n        if (!this.meshes) {\r\n            return;\r\n        }\r\n\r\n        for (const mesh of this.meshes) {\r\n            mesh.resetDrawCache(passId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If this function is defined it will take precedence over the standard render() function.\r\n     */\r\n    public customRenderFunction?: (updateCameras: boolean, ignoreAnimations: boolean) => void;\r\n\r\n    private _renderWithFrameGraph(updateCameras = true, ignoreAnimations = false): void {\r\n        this.activeCamera = null;\r\n\r\n        this._activeParticleSystems.reset();\r\n        this._activeSkeletons.reset();\r\n\r\n        // Update Cameras\r\n        if (updateCameras) {\r\n            for (const camera of this.cameras) {\r\n                camera.update();\r\n                if (camera.cameraRigMode !== Constants.RIG_MODE_NONE) {\r\n                    // rig cameras\r\n                    for (let index = 0; index < camera._rigCameras.length; index++) {\r\n                        camera._rigCameras[index].update();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // We must keep these steps because the procedural texture component relies on them.\r\n        // TODO: move the procedural texture component to the frame graph.\r\n        for (const step of this._beforeClearStage) {\r\n            step.action();\r\n        }\r\n\r\n        // Process meshes\r\n        const meshes = this.getActiveMeshCandidates();\r\n        const len = meshes.length;\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            const mesh = meshes.data[i];\r\n\r\n            if (mesh.isBlocked) {\r\n                continue;\r\n            }\r\n\r\n            this._totalVertices.addCount(mesh.getTotalVertices(), false);\r\n\r\n            if (!mesh.isReady() || !mesh.isEnabled() || mesh.scaling.hasAZeroComponent) {\r\n                continue;\r\n            }\r\n\r\n            mesh.computeWorldMatrix();\r\n\r\n            if (mesh.actionManager && mesh.actionManager.hasSpecificTriggers2(Constants.ACTION_OnIntersectionEnterTrigger, Constants.ACTION_OnIntersectionExitTrigger)) {\r\n                this._meshesForIntersections.pushNoDuplicate(mesh);\r\n            }\r\n        }\r\n\r\n        // Animate Particle systems\r\n        if (this.particlesEnabled) {\r\n            for (let particleIndex = 0; particleIndex < this.particleSystems.length; particleIndex++) {\r\n                const particleSystem = this.particleSystems[particleIndex];\r\n\r\n                if (!particleSystem.isStarted() || !particleSystem.emitter) {\r\n                    continue;\r\n                }\r\n\r\n                const emitter = <any>particleSystem.emitter;\r\n                if (!emitter.position || emitter.isEnabled()) {\r\n                    this._activeParticleSystems.push(particleSystem);\r\n                    particleSystem.animate();\r\n                }\r\n            }\r\n        }\r\n\r\n        // Render the graph\r\n        this.frameGraph?.execute();\r\n    }\r\n\r\n    /**\r\n     * Render the scene\r\n     * @param updateCameras defines a boolean indicating if cameras must update according to their inputs (true by default)\r\n     * @param ignoreAnimations defines a boolean indicating if animations should not be executed (false by default)\r\n     */\r\n    public render(updateCameras = true, ignoreAnimations = false): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (this.onReadyObservable.hasObservers() && this._executeWhenReadyTimeoutId === null) {\r\n            this._checkIsReady();\r\n        }\r\n\r\n        this._frameId++;\r\n        this._defaultFrameBufferCleared = false;\r\n        this._checkCameraRenderTarget(this.activeCamera);\r\n        if (this.activeCameras?.length) {\r\n            this.activeCameras.forEach(this._checkCameraRenderTarget);\r\n        }\r\n\r\n        // Register components that have been associated lately to the scene.\r\n        this._registerTransientComponents();\r\n\r\n        this._activeParticles.fetchNewFrame();\r\n        this._totalVertices.fetchNewFrame();\r\n        this._activeIndices.fetchNewFrame();\r\n        this._activeBones.fetchNewFrame();\r\n        this._meshesForIntersections.reset();\r\n        this.resetCachedMaterial();\r\n\r\n        this.onBeforeAnimationsObservable.notifyObservers(this);\r\n\r\n        // Actions\r\n        if (this.actionManager) {\r\n            this.actionManager.processTrigger(Constants.ACTION_OnEveryFrameTrigger);\r\n        }\r\n\r\n        // Animations\r\n        if (!ignoreAnimations) {\r\n            this.animate();\r\n        }\r\n\r\n        // Before camera update steps\r\n        for (const step of this._beforeCameraUpdateStage) {\r\n            step.action();\r\n        }\r\n\r\n        // Update Cameras\r\n        if (updateCameras) {\r\n            if (this.activeCameras && this.activeCameras.length > 0) {\r\n                for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\r\n                    const camera = this.activeCameras[cameraIndex];\r\n                    camera.update();\r\n                    if (camera.cameraRigMode !== Constants.RIG_MODE_NONE) {\r\n                        // rig cameras\r\n                        for (let index = 0; index < camera._rigCameras.length; index++) {\r\n                            camera._rigCameras[index].update();\r\n                        }\r\n                    }\r\n                }\r\n            } else if (this.activeCamera) {\r\n                this.activeCamera.update();\r\n                if (this.activeCamera.cameraRigMode !== Constants.RIG_MODE_NONE) {\r\n                    // rig cameras\r\n                    for (let index = 0; index < this.activeCamera._rigCameras.length; index++) {\r\n                        this.activeCamera._rigCameras[index].update();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Before render\r\n        this.onBeforeRenderObservable.notifyObservers(this);\r\n        // Custom render function?\r\n        if (this.customRenderFunction) {\r\n            this._renderId++;\r\n            this._engine.currentRenderPassId = Constants.RENDERPASS_MAIN;\r\n\r\n            this.customRenderFunction(updateCameras, ignoreAnimations);\r\n        } else {\r\n            const engine = this.getEngine();\r\n\r\n            // Customs render targets\r\n            this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\r\n\r\n            const currentActiveCamera = this.activeCameras?.length ? this.activeCameras[0] : this.activeCamera;\r\n            if (this.renderTargetsEnabled) {\r\n                Tools.StartPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\r\n                this._intermediateRendering = true;\r\n                for (let customIndex = 0; customIndex < this.customRenderTargets.length; customIndex++) {\r\n                    const renderTarget = this.customRenderTargets[customIndex];\r\n                    if (renderTarget._shouldRender()) {\r\n                        this._renderId++;\r\n\r\n                        this.activeCamera = renderTarget.activeCamera || this.activeCamera;\r\n\r\n                        if (!this.activeCamera) {\r\n                            throw new Error(\"Active camera not set\");\r\n                        }\r\n\r\n                        // Viewport\r\n                        engine.setViewport(this.activeCamera.viewport);\r\n\r\n                        // Camera\r\n                        this.updateTransformMatrix();\r\n\r\n                        renderTarget.render(currentActiveCamera !== this.activeCamera, this.dumpNextRenderTargets);\r\n                    }\r\n                }\r\n                Tools.EndPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\r\n                this._intermediateRendering = false;\r\n                this._renderId++;\r\n            }\r\n\r\n            this._engine.currentRenderPassId = currentActiveCamera?.renderPassId ?? Constants.RENDERPASS_MAIN;\r\n\r\n            // Restore back buffer\r\n            this.activeCamera = currentActiveCamera;\r\n            if (this._activeCamera && this._activeCamera.cameraRigMode !== Constants.RIG_MODE_CUSTOM && !this.prePass) {\r\n                this._bindFrameBuffer(this._activeCamera, false);\r\n            }\r\n            this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\r\n\r\n            for (const step of this._beforeClearStage) {\r\n                step.action();\r\n            }\r\n\r\n            // Clear\r\n            this._clearFrameBuffer(this.activeCamera);\r\n\r\n            // Collects render targets from external components.\r\n            for (const step of this._gatherRenderTargetsStage) {\r\n                step.action(this._renderTargets);\r\n            }\r\n\r\n            // Multi-cameras?\r\n            if (this.activeCameras && this.activeCameras.length > 0) {\r\n                for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\r\n                    this._processSubCameras(this.activeCameras[cameraIndex], cameraIndex > 0);\r\n                }\r\n            } else {\r\n                if (!this.activeCamera) {\r\n                    throw new Error(\"No camera defined\");\r\n                }\r\n\r\n                this._processSubCameras(this.activeCamera, !!this.activeCamera.outputRenderTarget);\r\n            }\r\n        }\r\n\r\n        // Intersection checks\r\n        this._checkIntersections();\r\n\r\n        // Executes the after render stage actions.\r\n        for (const step of this._afterRenderStage) {\r\n            step.action();\r\n        }\r\n\r\n        // After render\r\n        if (this.afterRender) {\r\n            this.afterRender();\r\n        }\r\n\r\n        this.onAfterRenderObservable.notifyObservers(this);\r\n\r\n        // Cleaning\r\n        if (this._toBeDisposed.length) {\r\n            for (let index = 0; index < this._toBeDisposed.length; index++) {\r\n                const data = this._toBeDisposed[index];\r\n                if (data) {\r\n                    data.dispose();\r\n                }\r\n            }\r\n\r\n            this._toBeDisposed.length = 0;\r\n        }\r\n\r\n        if (this.dumpNextRenderTargets) {\r\n            this.dumpNextRenderTargets = false;\r\n        }\r\n\r\n        this._activeBones.addCount(0, true);\r\n        this._activeIndices.addCount(0, true);\r\n        this._activeParticles.addCount(0, true);\r\n\r\n        this._engine.restoreDefaultFramebuffer();\r\n    }\r\n\r\n    /**\r\n     * Freeze all materials\r\n     * A frozen material will not be updatable but should be faster to render\r\n     * Note: multimaterials will not be frozen, but their submaterials will\r\n     */\r\n    public freezeMaterials(): void {\r\n        for (let i = 0; i < this.materials.length; i++) {\r\n            this.materials[i].freeze();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unfreeze all materials\r\n     * A frozen material will not be updatable but should be faster to render\r\n     */\r\n    public unfreezeMaterials(): void {\r\n        for (let i = 0; i < this.materials.length; i++) {\r\n            this.materials[i].unfreeze();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all held resources\r\n     */\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.beforeRender = null;\r\n        this.afterRender = null;\r\n        this.metadata = null;\r\n\r\n        this.skeletons.length = 0;\r\n        this.morphTargetManagers.length = 0;\r\n        this._transientComponents.length = 0;\r\n        this._isReadyForMeshStage.clear();\r\n        this._beforeEvaluateActiveMeshStage.clear();\r\n        this._evaluateSubMeshStage.clear();\r\n        this._preActiveMeshStage.clear();\r\n        this._cameraDrawRenderTargetStage.clear();\r\n        this._beforeCameraDrawStage.clear();\r\n        this._beforeRenderTargetDrawStage.clear();\r\n        this._beforeRenderingGroupDrawStage.clear();\r\n        this._beforeRenderingMeshStage.clear();\r\n        this._afterRenderingMeshStage.clear();\r\n        this._afterRenderingGroupDrawStage.clear();\r\n        this._afterCameraDrawStage.clear();\r\n        this._afterRenderTargetDrawStage.clear();\r\n        this._afterRenderStage.clear();\r\n        this._beforeCameraUpdateStage.clear();\r\n        this._beforeClearStage.clear();\r\n        this._gatherRenderTargetsStage.clear();\r\n        this._gatherActiveCameraRenderTargetsStage.clear();\r\n        this._pointerMoveStage.clear();\r\n        this._pointerDownStage.clear();\r\n        this._pointerUpStage.clear();\r\n\r\n        this.importedMeshesFiles = [] as string[];\r\n\r\n        if (this._activeAnimatables && this.stopAllAnimations) {\r\n            // Ensures that no animatable notifies a callback that could start a new animation group, constantly adding new animatables to the active list...\r\n            this._activeAnimatables.forEach((animatable) => {\r\n                animatable.onAnimationEndObservable.clear();\r\n                animatable.onAnimationEnd = null;\r\n            });\r\n            this.stopAllAnimations();\r\n        }\r\n\r\n        this.resetCachedMaterial();\r\n\r\n        // Smart arrays\r\n        if (this.activeCamera) {\r\n            this.activeCamera._activeMeshes.dispose();\r\n            this.activeCamera = null;\r\n        }\r\n        this.activeCameras = null;\r\n\r\n        this._activeMeshes.dispose();\r\n        this._renderingManager.dispose();\r\n        this._processedMaterials.dispose();\r\n        this._activeParticleSystems.dispose();\r\n        this._activeSkeletons.dispose();\r\n        this._softwareSkinnedMeshes.dispose();\r\n        this._renderTargets.dispose();\r\n        this._materialsRenderTargets.dispose();\r\n        this._registeredForLateAnimationBindings.dispose();\r\n        this._meshesForIntersections.dispose();\r\n        this._toBeDisposed.length = 0;\r\n\r\n        // Abort active requests\r\n        const activeRequests = this._activeRequests.slice();\r\n        for (const request of activeRequests) {\r\n            request.abort();\r\n        }\r\n        this._activeRequests.length = 0;\r\n\r\n        // Events\r\n        try {\r\n            this.onDisposeObservable.notifyObservers(this);\r\n        } catch (e) {\r\n            Logger.Error(\"An error occurred while calling onDisposeObservable!\", e);\r\n        }\r\n\r\n        this.detachControl();\r\n\r\n        // Detach cameras\r\n        const canvas = this._engine.getInputElement();\r\n\r\n        if (canvas) {\r\n            for (let index = 0; index < this.cameras.length; index++) {\r\n                this.cameras[index].detachControl();\r\n            }\r\n        }\r\n\r\n        // Release animation groups\r\n        this._disposeList(this.animationGroups);\r\n\r\n        // Release lights\r\n        this._disposeList(this.lights);\r\n\r\n        // Release materials\r\n        if (this._defaultMaterial) {\r\n            this._defaultMaterial.dispose();\r\n        }\r\n        this._disposeList(this.multiMaterials);\r\n        this._disposeList(this.materials);\r\n\r\n        // Release meshes\r\n        this._disposeList(this.meshes, (item) => item.dispose(true));\r\n        this._disposeList(this.transformNodes, (item) => item.dispose(true));\r\n\r\n        // Release cameras\r\n        const cameras = this.cameras;\r\n        this._disposeList(cameras);\r\n\r\n        // Release particles\r\n        this._disposeList(this.particleSystems);\r\n\r\n        // Release postProcesses\r\n        this._disposeList(this.postProcesses);\r\n\r\n        // Release textures\r\n        this._disposeList(this.textures);\r\n\r\n        // Release morph targets\r\n        this._disposeList(this.morphTargetManagers);\r\n\r\n        // Release UBO\r\n        this._sceneUbo.dispose();\r\n\r\n        if (this._multiviewSceneUbo) {\r\n            this._multiviewSceneUbo.dispose();\r\n        }\r\n\r\n        // Post-processes\r\n        this.postProcessManager.dispose();\r\n\r\n        // Components\r\n        this._disposeList(this._components);\r\n\r\n        // Remove from engine\r\n        let index = this._engine.scenes.indexOf(this);\r\n\r\n        if (index > -1) {\r\n            this._engine.scenes.splice(index, 1);\r\n        }\r\n\r\n        if (EngineStore._LastCreatedScene === this) {\r\n            EngineStore._LastCreatedScene = null;\r\n            let engineIndex = EngineStore.Instances.length - 1;\r\n            while (engineIndex >= 0) {\r\n                const engine = EngineStore.Instances[engineIndex];\r\n                if (engine.scenes.length > 0) {\r\n                    EngineStore._LastCreatedScene = engine.scenes[this._engine.scenes.length - 1];\r\n                    break;\r\n                }\r\n                engineIndex--;\r\n            }\r\n        }\r\n\r\n        index = this._engine._virtualScenes.indexOf(this);\r\n\r\n        if (index > -1) {\r\n            this._engine._virtualScenes.splice(index, 1);\r\n        }\r\n\r\n        this._engine.wipeCaches(true);\r\n        this.onDisposeObservable.clear();\r\n        this.onBeforeRenderObservable.clear();\r\n        this.onAfterRenderObservable.clear();\r\n        this.onBeforeRenderTargetsRenderObservable.clear();\r\n        this.onAfterRenderTargetsRenderObservable.clear();\r\n        this.onAfterStepObservable.clear();\r\n        this.onBeforeStepObservable.clear();\r\n        this.onBeforeActiveMeshesEvaluationObservable.clear();\r\n        this.onAfterActiveMeshesEvaluationObservable.clear();\r\n        this.onBeforeParticlesRenderingObservable.clear();\r\n        this.onAfterParticlesRenderingObservable.clear();\r\n        this.onBeforeDrawPhaseObservable.clear();\r\n        this.onAfterDrawPhaseObservable.clear();\r\n        this.onBeforeAnimationsObservable.clear();\r\n        this.onAfterAnimationsObservable.clear();\r\n        this.onDataLoadedObservable.clear();\r\n        this.onBeforeRenderingGroupObservable.clear();\r\n        this.onAfterRenderingGroupObservable.clear();\r\n        this.onMeshImportedObservable.clear();\r\n        this.onBeforeCameraRenderObservable.clear();\r\n        this.onAfterCameraRenderObservable.clear();\r\n        this.onAfterRenderCameraObservable.clear();\r\n        this.onReadyObservable.clear();\r\n        this.onNewCameraAddedObservable.clear();\r\n        this.onCameraRemovedObservable.clear();\r\n        this.onNewLightAddedObservable.clear();\r\n        this.onLightRemovedObservable.clear();\r\n        this.onNewGeometryAddedObservable.clear();\r\n        this.onGeometryRemovedObservable.clear();\r\n        this.onNewTransformNodeAddedObservable.clear();\r\n        this.onTransformNodeRemovedObservable.clear();\r\n        this.onNewMeshAddedObservable.clear();\r\n        this.onMeshRemovedObservable.clear();\r\n        this.onNewSkeletonAddedObservable.clear();\r\n        this.onSkeletonRemovedObservable.clear();\r\n        this.onNewMaterialAddedObservable.clear();\r\n        this.onNewMultiMaterialAddedObservable.clear();\r\n        this.onMaterialRemovedObservable.clear();\r\n        this.onMultiMaterialRemovedObservable.clear();\r\n        this.onNewTextureAddedObservable.clear();\r\n        this.onTextureRemovedObservable.clear();\r\n        this.onPrePointerObservable.clear();\r\n        this.onPointerObservable.clear();\r\n        this.onPreKeyboardObservable.clear();\r\n        this.onKeyboardObservable.clear();\r\n        this.onActiveCameraChanged.clear();\r\n        this.onScenePerformancePriorityChangedObservable.clear();\r\n        this.onClearColorChangedObservable.clear();\r\n        this.onEnvironmentTextureChangedObservable.clear();\r\n        this.onMeshUnderPointerUpdatedObservable.clear();\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    private _disposeList<T extends IDisposable>(items: T[], callback?: (item: T) => void): void {\r\n        const itemsCopy = items.slice(0);\r\n        callback = callback ?? ((item) => item.dispose());\r\n        for (const item of itemsCopy) {\r\n            callback(item);\r\n        }\r\n        items.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Gets if the scene is already disposed\r\n     */\r\n    public get isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    /**\r\n     * Call this function to reduce memory footprint of the scene.\r\n     * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\r\n     */\r\n    public clearCachedVertexData(): void {\r\n        for (let meshIndex = 0; meshIndex < this.meshes.length; meshIndex++) {\r\n            const mesh = this.meshes[meshIndex];\r\n            const geometry = (<Mesh>mesh).geometry;\r\n\r\n            if (geometry) {\r\n                geometry.clearCachedData();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will remove the local cached buffer data from texture.\r\n     * It will save memory but will prevent the texture from being rebuilt\r\n     */\r\n    public cleanCachedTextureBuffer(): void {\r\n        for (const baseTexture of this.textures) {\r\n            const buffer = (<Texture>baseTexture)._buffer;\r\n\r\n            if (buffer) {\r\n                (<Texture>baseTexture)._buffer = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the world extend vectors with an optional filter\r\n     *\r\n     * @param filterPredicate the predicate - which meshes should be included when calculating the world size\r\n     * @returns {{ min: Vector3; max: Vector3 }} min and max vectors\r\n     */\r\n    public getWorldExtends(filterPredicate?: (mesh: AbstractMesh) => boolean): { min: Vector3; max: Vector3 } {\r\n        const min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        const max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n        filterPredicate = filterPredicate || (() => true);\r\n        this.meshes.filter(filterPredicate).forEach((mesh) => {\r\n            mesh.computeWorldMatrix(true);\r\n\r\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0 || mesh.infiniteDistance) {\r\n                return;\r\n            }\r\n\r\n            const boundingInfo = mesh.getBoundingInfo();\r\n\r\n            const minBox = boundingInfo.boundingBox.minimumWorld;\r\n            const maxBox = boundingInfo.boundingBox.maximumWorld;\r\n\r\n            Vector3.CheckExtends(minBox, min, max);\r\n            Vector3.CheckExtends(maxBox, min, max);\r\n        });\r\n\r\n        return {\r\n            min: min,\r\n            max: max,\r\n        };\r\n    }\r\n\r\n    // Picking\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Creates a ray that can be used to pick in the scene\r\n     * @param x defines the x coordinate of the origin (on-screen)\r\n     * @param y defines the y coordinate of the origin (on-screen)\r\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\r\n     * @param camera defines the camera to use for the picking\r\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\r\n     * @returns a Ray\r\n     */\r\n    public createPickingRay(x: number, y: number, world: Nullable<Matrix>, camera: Nullable<Camera>, cameraViewSpace = false): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Creates a ray that can be used to pick in the scene\r\n     * @param x defines the x coordinate of the origin (on-screen)\r\n     * @param y defines the y coordinate of the origin (on-screen)\r\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\r\n     * @param result defines the ray where to store the picking ray\r\n     * @param camera defines the camera to use for the picking\r\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\r\n     * @param enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\r\n     * @returns the current scene\r\n     */\r\n    public createPickingRayToRef(\r\n        x: number,\r\n        y: number,\r\n        world: Nullable<Matrix>,\r\n        result: Ray,\r\n        camera: Nullable<Camera>,\r\n        cameraViewSpace = false,\r\n        enableDistantPicking = false\r\n    ): Scene {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Creates a ray that can be used to pick in the scene\r\n     * @param x defines the x coordinate of the origin (on-screen)\r\n     * @param y defines the y coordinate of the origin (on-screen)\r\n     * @param camera defines the camera to use for the picking\r\n     * @returns a Ray\r\n     */\r\n    public createPickingRayInCameraSpace(x: number, y: number, camera?: Camera): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Creates a ray that can be used to pick in the scene\r\n     * @param x defines the x coordinate of the origin (on-screen)\r\n     * @param y defines the y coordinate of the origin (on-screen)\r\n     * @param result defines the ray where to store the picking ray\r\n     * @param camera defines the camera to use for the picking\r\n     * @returns the current scene\r\n     */\r\n    public createPickingRayInCameraSpaceToRef(x: number, y: number, result: Ray, camera?: Camera): Scene {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    /** @internal */\r\n    public _registeredActions: number = 0;\r\n\r\n    /** Launch a ray to try to pick a mesh in the scene\r\n     * @param x position on screen\r\n     * @param y position on screen\r\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @returns a PickingInfo\r\n     */\r\n    public pick(x: number, y: number, predicate?: MeshPredicate, fastCheck?: boolean, camera?: Nullable<Camera>, trianglePredicate?: TrianglePickingPredicate): PickingInfo {\r\n        const warn = _WarnImport(\"Ray\", true);\r\n        if (warn) {\r\n            Logger.Warn(warn);\r\n        }\r\n        // Dummy info if picking as not been imported\r\n        return new PickingInfo();\r\n    }\r\n\r\n    /** Launch a ray to try to pick a mesh in the scene using only bounding information of the main mesh (not using submeshes)\r\n     * @param x position on screen\r\n     * @param y position on screen\r\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\r\n     * @returns a PickingInfo (Please note that some info will not be set like distance, bv, bu and everything that cannot be capture by only using bounding infos)\r\n     */\r\n    public pickWithBoundingInfo(x: number, y: number, predicate?: MeshPredicate, fastCheck?: boolean, camera?: Nullable<Camera>): Nullable<PickingInfo> {\r\n        const warn = _WarnImport(\"Ray\", true);\r\n        if (warn) {\r\n            Logger.Warn(warn);\r\n        }\r\n        // Dummy info if picking as not been imported\r\n        return new PickingInfo();\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Use the given ray to pick a mesh in the scene. A mesh triangle can be picked both from its front and back sides,\r\n     * irrespective of orientation.\r\n     * @param ray The ray to use to pick meshes\r\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must have isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @returns a PickingInfo\r\n     */\r\n    public pickWithRay(ray: Ray, predicate?: MeshPredicate, fastCheck?: boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo> {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Launch a ray to try to pick a mesh in the scene. A mesh triangle can be picked both from its front and back sides,\r\n     * irrespective of orientation.\r\n     * @param x X position on screen\r\n     * @param y Y position on screen\r\n     * @param predicate Predicate function used to determine eligible meshes and instances. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n     * @param camera camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @returns an array of PickingInfo\r\n     */\r\n    public multiPick(x: number, y: number, predicate?: MeshPredicate, camera?: Camera, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Launch a ray to try to pick a mesh in the scene\r\n     * @param ray Ray to use\r\n     * @param predicate Predicate function used to determine eligible meshes and instances. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @returns an array of PickingInfo\r\n     */\r\n    public multiPickWithRay(ray: Ray, predicate?: MeshPredicate, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    /**\r\n     * Force the value of meshUnderPointer\r\n     * @param mesh defines the mesh to use\r\n     * @param pointerId optional pointer id when using more than one pointer\r\n     * @param pickResult optional pickingInfo data used to find mesh\r\n     */\r\n    public setPointerOverMesh(mesh: Nullable<AbstractMesh>, pointerId?: number, pickResult?: Nullable<PickingInfo>): void {\r\n        this._inputManager.setPointerOverMesh(mesh, pointerId, pickResult);\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh under the pointer\r\n     * @returns a Mesh or null if no mesh is under the pointer\r\n     */\r\n    public getPointerOverMesh(): Nullable<AbstractMesh> {\r\n        return this._inputManager.getPointerOverMesh();\r\n    }\r\n\r\n    // Misc.\r\n    /** @internal */\r\n    public _rebuildGeometries(): void {\r\n        for (const geometry of this.geometries) {\r\n            geometry._rebuild();\r\n        }\r\n\r\n        for (const mesh of this.meshes) {\r\n            mesh._rebuild();\r\n        }\r\n\r\n        if (this.postProcessManager) {\r\n            this.postProcessManager._rebuild();\r\n        }\r\n\r\n        for (const component of this._components) {\r\n            component.rebuild();\r\n        }\r\n\r\n        for (const system of this.particleSystems) {\r\n            system.rebuild();\r\n        }\r\n\r\n        if (this.spriteManagers) {\r\n            for (const spriteMgr of this.spriteManagers) {\r\n                spriteMgr.rebuild();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuildTextures(): void {\r\n        for (const texture of this.textures) {\r\n            texture._rebuild(true);\r\n        }\r\n\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Get from a list of objects by tags\r\n     * @param list the list of objects to use\r\n     * @param tagsQuery the query to use\r\n     * @param filter a predicate to filter for tags\r\n     * @returns\r\n     */\r\n    private _getByTags<T>(list: T[], tagsQuery: string, filter?: (item: T) => boolean): T[] {\r\n        if (tagsQuery === undefined) {\r\n            // returns the complete list (could be done with Tags.MatchesQuery but no need to have a for-loop here)\r\n            return list;\r\n        }\r\n\r\n        const listByTags = [];\r\n\r\n        for (const i in list) {\r\n            const item = list[i];\r\n            if (Tags && Tags.MatchesQuery(item, tagsQuery) && (!filter || filter(item))) {\r\n                listByTags.push(item);\r\n            }\r\n        }\r\n\r\n        return listByTags;\r\n    }\r\n\r\n    /**\r\n     * Get a list of meshes by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Mesh\r\n     */\r\n    public getMeshesByTags(tagsQuery: string, filter?: (mesh: AbstractMesh) => boolean): AbstractMesh[] {\r\n        return this._getByTags(this.meshes, tagsQuery, filter);\r\n    }\r\n\r\n    /**\r\n     * Get a list of cameras by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Camera\r\n     */\r\n    public getCamerasByTags(tagsQuery: string, filter?: (camera: Camera) => boolean): Camera[] {\r\n        return this._getByTags(this.cameras, tagsQuery, filter);\r\n    }\r\n\r\n    /**\r\n     * Get a list of lights by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Light\r\n     */\r\n    public getLightsByTags(tagsQuery: string, filter?: (light: Light) => boolean): Light[] {\r\n        return this._getByTags(this.lights, tagsQuery, filter);\r\n    }\r\n\r\n    /**\r\n     * Get a list of materials by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Material\r\n     */\r\n    public getMaterialByTags(tagsQuery: string, filter?: (material: Material) => boolean): Material[] {\r\n        return this._getByTags(this.materials, tagsQuery, filter).concat(this._getByTags(this.multiMaterials, tagsQuery, filter));\r\n    }\r\n\r\n    /**\r\n     * Get a list of transform nodes by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of TransformNode\r\n     */\r\n    public getTransformNodesByTags(tagsQuery: string, filter?: (transform: TransformNode) => boolean): TransformNode[] {\r\n        return this._getByTags(this.transformNodes, tagsQuery, filter);\r\n    }\r\n\r\n    /**\r\n     * Overrides the default sort function applied in the rendering group to prepare the meshes.\r\n     * This allowed control for front to back rendering or reversly depending of the special needs.\r\n     *\r\n     * @param renderingGroupId The rendering group id corresponding to its index\r\n     * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\r\n     * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\r\n     * @param transparentSortCompareFn The transparent queue comparison function use to sort.\r\n     */\r\n    public setRenderingOrder(\r\n        renderingGroupId: number,\r\n        opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        transparentSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null\r\n    ): void {\r\n        this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\r\n     *\r\n     * @param renderingGroupId The rendering group id corresponding to its index\r\n     * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\r\n     * @param depth Automatically clears depth between groups if true and autoClear is true.\r\n     * @param stencil Automatically clears stencil between groups if true and autoClear is true.\r\n     */\r\n    public setRenderingAutoClearDepthStencil(renderingGroupId: number, autoClearDepthStencil: boolean, depth = true, stencil = true): void {\r\n        this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth, stencil);\r\n    }\r\n\r\n    /**\r\n     * Gets the current auto clear configuration for one rendering group of the rendering\r\n     * manager.\r\n     * @param index the rendering group index to get the information for\r\n     * @returns The auto clear setup for the requested rendering group\r\n     */\r\n    public getAutoClearDepthStencilSetup(index: number): IRenderingManagerAutoClearSetup {\r\n        return this._renderingManager.getAutoClearDepthStencilSetup(index);\r\n    }\r\n\r\n    private _blockMaterialDirtyMechanism = false;\r\n\r\n    /** @internal */\r\n    public _forceBlockMaterialDirtyMechanism(value: boolean) {\r\n        this._blockMaterialDirtyMechanism = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean blocking all the calls to markAllMaterialsAsDirty (ie. the materials won't be updated if they are out of sync) */\r\n    public get blockMaterialDirtyMechanism(): boolean {\r\n        return this._blockMaterialDirtyMechanism;\r\n    }\r\n\r\n    public set blockMaterialDirtyMechanism(value: boolean) {\r\n        if (this._blockMaterialDirtyMechanism === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockMaterialDirtyMechanism = value;\r\n\r\n        if (!value) {\r\n            // Do a complete update\r\n            this.markAllMaterialsAsDirty(Constants.MATERIAL_AllDirtyFlag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will flag all materials as dirty to trigger new shader compilation\r\n     * @param flag defines the flag used to specify which material part must be marked as dirty\r\n     * @param predicate If not null, it will be used to specify if a material has to be marked as dirty\r\n     */\r\n    public markAllMaterialsAsDirty(flag: number, predicate?: (mat: Material) => boolean): void {\r\n        if (this._blockMaterialDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        for (const material of this.materials) {\r\n            if (predicate && !predicate(material)) {\r\n                continue;\r\n            }\r\n            material.markAsDirty(flag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFile(\r\n        fileOrUrl: File | string,\r\n        onSuccess: (data: string | ArrayBuffer, responseURL?: string) => void,\r\n        onProgress?: (ev: ProgressEvent) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): IFileRequest {\r\n        const request = LoadFile(fileOrUrl, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\r\n        this._activeRequests.push(request);\r\n        request.onCompleteObservable.add((request) => {\r\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\r\n        });\r\n        return request;\r\n    }\r\n\r\n    public _loadFileAsync(\r\n        fileOrUrl: File | string,\r\n        onProgress?: (data: any) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: false,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): Promise<string>;\r\n\r\n    public _loadFileAsync(\r\n        fileOrUrl: File | string,\r\n        onProgress?: (data: any) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: true,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): Promise<ArrayBuffer>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFileAsync(\r\n        fileOrUrl: File | string,\r\n        onProgress?: (data: any) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: boolean,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this._loadFile(\r\n                fileOrUrl,\r\n                (data) => {\r\n                    resolve(data);\r\n                },\r\n                onProgress,\r\n                useOfflineSupport,\r\n                useArrayBuffer,\r\n                (request, exception) => {\r\n                    reject(exception);\r\n                },\r\n                onOpened\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _requestFile(\r\n        url: string,\r\n        onSuccess: (data: string | ArrayBuffer, request?: WebRequest) => void,\r\n        onProgress?: (ev: ProgressEvent) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (error: RequestFileError) => void,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): IFileRequest {\r\n        const request = RequestFile(url, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\r\n        this._activeRequests.push(request);\r\n        request.onCompleteObservable.add((request) => {\r\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\r\n        });\r\n        return request;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _requestFileAsync(\r\n        url: string,\r\n        onProgress?: (ev: ProgressEvent) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: boolean,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this._requestFile(\r\n                url,\r\n                (data) => {\r\n                    resolve(data);\r\n                },\r\n                onProgress,\r\n                useOfflineSupport,\r\n                useArrayBuffer,\r\n                (error) => {\r\n                    reject(error);\r\n                },\r\n                onOpened\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _readFile(\r\n        file: File,\r\n        onSuccess: (data: string | ArrayBuffer) => void,\r\n        onProgress?: (ev: ProgressEvent) => any,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (error: ReadFileError) => void\r\n    ): IFileRequest {\r\n        const request = ReadFile(file, onSuccess, onProgress, useArrayBuffer, onError);\r\n        this._activeRequests.push(request);\r\n        request.onCompleteObservable.add((request) => {\r\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\r\n        });\r\n        return request;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _readFileAsync(file: File, onProgress?: (ev: ProgressEvent) => any, useArrayBuffer?: boolean): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this._readFile(\r\n                file,\r\n                (data) => {\r\n                    resolve(data);\r\n                },\r\n                onProgress,\r\n                useArrayBuffer,\r\n                (error) => {\r\n                    reject(error);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Internal perfCollector instance used for sharing between inspector and playground.\r\n     * Marked as protected to allow sharing between prototype extensions, but disallow access at toplevel.\r\n     */\r\n    protected _perfCollector: Nullable<PerformanceViewerCollector> = null;\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * This method gets the performance collector belonging to the scene, which is generally shared with the inspector.\r\n     * @returns the perf collector belonging to the scene.\r\n     */\r\n    public getPerfCollector(): PerformanceViewerCollector {\r\n        throw _WarnImport(\"performanceViewerSceneExtension\");\r\n    }\r\n\r\n    // deprecated\r\n\r\n    /**\r\n     * Sets the active camera of the scene using its Id\r\n     * @param id defines the camera's Id\r\n     * @returns the new active camera or null if none found.\r\n     * @deprecated Please use setActiveCameraById instead\r\n     */\r\n    setActiveCameraByID(id: string): Nullable<Camera> {\r\n        return this.setActiveCameraById(id);\r\n    }\r\n    /**\r\n     * Get a material using its id\r\n     * @param id defines the material's Id\r\n     * @returns the material or null if none found.\r\n     * @deprecated Please use getMaterialById instead\r\n     */\r\n    getMaterialByID(id: string): Nullable<Material> {\r\n        return this.getMaterialById(id);\r\n    }\r\n    /**\r\n     * Gets a the last added material using a given id\r\n     * @param id defines the material's Id\r\n     * @returns the last material with the given id or null if none found.\r\n     * @deprecated Please use getLastMaterialById instead\r\n     */\r\n    getLastMaterialByID(id: string): Nullable<Material> {\r\n        return this.getLastMaterialById(id);\r\n    }\r\n\r\n    /**\r\n     * Get a texture using its unique id\r\n     * @param uniqueId defines the texture's unique id\r\n     * @returns the texture or null if none found.\r\n     * @deprecated Please use getTextureByUniqueId instead\r\n     */\r\n    getTextureByUniqueID(uniqueId: number): Nullable<BaseTexture> {\r\n        return this.getTextureByUniqueId(uniqueId);\r\n    }\r\n    /**\r\n     * Gets a camera using its Id\r\n     * @param id defines the Id to look for\r\n     * @returns the camera or null if not found\r\n     * @deprecated Please use getCameraById instead\r\n     */\r\n    getCameraByID(id: string): Nullable<Camera> {\r\n        return this.getCameraById(id);\r\n    }\r\n    /**\r\n     * Gets a camera using its unique Id\r\n     * @param uniqueId defines the unique Id to look for\r\n     * @returns the camera or null if not found\r\n     * @deprecated Please use getCameraByUniqueId instead\r\n     */\r\n    getCameraByUniqueID(uniqueId: number): Nullable<Camera> {\r\n        return this.getCameraByUniqueId(uniqueId);\r\n    }\r\n    /**\r\n     * Gets a bone using its Id\r\n     * @param id defines the bone's Id\r\n     * @returns the bone or null if not found\r\n     * @deprecated Please use getBoneById instead\r\n     */\r\n    getBoneByID(id: string): Nullable<Bone> {\r\n        return this.getBoneById(id);\r\n    }\r\n    /**\r\n     * Gets a light node using its Id\r\n     * @param id defines the light's Id\r\n     * @returns the light or null if none found.\r\n     * @deprecated Please use getLightById instead\r\n     */\r\n    getLightByID(id: string): Nullable<Light> {\r\n        return this.getLightById(id);\r\n    }\r\n    /**\r\n     * Gets a light node using its scene-generated unique Id\r\n     * @param uniqueId defines the light's unique Id\r\n     * @returns the light or null if none found.\r\n     * @deprecated Please use getLightByUniqueId instead\r\n     */\r\n    getLightByUniqueID(uniqueId: number): Nullable<Light> {\r\n        return this.getLightByUniqueId(uniqueId);\r\n    }\r\n    /**\r\n     * Gets a particle system by Id\r\n     * @param id defines the particle system Id\r\n     * @returns the corresponding system or null if none found\r\n     * @deprecated Please use getParticleSystemById instead\r\n     */\r\n    getParticleSystemByID(id: string): Nullable<IParticleSystem> {\r\n        return this.getParticleSystemById(id);\r\n    }\r\n    /**\r\n     * Gets a geometry using its Id\r\n     * @param id defines the geometry's Id\r\n     * @returns the geometry or null if none found.\r\n     * @deprecated Please use getGeometryById instead\r\n     */\r\n    getGeometryByID(id: string): Nullable<Geometry> {\r\n        return this.getGeometryById(id);\r\n    }\r\n    /**\r\n     * Gets the first added mesh found of a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the mesh found or null if not found at all\r\n     * @deprecated Please use getMeshById instead\r\n     */\r\n    getMeshByID(id: string): Nullable<AbstractMesh> {\r\n        return this.getMeshById(id);\r\n    }\r\n    /**\r\n     * Gets a mesh with its auto-generated unique Id\r\n     * @param uniqueId defines the unique Id to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     * @deprecated Please use getMeshByUniqueId instead\r\n     */\r\n    getMeshByUniqueID(uniqueId: number): Nullable<AbstractMesh> {\r\n        return this.getMeshByUniqueId(uniqueId);\r\n    }\r\n    /**\r\n     * Gets a the last added mesh using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     * @deprecated Please use getLastMeshById instead\r\n     */\r\n    getLastMeshByID(id: string): Nullable<AbstractMesh> {\r\n        return this.getLastMeshById(id);\r\n    }\r\n    /**\r\n     * Gets a list of meshes using their Id\r\n     * @param id defines the Id to search for\r\n     * @returns a list of meshes\r\n     * @deprecated Please use getMeshesById instead\r\n     */\r\n    getMeshesByID(id: string): Array<AbstractMesh> {\r\n        return this.getMeshesById(id);\r\n    }\r\n    /**\r\n     * Gets the first added transform node found of a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found transform node or null if not found at all.\r\n     * @deprecated Please use getTransformNodeById instead\r\n     */\r\n    getTransformNodeByID(id: string): Nullable<TransformNode> {\r\n        return this.getTransformNodeById(id);\r\n    }\r\n    /**\r\n     * Gets a transform node with its auto-generated unique Id\r\n     * @param uniqueId defines the unique Id to search for\r\n     * @returns the found transform node or null if not found at all.\r\n     * @deprecated Please use getTransformNodeByUniqueId instead\r\n     */\r\n    getTransformNodeByUniqueID(uniqueId: number): Nullable<TransformNode> {\r\n        return this.getTransformNodeByUniqueId(uniqueId);\r\n    }\r\n    /**\r\n     * Gets a list of transform nodes using their Id\r\n     * @param id defines the Id to search for\r\n     * @returns a list of transform nodes\r\n     * @deprecated Please use getTransformNodesById instead\r\n     */\r\n    getTransformNodesByID(id: string): Array<TransformNode> {\r\n        return this.getTransformNodesById(id);\r\n    }\r\n    /**\r\n     * Gets a node (Mesh, Camera, Light) using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found node or null if not found at all\r\n     * @deprecated Please use getNodeById instead\r\n     */\r\n    getNodeByID(id: string): Nullable<Node> {\r\n        return this.getNodeById(id);\r\n    }\r\n    /**\r\n     * Gets a the last added node (Mesh, Camera, Light) using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found node or null if not found at all\r\n     * @deprecated Please use getLastEntryById instead\r\n     */\r\n    getLastEntryByID(id: string): Nullable<Node> {\r\n        return this.getLastEntryById(id);\r\n    }\r\n    /**\r\n     * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\r\n     * @param id defines the Id to search for\r\n     * @returns the found skeleton or null if not found at all.\r\n     * @deprecated Please use getLastSkeletonById instead\r\n     */\r\n    getLastSkeletonByID(id: string): Nullable<Skeleton> {\r\n        return this.getLastSkeletonById(id);\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.Scene\", Scene);\r\n"],
  "mappings": "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",
  "names": ["DeviceType", "PointerInput", "NativePointerInput", "DualShockInput", "DualSenseInput", "XboxInput", "SwitchInput", "DeviceInputEventType", "deviceEvent", "pickResult", "pi", "ScenePerformancePriority", "len", "index", "request"]
}
