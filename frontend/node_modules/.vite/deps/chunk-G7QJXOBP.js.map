{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphGetVariableBlock.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../flowGraphBlock\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\r\n\r\n/**\r\n * The configuration of the FlowGraphGetVariableBlock.\r\n */\r\nexport interface IFlowGraphGetVariableBlockConfiguration<T> extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The name of the variable to get.\r\n     */\r\n    variable: string;\r\n\r\n    /**\r\n     * The initial value of the variable.\r\n     */\r\n    initialValue?: T;\r\n}\r\n\r\n/**\r\n * A block that gets the value of a variable.\r\n * Variables are an stored in the context of the flow graph.\r\n */\r\nexport class FlowGraphGetVariableBlock<T> extends FlowGraphBlock {\r\n    /**\r\n     * Output connection: The value of the variable.\r\n     */\r\n    public readonly value: FlowGraphDataConnection<T>;\r\n\r\n    /**\r\n     * Construct a FlowGraphGetVariableBlock.\r\n     * @param config construction parameters\r\n     */\r\n    constructor(public override config: IFlowGraphGetVariableBlockConfiguration<T>) {\r\n        super(config);\r\n\r\n        // The output connection has to have the name of the variable.\r\n        this.value = this.registerDataOutput(\"value\", RichTypeAny, config.initialValue);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _updateOutputs(context: FlowGraphContext): void {\r\n        const variableNameValue = this.config.variable;\r\n        if (context.hasVariable(variableNameValue)) {\r\n            this.value.setValue(context.getVariable(variableNameValue), context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes this block\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public override serialize(serializationObject?: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.config.variable = this.config.variable;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.GetVariable;\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.GetVariable, FlowGraphGetVariableBlock);\r\n"],
  "mappings": ";;;;;;;;;AA2BM,IAAO,4BAAP,cAA4C,eAAc;;;;;EAU5D,YAA4B,QAAkD;AAC1E,UAAM,MAAM;AADY,SAAA,SAAA;AAIxB,SAAK,QAAQ,KAAK,mBAAmB,SAAS,aAAa,OAAO,YAAY;EAClF;;;;EAKgB,eAAe,SAAyB;AACpD,UAAM,oBAAoB,KAAK,OAAO;AACtC,QAAI,QAAQ,YAAY,iBAAiB,GAAG;AACxC,WAAK,MAAM,SAAS,QAAQ,YAAY,iBAAiB,GAAG,OAAO;IACvE;EACJ;;;;;EAMgB,UAAU,qBAAyB;AAC/C,UAAM,UAAU,mBAAmB;AACnC,wBAAoB,OAAO,WAAW,KAAK,OAAO;EACtD;EAEgB,eAAY;AACxB,WAAA;EACJ;;AAGJ,cAAa,6BAAkC,yBAAyB;",
  "names": []
}
