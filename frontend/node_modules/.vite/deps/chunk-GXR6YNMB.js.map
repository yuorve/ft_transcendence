{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphDoNBlock.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { RichTypeFlowGraphInteger } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphInteger } from \"../../../CustomTypes/flowGraphInteger\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\n\r\n/**\r\n * Configuration for the DoN block.\r\n */\r\nexport interface IFlowGraphDoNBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The start index for the counter.\r\n     */\r\n    startIndex?: FlowGraphInteger;\r\n}\r\n/**\r\n * A block that executes a branch a set number of times.\r\n */\r\nexport class FlowGraphDoNBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Input connection: Resets the counter\r\n     */\r\n    public readonly reset: FlowGraphSignalConnection;\r\n    /**\r\n     * Input connection: The maximum number of times the block can be executed.\r\n     */\r\n    public readonly maxExecutions: FlowGraphDataConnection<FlowGraphInteger>;\r\n    /**\r\n     * Output connection: The number of times the block has been executed.\r\n     */\r\n    public readonly executionCount: FlowGraphDataConnection<FlowGraphInteger>;\r\n\r\n    constructor(\r\n        /**\r\n         * [Object] the configuration of the block\r\n         */\r\n        public override config: IFlowGraphDoNBlockConfiguration = {}\r\n    ) {\r\n        super(config);\r\n        this.config.startIndex = config.startIndex ?? new FlowGraphInteger(0);\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n        this.maxExecutions = this.registerDataInput(\"maxExecutions\", RichTypeFlowGraphInteger);\r\n        this.executionCount = this.registerDataOutput(\"executionCount\", RichTypeFlowGraphInteger, new FlowGraphInteger(0));\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        if (callingSignal === this.reset) {\r\n            this.executionCount.setValue(this.config.startIndex!, context);\r\n        } else {\r\n            const currentCountValue = this.executionCount.getValue(context);\r\n            if (currentCountValue.value < this.maxExecutions.getValue(context).value) {\r\n                this.executionCount.setValue(new FlowGraphInteger(currentCountValue.value + 1), context);\r\n                this.out._activateSignal(context);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.DoN;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.DoN, FlowGraphDoNBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;AAsBM,IAAO,oBAAP,cAAiC,qCAAoC;EAcvE,YAIoB,SAA0C,CAAA,GAAE;AAE5D,UAAM,MAAM;AAFI,SAAA,SAAA;AAGhB,SAAK,OAAO,aAAa,OAAO,cAAc,IAAI,iBAAiB,CAAC;AACpE,SAAK,QAAQ,KAAK,qBAAqB,OAAO;AAC9C,SAAK,gBAAgB,KAAK,kBAAkB,iBAAiB,wBAAwB;AACrF,SAAK,iBAAiB,KAAK,mBAAmB,kBAAkB,0BAA0B,IAAI,iBAAiB,CAAC,CAAC;EACrH;EAEO,SAAS,SAA2B,eAAwC;AAC/E,QAAI,kBAAkB,KAAK,OAAO;AAC9B,WAAK,eAAe,SAAS,KAAK,OAAO,YAAa,OAAO;IACjE,OAAO;AACH,YAAM,oBAAoB,KAAK,eAAe,SAAS,OAAO;AAC9D,UAAI,kBAAkB,QAAQ,KAAK,cAAc,SAAS,OAAO,EAAE,OAAO;AACtE,aAAK,eAAe,SAAS,IAAI,iBAAiB,kBAAkB,QAAQ,CAAC,GAAG,OAAO;AACvF,aAAK,IAAI,gBAAgB,OAAO;MACpC;IACJ;EACJ;;;;EAKgB,eAAY;AACxB,WAAA;EACJ;;AAEJ,cAAa,qBAA0B,iBAAiB;",
  "names": []
}
