import {
  FlowGraphExecutionBlockWithOutSignal
} from "./chunk-4PVXVE5L.js";
import {
  RichTypeAny
} from "./chunk-PQRK4BIZ.js";
import {
  RegisterClass
} from "./chunk-LMH7SWDS.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Execution/flowGraphSetVariableBlock.js
var FlowGraphSetVariableBlock = class extends FlowGraphExecutionBlockWithOutSignal {
  constructor(config) {
    super(config);
    this.value = this.registerDataInput("value", RichTypeAny);
  }
  _execute(context, _callingSignal) {
    var _a, _b;
    const currentlyRunningAnimationGroups = context._getGlobalContextVariable("currentlyRunningAnimationGroups", []);
    for (const animationUniqueId of currentlyRunningAnimationGroups) {
      const animation = context.assetsContext.animationGroups[animationUniqueId];
      for (const targetAnimation of animation.targetedAnimations) {
        if (targetAnimation.target === context) {
          if (targetAnimation.target === context) {
            if (targetAnimation.animation.targetProperty === ((_a = this.config) == null ? void 0 : _a.variable)) {
              animation.stop();
              const index = currentlyRunningAnimationGroups.indexOf(animationUniqueId);
              if (index > -1) {
                currentlyRunningAnimationGroups.splice(index, 1);
              }
              context._setGlobalContextVariable("currentlyRunningAnimationGroups", currentlyRunningAnimationGroups);
              break;
            }
          }
        }
      }
    }
    context.setVariable((_b = this.config) == null ? void 0 : _b.variable, this.value.getValue(context));
    this.out._activateSignal(context);
  }
  getClassName() {
    return "FlowGraphSetVariableBlock";
  }
  serialize(serializationObject) {
    var _a;
    super.serialize(serializationObject);
    serializationObject.config.variable = (_a = this.config) == null ? void 0 : _a.variable;
  }
};
RegisterClass("FlowGraphSetVariableBlock", FlowGraphSetVariableBlock);

export {
  FlowGraphSetVariableBlock
};
//# sourceMappingURL=chunk-HNYXRSGD.js.map
