{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphSetVariableBlock.ts"],
  "sourcesContent": ["import { RegisterClass } from \"core/Misc/typeStore\";\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../flowGraphExecutionBlockWithOutSignal\";\nimport type { FlowGraphSignalConnection } from \"../../flowGraphSignalConnection\";\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\n\n/**\n * The configuration of the FlowGraphGetVariableBlock.\n */\nexport interface IFlowGraphSetVariableBlockConfiguration extends IFlowGraphBlockConfiguration {\n    /**\n     * The name of the variable to set.\n     */\n    variable: string;\n}\n\n/**\n * This block will set a variable on the context.\n */\nexport class FlowGraphSetVariableBlock<T> extends FlowGraphExecutionBlockWithOutSignal {\n    /**\n     * Input connection: The value to set.\n     */\n    public readonly value: FlowGraphDataConnection<T>;\n\n    constructor(config: IFlowGraphSetVariableBlockConfiguration) {\n        super(config);\n\n        this.value = this.registerDataInput(\"value\", RichTypeAny);\n    }\n\n    public override _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\n        // check if there is an animation(group) running on this variable. If there is, stop the animation - a value was force-set.\n        const currentlyRunningAnimationGroups = context._getGlobalContextVariable(\"currentlyRunningAnimationGroups\", []) as number[];\n        for (const animationUniqueId of currentlyRunningAnimationGroups) {\n            const animation = context.assetsContext.animationGroups[animationUniqueId];\n            // check if there is a target animation that has the target set to be the context\n            for (const targetAnimation of animation.targetedAnimations) {\n                if (targetAnimation.target === context) {\n                    // check if the target property is the variable we are setting\n                    if (targetAnimation.target === context) {\n                        // check the variable name\n                        if (targetAnimation.animation.targetProperty === this.config?.variable) {\n                            // stop the animation\n                            animation.stop();\n                            // remove the animation from the currently running animations\n                            const index = currentlyRunningAnimationGroups.indexOf(animationUniqueId);\n                            if (index > -1) {\n                                currentlyRunningAnimationGroups.splice(index, 1);\n                            }\n                            context._setGlobalContextVariable(\"currentlyRunningAnimationGroups\", currentlyRunningAnimationGroups);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        context.setVariable(this.config?.variable, this.value.getValue(context));\n        this.out._activateSignal(context);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.SetVariable;\n    }\n\n    public override serialize(serializationObject?: any): void {\n        super.serialize(serializationObject);\n        serializationObject.config.variable = this.config?.variable;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.SetVariable, FlowGraphSetVariableBlock);\n"],
  "mappings": ";;;;;;;;;;;AAsBM,IAAO,4BAAP,cAA4C,qCAAoC;EAMlF,YAAY,QAA+C;AACvD,UAAM,MAAM;AAEZ,SAAK,QAAQ,KAAK,kBAAkB,SAAS,WAAW;EAC5D;EAEgB,SAAS,SAA2B,gBAAyC;AAlCjG;AAoCQ,UAAM,kCAAkC,QAAQ,0BAA0B,mCAAmC,CAAA,CAAE;AAC/G,eAAW,qBAAqB,iCAAiC;AAC7D,YAAM,YAAY,QAAQ,cAAc,gBAAgB,iBAAiB;AAEzE,iBAAW,mBAAmB,UAAU,oBAAoB;AACxD,YAAI,gBAAgB,WAAW,SAAS;AAEpC,cAAI,gBAAgB,WAAW,SAAS;AAEpC,gBAAI,gBAAgB,UAAU,qBAAmB,UAAK,WAAL,mBAAa,WAAU;AAEpE,wBAAU,KAAI;AAEd,oBAAM,QAAQ,gCAAgC,QAAQ,iBAAiB;AACvE,kBAAI,QAAQ,IAAI;AACZ,gDAAgC,OAAO,OAAO,CAAC;cACnD;AACA,sBAAQ,0BAA0B,mCAAmC,+BAA+B;AACpG;YACJ;UACJ;QACJ;MACJ;IACJ;AACA,YAAQ,aAAY,UAAK,WAAL,mBAAa,UAAU,KAAK,MAAM,SAAS,OAAO,CAAC;AACvE,SAAK,IAAI,gBAAgB,OAAO;EACpC;EAEgB,eAAY;AACxB,WAAA;EACJ;EAEgB,UAAU,qBAAyB;AApEvD;AAqEQ,UAAM,UAAU,mBAAmB;AACnC,wBAAoB,OAAO,YAAW,UAAK,WAAL,mBAAa;EACvD;;AAGJ,cAAa,6BAAkC,yBAAyB;",
  "names": []
}
