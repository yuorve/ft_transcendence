import {
  AbstractAudioBus
} from "./chunk-2GG5SORT.js";
import {
  _HasSpatialAudioOptions,
  _SpatialWebAudio,
  _StereoAudio,
  _WebAudioBusAndSoundSubGraph
} from "./chunk-JVS6DDUT.js";

// node_modules/@babylonjs/core/AudioV2/abstractAudio/audioBus.js
var AudioBus = class extends AbstractAudioBus {
  constructor(name, engine) {
    super(name, engine);
    this._outBus = null;
    this._onOutBusDisposed = () => {
      this.outBus = this.engine.defaultMainBus;
    };
  }
  /**
   * The output bus of the audio bus. Defaults to the audio engine's default main bus.
   */
  get outBus() {
    return this._outBus;
  }
  set outBus(outBus) {
    if (this._outBus === outBus) {
      return;
    }
    if (this._outBus) {
      this._outBus.onDisposeObservable.removeCallback(this._onOutBusDisposed);
      if (!this._disconnect(this._outBus)) {
        throw new Error("Disconnect failed");
      }
    }
    this._outBus = outBus;
    if (this._outBus) {
      this._outBus.onDisposeObservable.add(this._onOutBusDisposed);
      if (!this._connect(this._outBus)) {
        throw new Error("Connect failed");
      }
    }
  }
  /**
   * Releases associated resources.
   */
  dispose() {
    super.dispose();
    this._outBus = null;
  }
};

// node_modules/@babylonjs/core/AudioV2/webAudio/webAudioBus.js
var _WebAudioBus = class __WebAudioBus extends AudioBus {
  /** @internal */
  constructor(name, engine, options) {
    super(name, engine);
    this._spatial = null;
    this._spatialAutoUpdate = true;
    this._spatialMinUpdateTime = 0;
    this._stereo = null;
    if (typeof options.spatialAutoUpdate === "boolean") {
      this._spatialAutoUpdate = options.spatialAutoUpdate;
    }
    if (typeof options.spatialMinUpdateTime === "number") {
      this._spatialMinUpdateTime = options.spatialMinUpdateTime;
    }
    this._subGraph = new __WebAudioBus._SubGraph(this);
    this.audioContext = engine.audioContext;
  }
  /** @internal */
  async init(options) {
    if (options.outBus) {
      this.outBus = options.outBus;
    } else {
      await this.engine.isReadyPromise;
      this.outBus = this.engine.defaultMainBus;
    }
    await this._subGraph.init(options);
    if (_HasSpatialAudioOptions(options)) {
      this._initSpatialProperty();
    }
    this.engine.addNode(this);
  }
  /** @internal */
  dispose() {
    super.dispose();
    this._spatial = null;
    this._stereo = null;
    this.engine.removeNode(this);
  }
  /** @internal */
  get inNode() {
    return this._subGraph.inNode;
  }
  /** @internal */
  get outNode() {
    return this._subGraph.outNode;
  }
  /** @internal */
  get spatial() {
    if (this._spatial) {
      return this._spatial;
    }
    return this._initSpatialProperty();
  }
  /** @internal */
  get stereo() {
    return this._stereo ?? (this._stereo = new _StereoAudio(this._subGraph));
  }
  /** @internal */
  getClassName() {
    return "_WebAudioBus";
  }
  _initSpatialProperty() {
    if (!this._spatial) {
      this._spatial = new _SpatialWebAudio(this._subGraph, this._spatialAutoUpdate, this._spatialMinUpdateTime);
    }
    return this._spatial;
  }
};
_WebAudioBus._SubGraph = class extends _WebAudioBusAndSoundSubGraph {
  get _downstreamNodes() {
    return this._owner._downstreamNodes ?? null;
  }
  get _upstreamNodes() {
    return this._owner._upstreamNodes ?? null;
  }
};

export {
  AudioBus,
  _WebAudioBus
};
//# sourceMappingURL=chunk-KJSYCFWN.js.map
