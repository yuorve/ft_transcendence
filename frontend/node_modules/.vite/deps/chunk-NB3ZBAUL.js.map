{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/Utils/flowGraphFunctionReferenceBlock.ts"],
  "sourcesContent": ["import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny, RichTypeString } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\n\n/**\n * A flow graph block that takes a function name, an object and an optional context as inputs and calls the function on the object.\n */\nexport class FlowGraphFunctionReferenceBlock extends FlowGraphBlock {\n    /**\n     * Input: The function name.\n     */\n    public readonly functionName: FlowGraphDataConnection<string>;\n    /**\n     * Input: The object to get the function from.\n     * This can be a constructed class or a collection of stand-alone functions.\n     */\n    public readonly object: FlowGraphDataConnection<any>;\n    /**\n     * Input: The context to call the function with.\n     * This is optional. If not provided, the function will be bound to null.\n     */\n    public readonly context: FlowGraphDataConnection<any>;\n    /**\n     * Output: The function referenced by functionName from the object, bound to the context.\n     */\n    public readonly output: FlowGraphDataConnection<Function>;\n\n    constructor(\n        /**\n         * the configuration of the block\n         */\n        config?: IFlowGraphBlockConfiguration\n    ) {\n        super(config);\n        this.functionName = this.registerDataInput(\"functionName\", RichTypeString);\n        this.object = this.registerDataInput(\"object\", RichTypeAny);\n        this.context = this.registerDataInput(\"context\", RichTypeAny, null);\n        this.output = this.registerDataOutput(\"output\", RichTypeAny);\n    }\n\n    public override _updateOutputs(context: FlowGraphContext) {\n        const functionName = this.functionName.getValue(context);\n        const object = this.object.getValue(context);\n        const contextValue = this.context.getValue(context);\n        if (object && functionName) {\n            const func = object[functionName];\n            if (func && typeof func === \"function\") {\n                this.output.setValue(func.bind(contextValue), context);\n            }\n        }\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.FunctionReference;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.FunctionReference, FlowGraphFunctionReferenceBlock);\n"],
  "mappings": ";;;;;;;;;;AAWM,IAAO,kCAAP,cAA+C,eAAc;EAoB/D,YAII,QAAqC;AAErC,UAAM,MAAM;AACZ,SAAK,eAAe,KAAK,kBAAkB,gBAAgB,cAAc;AACzE,SAAK,SAAS,KAAK,kBAAkB,UAAU,WAAW;AAC1D,SAAK,UAAU,KAAK,kBAAkB,WAAW,aAAa,IAAI;AAClE,SAAK,SAAS,KAAK,mBAAmB,UAAU,WAAW;EAC/D;EAEgB,eAAe,SAAyB;AACpD,UAAM,eAAe,KAAK,aAAa,SAAS,OAAO;AACvD,UAAM,SAAS,KAAK,OAAO,SAAS,OAAO;AAC3C,UAAM,eAAe,KAAK,QAAQ,SAAS,OAAO;AAClD,QAAI,UAAU,cAAc;AACxB,YAAM,OAAO,OAAO,YAAY;AAChC,UAAI,QAAQ,OAAO,SAAS,YAAY;AACpC,aAAK,OAAO,SAAS,KAAK,KAAK,YAAY,GAAG,OAAO;MACzD;IACJ;EACJ;EAEgB,eAAY;AACxB,WAAA;EACJ;;AAGJ,cAAa,8BAAwC,+BAA+B;",
  "names": []
}
