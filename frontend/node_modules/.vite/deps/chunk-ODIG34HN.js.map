{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/HighDynamicRange/panoramaToCubemap.ts", "../../../dev/core/src/Misc/HighDynamicRange/hdr.ts", "../../../dev/core/src/Materials/Textures/Loaders/hdrTextureLoader.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../../types\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Constants } from \"../../Engines/constants\";\r\n\r\n/**\r\n * CubeMap information grouping all the data for each faces as well as the cubemap size.\r\n */\r\nexport interface CubeMapInfo {\r\n    /**\r\n     * The pixel array for the front face.\r\n     * This is stored in format, left to right, up to down format.\r\n     */\r\n    front: Nullable<ArrayBufferView>;\r\n\r\n    /**\r\n     * The pixel array for the back face.\r\n     * This is stored in format, left to right, up to down format.\r\n     */\r\n    back: Nullable<ArrayBufferView>;\r\n\r\n    /**\r\n     * The pixel array for the left face.\r\n     * This is stored in format, left to right, up to down format.\r\n     */\r\n    left: Nullable<ArrayBufferView>;\r\n\r\n    /**\r\n     * The pixel array for the right face.\r\n     * This is stored in format, left to right, up to down format.\r\n     */\r\n    right: Nullable<ArrayBufferView>;\r\n\r\n    /**\r\n     * The pixel array for the up face.\r\n     * This is stored in format, left to right, up to down format.\r\n     */\r\n    up: Nullable<ArrayBufferView>;\r\n\r\n    /**\r\n     * The pixel array for the down face.\r\n     * This is stored in format, left to right, up to down format.\r\n     */\r\n    down: Nullable<ArrayBufferView>;\r\n\r\n    /**\r\n     * The size of the cubemap stored.\r\n     *\r\n     * Each faces will be size * size pixels.\r\n     */\r\n    size: number;\r\n\r\n    /**\r\n     * The format of the texture.\r\n     *\r\n     * RGBA, RGB.\r\n     */\r\n    format: number;\r\n\r\n    /**\r\n     * The type of the texture data.\r\n     *\r\n     * UNSIGNED_INT, FLOAT.\r\n     */\r\n    type: number;\r\n\r\n    /**\r\n     * Specifies whether the texture is in gamma space.\r\n     */\r\n    gammaSpace: boolean;\r\n}\r\n\r\n/**\r\n * Helper class useful to convert panorama picture to their cubemap representation in 6 faces.\r\n */\r\nexport class PanoramaToCubeMapTools {\r\n    private static FACE_LEFT = [new Vector3(-1.0, -1.0, -1.0), new Vector3(1.0, -1.0, -1.0), new Vector3(-1.0, 1.0, -1.0), new Vector3(1.0, 1.0, -1.0)];\r\n    private static FACE_RIGHT = [new Vector3(1.0, -1.0, 1.0), new Vector3(-1.0, -1.0, 1.0), new Vector3(1.0, 1.0, 1.0), new Vector3(-1.0, 1.0, 1.0)];\r\n    private static FACE_FRONT = [new Vector3(1.0, -1.0, -1.0), new Vector3(1.0, -1.0, 1.0), new Vector3(1.0, 1.0, -1.0), new Vector3(1.0, 1.0, 1.0)];\r\n    private static FACE_BACK = [new Vector3(-1.0, -1.0, 1.0), new Vector3(-1.0, -1.0, -1.0), new Vector3(-1.0, 1.0, 1.0), new Vector3(-1.0, 1.0, -1.0)];\r\n    private static FACE_DOWN = [new Vector3(1.0, 1.0, -1.0), new Vector3(1.0, 1.0, 1.0), new Vector3(-1.0, 1.0, -1.0), new Vector3(-1.0, 1.0, 1.0)];\r\n    private static FACE_UP = [new Vector3(-1.0, -1.0, -1.0), new Vector3(-1.0, -1.0, 1.0), new Vector3(1.0, -1.0, -1.0), new Vector3(1.0, -1.0, 1.0)];\r\n\r\n    /**\r\n     * Converts a panorama stored in RGB right to left up to down format into a cubemap (6 faces).\r\n     *\r\n     * @param float32Array The source data.\r\n     * @param inputWidth The width of the input panorama.\r\n     * @param inputHeight The height of the input panorama.\r\n     * @param size The willing size of the generated cubemap (each faces will be size * size pixels)\r\n     * @param supersample enable supersampling the cubemap\r\n     * @returns The cubemap data\r\n     */\r\n    public static ConvertPanoramaToCubemap(float32Array: Float32Array, inputWidth: number, inputHeight: number, size: number, supersample = false): CubeMapInfo {\r\n        if (!float32Array) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"ConvertPanoramaToCubemap: input cannot be null\";\r\n        }\r\n\r\n        if (float32Array.length != inputWidth * inputHeight * 3) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"ConvertPanoramaToCubemap: input size is wrong\";\r\n        }\r\n\r\n        const textureFront = this.CreateCubemapTexture(size, this.FACE_FRONT, float32Array, inputWidth, inputHeight, supersample);\r\n        const textureBack = this.CreateCubemapTexture(size, this.FACE_BACK, float32Array, inputWidth, inputHeight, supersample);\r\n        const textureLeft = this.CreateCubemapTexture(size, this.FACE_LEFT, float32Array, inputWidth, inputHeight, supersample);\r\n        const textureRight = this.CreateCubemapTexture(size, this.FACE_RIGHT, float32Array, inputWidth, inputHeight, supersample);\r\n        const textureUp = this.CreateCubemapTexture(size, this.FACE_UP, float32Array, inputWidth, inputHeight, supersample);\r\n        const textureDown = this.CreateCubemapTexture(size, this.FACE_DOWN, float32Array, inputWidth, inputHeight, supersample);\r\n\r\n        return {\r\n            front: textureFront,\r\n            back: textureBack,\r\n            left: textureLeft,\r\n            right: textureRight,\r\n            up: textureUp,\r\n            down: textureDown,\r\n            size: size,\r\n            type: Constants.TEXTURETYPE_FLOAT,\r\n            format: Constants.TEXTUREFORMAT_RGB,\r\n            gammaSpace: false,\r\n        };\r\n    }\r\n\r\n    private static CreateCubemapTexture(texSize: number, faceData: Vector3[], float32Array: Float32Array, inputWidth: number, inputHeight: number, supersample = false) {\r\n        const buffer = new ArrayBuffer(texSize * texSize * 4 * 3);\r\n        const textureArray = new Float32Array(buffer);\r\n\r\n        // If supersampling, determine number of samples needed when source texture width is divided for 4 cube faces\r\n        const samples = supersample ? Math.max(1, Math.round(inputWidth / 4 / texSize)) : 1;\r\n        const sampleFactor = 1 / samples;\r\n        const sampleFactorSqr = sampleFactor * sampleFactor;\r\n\r\n        const rotDX1 = faceData[1].subtract(faceData[0]).scale(sampleFactor / texSize);\r\n        const rotDX2 = faceData[3].subtract(faceData[2]).scale(sampleFactor / texSize);\r\n\r\n        const dy = 1 / texSize;\r\n        let fy = 0;\r\n\r\n        for (let y = 0; y < texSize; y++) {\r\n            for (let sy = 0; sy < samples; sy++) {\r\n                let xv1 = faceData[0];\r\n                let xv2 = faceData[2];\r\n\r\n                for (let x = 0; x < texSize; x++) {\r\n                    for (let sx = 0; sx < samples; sx++) {\r\n                        const v = xv2.subtract(xv1).scale(fy).add(xv1);\r\n                        v.normalize();\r\n\r\n                        const color = this.CalcProjectionSpherical(v, float32Array, inputWidth, inputHeight);\r\n\r\n                        // 3 channels per pixels\r\n                        textureArray[y * texSize * 3 + x * 3 + 0] += color.r * sampleFactorSqr;\r\n                        textureArray[y * texSize * 3 + x * 3 + 1] += color.g * sampleFactorSqr;\r\n                        textureArray[y * texSize * 3 + x * 3 + 2] += color.b * sampleFactorSqr;\r\n\r\n                        xv1 = xv1.add(rotDX1);\r\n                        xv2 = xv2.add(rotDX2);\r\n                    }\r\n                }\r\n\r\n                fy += dy * sampleFactor;\r\n            }\r\n        }\r\n\r\n        return textureArray;\r\n    }\r\n\r\n    private static CalcProjectionSpherical(vDir: Vector3, float32Array: Float32Array, inputWidth: number, inputHeight: number): any {\r\n        let theta = Math.atan2(vDir.z, vDir.x);\r\n        const phi = Math.acos(vDir.y);\r\n\r\n        while (theta < -Math.PI) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        while (theta > Math.PI) {\r\n            theta -= 2 * Math.PI;\r\n        }\r\n\r\n        let dx = theta / Math.PI;\r\n        const dy = phi / Math.PI;\r\n\r\n        // recenter.\r\n        dx = dx * 0.5 + 0.5;\r\n\r\n        let px = Math.round(dx * inputWidth);\r\n        if (px < 0) {\r\n            px = 0;\r\n        } else if (px >= inputWidth) {\r\n            px = inputWidth - 1;\r\n        }\r\n\r\n        let py = Math.round(dy * inputHeight);\r\n        if (py < 0) {\r\n            py = 0;\r\n        } else if (py >= inputHeight) {\r\n            py = inputHeight - 1;\r\n        }\r\n\r\n        const inputY = inputHeight - py - 1;\r\n        const r = float32Array[inputY * inputWidth * 3 + px * 3 + 0];\r\n        const g = float32Array[inputY * inputWidth * 3 + px * 3 + 1];\r\n        const b = float32Array[inputY * inputWidth * 3 + px * 3 + 2];\r\n\r\n        return {\r\n            r: r,\r\n            g: g,\r\n            b: b,\r\n        };\r\n    }\r\n}\r\n", "import type { CubeMapInfo } from \"./panoramaToCubemap\";\r\nimport { PanoramaToCubeMapTools } from \"./panoramaToCubemap\";\r\n\r\n/**\r\n * Header information of HDR texture files.\r\n */\r\nexport interface HDRInfo {\r\n    /**\r\n     * The height of the texture in pixels.\r\n     */\r\n    height: number;\r\n\r\n    /**\r\n     * The width of the texture in pixels.\r\n     */\r\n    width: number;\r\n\r\n    /**\r\n     * The index of the beginning of the data in the binary file.\r\n     */\r\n    dataPosition: number;\r\n}\r\n\r\n/* This groups tools to convert HDR texture to native colors array. */\r\n\r\nfunction ldexp(mantissa: number, exponent: number): number {\r\n    if (exponent > 1023) {\r\n        return mantissa * Math.pow(2, 1023) * Math.pow(2, exponent - 1023);\r\n    }\r\n\r\n    if (exponent < -1074) {\r\n        return mantissa * Math.pow(2, -1074) * Math.pow(2, exponent + 1074);\r\n    }\r\n\r\n    return mantissa * Math.pow(2, exponent);\r\n}\r\n\r\nfunction rgbe2float(float32array: Float32Array, red: number, green: number, blue: number, exponent: number, index: number) {\r\n    if (exponent > 0) {\r\n        /*nonzero pixel*/\r\n        exponent = ldexp(1.0, exponent - (128 + 8));\r\n\r\n        float32array[index + 0] = red * exponent;\r\n        float32array[index + 1] = green * exponent;\r\n        float32array[index + 2] = blue * exponent;\r\n    } else {\r\n        float32array[index + 0] = 0;\r\n        float32array[index + 1] = 0;\r\n        float32array[index + 2] = 0;\r\n    }\r\n}\r\n\r\nfunction readStringLine(uint8array: Uint8Array, startIndex: number): string {\r\n    let line = \"\";\r\n    let character = \"\";\r\n\r\n    for (let i = startIndex; i < uint8array.length - startIndex; i++) {\r\n        character = String.fromCharCode(uint8array[i]);\r\n\r\n        if (character == \"\\n\") {\r\n            break;\r\n        }\r\n\r\n        line += character;\r\n    }\r\n\r\n    return line;\r\n}\r\n\r\n/**\r\n * Reads header information from an RGBE texture stored in a native array.\r\n * More information on this format are available here:\r\n * https://en.wikipedia.org/wiki/RGBE_image_format\r\n *\r\n * @param uint8array The binary file stored in  native array.\r\n * @returns The header information.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function RGBE_ReadHeader(uint8array: Uint8Array): HDRInfo {\r\n    let height: number = 0;\r\n    let width: number = 0;\r\n\r\n    let line = readStringLine(uint8array, 0);\r\n    if (line[0] != \"#\" || line[1] != \"?\") {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \"Bad HDR Format.\";\r\n    }\r\n\r\n    let endOfHeader = false;\r\n    let findFormat = false;\r\n    let lineIndex: number = 0;\r\n\r\n    do {\r\n        lineIndex += line.length + 1;\r\n        line = readStringLine(uint8array, lineIndex);\r\n\r\n        if (line == \"FORMAT=32-bit_rle_rgbe\") {\r\n            findFormat = true;\r\n        } else if (line.length == 0) {\r\n            endOfHeader = true;\r\n        }\r\n    } while (!endOfHeader);\r\n\r\n    if (!findFormat) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \"HDR Bad header format, unsupported FORMAT\";\r\n    }\r\n\r\n    lineIndex += line.length + 1;\r\n    line = readStringLine(uint8array, lineIndex);\r\n\r\n    const sizeRegexp = /^-Y (.*) \\+X (.*)$/g;\r\n    const match = sizeRegexp.exec(line);\r\n\r\n    // TODO. Support +Y and -X if needed.\r\n    if (!match || match.length < 3) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \"HDR Bad header format, no size\";\r\n    }\r\n    width = parseInt(match[2]);\r\n    height = parseInt(match[1]);\r\n\r\n    if (width < 8 || width > 0x7fff) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \"HDR Bad header format, unsupported size\";\r\n    }\r\n\r\n    lineIndex += line.length + 1;\r\n\r\n    return {\r\n        height: height,\r\n        width: width,\r\n        dataPosition: lineIndex,\r\n    };\r\n}\r\n\r\n/**\r\n * Returns the cubemap information (each faces texture data) extracted from an RGBE texture.\r\n * This RGBE texture needs to store the information as a panorama.\r\n *\r\n * More information on this format are available here:\r\n * https://en.wikipedia.org/wiki/RGBE_image_format\r\n *\r\n * @param buffer The binary file stored in an array buffer.\r\n * @param size The expected size of the extracted cubemap.\r\n * @param supersample enable supersampling the cubemap (default: false)\r\n * @returns The Cube Map information.\r\n */\r\nexport function GetCubeMapTextureData(buffer: ArrayBuffer, size: number, supersample = false): CubeMapInfo {\r\n    const uint8array = new Uint8Array(buffer);\r\n    const hdrInfo = RGBE_ReadHeader(uint8array);\r\n    const data = RGBE_ReadPixels(uint8array, hdrInfo);\r\n\r\n    const cubeMapData = PanoramaToCubeMapTools.ConvertPanoramaToCubemap(data, hdrInfo.width, hdrInfo.height, size, supersample);\r\n\r\n    return cubeMapData;\r\n}\r\n\r\n/**\r\n * Returns the pixels data extracted from an RGBE texture.\r\n * This pixels will be stored left to right up to down in the R G B order in one array.\r\n *\r\n * More information on this format are available here:\r\n * https://en.wikipedia.org/wiki/RGBE_image_format\r\n *\r\n * @param uint8array The binary file stored in an array buffer.\r\n * @param hdrInfo The header information of the file.\r\n * @returns The pixels data in RGB right to left up to down order.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function RGBE_ReadPixels(uint8array: Uint8Array, hdrInfo: HDRInfo): Float32Array {\r\n    return readRGBEPixelsRLE(uint8array, hdrInfo);\r\n}\r\n\r\nfunction readRGBEPixelsRLE(uint8array: Uint8Array, hdrInfo: HDRInfo): Float32Array {\r\n    let num_scanlines = hdrInfo.height;\r\n    const scanline_width = hdrInfo.width;\r\n\r\n    let a: number, b: number, c: number, d: number, count: number;\r\n    let dataIndex = hdrInfo.dataPosition;\r\n    let index = 0,\r\n        endIndex = 0,\r\n        i = 0;\r\n\r\n    const scanLineArrayBuffer = new ArrayBuffer(scanline_width * 4); // four channel R G B E\r\n    const scanLineArray = new Uint8Array(scanLineArrayBuffer);\r\n\r\n    // 3 channels of 4 bytes per pixel in float.\r\n    const resultBuffer = new ArrayBuffer(hdrInfo.width * hdrInfo.height * 4 * 3);\r\n    const resultArray = new Float32Array(resultBuffer);\r\n\r\n    // read in each successive scanline\r\n    while (num_scanlines > 0) {\r\n        a = uint8array[dataIndex++];\r\n        b = uint8array[dataIndex++];\r\n        c = uint8array[dataIndex++];\r\n        d = uint8array[dataIndex++];\r\n\r\n        if (a != 2 || b != 2 || c & 0x80 || hdrInfo.width < 8 || hdrInfo.width > 32767) {\r\n            return readRGBEPixelsNotRLE(uint8array, hdrInfo);\r\n        }\r\n\r\n        if (((c << 8) | d) != scanline_width) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"HDR Bad header format, wrong scan line width\";\r\n        }\r\n\r\n        index = 0;\r\n\r\n        // read each of the four channels for the scanline into the buffer\r\n        for (i = 0; i < 4; i++) {\r\n            endIndex = (i + 1) * scanline_width;\r\n\r\n            while (index < endIndex) {\r\n                a = uint8array[dataIndex++];\r\n                b = uint8array[dataIndex++];\r\n\r\n                if (a > 128) {\r\n                    // a run of the same value\r\n                    count = a - 128;\r\n                    if (count == 0 || count > endIndex - index) {\r\n                        // eslint-disable-next-line no-throw-literal\r\n                        throw \"HDR Bad Format, bad scanline data (run)\";\r\n                    }\r\n\r\n                    while (count-- > 0) {\r\n                        scanLineArray[index++] = b;\r\n                    }\r\n                } else {\r\n                    // a non-run\r\n                    count = a;\r\n                    if (count == 0 || count > endIndex - index) {\r\n                        // eslint-disable-next-line no-throw-literal\r\n                        throw \"HDR Bad Format, bad scanline data (non-run)\";\r\n                    }\r\n\r\n                    scanLineArray[index++] = b;\r\n                    if (--count > 0) {\r\n                        for (let j = 0; j < count; j++) {\r\n                            scanLineArray[index++] = uint8array[dataIndex++];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // now convert data from buffer into floats\r\n        for (i = 0; i < scanline_width; i++) {\r\n            a = scanLineArray[i];\r\n            b = scanLineArray[i + scanline_width];\r\n            c = scanLineArray[i + 2 * scanline_width];\r\n            d = scanLineArray[i + 3 * scanline_width];\r\n\r\n            rgbe2float(resultArray, a, b, c, d, (hdrInfo.height - num_scanlines) * scanline_width * 3 + i * 3);\r\n        }\r\n\r\n        num_scanlines--;\r\n    }\r\n\r\n    return resultArray;\r\n}\r\n\r\nfunction readRGBEPixelsNotRLE(uint8array: Uint8Array, hdrInfo: HDRInfo): Float32Array {\r\n    // this file is not run length encoded\r\n    // read values sequentially\r\n\r\n    let num_scanlines = hdrInfo.height;\r\n    const scanline_width = hdrInfo.width;\r\n\r\n    let a: number, b: number, c: number, d: number, i: number;\r\n    let dataIndex = hdrInfo.dataPosition;\r\n\r\n    // 3 channels of 4 bytes per pixel in float.\r\n    const resultBuffer = new ArrayBuffer(hdrInfo.width * hdrInfo.height * 4 * 3);\r\n    const resultArray = new Float32Array(resultBuffer);\r\n\r\n    // read in each successive scanline\r\n    while (num_scanlines > 0) {\r\n        for (i = 0; i < hdrInfo.width; i++) {\r\n            a = uint8array[dataIndex++];\r\n            b = uint8array[dataIndex++];\r\n            c = uint8array[dataIndex++];\r\n            d = uint8array[dataIndex++];\r\n\r\n            rgbe2float(resultArray, a, b, c, d, (hdrInfo.height - num_scanlines) * scanline_width * 3 + i * 3);\r\n        }\r\n\r\n        num_scanlines--;\r\n    }\r\n\r\n    return resultArray;\r\n}\r\n\r\n/**\r\n * @deprecated Use functions separately\r\n */\r\nexport const HDRTools = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    RGBE_ReadHeader,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    GetCubeMapTextureData,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    RGBE_ReadPixels,\r\n};\r\n", "import { RGBE_ReadHeader, RGBE_ReadPixels } from \"../../../Misc/HighDynamicRange/hdr\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"./internalTextureLoader\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\n\r\n/**\r\n * Implementation of the HDR Texture Loader.\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _HDRTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * Cube texture are not supported by .hdr files\r\n     */\r\n    public loadCubeData(): void {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \".hdr not supported in Cube.\";\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(\r\n        data: ArrayBufferView,\r\n        texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void\r\n    ): void {\r\n        const uint8array = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n        const hdrInfo = RGBE_ReadHeader(uint8array);\r\n        const pixelsDataRGB32 = RGBE_ReadPixels(uint8array, hdrInfo);\r\n\r\n        const pixels = hdrInfo.width * hdrInfo.height;\r\n        const pixelsDataRGBA32 = new Float32Array(pixels * 4);\r\n        for (let i = 0; i < pixels; i += 1) {\r\n            pixelsDataRGBA32[i * 4] = pixelsDataRGB32[i * 3];\r\n            pixelsDataRGBA32[i * 4 + 1] = pixelsDataRGB32[i * 3 + 1];\r\n            pixelsDataRGBA32[i * 4 + 2] = pixelsDataRGB32[i * 3 + 2];\r\n            pixelsDataRGBA32[i * 4 + 3] = 1;\r\n        }\r\n\r\n        callback(hdrInfo.width, hdrInfo.height, texture.generateMipMaps, false, () => {\r\n            const engine = texture.getEngine();\r\n            texture.type = Constants.TEXTURETYPE_FLOAT;\r\n            texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n            texture._gammaSpace = false;\r\n            engine._uploadDataToTextureDirectly(texture, pixelsDataRGBA32);\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
