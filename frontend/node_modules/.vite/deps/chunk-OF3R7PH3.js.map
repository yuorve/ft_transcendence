{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphConsoleLogBlock.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../flowGraphExecutionBlockWithOutSignal\";\r\nimport { RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\r\n\r\n/**\r\n * Block that logs a message to the console.\r\n */\r\nexport class FlowGraphConsoleLogBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Input connection: The message to log.\r\n     */\r\n    public readonly message: FlowGraphDataConnection<any>;\r\n\r\n    /**\r\n     * Input connection: The log type.\r\n     */\r\n    public readonly logType: FlowGraphDataConnection<\"log\" | \"warn\" | \"error\">;\r\n\r\n    public constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.message = this.registerDataInput(\"message\", RichTypeAny);\r\n        this.logType = this.registerDataInput(\"logType\", RichTypeAny, \"log\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _execute(context: FlowGraphContext): void {\r\n        const typeValue = this.logType.getValue(context);\r\n        const messageValue = this.message.getValue(context);\r\n        if (typeValue === \"warn\") {\r\n            Logger.Warn(messageValue);\r\n        } else if (typeValue === \"error\") {\r\n            Logger.Error(messageValue);\r\n        } else {\r\n            Logger.Log(messageValue);\r\n        }\r\n        // activate the output flow block\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.ConsoleLog;\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.ConsoleLog, FlowGraphConsoleLogBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;;;AAYM,IAAO,2BAAP,cAAwC,qCAAoC;EAW9E,YAAmB,QAAqC;AACpD,UAAM,MAAM;AACZ,SAAK,UAAU,KAAK,kBAAkB,WAAW,WAAW;AAC5D,SAAK,UAAU,KAAK,kBAAkB,WAAW,aAAa,KAAK;EACvE;;;;EAKO,SAAS,SAAyB;AACrC,UAAM,YAAY,KAAK,QAAQ,SAAS,OAAO;AAC/C,UAAM,eAAe,KAAK,QAAQ,SAAS,OAAO;AAClD,QAAI,cAAc,QAAQ;AACtB,aAAO,KAAK,YAAY;IAC5B,WAAW,cAAc,SAAS;AAC9B,aAAO,MAAM,YAAY;IAC7B,OAAO;AACH,aAAO,IAAI,YAAY;IAC3B;AAEA,SAAK,IAAI,gBAAgB,OAAO;EACpC;;;;EAKgB,eAAY;AACxB,WAAA;EACJ;;AAGJ,cAAa,4BAAiC,wBAAwB;",
  "names": []
}
