{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/webRequest.ts", "../../../dev/core/src/Misc/filesInputStore.ts", "../../../dev/core/src/Misc/retryStrategy.ts", "../../../dev/core/src/Misc/error.ts", "../../../dev/core/src/Misc/stringTools.ts", "../../../dev/core/src/Misc/guid.ts", "../../../dev/core/src/Misc/fileTools.ts", "../../../dev/core/src/Misc/instantiationTools.ts"],
  "sourcesContent": ["import type { IWebRequest } from \"./interfaces/iWebRequest\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { INative } from \"../Engines/Native/nativeInterfaces\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare const _native: INative;\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction createXMLHttpRequest(): XMLHttpRequest {\r\n    // If running in Babylon Native, then defer to the native XMLHttpRequest, which has the same public contract\r\n    if (typeof _native !== \"undefined\" && _native.XMLHttpRequest) {\r\n        return new _native.XMLHttpRequest();\r\n    } else {\r\n        return new XMLHttpRequest();\r\n    }\r\n}\r\n\r\n/**\r\n * Extended version of XMLHttpRequest with support for customizations (headers, ...)\r\n */\r\nexport class WebRequest implements IWebRequest {\r\n    private readonly _xhr = createXMLHttpRequest();\r\n\r\n    /**\r\n     * Custom HTTP Request Headers to be sent with XMLHttpRequests\r\n     * i.e. when loading files, where the server/service expects an Authorization header\r\n     */\r\n    public static CustomRequestHeaders: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Add callback functions in this array to update all the requests before they get sent to the network\r\n     */\r\n    public static CustomRequestModifiers = new Array<(request: XMLHttpRequest, url: string) => string | void>();\r\n\r\n    /**\r\n     * If set to true, requests to Babylon.js CDN requests will not be modified\r\n     */\r\n    public static SkipRequestModificationForBabylonCDN = true;\r\n\r\n    /**\r\n     * This function can be called to check if there are request modifiers for network requests\r\n     * @returns true if there are any custom requests available\r\n     */\r\n    public static get IsCustomRequestAvailable(): boolean {\r\n        return Object.keys(WebRequest.CustomRequestHeaders).length > 0 || WebRequest.CustomRequestModifiers.length > 0;\r\n    }\r\n\r\n    private _requestURL: string = \"\";\r\n\r\n    /**\r\n     * Returns the requested URL once open has been called\r\n     */\r\n    public get requestURL(): string {\r\n        return this._requestURL;\r\n    }\r\n\r\n    private _injectCustomRequestHeaders(): void {\r\n        if (this._shouldSkipRequestModifications(this._requestURL)) {\r\n            return;\r\n        }\r\n        for (const key in WebRequest.CustomRequestHeaders) {\r\n            const val = WebRequest.CustomRequestHeaders[key];\r\n            if (val) {\r\n                this._xhr.setRequestHeader(key, val);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _shouldSkipRequestModifications(url: string): boolean {\r\n        return WebRequest.SkipRequestModificationForBabylonCDN && (url.includes(\"preview.babylonjs.com\") || url.includes(\"cdn.babylonjs.com\"));\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a function to be called when loading progress changes\r\n     */\r\n    public get onprogress(): ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null {\r\n        return this._xhr.onprogress;\r\n    }\r\n\r\n    public set onprogress(value: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null) {\r\n        this._xhr.onprogress = value;\r\n    }\r\n\r\n    /**\r\n     * Returns client's state\r\n     */\r\n    public get readyState(): number {\r\n        return this._xhr.readyState;\r\n    }\r\n\r\n    /**\r\n     * Returns client's status\r\n     */\r\n    public get status(): number {\r\n        return this._xhr.status;\r\n    }\r\n\r\n    /**\r\n     * Returns client's status as a text\r\n     */\r\n    public get statusText(): string {\r\n        return this._xhr.statusText;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response\r\n     */\r\n    public get response(): any {\r\n        return this._xhr.response;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response url\r\n     */\r\n    public get responseURL(): string {\r\n        return this._xhr.responseURL;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response as text\r\n     */\r\n    public get responseText(): string {\r\n        return this._xhr.responseText;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the expected response type\r\n     */\r\n    public get responseType(): XMLHttpRequestResponseType {\r\n        return this._xhr.responseType;\r\n    }\r\n\r\n    public set responseType(value: XMLHttpRequestResponseType) {\r\n        this._xhr.responseType = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the timeout value in milliseconds\r\n     */\r\n    public get timeout(): number {\r\n        return this._xhr.timeout;\r\n    }\r\n\r\n    public set timeout(value: number) {\r\n        this._xhr.timeout = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public addEventListener<K extends keyof XMLHttpRequestEventMap>(\r\n        type: K,\r\n        listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any,\r\n        options?: boolean | AddEventListenerOptions\r\n    ): void;\r\n    public addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        this._xhr.addEventListener(type, listener, options);\r\n    }\r\n\r\n    /** @internal */\r\n    public removeEventListener<K extends keyof XMLHttpRequestEventMap>(\r\n        type: K,\r\n        listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any,\r\n        options?: boolean | EventListenerOptions\r\n    ): void;\r\n    public removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void {\r\n        this._xhr.removeEventListener(type, listener, options);\r\n    }\r\n\r\n    /**\r\n     * Cancels any network activity\r\n     */\r\n    public abort() {\r\n        this._xhr.abort();\r\n    }\r\n\r\n    /**\r\n     * Initiates the request. The optional argument provides the request body. The argument is ignored if request method is GET or HEAD\r\n     * @param body defines an optional request body\r\n     */\r\n    public send(body?: Document | XMLHttpRequestBodyInit | null): void {\r\n        if (WebRequest.CustomRequestHeaders) {\r\n            this._injectCustomRequestHeaders();\r\n        }\r\n\r\n        this._xhr.send(body);\r\n    }\r\n\r\n    /**\r\n     * Sets the request method, request URL\r\n     * @param method defines the method to use (GET, POST, etc..)\r\n     * @param url defines the url to connect with\r\n     */\r\n    public open(method: string, url: string): void {\r\n        for (const update of WebRequest.CustomRequestModifiers) {\r\n            if (this._shouldSkipRequestModifications(url)) {\r\n                return;\r\n            }\r\n            url = update(this._xhr, url) || url;\r\n        }\r\n\r\n        // Clean url\r\n        url = url.replace(\"file:http:\", \"http:\");\r\n        url = url.replace(\"file:https:\", \"https:\");\r\n\r\n        this._requestURL = url;\r\n\r\n        this._xhr.open(method, url, true);\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a request header.\r\n     * @param name The name of the header whose value is to be set\r\n     * @param value The value to set as the body of the header\r\n     */\r\n    setRequestHeader(name: string, value: string): void {\r\n        this._xhr.setRequestHeader(name, value);\r\n    }\r\n\r\n    /**\r\n     * Get the string containing the text of a particular header's value.\r\n     * @param name The name of the header\r\n     * @returns The string containing the text of the given header name\r\n     */\r\n    getResponseHeader(name: string): Nullable<string> {\r\n        return this._xhr.getResponseHeader(name);\r\n    }\r\n}\r\n", "/**\r\n * Class used to help managing file picking and drag'n'drop\r\n * File Storage\r\n */\r\nexport class FilesInputStore {\r\n    /**\r\n     * List of files ready to be loaded\r\n     */\r\n    public static FilesToLoad: { [key: string]: File } = {};\r\n}\r\n", "import type { WebRequest } from \"./webRequest\";\r\n\r\n/**\r\n * Class used to define a retry strategy when error happens while loading assets\r\n */\r\nexport class RetryStrategy {\r\n    /**\r\n     * Function used to defines an exponential back off strategy\r\n     * @param maxRetries defines the maximum number of retries (3 by default)\r\n     * @param baseInterval defines the interval between retries\r\n     * @returns the strategy function to use\r\n     */\r\n    public static ExponentialBackoff(maxRetries = 3, baseInterval = 500) {\r\n        return (url: string, request: WebRequest, retryIndex: number): number => {\r\n            if (request.status !== 0 || retryIndex >= maxRetries || url.indexOf(\"file:\") !== -1) {\r\n                return -1;\r\n            }\r\n\r\n            return Math.pow(2, retryIndex) * baseInterval;\r\n        };\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n/**\r\n * Base error. Due to limitations of typedoc-check and missing documentation\r\n * in lib.es5.d.ts, cannot extend Error directly for RuntimeError.\r\n * @ignore\r\n */\r\nexport abstract class BaseError extends Error {\r\n    // See https://stackoverflow.com/questions/12915412/how-do-i-extend-a-host-object-e-g-error-in-typescript\r\n    // and https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n\r\n    // Polyfill for Object.setPrototypeOf if necessary.\r\n    protected static _setPrototypeOf: (o: any, proto: object | null) => any =\r\n        (Object as any).setPrototypeOf ||\r\n        ((o, proto) => {\r\n            o.__proto__ = proto;\r\n            return o;\r\n        });\r\n}\r\n\r\n/* IMP! DO NOT CHANGE THE NUMBERING OF EXISTING ERROR CODES */\r\n/**\r\n * Error codes for BaseError\r\n */\r\nexport const ErrorCodes = {\r\n    // Mesh errors 0-999\r\n    /** Invalid or empty mesh vertex positions. */\r\n    MeshInvalidPositionsError: 0,\r\n\r\n    // Texture errors 1000-1999\r\n    /** Unsupported texture found. */\r\n    UnsupportedTextureError: 1000,\r\n\r\n    // GLTFLoader errors 2000-2999\r\n    /** Unexpected magic number found in GLTF file header. */\r\n    GLTFLoaderUnexpectedMagicError: 2000,\r\n\r\n    // SceneLoader errors 3000-3999\r\n    /** SceneLoader generic error code. Ideally wraps the inner exception. */\r\n    SceneLoaderError: 3000,\r\n\r\n    // File related errors 4000-4999\r\n    /** Load file error */\r\n    LoadFileError: 4000,\r\n    /** Request file error */\r\n    RequestFileError: 4001,\r\n    /** Read file error */\r\n    ReadFileError: 4002,\r\n} as const;\r\n\r\n/**\r\n * Error code type\r\n */\r\nexport type ErrorCodesType = (typeof ErrorCodes)[keyof typeof ErrorCodes];\r\n\r\n/**\r\n * Application runtime error\r\n */\r\nexport class RuntimeError extends BaseError {\r\n    /**\r\n     * The error code\r\n     */\r\n    public errorCode: ErrorCodesType;\r\n\r\n    /**\r\n     * The error that caused this outer error\r\n     */\r\n    public innerError?: Error;\r\n\r\n    /**\r\n     * Creates a new RuntimeError\r\n     * @param message defines the message of the error\r\n     * @param errorCode the error code\r\n     * @param innerError the error that caused the outer error\r\n     */\r\n    public constructor(message: string, errorCode: ErrorCodesType, innerError?: Error) {\r\n        super(message);\r\n\r\n        this.errorCode = errorCode;\r\n        this.innerError = innerError;\r\n\r\n        this.name = \"RuntimeError\";\r\n        BaseError._setPrototypeOf(this, RuntimeError.prototype);\r\n    }\r\n}\r\n\r\n/**\r\n * Used for flow control when an operation is aborted, such as with AbortController.\r\n */\r\nexport class AbortError extends BaseError {\r\n    public constructor(message = \"Operation aborted\") {\r\n        super(message);\r\n        this.name = \"AbortError\";\r\n        BaseError._setPrototypeOf(this, AbortError.prototype);\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n\r\n/**\r\n * Checks for a matching suffix at the end of a string (for ES5 and lower)\r\n * @param str Source string\r\n * @param suffix Suffix to search for in the source string\r\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n * @deprecated Please use native string function instead\r\n */\r\nexport const EndsWith = (str: string, suffix: string): boolean => {\r\n    return str.endsWith(suffix);\r\n};\r\n\r\n/**\r\n * Checks for a matching suffix at the beginning of a string (for ES5 and lower)\r\n * @param str Source string\r\n * @param suffix Suffix to search for in the source string\r\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n * @deprecated Please use native string function instead\r\n */\r\nexport const StartsWith = (str: string, suffix: string): boolean => {\r\n    if (!str) {\r\n        return false;\r\n    }\r\n    return str.startsWith(suffix);\r\n};\r\n\r\n/**\r\n * Decodes a buffer into a string\r\n * @param buffer The buffer to decode\r\n * @returns The decoded string\r\n */\r\nexport const Decode = (buffer: Uint8Array | Uint16Array): string => {\r\n    if (typeof TextDecoder !== \"undefined\") {\r\n        return new TextDecoder().decode(buffer);\r\n    }\r\n\r\n    let result = \"\";\r\n    for (let i = 0; i < buffer.byteLength; i++) {\r\n        result += String.fromCharCode(buffer[i]);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Encode a buffer to a base64 string\r\n * @param buffer defines the buffer to encode\r\n * @returns the encoded string\r\n */\r\nexport const EncodeArrayBufferToBase64 = (buffer: ArrayBuffer | ArrayBufferView): string => {\r\n    const keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n    let output = \"\";\r\n    let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n    let i = 0;\r\n    const bytes = ArrayBuffer.isView(buffer) ? new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength) : new Uint8Array(buffer);\r\n\r\n    while (i < bytes.length) {\r\n        chr1 = bytes[i++];\r\n        chr2 = i < bytes.length ? bytes[i++] : Number.NaN;\r\n        chr3 = i < bytes.length ? bytes[i++] : Number.NaN;\r\n\r\n        enc1 = chr1 >> 2;\r\n        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n        enc4 = chr3 & 63;\r\n\r\n        if (isNaN(chr2)) {\r\n            enc3 = enc4 = 64;\r\n        } else if (isNaN(chr3)) {\r\n            enc4 = 64;\r\n        }\r\n        output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\n/**\r\n * Converts a given base64 string as an ASCII encoded stream of data\r\n * @param base64Data The base64 encoded string to decode\r\n * @returns Decoded ASCII string\r\n */\r\nexport const DecodeBase64ToString = (base64Data: string): string => {\r\n    return atob(base64Data);\r\n};\r\n\r\n/**\r\n * Converts a given base64 string into an ArrayBuffer of raw byte data\r\n * @param base64Data The base64 encoded string to decode\r\n * @returns ArrayBuffer of byte data\r\n */\r\nexport const DecodeBase64ToBinary = (base64Data: string): ArrayBuffer => {\r\n    const decodedString = DecodeBase64ToString(base64Data);\r\n    const bufferLength = decodedString.length;\r\n    const bufferView = new Uint8Array(new ArrayBuffer(bufferLength));\r\n\r\n    for (let i = 0; i < bufferLength; i++) {\r\n        bufferView[i] = decodedString.charCodeAt(i);\r\n    }\r\n\r\n    return bufferView.buffer;\r\n};\r\n\r\n/**\r\n * Converts a number to string and pads with preceding zeroes until it is of specified length.\r\n * @param num the number to convert and pad\r\n * @param length the expected length of the string\r\n * @returns the padded string\r\n */\r\nexport const PadNumber = (num: number, length: number): string => {\r\n    let str = String(num);\r\n    while (str.length < length) {\r\n        str = \"0\" + str;\r\n    }\r\n    return str;\r\n};\r\n/**\r\n * Helper to manipulate strings\r\n */\r\nexport const StringTools = {\r\n    EndsWith,\r\n    StartsWith,\r\n    Decode,\r\n    EncodeArrayBufferToBase64,\r\n    DecodeBase64ToString,\r\n    DecodeBase64ToBinary,\r\n    PadNumber,\r\n};\r\n", "/**\r\n * Implementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#answer-2117523\r\n * Be aware Math.random() could cause collisions, but:\r\n * \"All but 6 of the 128 bits of the ID are randomly generated, which means that for any two ids, there's a 1 in 2^^122 (or 5.3x10^^36) chance they'll collide\"\r\n * @returns a pseudo random id\r\n */\r\nexport function RandomGUID(): string {\r\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16) | 0,\r\n            v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n}\r\n/**\r\n * Class used to manipulate GUIDs\r\n */\r\nexport const GUID = {\r\n    /**\r\n     * Implementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#answer-2117523\r\n     * Be aware Math.random() could cause collisions, but:\r\n     * \"All but 6 of the 128 bits of the ID are randomly generated, which means that for any two ids, there's a 1 in 2^^122 (or 5.3x10^^36) chance they'll collide\"\r\n     * @returns a pseudo random id\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    RandomId: RandomGUID,\r\n};\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { WebRequest } from \"./webRequest\";\r\nimport { IsWindowObjectExist } from \"./domManagement\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { IOfflineProvider } from \"../Offline/IOfflineProvider\";\r\nimport type { IFileRequest } from \"./fileRequest\";\r\nimport { Observable } from \"./observable\";\r\nimport { FilesInputStore } from \"./filesInputStore\";\r\nimport { RetryStrategy } from \"./retryStrategy\";\r\nimport { BaseError, ErrorCodes, RuntimeError } from \"./error\";\r\nimport { DecodeBase64ToBinary, DecodeBase64ToString, EncodeArrayBufferToBase64 } from \"./stringTools\";\r\nimport { _functionContainer } from \"../Engines/Processors/shaderProcessor\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { Logger } from \"./logger\";\r\nimport { TimingTools } from \"./timingTools\";\r\nimport type { INative } from \"../Engines/Native/nativeInterfaces\";\r\nimport { EngineFunctionContext } from \"core/Engines/abstractEngine.functions\";\r\nimport { AbstractEngine } from \"../Engines/abstractEngine\";\r\n\r\nconst Base64DataUrlRegEx = new RegExp(/^data:([^,]+\\/[^,]+)?;base64,/i);\r\ndeclare const _native: INative;\r\n\r\n/** @ignore */\r\nexport class LoadFileError extends RuntimeError {\r\n    public request?: WebRequest;\r\n    public file?: File;\r\n\r\n    /**\r\n     * Creates a new LoadFileError\r\n     * @param message defines the message of the error\r\n     * @param object defines the optional web request\r\n     */\r\n    constructor(message: string, object?: WebRequest | File) {\r\n        super(message, ErrorCodes.LoadFileError);\r\n\r\n        this.name = \"LoadFileError\";\r\n        BaseError._setPrototypeOf(this, LoadFileError.prototype);\r\n\r\n        if (object instanceof WebRequest) {\r\n            this.request = object;\r\n        } else {\r\n            this.file = object;\r\n        }\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class RequestFileError extends RuntimeError {\r\n    /**\r\n     * Creates a new LoadFileError\r\n     * @param message defines the message of the error\r\n     * @param request defines the optional web request\r\n     */\r\n    constructor(\r\n        message: string,\r\n        public request: WebRequest\r\n    ) {\r\n        super(message, ErrorCodes.RequestFileError);\r\n        this.name = \"RequestFileError\";\r\n        BaseError._setPrototypeOf(this, RequestFileError.prototype);\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nexport class ReadFileError extends RuntimeError {\r\n    /**\r\n     * Creates a new ReadFileError\r\n     * @param message defines the message of the error\r\n     * @param file defines the optional file\r\n     */\r\n    constructor(\r\n        message: string,\r\n        public file: File\r\n    ) {\r\n        super(message, ErrorCodes.ReadFileError);\r\n        this.name = \"ReadFileError\";\r\n        BaseError._setPrototypeOf(this, ReadFileError.prototype);\r\n    }\r\n}\r\n\r\n/**\r\n * Removes unwanted characters from an url\r\n * @param url defines the url to clean\r\n * @returns the cleaned url\r\n */\r\nconst CleanUrl = (url: string): string => {\r\n    url = url.replace(/#/gm, \"%23\");\r\n    return url;\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const FileToolsOptions: {\r\n    DefaultRetryStrategy: (url: string, request: WebRequest, retryIndex: number) => number;\r\n    BaseUrl: string;\r\n    CorsBehavior: string | ((url: string | string[]) => string);\r\n    PreprocessUrl: (url: string) => string;\r\n    ScriptBaseUrl: string;\r\n    ScriptPreprocessUrl: (url: string) => string;\r\n    CleanUrl: (url: string) => string;\r\n} = {\r\n    /**\r\n     * Gets or sets the retry strategy to apply when an error happens while loading an asset.\r\n     * When defining this function, return the wait time before trying again or return -1 to\r\n     * stop retrying and error out.\r\n     */\r\n    DefaultRetryStrategy: RetryStrategy.ExponentialBackoff(),\r\n\r\n    /**\r\n     * Gets or sets the base URL to use to load assets\r\n     */\r\n    BaseUrl: \"\",\r\n\r\n    /**\r\n     * Default behaviour for cors in the application.\r\n     * It can be a string if the expected behavior is identical in the entire app.\r\n     * Or a callback to be able to set it per url or on a group of them (in case of Video source for instance)\r\n     */\r\n    CorsBehavior: \"anonymous\",\r\n\r\n    /**\r\n     * Gets or sets a function used to pre-process url before using them to load assets\r\n     * @param url\r\n     * @returns the processed url\r\n     */\r\n    PreprocessUrl: (url: string) => url,\r\n\r\n    /**\r\n     * Gets or sets the base URL to use to load scripts\r\n     * Used for both JS and WASM\r\n     */\r\n    ScriptBaseUrl: \"\",\r\n    /**\r\n     * Gets or sets a function used to pre-process script url before using them to load.\r\n     * Used for both JS and WASM\r\n     * @param url defines the url to process\r\n     * @returns the processed url\r\n     */\r\n    ScriptPreprocessUrl: (url: string) => url,\r\n\r\n    /**\r\n     * Gets or sets a function used to clean the url before using it to load assets\r\n     * @param url defines the url to clean\r\n     * @returns the cleaned url\r\n     */\r\n    CleanUrl,\r\n};\r\n\r\n/**\r\n * Sets the cors behavior on a dom element. This will add the required Tools.CorsBehavior to the element.\r\n * @param url define the url we are trying\r\n * @param element define the dom element where to configure the cors policy\r\n * @internal\r\n */\r\nexport const SetCorsBehavior = (url: string | string[], element: { crossOrigin: string | null }): void => {\r\n    if (url && url.indexOf(\"data:\") === 0) {\r\n        return;\r\n    }\r\n\r\n    if (FileToolsOptions.CorsBehavior) {\r\n        if (typeof FileToolsOptions.CorsBehavior === \"string\" || FileToolsOptions.CorsBehavior instanceof String) {\r\n            element.crossOrigin = <string>FileToolsOptions.CorsBehavior;\r\n        } else {\r\n            const result = FileToolsOptions.CorsBehavior(url);\r\n            if (result) {\r\n                element.crossOrigin = result;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Configuration used to load images\r\n * @see #DKMEZK#2\r\n */\r\nexport const LoadImageConfiguration: {\r\n    /**\r\n     * Use this callback if you want to provide the required size of an image before loading it.\r\n     */\r\n    getRequiredSize: Nullable<\r\n        (input: string | ArrayBuffer | ArrayBufferView | Blob) => {\r\n            width: number;\r\n            height: number;\r\n        }\r\n    >;\r\n} = {\r\n    getRequiredSize: null,\r\n};\r\n\r\n/**\r\n * Loads an image as an HTMLImageElement.\r\n * @param input url string, ArrayBuffer, or Blob to load\r\n * @param onLoad callback called when the image successfully loads\r\n * @param onError callback called when the image fails to load\r\n * @param offlineProvider offline provider for caching\r\n * @param mimeType optional mime type\r\n * @param imageBitmapOptions\r\n * @returns the HTMLImageElement of the loaded image\r\n * @internal\r\n */\r\nexport const LoadImage = (\r\n    input: string | ArrayBuffer | ArrayBufferView | Blob,\r\n    onLoad: (img: HTMLImageElement | ImageBitmap) => void,\r\n    onError: (message?: string, exception?: any) => void,\r\n    offlineProvider: Nullable<IOfflineProvider>,\r\n    mimeType: string = \"\",\r\n    imageBitmapOptions?: ImageBitmapOptions\r\n): Nullable<HTMLImageElement> => {\r\n    const engine = EngineStore.LastCreatedEngine;\r\n    if (typeof HTMLImageElement === \"undefined\" && !engine?._features.forceBitmapOverHTMLImageElement) {\r\n        onError(\"LoadImage is only supported in web or BabylonNative environments.\");\r\n        return null;\r\n    }\r\n\r\n    let url: string;\r\n    let usingObjectURL = false;\r\n\r\n    if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {\r\n        if (typeof Blob !== \"undefined\" && typeof URL !== \"undefined\") {\r\n            url = URL.createObjectURL(new Blob([input], { type: mimeType }));\r\n            usingObjectURL = true;\r\n        } else {\r\n            url = `data:${mimeType};base64,` + EncodeArrayBufferToBase64(input);\r\n        }\r\n    } else if (input instanceof Blob) {\r\n        url = URL.createObjectURL(input);\r\n        usingObjectURL = true;\r\n    } else {\r\n        url = FileToolsOptions.CleanUrl(input);\r\n        url = FileToolsOptions.PreprocessUrl(url);\r\n    }\r\n\r\n    const onErrorHandler = (exception: any) => {\r\n        if (onError) {\r\n            const inputText = url || input.toString();\r\n            onError(`Error while trying to load image: ${inputText.indexOf(\"http\") === 0 || inputText.length <= 128 ? inputText : inputText.slice(0, 128) + \"...\"}`, exception);\r\n        }\r\n    };\r\n\r\n    if (engine?._features.forceBitmapOverHTMLImageElement) {\r\n        LoadFile(\r\n            url,\r\n            (data) => {\r\n                engine!\r\n                    .createImageBitmap(new Blob([data], { type: mimeType }), { premultiplyAlpha: \"none\", ...imageBitmapOptions })\r\n                    .then((imgBmp) => {\r\n                        onLoad(imgBmp);\r\n                        if (usingObjectURL) {\r\n                            URL.revokeObjectURL(url);\r\n                        }\r\n                    })\r\n                    .catch((reason) => {\r\n                        if (onError) {\r\n                            onError(\"Error while trying to load image: \" + input, reason);\r\n                        }\r\n                    });\r\n            },\r\n            undefined,\r\n            offlineProvider || undefined,\r\n            true,\r\n            (request, exception) => {\r\n                onErrorHandler(exception);\r\n            }\r\n        );\r\n\r\n        return null;\r\n    }\r\n\r\n    const img = new Image();\r\n    if (LoadImageConfiguration.getRequiredSize) {\r\n        const size = LoadImageConfiguration.getRequiredSize(input);\r\n        if (size.width) {\r\n            img.width = size.width;\r\n        }\r\n        if (size.height) {\r\n            img.height = size.height;\r\n        }\r\n    }\r\n    SetCorsBehavior(url, img);\r\n\r\n    const handlersList: { target: any; name: string; handler: any }[] = [];\r\n\r\n    const loadHandlersList = () => {\r\n        handlersList.forEach((handler) => {\r\n            handler.target.addEventListener(handler.name, handler.handler);\r\n        });\r\n    };\r\n\r\n    const unloadHandlersList = () => {\r\n        handlersList.forEach((handler) => {\r\n            handler.target.removeEventListener(handler.name, handler.handler);\r\n        });\r\n        handlersList.length = 0;\r\n    };\r\n\r\n    const loadHandler = () => {\r\n        unloadHandlersList();\r\n\r\n        onLoad(img);\r\n\r\n        // Must revoke the URL after calling onLoad to avoid security exceptions in\r\n        // certain scenarios (e.g. when hosted in vscode).\r\n        if (usingObjectURL && img.src) {\r\n            URL.revokeObjectURL(img.src);\r\n        }\r\n    };\r\n\r\n    const errorHandler = (err: any) => {\r\n        unloadHandlersList();\r\n\r\n        onErrorHandler(err);\r\n\r\n        if (usingObjectURL && img.src) {\r\n            URL.revokeObjectURL(img.src);\r\n        }\r\n    };\r\n\r\n    const cspHandler = (err: any) => {\r\n        if (err.blockedURI !== img.src || err.disposition === \"report\") {\r\n            return;\r\n        }\r\n\r\n        unloadHandlersList();\r\n        const cspException = new Error(`CSP violation of policy ${err.effectiveDirective} ${err.blockedURI}. Current policy is ${err.originalPolicy}`);\r\n\r\n        EngineStore.UseFallbackTexture = false;\r\n        onErrorHandler(cspException);\r\n        if (usingObjectURL && img.src) {\r\n            URL.revokeObjectURL(img.src);\r\n        }\r\n        img.src = \"\";\r\n    };\r\n\r\n    handlersList.push({ target: img, name: \"load\", handler: loadHandler });\r\n    handlersList.push({ target: img, name: \"error\", handler: errorHandler });\r\n    handlersList.push({ target: document, name: \"securitypolicyviolation\", handler: cspHandler });\r\n\r\n    loadHandlersList();\r\n\r\n    const fromBlob = url.substring(0, 5) === \"blob:\";\r\n    const fromData = url.substring(0, 5) === \"data:\";\r\n    const noOfflineSupport = () => {\r\n        if (fromBlob || fromData || !WebRequest.IsCustomRequestAvailable) {\r\n            img.src = url;\r\n        } else {\r\n            LoadFile(\r\n                url,\r\n                (data, _, contentType) => {\r\n                    const type = !mimeType && contentType ? contentType : mimeType;\r\n                    const blob = new Blob([data], { type });\r\n                    const url = URL.createObjectURL(blob);\r\n                    usingObjectURL = true;\r\n                    img.src = url;\r\n                },\r\n                undefined,\r\n                offlineProvider || undefined,\r\n                true,\r\n                (_request, exception) => {\r\n                    onErrorHandler(exception);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    const loadFromOfflineSupport = () => {\r\n        if (offlineProvider) {\r\n            offlineProvider.loadImage(url, img);\r\n        }\r\n    };\r\n\r\n    if (!fromBlob && !fromData && offlineProvider && offlineProvider.enableTexturesOffline) {\r\n        offlineProvider.open(loadFromOfflineSupport, noOfflineSupport);\r\n    } else {\r\n        if (url.indexOf(\"file:\") !== -1) {\r\n            const textureName = decodeURIComponent(url.substring(5).toLowerCase());\r\n            if (FilesInputStore.FilesToLoad[textureName] && typeof URL !== \"undefined\") {\r\n                try {\r\n                    let blobURL;\r\n                    try {\r\n                        blobURL = URL.createObjectURL(FilesInputStore.FilesToLoad[textureName]);\r\n                    } catch (ex) {\r\n                        // Chrome doesn't support oneTimeOnly parameter\r\n                        blobURL = URL.createObjectURL(FilesInputStore.FilesToLoad[textureName]);\r\n                    }\r\n                    img.src = blobURL;\r\n                    usingObjectURL = true;\r\n                } catch (e) {\r\n                    img.src = \"\";\r\n                }\r\n                return img;\r\n            }\r\n        }\r\n\r\n        noOfflineSupport();\r\n    }\r\n\r\n    return img;\r\n};\r\n\r\n/**\r\n * Reads a file from a File object\r\n * @param file defines the file to load\r\n * @param onSuccess defines the callback to call when data is loaded\r\n * @param onProgress defines the callback to call during loading process\r\n * @param useArrayBuffer defines a boolean indicating that data must be returned as an ArrayBuffer\r\n * @param onError defines the callback to call when an error occurs\r\n * @returns a file request object\r\n * @internal\r\n */\r\nexport const ReadFile = (\r\n    file: File,\r\n    onSuccess: (data: any) => void,\r\n    onProgress?: (ev: ProgressEvent) => any,\r\n    useArrayBuffer?: boolean,\r\n    onError?: (error: ReadFileError) => void\r\n): IFileRequest => {\r\n    const reader = new FileReader();\r\n    const fileRequest: IFileRequest = {\r\n        onCompleteObservable: new Observable<IFileRequest>(),\r\n        abort: () => reader.abort(),\r\n    };\r\n\r\n    reader.onloadend = () => fileRequest.onCompleteObservable.notifyObservers(fileRequest);\r\n    if (onError) {\r\n        reader.onerror = () => {\r\n            onError(new ReadFileError(`Unable to read ${file.name}`, file));\r\n        };\r\n    }\r\n    reader.onload = (e) => {\r\n        //target doesn't have result from ts 1.3\r\n        onSuccess((<any>e.target)[\"result\"]);\r\n    };\r\n    if (onProgress) {\r\n        reader.onprogress = onProgress;\r\n    }\r\n    if (!useArrayBuffer) {\r\n        // Asynchronous read\r\n        reader.readAsText(file);\r\n    } else {\r\n        reader.readAsArrayBuffer(file);\r\n    }\r\n\r\n    return fileRequest;\r\n};\r\n\r\n/**\r\n * Loads a file from a url, a data url, or a file url\r\n * @param fileOrUrl file, url, data url, or file url to load\r\n * @param onSuccess callback called when the file successfully loads\r\n * @param onProgress callback called while file is loading (if the server supports this mode)\r\n * @param offlineProvider defines the offline provider for caching\r\n * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\r\n * @param onError callback called when the file fails to load\r\n * @param onOpened\r\n * @returns a file request object\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const LoadFile = (\r\n    fileOrUrl: File | string,\r\n    onSuccess: (data: string | ArrayBuffer, responseURL?: string, contentType?: Nullable<string>) => void,\r\n    onProgress?: (ev: ProgressEvent) => void,\r\n    offlineProvider?: IOfflineProvider,\r\n    useArrayBuffer?: boolean,\r\n    onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n    onOpened?: (request: WebRequest) => void\r\n): IFileRequest => {\r\n    if ((fileOrUrl as File).name) {\r\n        return ReadFile(\r\n            fileOrUrl as File,\r\n            onSuccess,\r\n            onProgress,\r\n            useArrayBuffer,\r\n            onError\r\n                ? (error: ReadFileError) => {\r\n                      onError(undefined, error);\r\n                  }\r\n                : undefined\r\n        );\r\n    }\r\n\r\n    const url = fileOrUrl as string;\r\n\r\n    // If file and file input are set\r\n    if (url.indexOf(\"file:\") !== -1) {\r\n        let fileName = decodeURIComponent(url.substring(5).toLowerCase());\r\n        if (fileName.indexOf(\"./\") === 0) {\r\n            fileName = fileName.substring(2);\r\n        }\r\n        const file = FilesInputStore.FilesToLoad[fileName];\r\n        if (file) {\r\n            return ReadFile(file, onSuccess, onProgress, useArrayBuffer, onError ? (error) => onError(undefined, new LoadFileError(error.message, error.file)) : undefined);\r\n        }\r\n    }\r\n\r\n    // For a Base64 Data URL\r\n    const { match, type } = TestBase64DataUrl(url);\r\n    if (match) {\r\n        const fileRequest: IFileRequest = {\r\n            onCompleteObservable: new Observable<IFileRequest>(),\r\n            abort: () => () => {},\r\n        };\r\n\r\n        try {\r\n            const data = useArrayBuffer ? DecodeBase64UrlToBinary(url) : DecodeBase64UrlToString(url);\r\n            onSuccess(data, undefined, type);\r\n        } catch (error) {\r\n            if (onError) {\r\n                onError(undefined, error);\r\n            } else {\r\n                Logger.Error(error.message || \"Failed to parse the Data URL\");\r\n            }\r\n        }\r\n\r\n        TimingTools.SetImmediate(() => {\r\n            fileRequest.onCompleteObservable.notifyObservers(fileRequest);\r\n        });\r\n\r\n        return fileRequest;\r\n    }\r\n\r\n    return RequestFile(\r\n        url,\r\n        (data, request) => {\r\n            onSuccess(data, request?.responseURL, request?.getResponseHeader(\"content-type\"));\r\n        },\r\n        onProgress,\r\n        offlineProvider,\r\n        useArrayBuffer,\r\n        onError\r\n            ? (error) => {\r\n                  onError(error.request, new LoadFileError(error.message, error.request));\r\n              }\r\n            : undefined,\r\n        onOpened\r\n    );\r\n};\r\n\r\n/**\r\n * Loads a file from a url\r\n * @param url url to load\r\n * @param onSuccess callback called when the file successfully loads\r\n * @param onProgress callback called while file is loading (if the server supports this mode)\r\n * @param offlineProvider defines the offline provider for caching\r\n * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\r\n * @param onError callback called when the file fails to load\r\n * @param onOpened callback called when the web request is opened\r\n * @returns a file request object\r\n * @internal\r\n */\r\nexport const RequestFile = (\r\n    url: string,\r\n    onSuccess?: (data: string | ArrayBuffer, request?: WebRequest) => void,\r\n    onProgress?: (event: ProgressEvent) => void,\r\n    offlineProvider?: IOfflineProvider,\r\n    useArrayBuffer?: boolean,\r\n    onError?: (error: RequestFileError) => void,\r\n    onOpened?: (request: WebRequest) => void\r\n): IFileRequest => {\r\n    url = FileToolsOptions.CleanUrl(url);\r\n    url = FileToolsOptions.PreprocessUrl(url);\r\n\r\n    const loadUrl = FileToolsOptions.BaseUrl + url;\r\n\r\n    let aborted = false;\r\n    const fileRequest: IFileRequest = {\r\n        onCompleteObservable: new Observable<IFileRequest>(),\r\n        abort: () => (aborted = true),\r\n    };\r\n\r\n    const requestFile = () => {\r\n        let request: Nullable<WebRequest> = new WebRequest();\r\n        let retryHandle: Nullable<ReturnType<typeof setTimeout>> = null;\r\n        let onReadyStateChange: Nullable<() => void>;\r\n\r\n        const unbindEvents = () => {\r\n            if (!request) {\r\n                return;\r\n            }\r\n\r\n            if (onProgress) {\r\n                request.removeEventListener(\"progress\", onProgress);\r\n            }\r\n            if (onReadyStateChange) {\r\n                request.removeEventListener(\"readystatechange\", onReadyStateChange);\r\n            }\r\n            request.removeEventListener(\"loadend\", onLoadEnd!);\r\n        };\r\n\r\n        let onLoadEnd: Nullable<() => void> = () => {\r\n            unbindEvents();\r\n\r\n            fileRequest.onCompleteObservable.notifyObservers(fileRequest);\r\n            fileRequest.onCompleteObservable.clear();\r\n\r\n            onProgress = undefined;\r\n            onReadyStateChange = null;\r\n            onLoadEnd = null;\r\n            onError = undefined;\r\n            onOpened = undefined;\r\n            onSuccess = undefined;\r\n        };\r\n\r\n        fileRequest.abort = () => {\r\n            aborted = true;\r\n\r\n            if (onLoadEnd) {\r\n                onLoadEnd();\r\n            }\r\n\r\n            if (request && request.readyState !== (XMLHttpRequest.DONE || 4)) {\r\n                request.abort();\r\n            }\r\n\r\n            if (retryHandle !== null) {\r\n                clearTimeout(retryHandle);\r\n                retryHandle = null;\r\n            }\r\n\r\n            request = null;\r\n        };\r\n\r\n        const handleError = (error: any) => {\r\n            const message = error.message || \"Unknown error\";\r\n            if (onError && request) {\r\n                onError(new RequestFileError(message, request));\r\n            } else {\r\n                Logger.Error(message);\r\n            }\r\n        };\r\n\r\n        const retryLoop = (retryIndex: number) => {\r\n            if (!request) {\r\n                return;\r\n            }\r\n            request.open(\"GET\", loadUrl);\r\n\r\n            if (onOpened) {\r\n                try {\r\n                    onOpened(request);\r\n                } catch (e) {\r\n                    handleError(e);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (useArrayBuffer) {\r\n                request.responseType = \"arraybuffer\";\r\n            }\r\n\r\n            if (onProgress) {\r\n                request.addEventListener(\"progress\", onProgress);\r\n            }\r\n\r\n            if (onLoadEnd) {\r\n                request.addEventListener(\"loadend\", onLoadEnd);\r\n            }\r\n\r\n            onReadyStateChange = () => {\r\n                if (aborted || !request) {\r\n                    return;\r\n                }\r\n\r\n                // In case of undefined state in some browsers.\r\n                if (request.readyState === (XMLHttpRequest.DONE || 4)) {\r\n                    // Some browsers have issues where onreadystatechange can be called multiple times with the same value.\r\n                    if (onReadyStateChange) {\r\n                        request.removeEventListener(\"readystatechange\", onReadyStateChange);\r\n                    }\r\n\r\n                    if ((request.status >= 200 && request.status < 300) || (request.status === 0 && (!IsWindowObjectExist() || IsFileURL()))) {\r\n                        // It's possible for the request to have a success status code but null response if the underlying\r\n                        // underlying HTTP connection was closed prematurely. See _onHttpResponseClose in xhr2.js. In this\r\n                        // case we will throw an exception if we call the onSuccess handler because \"data\" will be null\r\n                        // and that then bypasses the retry strategy.\r\n                        const data = useArrayBuffer ? request.response : request.responseText;\r\n                        if (data !== null) {\r\n                            try {\r\n                                if (onSuccess) {\r\n                                    onSuccess(data, request);\r\n                                }\r\n                            } catch (e) {\r\n                                handleError(e);\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    const retryStrategy = FileToolsOptions.DefaultRetryStrategy;\r\n                    if (retryStrategy) {\r\n                        const waitTime = retryStrategy(loadUrl, request, retryIndex);\r\n                        if (waitTime !== -1) {\r\n                            // Prevent the request from completing for retry.\r\n                            unbindEvents();\r\n\r\n                            request = new WebRequest();\r\n                            retryHandle = setTimeout(() => retryLoop(retryIndex + 1), waitTime);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    const error = new RequestFileError(\"Error status: \" + request.status + \" \" + request.statusText + \" - Unable to load \" + loadUrl, request);\r\n                    if (onError) {\r\n                        onError(error);\r\n                    }\r\n                }\r\n            };\r\n\r\n            request.addEventListener(\"readystatechange\", onReadyStateChange);\r\n\r\n            request.send();\r\n        };\r\n\r\n        retryLoop(0);\r\n    };\r\n\r\n    // Caching all files\r\n    if (offlineProvider && offlineProvider.enableSceneOffline) {\r\n        const noOfflineSupport = (request?: any) => {\r\n            if (request && request.status > 400) {\r\n                if (onError) {\r\n                    onError(request);\r\n                }\r\n            } else {\r\n                requestFile();\r\n            }\r\n        };\r\n\r\n        const loadFromOfflineSupport = () => {\r\n            // TODO: database needs to support aborting and should return a IFileRequest\r\n\r\n            if (offlineProvider) {\r\n                offlineProvider.loadFile(\r\n                    FileToolsOptions.BaseUrl + url,\r\n                    (data) => {\r\n                        if (!aborted && onSuccess) {\r\n                            onSuccess(data);\r\n                        }\r\n\r\n                        fileRequest.onCompleteObservable.notifyObservers(fileRequest);\r\n                    },\r\n                    onProgress\r\n                        ? (event) => {\r\n                              if (!aborted && onProgress) {\r\n                                  onProgress(event);\r\n                              }\r\n                          }\r\n                        : undefined,\r\n                    noOfflineSupport,\r\n                    useArrayBuffer\r\n                );\r\n            }\r\n        };\r\n\r\n        offlineProvider.open(loadFromOfflineSupport, noOfflineSupport);\r\n    } else {\r\n        requestFile();\r\n    }\r\n\r\n    return fileRequest;\r\n};\r\n\r\n/**\r\n * Checks if the loaded document was accessed via `file:`-Protocol.\r\n * @returns boolean\r\n * @internal\r\n */\r\nexport const IsFileURL = (): boolean => {\r\n    return typeof location !== \"undefined\" && location.protocol === \"file:\";\r\n};\r\n\r\n/**\r\n * Test if the given uri is a valid base64 data url\r\n * @param uri The uri to test\r\n * @returns True if the uri is a base64 data url or false otherwise\r\n * @internal\r\n */\r\nexport const IsBase64DataUrl = (uri: string): boolean => {\r\n    return Base64DataUrlRegEx.test(uri);\r\n};\r\n\r\nexport const TestBase64DataUrl = (uri: string): { match: boolean; type: string } => {\r\n    const results = Base64DataUrlRegEx.exec(uri);\r\n    if (results === null || results.length === 0) {\r\n        return { match: false, type: \"\" };\r\n    } else {\r\n        const type = results[0].replace(\"data:\", \"\").replace(\"base64,\", \"\");\r\n        return { match: true, type };\r\n    }\r\n};\r\n\r\n/**\r\n * Decode the given base64 uri.\r\n * @param uri The uri to decode\r\n * @returns The decoded base64 data.\r\n * @internal\r\n */\r\nexport function DecodeBase64UrlToBinary(uri: string): ArrayBuffer {\r\n    return DecodeBase64ToBinary(uri.split(\",\")[1]);\r\n}\r\n\r\n/**\r\n * Decode the given base64 uri into a UTF-8 encoded string.\r\n * @param uri The uri to decode\r\n * @returns The decoded base64 data.\r\n * @internal\r\n */\r\nexport const DecodeBase64UrlToString = (uri: string): string => {\r\n    return DecodeBase64ToString(uri.split(\",\")[1]);\r\n};\r\n\r\n/**\r\n * This will be executed automatically for UMD and es5.\r\n * If esm dev wants the side effects to execute they will have to run it manually\r\n * Once we build native modules those need to be exported.\r\n * @internal\r\n */\r\nconst initSideEffects = () => {\r\n    AbstractEngine._FileToolsLoadImage = LoadImage;\r\n    EngineFunctionContext.loadFile = LoadFile;\r\n    _functionContainer.loadFile = LoadFile;\r\n};\r\n\r\ninitSideEffects();\r\n\r\n// deprecated\r\n\r\n/**\r\n * FileTools defined as any.\r\n * This should not be imported or used in future releases or in any module in the framework\r\n * @internal\r\n * @deprecated import the needed function from fileTools.ts\r\n */\r\nexport let FileTools: {\r\n    DecodeBase64UrlToBinary: (uri: string) => ArrayBuffer;\r\n    DecodeBase64UrlToString: (uri: string) => string;\r\n    DefaultRetryStrategy: any;\r\n    BaseUrl: any;\r\n    CorsBehavior: any;\r\n    PreprocessUrl: any;\r\n    IsBase64DataUrl: (uri: string) => boolean;\r\n    IsFileURL: () => boolean;\r\n    LoadFile: (\r\n        fileOrUrl: string | File,\r\n        onSuccess: (data: string | ArrayBuffer, responseURL?: string | undefined) => void,\r\n        onProgress?: ((ev: ProgressEvent<EventTarget>) => void) | undefined,\r\n        offlineProvider?: IOfflineProvider | undefined,\r\n        useArrayBuffer?: boolean | undefined,\r\n        onError?: ((request?: WebRequest | undefined, exception?: LoadFileError | undefined) => void) | undefined,\r\n        onOpened?: ((request: WebRequest) => void) | undefined\r\n    ) => IFileRequest;\r\n    LoadImage: (\r\n        input: string | ArrayBuffer | Blob | ArrayBufferView,\r\n        onLoad: (img: HTMLImageElement | ImageBitmap) => void,\r\n        onError: (message?: string | undefined, exception?: any) => void,\r\n        offlineProvider: Nullable<IOfflineProvider>,\r\n        mimeType?: string | undefined,\r\n        imageBitmapOptions?: ImageBitmapOptions | undefined\r\n    ) => Nullable<HTMLImageElement>;\r\n    ReadFile: (\r\n        file: File,\r\n        onSuccess: (data: any) => void,\r\n        onProgress?: ((ev: ProgressEvent<EventTarget>) => any) | undefined,\r\n        useArrayBuffer?: boolean | undefined,\r\n        onError?: ((error: ReadFileError) => void) | undefined\r\n    ) => IFileRequest;\r\n    RequestFile: (\r\n        url: string,\r\n        onSuccess: (data: string | ArrayBuffer, request?: WebRequest | undefined) => void,\r\n        onProgress?: ((event: ProgressEvent<EventTarget>) => void) | undefined,\r\n        offlineProvider?: IOfflineProvider | undefined,\r\n        useArrayBuffer?: boolean | undefined,\r\n        onError?: ((error: RequestFileError) => void) | undefined,\r\n        onOpened?: ((request: WebRequest) => void) | undefined\r\n    ) => IFileRequest;\r\n    SetCorsBehavior: (url: string | string[], element: { crossOrigin: string | null }) => void;\r\n};\r\n/**\r\n * @internal\r\n */\r\nexport const _injectLTSFileTools = (\r\n    DecodeBase64UrlToBinary: (uri: string) => ArrayBuffer,\r\n    DecodeBase64UrlToString: (uri: string) => string,\r\n    FileToolsOptions: { DefaultRetryStrategy: any; BaseUrl: any; CorsBehavior: any; PreprocessUrl: any; CleanUrl: any },\r\n    IsBase64DataUrl: (uri: string) => boolean,\r\n    IsFileURL: () => boolean,\r\n    LoadFile: (\r\n        fileOrUrl: string | File,\r\n        onSuccess: (data: string | ArrayBuffer, responseURL?: string | undefined) => void,\r\n        onProgress?: ((ev: ProgressEvent<EventTarget>) => void) | undefined,\r\n        offlineProvider?: IOfflineProvider | undefined,\r\n        useArrayBuffer?: boolean | undefined,\r\n        onError?: ((request?: WebRequest | undefined, exception?: LoadFileError | undefined) => void) | undefined,\r\n        onOpened?: ((request: WebRequest) => void) | undefined\r\n    ) => IFileRequest,\r\n    LoadImage: (\r\n        input: string | ArrayBuffer | ArrayBufferView | Blob,\r\n        onLoad: (img: HTMLImageElement | ImageBitmap) => void,\r\n        onError: (message?: string | undefined, exception?: any) => void,\r\n        offlineProvider: Nullable<IOfflineProvider>,\r\n        mimeType?: string,\r\n        imageBitmapOptions?: ImageBitmapOptions | undefined\r\n    ) => Nullable<HTMLImageElement>,\r\n    ReadFile: (\r\n        file: File,\r\n        onSuccess: (data: any) => void,\r\n        onProgress?: ((ev: ProgressEvent<EventTarget>) => any) | undefined,\r\n        useArrayBuffer?: boolean | undefined,\r\n        onError?: ((error: ReadFileError) => void) | undefined\r\n    ) => IFileRequest,\r\n    RequestFile: (\r\n        url: string,\r\n        onSuccess: (data: string | ArrayBuffer, request?: WebRequest | undefined) => void,\r\n        onProgress?: ((event: ProgressEvent<EventTarget>) => void) | undefined,\r\n        offlineProvider?: IOfflineProvider | undefined,\r\n        useArrayBuffer?: boolean | undefined,\r\n        onError?: ((error: RequestFileError) => void) | undefined,\r\n        onOpened?: ((request: WebRequest) => void) | undefined\r\n    ) => IFileRequest,\r\n    SetCorsBehavior: (url: string | string[], element: { crossOrigin: string | null }) => void\r\n) => {\r\n    /**\r\n     * Backwards compatibility.\r\n     * @internal\r\n     * @deprecated\r\n     */\r\n    FileTools = {\r\n        DecodeBase64UrlToBinary,\r\n        DecodeBase64UrlToString,\r\n        DefaultRetryStrategy: FileToolsOptions.DefaultRetryStrategy,\r\n        BaseUrl: FileToolsOptions.BaseUrl,\r\n        CorsBehavior: FileToolsOptions.CorsBehavior,\r\n        PreprocessUrl: FileToolsOptions.PreprocessUrl,\r\n        IsBase64DataUrl,\r\n        IsFileURL,\r\n        LoadFile,\r\n        LoadImage,\r\n        ReadFile,\r\n        RequestFile,\r\n        SetCorsBehavior,\r\n    };\r\n\r\n    Object.defineProperty(FileTools, \"DefaultRetryStrategy\", {\r\n        get: function (this: null) {\r\n            return FileToolsOptions.DefaultRetryStrategy;\r\n        },\r\n        set: function (this: null, value: (url: string, request: WebRequest, retryIndex: number) => number) {\r\n            FileToolsOptions.DefaultRetryStrategy = value;\r\n        },\r\n    });\r\n\r\n    Object.defineProperty(FileTools, \"BaseUrl\", {\r\n        get: function (this: null) {\r\n            return FileToolsOptions.BaseUrl;\r\n        },\r\n        set: function (this: null, value: string) {\r\n            FileToolsOptions.BaseUrl = value;\r\n        },\r\n    });\r\n\r\n    Object.defineProperty(FileTools, \"PreprocessUrl\", {\r\n        get: function (this: null) {\r\n            return FileToolsOptions.PreprocessUrl;\r\n        },\r\n        set: function (this: null, value: (url: string) => string) {\r\n            FileToolsOptions.PreprocessUrl = value;\r\n        },\r\n    });\r\n\r\n    Object.defineProperty(FileTools, \"CorsBehavior\", {\r\n        get: function (this: null) {\r\n            return FileToolsOptions.CorsBehavior;\r\n        },\r\n        set: function (this: null, value: string | ((url: string | string[]) => string)) {\r\n            FileToolsOptions.CorsBehavior = value;\r\n        },\r\n    });\r\n};\r\n\r\n_injectLTSFileTools(DecodeBase64UrlToBinary, DecodeBase64UrlToString, FileToolsOptions, IsBase64DataUrl, IsFileURL, LoadFile, LoadImage, ReadFile, RequestFile, SetCorsBehavior);\r\n", "import { Logger } from \"./logger\";\r\nimport { GetClass } from \"./typeStore\";\r\n\r\n/**\r\n * Class used to enable instantiation of objects by class name\r\n */\r\nexport class InstantiationTools {\r\n    /**\r\n     * Use this object to register external classes like custom textures or material\r\n     * to allow the loaders to instantiate them\r\n     */\r\n    public static RegisteredExternalClasses: { [key: string]: Object } = {};\r\n\r\n    /**\r\n     * Tries to instantiate a new object from a given class name\r\n     * @param className defines the class name to instantiate\r\n     * @returns the new object or null if the system was not able to do the instantiation\r\n     */\r\n    public static Instantiate(className: string): any {\r\n        if (this.RegisteredExternalClasses && this.RegisteredExternalClasses[className]) {\r\n            return this.RegisteredExternalClasses[className];\r\n        }\r\n\r\n        const internalClass = GetClass(className);\r\n        if (internalClass) {\r\n            return internalClass;\r\n        }\r\n\r\n        Logger.Warn(className + \" not found, you may have missed an import.\");\r\n\r\n        const arr = className.split(\".\");\r\n\r\n        let fn: any = window || this;\r\n        for (let i = 0, len = arr.length; i < len; i++) {\r\n            fn = fn[arr[i]];\r\n        }\r\n\r\n        if (typeof fn !== \"function\") {\r\n            return null;\r\n        }\r\n\r\n        return fn;\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AASA,SAAS,uBAAoB;AAEzB,MAAI,OAAO,YAAY,eAAe,QAAQ,gBAAgB;AAC1D,WAAO,IAAI,QAAQ,eAAc;EACrC,OAAO;AACH,WAAO,IAAI,eAAc;EAC7B;AACJ;AAKM,IAAO,aAAP,MAAO,YAAU;EAAvB,cAAA;AACqB,SAAA,OAAO,qBAAoB;AA0BpC,SAAA,cAAsB;EAkLlC;;;;;EAtLW,WAAW,2BAAwB;AACtC,WAAO,OAAO,KAAK,YAAW,oBAAoB,EAAE,SAAS,KAAK,YAAW,uBAAuB,SAAS;EACjH;;;;EAOA,IAAW,aAAU;AACjB,WAAO,KAAK;EAChB;EAEQ,8BAA2B;AAC/B,QAAI,KAAK,gCAAgC,KAAK,WAAW,GAAG;AACxD;IACJ;AACA,eAAW,OAAO,YAAW,sBAAsB;AAC/C,YAAM,MAAM,YAAW,qBAAqB,GAAG;AAC/C,UAAI,KAAK;AACL,aAAK,KAAK,iBAAiB,KAAK,GAAG;MACvC;IACJ;EACJ;EAEQ,gCAAgC,KAAW;AAC/C,WAAO,YAAW,yCAAyC,IAAI,SAAS,uBAAuB,KAAK,IAAI,SAAS,mBAAmB;EACxI;;;;EAKA,IAAW,aAAU;AACjB,WAAO,KAAK,KAAK;EACrB;EAEA,IAAW,WAAW,OAAgE;AAClF,SAAK,KAAK,aAAa;EAC3B;;;;EAKA,IAAW,aAAU;AACjB,WAAO,KAAK,KAAK;EACrB;;;;EAKA,IAAW,SAAM;AACb,WAAO,KAAK,KAAK;EACrB;;;;EAKA,IAAW,aAAU;AACjB,WAAO,KAAK,KAAK;EACrB;;;;EAKA,IAAW,WAAQ;AACf,WAAO,KAAK,KAAK;EACrB;;;;EAKA,IAAW,cAAW;AAClB,WAAO,KAAK,KAAK;EACrB;;;;EAKA,IAAW,eAAY;AACnB,WAAO,KAAK,KAAK;EACrB;;;;EAKA,IAAW,eAAY;AACnB,WAAO,KAAK,KAAK;EACrB;EAEA,IAAW,aAAa,OAAiC;AACrD,SAAK,KAAK,eAAe;EAC7B;;;;EAKA,IAAW,UAAO;AACd,WAAO,KAAK,KAAK;EACrB;EAEA,IAAW,QAAQ,OAAa;AAC5B,SAAK,KAAK,UAAU;EACxB;EAQO,iBAAiB,MAAc,UAA8C,SAA2C;AAC3H,SAAK,KAAK,iBAAiB,MAAM,UAAU,OAAO;EACtD;EAQO,oBAAoB,MAAc,UAA8C,SAAwC;AAC3H,SAAK,KAAK,oBAAoB,MAAM,UAAU,OAAO;EACzD;;;;EAKO,QAAK;AACR,SAAK,KAAK,MAAK;EACnB;;;;;EAMO,KAAK,MAA+C;AACvD,QAAI,YAAW,sBAAsB;AACjC,WAAK,4BAA2B;IACpC;AAEA,SAAK,KAAK,KAAK,IAAI;EACvB;;;;;;EAOO,KAAK,QAAgB,KAAW;AACnC,eAAW,UAAU,YAAW,wBAAwB;AACpD,UAAI,KAAK,gCAAgC,GAAG,GAAG;AAC3C;MACJ;AACA,YAAM,OAAO,KAAK,MAAM,GAAG,KAAK;IACpC;AAGA,UAAM,IAAI,QAAQ,cAAc,OAAO;AACvC,UAAM,IAAI,QAAQ,eAAe,QAAQ;AAEzC,SAAK,cAAc;AAEnB,SAAK,KAAK,KAAK,QAAQ,KAAK,IAAI;EACpC;;;;;;EAOA,iBAAiB,MAAc,OAAa;AACxC,SAAK,KAAK,iBAAiB,MAAM,KAAK;EAC1C;;;;;;EAOA,kBAAkB,MAAY;AAC1B,WAAO,KAAK,KAAK,kBAAkB,IAAI;EAC3C;;AArMc,WAAA,uBAAkD,CAAA;AAKlD,WAAA,yBAAyB,IAAI,MAAK;AAKlC,WAAA,uCAAuC;;;AClCnD,IAAO,kBAAP,MAAsB;;AAIV,gBAAA,cAAuC,CAAA;;;ACHnD,IAAO,gBAAP,MAAoB;;;;;;;EAOf,OAAO,mBAAmB,aAAa,GAAG,eAAe,KAAG;AAC/D,WAAO,CAAC,KAAa,SAAqB,eAA8B;AACpE,UAAI,QAAQ,WAAW,KAAK,cAAc,cAAc,IAAI,QAAQ,OAAO,MAAM,IAAI;AACjF,eAAO;MACX;AAEA,aAAO,KAAK,IAAI,GAAG,UAAU,IAAI;IACrC;EACJ;;;;ACdE,IAAgB,YAAhB,cAAkC,MAAK;;AAKxB,UAAA,kBACZ,OAAe,mBACf,CAAC,GAAG,UAAS;AACV,IAAE,YAAY;AACd,SAAO;AACX;AAOD,IAAM,aAAa;;;EAGtB,2BAA2B;;;EAI3B,yBAAyB;;;EAIzB,gCAAgC;;;EAIhC,kBAAkB;;;EAIlB,eAAe;;EAEf,kBAAkB;;EAElB,eAAe;;AAWb,IAAO,eAAP,MAAO,sBAAqB,UAAS;;;;;;;EAiBvC,YAAmB,SAAiB,WAA2B,YAAkB;AAC7E,UAAM,OAAO;AAEb,SAAK,YAAY;AACjB,SAAK,aAAa;AAElB,SAAK,OAAO;AACZ,cAAU,gBAAgB,MAAM,cAAa,SAAS;EAC1D;;AAME,IAAO,aAAP,MAAO,oBAAmB,UAAS;EACrC,YAAmB,UAAU,qBAAmB;AAC5C,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,cAAU,gBAAgB,MAAM,YAAW,SAAS;EACxD;;;;ACpFG,IAAM,WAAW,CAAC,KAAa,WAA2B;AAC7D,SAAO,IAAI,SAAS,MAAM;AAC9B;AASO,IAAM,aAAa,CAAC,KAAa,WAA2B;AAC/D,MAAI,CAAC,KAAK;AACN,WAAO;EACX;AACA,SAAO,IAAI,WAAW,MAAM;AAChC;AAOO,IAAM,SAAS,CAAC,WAA4C;AAC/D,MAAI,OAAO,gBAAgB,aAAa;AACpC,WAAO,IAAI,YAAW,EAAG,OAAO,MAAM;EAC1C;AAEA,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,OAAO,YAAY,KAAK;AACxC,cAAU,OAAO,aAAa,OAAO,CAAC,CAAC;EAC3C;AAEA,SAAO;AACX;AAOO,IAAM,4BAA4B,CAAC,WAAiD;AACvF,QAAM,SAAS;AACf,MAAI,SAAS;AACb,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACxC,MAAI,IAAI;AACR,QAAM,QAAQ,YAAY,OAAO,MAAM,IAAI,IAAI,WAAW,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU,IAAI,IAAI,WAAW,MAAM;AAEtI,SAAO,IAAI,MAAM,QAAQ;AACrB,WAAO,MAAM,GAAG;AAChB,WAAO,IAAI,MAAM,SAAS,MAAM,GAAG,IAAI,OAAO;AAC9C,WAAO,IAAI,MAAM,SAAS,MAAM,GAAG,IAAI,OAAO;AAE9C,WAAO,QAAQ;AACf,YAAS,OAAO,MAAM,IAAM,QAAQ;AACpC,YAAS,OAAO,OAAO,IAAM,QAAQ;AACrC,WAAO,OAAO;AAEd,QAAI,MAAM,IAAI,GAAG;AACb,aAAO,OAAO;IAClB,WAAW,MAAM,IAAI,GAAG;AACpB,aAAO;IACX;AACA,cAAU,OAAO,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI;EAClG;AAEA,SAAO;AACX;AAOO,IAAM,uBAAuB,CAAC,eAA8B;AAC/D,SAAO,KAAK,UAAU;AAC1B;AAOO,IAAM,uBAAuB,CAAC,eAAmC;AACpE,QAAM,gBAAgB,qBAAqB,UAAU;AACrD,QAAM,eAAe,cAAc;AACnC,QAAM,aAAa,IAAI,WAAW,IAAI,YAAY,YAAY,CAAC;AAE/D,WAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AACnC,eAAW,CAAC,IAAI,cAAc,WAAW,CAAC;EAC9C;AAEA,SAAO,WAAW;AACtB;AAQO,IAAM,YAAY,CAAC,KAAa,WAA0B;AAC7D,MAAI,MAAM,OAAO,GAAG;AACpB,SAAO,IAAI,SAAS,QAAQ;AACxB,UAAM,MAAM;EAChB;AACA,SAAO;AACX;AAIO,IAAM,cAAc;EACvB;EACA;EACA;EACA;EACA;EACA;EACA;;;;ACzHE,SAAU,aAAU;AACtB,SAAO,uCAAuC,QAAQ,SAAS,CAAC,MAAK;AACjE,UAAM,IAAK,KAAK,OAAM,IAAK,KAAM,GAC7B,IAAI,MAAM,MAAM,IAAK,IAAI,IAAO;AACpC,WAAO,EAAE,SAAS,EAAE;EACxB,CAAC;AACL;AAIO,IAAM,OAAO;;;;;;;;EAQhB,UAAU;;;;ACLd,IAAM,qBAAqB,IAAI,OAAO,gCAAgC;AAIhE,IAAO,gBAAP,MAAO,uBAAsB,aAAY;;;;;;EAS3C,YAAY,SAAiB,QAA0B;AACnD,UAAM,SAAS,WAAW,aAAa;AAEvC,SAAK,OAAO;AACZ,cAAU,gBAAgB,MAAM,eAAc,SAAS;AAEvD,QAAI,kBAAkB,YAAY;AAC9B,WAAK,UAAU;IACnB,OAAO;AACH,WAAK,OAAO;IAChB;EACJ;;AAIE,IAAO,mBAAP,MAAO,0BAAyB,aAAY;;;;;;EAM9C,YACI,SACO,SAAmB;AAE1B,UAAM,SAAS,WAAW,gBAAgB;AAFnC,SAAA,UAAA;AAGP,SAAK,OAAO;AACZ,cAAU,gBAAgB,MAAM,kBAAiB,SAAS;EAC9D;;AAIE,IAAO,gBAAP,MAAO,uBAAsB,aAAY;;;;;;EAM3C,YACI,SACO,MAAU;AAEjB,UAAM,SAAS,WAAW,aAAa;AAFhC,SAAA,OAAA;AAGP,SAAK,OAAO;AACZ,cAAU,gBAAgB,MAAM,eAAc,SAAS;EAC3D;;AAQJ,IAAM,WAAW,CAAC,QAAuB;AACrC,QAAM,IAAI,QAAQ,OAAO,KAAK;AAC9B,SAAO;AACX;AAKO,IAAM,mBAQT;;;;;;EAMA,sBAAsB,cAAc,mBAAkB;;;;EAKtD,SAAS;;;;;;EAOT,cAAc;;;;;;EAOd,eAAe,CAAC,QAAgB;;;;;EAMhC,eAAe;;;;;;;EAOf,qBAAqB,CAAC,QAAgB;;;;;;EAOtC;;AASG,IAAM,kBAAkB,CAAC,KAAwB,YAAiD;AACrG,MAAI,OAAO,IAAI,QAAQ,OAAO,MAAM,GAAG;AACnC;EACJ;AAEA,MAAI,iBAAiB,cAAc;AAC/B,QAAI,OAAO,iBAAiB,iBAAiB,YAAY,iBAAiB,wBAAwB,QAAQ;AACtG,cAAQ,cAAsB,iBAAiB;IACnD,OAAO;AACH,YAAM,SAAS,iBAAiB,aAAa,GAAG;AAChD,UAAI,QAAQ;AACR,gBAAQ,cAAc;MAC1B;IACJ;EACJ;AACJ;AAMO,IAAM,yBAUT;EACA,iBAAiB;;AAcd,IAAM,YAAY,CACrB,OACA,QACA,SACA,iBACA,WAAmB,IACnB,uBAC4B;AAC5B,QAAM,SAAS,YAAY;AAC3B,MAAI,OAAO,qBAAqB,eAAe,EAAC,iCAAQ,UAAU,kCAAiC;AAC/F,YAAQ,mEAAmE;AAC3E,WAAO;EACX;AAEA,MAAI;AACJ,MAAI,iBAAiB;AAErB,MAAI,iBAAiB,eAAe,YAAY,OAAO,KAAK,GAAG;AAC3D,QAAI,OAAO,SAAS,eAAe,OAAO,QAAQ,aAAa;AAC3D,YAAM,IAAI,gBAAgB,IAAI,KAAK,CAAC,KAAK,GAAG,EAAE,MAAM,SAAQ,CAAE,CAAC;AAC/D,uBAAiB;IACrB,OAAO;AACH,YAAM,QAAQ,QAAQ,aAAa,0BAA0B,KAAK;IACtE;EACJ,WAAW,iBAAiB,MAAM;AAC9B,UAAM,IAAI,gBAAgB,KAAK;AAC/B,qBAAiB;EACrB,OAAO;AACH,UAAM,iBAAiB,SAAS,KAAK;AACrC,UAAM,iBAAiB,cAAc,GAAG;EAC5C;AAEA,QAAM,iBAAiB,CAAC,cAAkB;AACtC,QAAI,SAAS;AACT,YAAM,YAAY,OAAO,MAAM,SAAQ;AACvC,cAAQ,qCAAqC,UAAU,QAAQ,MAAM,MAAM,KAAK,UAAU,UAAU,MAAM,YAAY,UAAU,MAAM,GAAG,GAAG,IAAI,KAAK,IAAI,SAAS;IACtK;EACJ;AAEA,MAAI,iCAAQ,UAAU,iCAAiC;AACnD,aACI,KACA,CAAC,SAAQ;AACL,aACK,kBAAkB,IAAI,KAAK,CAAC,IAAI,GAAG,EAAE,MAAM,SAAQ,CAAE,GAAG,EAAE,kBAAkB,QAAQ,GAAG,mBAAkB,CAAE,EAC3G,KAAK,CAAC,WAAU;AACb,eAAO,MAAM;AACb,YAAI,gBAAgB;AAChB,cAAI,gBAAgB,GAAG;QAC3B;MACJ,CAAC,EACA,MAAM,CAAC,WAAU;AACd,YAAI,SAAS;AACT,kBAAQ,uCAAuC,OAAO,MAAM;QAChE;MACJ,CAAC;IACT,GACA,QACA,mBAAmB,QACnB,MACA,CAAC,SAAS,cAAa;AACnB,qBAAe,SAAS;IAC5B,CAAC;AAGL,WAAO;EACX;AAEA,QAAM,MAAM,IAAI,MAAK;AACrB,MAAI,uBAAuB,iBAAiB;AACxC,UAAM,OAAO,uBAAuB,gBAAgB,KAAK;AACzD,QAAI,KAAK,OAAO;AACZ,UAAI,QAAQ,KAAK;IACrB;AACA,QAAI,KAAK,QAAQ;AACb,UAAI,SAAS,KAAK;IACtB;EACJ;AACA,kBAAgB,KAAK,GAAG;AAExB,QAAM,eAA8D,CAAA;AAEpE,QAAM,mBAAmB,MAAK;AAC1B,iBAAa,QAAQ,CAAC,YAAW;AAC7B,cAAQ,OAAO,iBAAiB,QAAQ,MAAM,QAAQ,OAAO;IACjE,CAAC;EACL;AAEA,QAAM,qBAAqB,MAAK;AAC5B,iBAAa,QAAQ,CAAC,YAAW;AAC7B,cAAQ,OAAO,oBAAoB,QAAQ,MAAM,QAAQ,OAAO;IACpE,CAAC;AACD,iBAAa,SAAS;EAC1B;AAEA,QAAM,cAAc,MAAK;AACrB,uBAAkB;AAElB,WAAO,GAAG;AAIV,QAAI,kBAAkB,IAAI,KAAK;AAC3B,UAAI,gBAAgB,IAAI,GAAG;IAC/B;EACJ;AAEA,QAAM,eAAe,CAAC,QAAY;AAC9B,uBAAkB;AAElB,mBAAe,GAAG;AAElB,QAAI,kBAAkB,IAAI,KAAK;AAC3B,UAAI,gBAAgB,IAAI,GAAG;IAC/B;EACJ;AAEA,QAAM,aAAa,CAAC,QAAY;AAC5B,QAAI,IAAI,eAAe,IAAI,OAAO,IAAI,gBAAgB,UAAU;AAC5D;IACJ;AAEA,uBAAkB;AAClB,UAAM,eAAe,IAAI,MAAM,2BAA2B,IAAI,kBAAkB,IAAI,IAAI,UAAU,uBAAuB,IAAI,cAAc,EAAE;AAE7I,gBAAY,qBAAqB;AACjC,mBAAe,YAAY;AAC3B,QAAI,kBAAkB,IAAI,KAAK;AAC3B,UAAI,gBAAgB,IAAI,GAAG;IAC/B;AACA,QAAI,MAAM;EACd;AAEA,eAAa,KAAK,EAAE,QAAQ,KAAK,MAAM,QAAQ,SAAS,YAAW,CAAE;AACrE,eAAa,KAAK,EAAE,QAAQ,KAAK,MAAM,SAAS,SAAS,aAAY,CAAE;AACvE,eAAa,KAAK,EAAE,QAAQ,UAAU,MAAM,2BAA2B,SAAS,WAAU,CAAE;AAE5F,mBAAgB;AAEhB,QAAM,WAAW,IAAI,UAAU,GAAG,CAAC,MAAM;AACzC,QAAM,WAAW,IAAI,UAAU,GAAG,CAAC,MAAM;AACzC,QAAM,mBAAmB,MAAK;AAC1B,QAAI,YAAY,YAAY,CAAC,WAAW,0BAA0B;AAC9D,UAAI,MAAM;IACd,OAAO;AACH,eACI,KACA,CAAC,MAAM,GAAG,gBAAe;AACrB,cAAM,OAAO,CAAC,YAAY,cAAc,cAAc;AACtD,cAAM,OAAO,IAAI,KAAK,CAAC,IAAI,GAAG,EAAE,KAAI,CAAE;AACtC,cAAMA,OAAM,IAAI,gBAAgB,IAAI;AACpC,yBAAiB;AACjB,YAAI,MAAMA;MACd,GACA,QACA,mBAAmB,QACnB,MACA,CAAC,UAAU,cAAa;AACpB,uBAAe,SAAS;MAC5B,CAAC;IAET;EACJ;AAEA,QAAM,yBAAyB,MAAK;AAChC,QAAI,iBAAiB;AACjB,sBAAgB,UAAU,KAAK,GAAG;IACtC;EACJ;AAEA,MAAI,CAAC,YAAY,CAAC,YAAY,mBAAmB,gBAAgB,uBAAuB;AACpF,oBAAgB,KAAK,wBAAwB,gBAAgB;EACjE,OAAO;AACH,QAAI,IAAI,QAAQ,OAAO,MAAM,IAAI;AAC7B,YAAM,cAAc,mBAAmB,IAAI,UAAU,CAAC,EAAE,YAAW,CAAE;AACrE,UAAI,gBAAgB,YAAY,WAAW,KAAK,OAAO,QAAQ,aAAa;AACxE,YAAI;AACA,cAAI;AACJ,cAAI;AACA,sBAAU,IAAI,gBAAgB,gBAAgB,YAAY,WAAW,CAAC;UAC1E,SAAS,IAAI;AAET,sBAAU,IAAI,gBAAgB,gBAAgB,YAAY,WAAW,CAAC;UAC1E;AACA,cAAI,MAAM;AACV,2BAAiB;QACrB,SAAS,GAAG;AACR,cAAI,MAAM;QACd;AACA,eAAO;MACX;IACJ;AAEA,qBAAgB;EACpB;AAEA,SAAO;AACX;AAYO,IAAM,WAAW,CACpB,MACA,WACA,YACA,gBACA,YACc;AACd,QAAM,SAAS,IAAI,WAAU;AAC7B,QAAM,cAA4B;IAC9B,sBAAsB,IAAI,WAAU;IACpC,OAAO,MAAM,OAAO,MAAK;;AAG7B,SAAO,YAAY,MAAM,YAAY,qBAAqB,gBAAgB,WAAW;AACrF,MAAI,SAAS;AACT,WAAO,UAAU,MAAK;AAClB,cAAQ,IAAI,cAAc,kBAAkB,KAAK,IAAI,IAAI,IAAI,CAAC;IAClE;EACJ;AACA,SAAO,SAAS,CAAC,MAAK;AAElB,cAAgB,EAAE,OAAQ,QAAQ,CAAC;EACvC;AACA,MAAI,YAAY;AACZ,WAAO,aAAa;EACxB;AACA,MAAI,CAAC,gBAAgB;AAEjB,WAAO,WAAW,IAAI;EAC1B,OAAO;AACH,WAAO,kBAAkB,IAAI;EACjC;AAEA,SAAO;AACX;AAeO,IAAM,WAAW,CACpB,WACA,WACA,YACA,iBACA,gBACA,SACA,aACc;AACd,MAAK,UAAmB,MAAM;AAC1B,WAAO,SACH,WACA,WACA,YACA,gBACA,UACM,CAAC,UAAwB;AACrB,cAAQ,QAAW,KAAK;IAC5B,IACA,MAAS;EAEvB;AAEA,QAAM,MAAM;AAGZ,MAAI,IAAI,QAAQ,OAAO,MAAM,IAAI;AAC7B,QAAI,WAAW,mBAAmB,IAAI,UAAU,CAAC,EAAE,YAAW,CAAE;AAChE,QAAI,SAAS,QAAQ,IAAI,MAAM,GAAG;AAC9B,iBAAW,SAAS,UAAU,CAAC;IACnC;AACA,UAAM,OAAO,gBAAgB,YAAY,QAAQ;AACjD,QAAI,MAAM;AACN,aAAO,SAAS,MAAM,WAAW,YAAY,gBAAgB,UAAU,CAAC,UAAU,QAAQ,QAAW,IAAI,cAAc,MAAM,SAAS,MAAM,IAAI,CAAC,IAAI,MAAS;IAClK;EACJ;AAGA,QAAM,EAAE,OAAO,KAAI,IAAK,kBAAkB,GAAG;AAC7C,MAAI,OAAO;AACP,UAAM,cAA4B;MAC9B,sBAAsB,IAAI,WAAU;MACpC,OAAO,MAAM,MAAK;MAAE;;AAGxB,QAAI;AACA,YAAM,OAAO,iBAAiB,wBAAwB,GAAG,IAAI,wBAAwB,GAAG;AACxF,gBAAU,MAAM,QAAW,IAAI;IACnC,SAAS,OAAO;AACZ,UAAI,SAAS;AACT,gBAAQ,QAAW,KAAK;MAC5B,OAAO;AACH,eAAO,MAAM,MAAM,WAAW,8BAA8B;MAChE;IACJ;AAEA,gBAAY,aAAa,MAAK;AAC1B,kBAAY,qBAAqB,gBAAgB,WAAW;IAChE,CAAC;AAED,WAAO;EACX;AAEA,SAAO,YACH,KACA,CAAC,MAAM,YAAW;AACd,cAAU,MAAM,mCAAS,aAAa,mCAAS,kBAAkB,eAAe;EACpF,GACA,YACA,iBACA,gBACA,UACM,CAAC,UAAS;AACN,YAAQ,MAAM,SAAS,IAAI,cAAc,MAAM,SAAS,MAAM,OAAO,CAAC;EAC1E,IACA,QACN,QAAQ;AAEhB;AAcO,IAAM,cAAc,CACvB,KACA,WACA,YACA,iBACA,gBACA,SACA,aACc;AACd,QAAM,iBAAiB,SAAS,GAAG;AACnC,QAAM,iBAAiB,cAAc,GAAG;AAExC,QAAM,UAAU,iBAAiB,UAAU;AAE3C,MAAI,UAAU;AACd,QAAM,cAA4B;IAC9B,sBAAsB,IAAI,WAAU;IACpC,OAAO,MAAO,UAAU;;AAG5B,QAAM,cAAc,MAAK;AACrB,QAAI,UAAgC,IAAI,WAAU;AAClD,QAAI,cAAuD;AAC3D,QAAI;AAEJ,UAAM,eAAe,MAAK;AACtB,UAAI,CAAC,SAAS;AACV;MACJ;AAEA,UAAI,YAAY;AACZ,gBAAQ,oBAAoB,YAAY,UAAU;MACtD;AACA,UAAI,oBAAoB;AACpB,gBAAQ,oBAAoB,oBAAoB,kBAAkB;MACtE;AACA,cAAQ,oBAAoB,WAAW,SAAU;IACrD;AAEA,QAAI,YAAkC,MAAK;AACvC,mBAAY;AAEZ,kBAAY,qBAAqB,gBAAgB,WAAW;AAC5D,kBAAY,qBAAqB,MAAK;AAEtC,mBAAa;AACb,2BAAqB;AACrB,kBAAY;AACZ,gBAAU;AACV,iBAAW;AACX,kBAAY;IAChB;AAEA,gBAAY,QAAQ,MAAK;AACrB,gBAAU;AAEV,UAAI,WAAW;AACX,kBAAS;MACb;AAEA,UAAI,WAAW,QAAQ,gBAAgB,eAAe,QAAQ,IAAI;AAC9D,gBAAQ,MAAK;MACjB;AAEA,UAAI,gBAAgB,MAAM;AACtB,qBAAa,WAAW;AACxB,sBAAc;MAClB;AAEA,gBAAU;IACd;AAEA,UAAM,cAAc,CAAC,UAAc;AAC/B,YAAM,UAAU,MAAM,WAAW;AACjC,UAAI,WAAW,SAAS;AACpB,gBAAQ,IAAI,iBAAiB,SAAS,OAAO,CAAC;MAClD,OAAO;AACH,eAAO,MAAM,OAAO;MACxB;IACJ;AAEA,UAAM,YAAY,CAAC,eAAsB;AACrC,UAAI,CAAC,SAAS;AACV;MACJ;AACA,cAAQ,KAAK,OAAO,OAAO;AAE3B,UAAI,UAAU;AACV,YAAI;AACA,mBAAS,OAAO;QACpB,SAAS,GAAG;AACR,sBAAY,CAAC;AACb;QACJ;MACJ;AAEA,UAAI,gBAAgB;AAChB,gBAAQ,eAAe;MAC3B;AAEA,UAAI,YAAY;AACZ,gBAAQ,iBAAiB,YAAY,UAAU;MACnD;AAEA,UAAI,WAAW;AACX,gBAAQ,iBAAiB,WAAW,SAAS;MACjD;AAEA,2BAAqB,MAAK;AACtB,YAAI,WAAW,CAAC,SAAS;AACrB;QACJ;AAGA,YAAI,QAAQ,gBAAgB,eAAe,QAAQ,IAAI;AAEnD,cAAI,oBAAoB;AACpB,oBAAQ,oBAAoB,oBAAoB,kBAAkB;UACtE;AAEA,cAAK,QAAQ,UAAU,OAAO,QAAQ,SAAS,OAAS,QAAQ,WAAW,MAAM,CAAC,oBAAmB,KAAM,UAAS,IAAM;AAKtH,kBAAM,OAAO,iBAAiB,QAAQ,WAAW,QAAQ;AACzD,gBAAI,SAAS,MAAM;AACf,kBAAI;AACA,oBAAI,WAAW;AACX,4BAAU,MAAM,OAAO;gBAC3B;cACJ,SAAS,GAAG;AACR,4BAAY,CAAC;cACjB;AACA;YACJ;UACJ;AAEA,gBAAM,gBAAgB,iBAAiB;AACvC,cAAI,eAAe;AACf,kBAAM,WAAW,cAAc,SAAS,SAAS,UAAU;AAC3D,gBAAI,aAAa,IAAI;AAEjB,2BAAY;AAEZ,wBAAU,IAAI,WAAU;AACxB,4BAAc,WAAW,MAAM,UAAU,aAAa,CAAC,GAAG,QAAQ;AAClE;YACJ;UACJ;AAEA,gBAAM,QAAQ,IAAI,iBAAiB,mBAAmB,QAAQ,SAAS,MAAM,QAAQ,aAAa,uBAAuB,SAAS,OAAO;AACzI,cAAI,SAAS;AACT,oBAAQ,KAAK;UACjB;QACJ;MACJ;AAEA,cAAQ,iBAAiB,oBAAoB,kBAAkB;AAE/D,cAAQ,KAAI;IAChB;AAEA,cAAU,CAAC;EACf;AAGA,MAAI,mBAAmB,gBAAgB,oBAAoB;AACvD,UAAM,mBAAmB,CAAC,YAAiB;AACvC,UAAI,WAAW,QAAQ,SAAS,KAAK;AACjC,YAAI,SAAS;AACT,kBAAQ,OAAO;QACnB;MACJ,OAAO;AACH,oBAAW;MACf;IACJ;AAEA,UAAM,yBAAyB,MAAK;AAGhC,UAAI,iBAAiB;AACjB,wBAAgB,SACZ,iBAAiB,UAAU,KAC3B,CAAC,SAAQ;AACL,cAAI,CAAC,WAAW,WAAW;AACvB,sBAAU,IAAI;UAClB;AAEA,sBAAY,qBAAqB,gBAAgB,WAAW;QAChE,GACA,aACM,CAAC,UAAS;AACN,cAAI,CAAC,WAAW,YAAY;AACxB,uBAAW,KAAK;UACpB;QACJ,IACA,QACN,kBACA,cAAc;MAEtB;IACJ;AAEA,oBAAgB,KAAK,wBAAwB,gBAAgB;EACjE,OAAO;AACH,gBAAW;EACf;AAEA,SAAO;AACX;AAOO,IAAM,YAAY,MAAc;AACnC,SAAO,OAAO,aAAa,eAAe,SAAS,aAAa;AACpE;AAQO,IAAM,kBAAkB,CAAC,QAAwB;AACpD,SAAO,mBAAmB,KAAK,GAAG;AACtC;AAEO,IAAM,oBAAoB,CAAC,QAAiD;AAC/E,QAAM,UAAU,mBAAmB,KAAK,GAAG;AAC3C,MAAI,YAAY,QAAQ,QAAQ,WAAW,GAAG;AAC1C,WAAO,EAAE,OAAO,OAAO,MAAM,GAAE;EACnC,OAAO;AACH,UAAM,OAAO,QAAQ,CAAC,EAAE,QAAQ,SAAS,EAAE,EAAE,QAAQ,WAAW,EAAE;AAClE,WAAO,EAAE,OAAO,MAAM,KAAI;EAC9B;AACJ;AAQM,SAAU,wBAAwB,KAAW;AAC/C,SAAO,qBAAqB,IAAI,MAAM,GAAG,EAAE,CAAC,CAAC;AACjD;AAQO,IAAM,0BAA0B,CAAC,QAAuB;AAC3D,SAAO,qBAAqB,IAAI,MAAM,GAAG,EAAE,CAAC,CAAC;AACjD;AAQA,IAAM,kBAAkB,MAAK;AACzB,iBAAe,sBAAsB;AACrC,wBAAsB,WAAW;AACjC,qBAAmB,WAAW;AAClC;AAEA,gBAAe;AAUR,IAAI;AA+CJ,IAAM,sBAAsB,CAC/BC,0BACAC,0BACAC,mBACAC,kBACAC,YACAC,WASAC,YAQAC,WAOAC,cASAC,qBACA;AAMA,cAAY;IACR,yBAAAT;IACA,yBAAAC;IACA,sBAAsBC,kBAAiB;IACvC,SAASA,kBAAiB;IAC1B,cAAcA,kBAAiB;IAC/B,eAAeA,kBAAiB;IAChC,iBAAAC;IACA,WAAAC;IACA,UAAAC;IACA,WAAAC;IACA,UAAAC;IACA,aAAAC;IACA,iBAAAC;;AAGJ,SAAO,eAAe,WAAW,wBAAwB;IACrD,KAAK,WAAA;AACD,aAAOP,kBAAiB;IAC5B;IACA,KAAK,SAAsB,OAAuE;AAC9F,MAAAA,kBAAiB,uBAAuB;IAC5C;GACH;AAED,SAAO,eAAe,WAAW,WAAW;IACxC,KAAK,WAAA;AACD,aAAOA,kBAAiB;IAC5B;IACA,KAAK,SAAsB,OAAa;AACpC,MAAAA,kBAAiB,UAAU;IAC/B;GACH;AAED,SAAO,eAAe,WAAW,iBAAiB;IAC9C,KAAK,WAAA;AACD,aAAOA,kBAAiB;IAC5B;IACA,KAAK,SAAsB,OAA8B;AACrD,MAAAA,kBAAiB,gBAAgB;IACrC;GACH;AAED,SAAO,eAAe,WAAW,gBAAgB;IAC7C,KAAK,WAAA;AACD,aAAOA,kBAAiB;IAC5B;IACA,KAAK,SAAsB,OAAoD;AAC3E,MAAAA,kBAAiB,eAAe;IACpC;GACH;AACL;AAEA,oBAAoB,yBAAyB,yBAAyB,kBAAkB,iBAAiB,WAAW,UAAU,WAAW,UAAU,aAAa,eAAe;;;AC98BzK,IAAO,qBAAP,MAAyB;;;;;;EAYpB,OAAO,YAAY,WAAiB;AACvC,QAAI,KAAK,6BAA6B,KAAK,0BAA0B,SAAS,GAAG;AAC7E,aAAO,KAAK,0BAA0B,SAAS;IACnD;AAEA,UAAM,gBAAgB,SAAS,SAAS;AACxC,QAAI,eAAe;AACf,aAAO;IACX;AAEA,WAAO,KAAK,YAAY,4CAA4C;AAEpE,UAAM,MAAM,UAAU,MAAM,GAAG;AAE/B,QAAI,KAAU,UAAU;AACxB,aAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC5C,WAAK,GAAG,IAAI,CAAC,CAAC;IAClB;AAEA,QAAI,OAAO,OAAO,YAAY;AAC1B,aAAO;IACX;AAEA,WAAO;EACX;;AA/Bc,mBAAA,4BAAuD,CAAA;",
  "names": ["url", "DecodeBase64UrlToBinary", "DecodeBase64UrlToString", "FileToolsOptions", "IsBase64DataUrl", "IsFileURL", "LoadFile", "LoadImage", "ReadFile", "RequestFile", "SetCorsBehavior"]
}
