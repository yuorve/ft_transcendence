{
  "version": 3,
  "sources": ["../../../dev/core/src/Maths/math.viewport.ts", "../../../dev/core/src/Materials/drawWrapper.ts"],
  "sourcesContent": ["import type { IViewportLike } from \"./math.like\";\r\n\r\n/**\r\n * Class used to represent a viewport on screen\r\n */\r\nexport class Viewport implements IViewportLike {\r\n    /**\r\n     * Creates a Viewport object located at (x, y) and sized (width, height)\r\n     * @param x defines viewport left coordinate\r\n     * @param y defines viewport top coordinate\r\n     * @param width defines the viewport width\r\n     * @param height defines the viewport height\r\n     */\r\n    constructor(\r\n        /** viewport left coordinate */\r\n        public x: number,\r\n        /** viewport top coordinate */\r\n        public y: number,\r\n        /**viewport width */\r\n        public width: number,\r\n        /** viewport height */\r\n        public height: number\r\n    ) {}\r\n\r\n    /**\r\n     * Creates a new viewport using absolute sizing (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @returns a new Viewport\r\n     */\r\n    public toGlobal(renderWidth: number, renderHeight: number): Viewport {\r\n        return new Viewport(this.x * renderWidth, this.y * renderHeight, this.width * renderWidth, this.height * renderHeight);\r\n    }\r\n\r\n    /**\r\n     * Stores absolute viewport value into a target viewport (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @param ref defines the target viewport\r\n     * @returns the current viewport\r\n     */\r\n    public toGlobalToRef(renderWidth: number, renderHeight: number, ref: Viewport): Viewport {\r\n        ref.x = this.x * renderWidth;\r\n        ref.y = this.y * renderHeight;\r\n        ref.width = this.width * renderWidth;\r\n        ref.height = this.height * renderHeight;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Viewport copied from the current one\r\n     * @returns a new Viewport\r\n     */\r\n    public clone(): Viewport {\r\n        return new Viewport(this.x, this.y, this.width, this.height);\r\n    }\r\n}\r\n", "import type { IDrawContext } from \"../Engines/IDrawContext\";\r\nimport type { IMaterialContext } from \"../Engines/IMaterialContext\";\r\nimport type { Nullable } from \"../types\";\r\n\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { Effect } from \"./effect\";\r\nimport type { MaterialDefines } from \"./materialDefines\";\r\nimport { TimingTools } from \"core/Misc/timingTools\";\r\n\r\n/** @internal */\r\nexport class DrawWrapper {\r\n    public effect: Nullable<Effect>;\r\n    public defines: Nullable<string | MaterialDefines>;\r\n    public materialContext?: IMaterialContext;\r\n    public drawContext?: IDrawContext;\r\n\r\n    /**\r\n     * @internal\r\n     * Specifies if the effect was previously ready\r\n     */\r\n    public _wasPreviouslyReady = false;\r\n\r\n    /**\r\n     * @internal\r\n     * Forces the code from bindForSubMesh to be fully run the next time it is called\r\n     */\r\n    public _forceRebindOnNextCall = true;\r\n\r\n    /**\r\n     * @internal\r\n     * Specifies if the effect was previously using instances\r\n     */\r\n    public _wasPreviouslyUsingInstances: Nullable<boolean> = null;\r\n\r\n    public static GetEffect(effect: Effect | DrawWrapper): Nullable<Effect> {\r\n        return (effect as Effect).getPipelineContext === undefined ? (effect as DrawWrapper).effect : (effect as Effect);\r\n    }\r\n\r\n    constructor(engine: AbstractEngine, createMaterialContext = true) {\r\n        this.effect = null;\r\n        this.defines = null;\r\n        this.drawContext = engine.createDrawContext();\r\n        if (createMaterialContext) {\r\n            this.materialContext = engine.createMaterialContext();\r\n        }\r\n    }\r\n\r\n    public setEffect(effect: Nullable<Effect>, defines?: Nullable<string | MaterialDefines>, resetContext = true): void {\r\n        this.effect = effect;\r\n        if (defines !== undefined) {\r\n            this.defines = defines;\r\n        }\r\n        if (resetContext) {\r\n            this.drawContext?.reset();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the effect wrapper and its resources\r\n     * @param immediate if the effect should be disposed immediately or on the next frame.\r\n     * If dispose() is not called during a scene or engine dispose, we want to delay the dispose of the underlying effect. Mostly to give a chance to user code to reuse the effect in some way.\r\n     */\r\n    public dispose(immediate = false): void {\r\n        if (this.effect) {\r\n            const effect = this.effect;\r\n            if (immediate) {\r\n                effect.dispose();\r\n            } else {\r\n                TimingTools.SetImmediate(() => {\r\n                    effect.getEngine().onEndFrameObservable.addOnce(() => {\r\n                        effect.dispose();\r\n                    });\r\n                });\r\n            }\r\n            this.effect = null;\r\n        }\r\n        this.drawContext?.dispose();\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;AAKM,IAAO,WAAP,MAAO,UAAQ;;;;;;;;EAQjB,YAEW,GAEA,GAEA,OAEA,QAAc;AANd,SAAA,IAAA;AAEA,SAAA,IAAA;AAEA,SAAA,QAAA;AAEA,SAAA,SAAA;EACR;;;;;;;EAQI,SAAS,aAAqB,cAAoB;AACrD,WAAO,IAAI,UAAS,KAAK,IAAI,aAAa,KAAK,IAAI,cAAc,KAAK,QAAQ,aAAa,KAAK,SAAS,YAAY;EACzH;;;;;;;;EASO,cAAc,aAAqB,cAAsB,KAAa;AACzE,QAAI,IAAI,KAAK,IAAI;AACjB,QAAI,IAAI,KAAK,IAAI;AACjB,QAAI,QAAQ,KAAK,QAAQ;AACzB,QAAI,SAAS,KAAK,SAAS;AAC3B,WAAO;EACX;;;;;EAMO,QAAK;AACR,WAAO,IAAI,UAAS,KAAK,GAAG,KAAK,GAAG,KAAK,OAAO,KAAK,MAAM;EAC/D;;;;AC7CE,IAAO,cAAP,MAAkB;EAwBb,OAAO,UAAU,QAA4B;AAChD,WAAQ,OAAkB,uBAAuB,SAAa,OAAuB,SAAU;EACnG;EAEA,YAAY,QAAwB,wBAAwB,MAAI;AAlBzD,SAAA,sBAAsB;AAMtB,SAAA,yBAAyB;AAMzB,SAAA,+BAAkD;AAOrD,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,cAAc,OAAO,kBAAiB;AAC3C,QAAI,uBAAuB;AACvB,WAAK,kBAAkB,OAAO,sBAAqB;IACvD;EACJ;EAEO,UAAU,QAA0B,SAA8C,eAAe,MAAI;AAxChH;AAyCQ,SAAK,SAAS;AACd,QAAI,YAAY,QAAW;AACvB,WAAK,UAAU;IACnB;AACA,QAAI,cAAc;AACd,iBAAK,gBAAL,mBAAkB;IACtB;EACJ;;;;;;EAOO,QAAQ,YAAY,OAAK;AAvDpC;AAwDQ,QAAI,KAAK,QAAQ;AACb,YAAM,SAAS,KAAK;AACpB,UAAI,WAAW;AACX,eAAO,QAAO;MAClB,OAAO;AACH,oBAAY,aAAa,MAAK;AAC1B,iBAAO,UAAS,EAAG,qBAAqB,QAAQ,MAAK;AACjD,mBAAO,QAAO;UAClB,CAAC;QACL,CAAC;MACL;AACA,WAAK,SAAS;IAClB;AACA,eAAK,gBAAL,mBAAkB;EACtB;;",
  "names": []
}
