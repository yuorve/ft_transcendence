{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphForLoopBlock.ts"],
  "sourcesContent": ["import type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"core/FlowGraph/flowGraphExecutionBlockWithOutSignal\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport { RichTypeAny, RichTypeFlowGraphInteger, RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\nimport type { FlowGraphNumber } from \"core/FlowGraph/utils\";\r\nimport { getNumericValue } from \"core/FlowGraph/utils\";\r\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\r\n\r\n/**\r\n * Configuration for the For Loop block.\r\n */\r\nexport interface IFlowGraphForLoopBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The initial index of the loop.\r\n     * if not set will default to 0\r\n     */\r\n    initialIndex?: FlowGraphNumber;\r\n}\r\n/**\r\n * Block that executes an action in a loop.\r\n */\r\nexport class FlowGraphForLoopBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * The maximum number of iterations allowed for the loop.\r\n     * If the loop exceeds this number, it will stop. This number is configurable to avoid infinite loops.\r\n     */\r\n    public static MaxLoopIterations = 1000;\r\n    /**\r\n     * Input connection: The start index of the loop.\r\n     */\r\n    public readonly startIndex: FlowGraphDataConnection<FlowGraphNumber>;\r\n    /**\r\n     * Input connection: The end index of the loop.\r\n     */\r\n    public readonly endIndex: FlowGraphDataConnection<FlowGraphNumber>;\r\n    /**\r\n     * Input connection: The step of the loop.\r\n     */\r\n    public readonly step: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The current index of the loop.\r\n     */\r\n    public readonly index: FlowGraphDataConnection<FlowGraphInteger>;\r\n    /**\r\n     * Output connection: The signal that is activated when the loop body is executed.\r\n     */\r\n    public readonly executionFlow: FlowGraphSignalConnection;\r\n\r\n    /**\r\n     * Output connection: The completed signal. Triggered when condition is false.\r\n     * No out signal is available.\r\n     */\r\n    public readonly completed: FlowGraphSignalConnection;\r\n\r\n    public constructor(config?: IFlowGraphForLoopBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.startIndex = this.registerDataInput(\"startIndex\", RichTypeAny, 0);\r\n        this.endIndex = this.registerDataInput(\"endIndex\", RichTypeAny);\r\n        this.step = this.registerDataInput(\"step\", RichTypeNumber, 1);\r\n\r\n        this.index = this.registerDataOutput(\"index\", RichTypeFlowGraphInteger, new FlowGraphInteger(getNumericValue(config?.initialIndex ?? 0)));\r\n        this.executionFlow = this._registerSignalOutput(\"executionFlow\");\r\n        this.completed = this._registerSignalOutput(\"completed\");\r\n\r\n        this._unregisterSignalOutput(\"out\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _execute(context: FlowGraphContext): void {\r\n        const index = getNumericValue(this.startIndex.getValue(context));\r\n        const step = this.step.getValue(context);\r\n        let endIndex = getNumericValue(this.endIndex.getValue(context));\r\n        for (let i = index; i < endIndex; i += step) {\r\n            this.index.setValue(new FlowGraphInteger(i), context);\r\n            this.executionFlow._activateSignal(context);\r\n            endIndex = getNumericValue(this.endIndex.getValue(context));\r\n            if (i > FlowGraphForLoopBlock.MaxLoopIterations) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.completed._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.ForLoop;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.ForLoop, FlowGraphForLoopBlock);\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAyBM,IAAO,wBAAP,MAAO,+BAA8B,qCAAoC;EAiC3E,YAAmB,QAA4C;AAC3D,UAAM,MAAM;AAEZ,SAAK,aAAa,KAAK,kBAAkB,cAAc,aAAa,CAAC;AACrE,SAAK,WAAW,KAAK,kBAAkB,YAAY,WAAW;AAC9D,SAAK,OAAO,KAAK,kBAAkB,QAAQ,gBAAgB,CAAC;AAE5D,SAAK,QAAQ,KAAK,mBAAmB,SAAS,0BAA0B,IAAI,iBAAiB,iBAAgB,iCAAQ,iBAAgB,CAAC,CAAC,CAAC;AACxI,SAAK,gBAAgB,KAAK,sBAAsB,eAAe;AAC/D,SAAK,YAAY,KAAK,sBAAsB,WAAW;AAEvD,SAAK,wBAAwB,KAAK;EACtC;;;;EAKO,SAAS,SAAyB;AACrC,UAAM,QAAQ,gBAAgB,KAAK,WAAW,SAAS,OAAO,CAAC;AAC/D,UAAM,OAAO,KAAK,KAAK,SAAS,OAAO;AACvC,QAAI,WAAW,gBAAgB,KAAK,SAAS,SAAS,OAAO,CAAC;AAC9D,aAAS,IAAI,OAAO,IAAI,UAAU,KAAK,MAAM;AACzC,WAAK,MAAM,SAAS,IAAI,iBAAiB,CAAC,GAAG,OAAO;AACpD,WAAK,cAAc,gBAAgB,OAAO;AAC1C,iBAAW,gBAAgB,KAAK,SAAS,SAAS,OAAO,CAAC;AAC1D,UAAI,IAAI,uBAAsB,mBAAmB;AAC7C;MACJ;IACJ;AAEA,SAAK,UAAU,gBAAgB,OAAO;EAC1C;;;;EAKgB,eAAY;AACxB,WAAA;EACJ;;AAlEc,sBAAA,oBAAoB;AAoEtC,cAAa,yBAA8B,qBAAqB;",
  "names": []
}
