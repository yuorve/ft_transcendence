{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/Animation/flowGraphEasingBlock.ts"],
  "sourcesContent": ["import type { EasingFunction } from \"core/Animations/easing\";\nimport { BackEase, BezierCurveEase, BounceEase, CircleEase, CubicEase, ElasticEase, ExponentialEase } from \"core/Animations/easing\";\nimport type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny, RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\n\n/**\n * The type of the easing function.\n */\nexport const enum EasingFunctionType {\n    CircleEase = 0,\n    BackEase = 1,\n    BounceEase = 2,\n    CubicEase = 3,\n    ElasticEase = 4,\n    ExponentialEase = 5,\n    PowerEase = 6,\n    QuadraticEase = 7,\n    QuarticEase = 8,\n    QuinticEase = 9,\n    SineEase = 10,\n    BezierCurveEase = 11,\n}\n\n/**\n * @internal\n * Creates an easing function object based on the type and parameters provided.\n * This is not tree-shaking friendly, so if you need cubic bezier, use the dedicated bezier block.\n * @param type The type of the easing function.\n * @param controlPoint1 The first control point for the bezier curve.\n * @param controlPoint2 The second control point for the bezier curve.\n * @returns The easing function object.\n */\nfunction CreateEasingFunction(type: EasingFunctionType, ...parameters: number[]): EasingFunction {\n    switch (type) {\n        case EasingFunctionType.BezierCurveEase:\n            return new BezierCurveEase(...parameters);\n        case EasingFunctionType.CircleEase:\n            return new CircleEase();\n        case EasingFunctionType.BackEase:\n            return new BackEase(...parameters);\n        case EasingFunctionType.BounceEase:\n            return new BounceEase(...parameters);\n        case EasingFunctionType.CubicEase:\n            return new CubicEase();\n        case EasingFunctionType.ElasticEase:\n            return new ElasticEase(...parameters);\n        case EasingFunctionType.ExponentialEase:\n            return new ExponentialEase(...parameters);\n        default:\n            throw new Error(\"Easing type not yet implemented\");\n    }\n}\n\n/**\n * An easing block that generates an easingFunction object based on the data provided.\n */\nexport class FlowGraphEasingBlock extends FlowGraphBlock {\n    /**\n     * Input connection: The type of the easing function.\n     */\n    public readonly type: FlowGraphDataConnection<EasingFunctionType>;\n\n    /**\n     * Input connection: The mode of the easing function.\n     * EasingFunction.EASINGMODE_EASEIN, EasingFunction.EASINGMODE_EASEOUT, EasingFunction.EASINGMODE_EASEINOUT\n     */\n    public readonly mode: FlowGraphDataConnection<number>;\n\n    /**\n     * Input connection:parameters for easing. for example control points for BezierCurveEase.\n     */\n    public readonly parameters: FlowGraphDataConnection<number[]>;\n\n    /**\n     * Output connection: The easing function object.\n     */\n    public readonly easingFunction: FlowGraphDataConnection<EasingFunction>;\n\n    /**\n     * Internal cache of reusable easing functions.\n     * key is type-mode-properties\n     */\n    private _easingFunctions: { [key: string]: EasingFunction } = {};\n\n    constructor(\n        /**\n         * the configuration of the block\n         */\n        public override config?: IFlowGraphBlockConfiguration\n    ) {\n        super(config);\n\n        this.type = this.registerDataInput(\"type\", RichTypeAny, 11);\n        this.mode = this.registerDataInput(\"mode\", RichTypeNumber, 0);\n        this.parameters = this.registerDataInput(\"parameters\", RichTypeAny, [1, 0, 0, 1]);\n\n        this.easingFunction = this.registerDataOutput(\"easingFunction\", RichTypeAny);\n    }\n\n    public override _updateOutputs(context: FlowGraphContext) {\n        const type = this.type.getValue(context);\n        const mode = this.mode.getValue(context);\n        const parameters = this.parameters.getValue(context);\n\n        if (type === undefined || mode === undefined) {\n            return;\n        }\n\n        const key = `${type}-${mode}-${parameters.join(\"-\")}`;\n        if (!this._easingFunctions[key]) {\n            const easing = CreateEasingFunction(type, ...parameters);\n            easing.setEasingMode(mode);\n            this._easingFunctions[key] = easing;\n        }\n        this.easingFunction.setValue(this._easingFunctions[key], context);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.Easing;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.Easing, FlowGraphEasingBlock);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAaA,IAAkB;CAAlB,SAAkBA,qBAAkB;AAChC,EAAAA,oBAAAA,oBAAA,YAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,UAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,YAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,WAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,aAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,iBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,WAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,eAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,aAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,aAAA,IAAA,CAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,UAAA,IAAA,EAAA,IAAA;AACA,EAAAA,oBAAAA,oBAAA,iBAAA,IAAA,EAAA,IAAA;AACJ,GAbkB,uBAAA,qBAAkB,CAAA,EAAA;AAwBpC,SAAS,qBAAqB,SAA6B,YAAoB;AAC3E,UAAQ,MAAM;IACV,KAAA;AACI,aAAO,IAAI,gBAAgB,GAAG,UAAU;IAC5C,KAAA;AACI,aAAO,IAAI,WAAU;IACzB,KAAA;AACI,aAAO,IAAI,SAAS,GAAG,UAAU;IACrC,KAAA;AACI,aAAO,IAAI,WAAW,GAAG,UAAU;IACvC,KAAA;AACI,aAAO,IAAI,UAAS;IACxB,KAAA;AACI,aAAO,IAAI,YAAY,GAAG,UAAU;IACxC,KAAA;AACI,aAAO,IAAI,gBAAgB,GAAG,UAAU;IAC5C;AACI,YAAM,IAAI,MAAM,iCAAiC;EACzD;AACJ;AAKM,IAAO,uBAAP,cAAoC,eAAc;EA4BpD,YAIoB,QAAqC;AAErD,UAAM,MAAM;AAFI,SAAA,SAAA;AANZ,SAAA,mBAAsD,CAAA;AAU1D,SAAK,OAAO,KAAK,kBAAkB,QAAQ,aAAa,EAAE;AAC1D,SAAK,OAAO,KAAK,kBAAkB,QAAQ,gBAAgB,CAAC;AAC5D,SAAK,aAAa,KAAK,kBAAkB,cAAc,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AAEhF,SAAK,iBAAiB,KAAK,mBAAmB,kBAAkB,WAAW;EAC/E;EAEgB,eAAe,SAAyB;AACpD,UAAM,OAAO,KAAK,KAAK,SAAS,OAAO;AACvC,UAAM,OAAO,KAAK,KAAK,SAAS,OAAO;AACvC,UAAM,aAAa,KAAK,WAAW,SAAS,OAAO;AAEnD,QAAI,SAAS,UAAa,SAAS,QAAW;AAC1C;IACJ;AAEA,UAAM,MAAM,GAAG,IAAI,IAAI,IAAI,IAAI,WAAW,KAAK,GAAG,CAAC;AACnD,QAAI,CAAC,KAAK,iBAAiB,GAAG,GAAG;AAC7B,YAAM,SAAS,qBAAqB,MAAM,GAAG,UAAU;AACvD,aAAO,cAAc,IAAI;AACzB,WAAK,iBAAiB,GAAG,IAAI;IACjC;AACA,SAAK,eAAe,SAAS,KAAK,iBAAiB,GAAG,GAAG,OAAO;EACpE;EAEgB,eAAY;AACxB,WAAA;EACJ;;AAGJ,cAAa,wBAA6B,oBAAoB;",
  "names": ["EasingFunctionType"]
}
