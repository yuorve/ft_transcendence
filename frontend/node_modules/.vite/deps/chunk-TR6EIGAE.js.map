{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/flowGraphPathConverterComponent.ts", "../../../dev/core/src/FlowGraph/Blocks/Data/Transformers/flowGraphJsonPointerParserBlock.ts"],
  "sourcesContent": ["import type { IObjectInfo, IPathToObjectConverter } from \"../ObjectModel/objectModelInterfaces\";\r\nimport type { FlowGraphBlock } from \"./flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"./flowGraphDataConnection\";\r\nimport { FlowGraphInteger } from \"./CustomTypes/flowGraphInteger\";\r\nimport { RichTypeFlowGraphInteger } from \"./flowGraphRichTypes\";\r\nimport type { IObjectAccessor } from \"./typeDefinitions\";\r\n\r\nconst pathHasTemplatesRegex = new RegExp(/\\/\\{(\\w+)\\}\\//g);\r\n\r\n/**\r\n * @experimental\r\n * A component that converts a path to an object accessor.\r\n */\r\nexport class FlowGraphPathConverterComponent {\r\n    /**\r\n     * The templated inputs for the provided path.\r\n     */\r\n    public readonly templatedInputs: FlowGraphDataConnection<FlowGraphInteger>[] = [];\r\n    public constructor(\r\n        public path: string,\r\n        public ownerBlock: FlowGraphBlock\r\n    ) {\r\n        let match = pathHasTemplatesRegex.exec(path);\r\n        const templateSet = new Set<string>();\r\n        while (match) {\r\n            const [, matchGroup] = match;\r\n            if (templateSet.has(matchGroup)) {\r\n                throw new Error(\"Duplicate template variable detected.\");\r\n            }\r\n            templateSet.add(matchGroup);\r\n            this.templatedInputs.push(ownerBlock.registerDataInput(matchGroup, RichTypeFlowGraphInteger, new FlowGraphInteger(0)));\r\n            match = pathHasTemplatesRegex.exec(path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the accessor for the path.\r\n     * @param pathConverter the path converter to use to convert the path to an object accessor.\r\n     * @param context the context to use.\r\n     * @returns the accessor for the path.\r\n     * @throws if the value for a templated input is invalid.\r\n     */\r\n    public getAccessor(pathConverter: IPathToObjectConverter<IObjectAccessor>, context: FlowGraphContext): IObjectInfo<IObjectAccessor> {\r\n        let finalPath = this.path;\r\n        for (const templatedInput of this.templatedInputs) {\r\n            const valueToReplace = templatedInput.getValue(context).value;\r\n            if (typeof valueToReplace !== \"number\" || valueToReplace < 0) {\r\n                throw new Error(\"Invalid value for templated input.\");\r\n            }\r\n            finalPath = finalPath.replace(`{${templatedInput.name}}`, valueToReplace.toString());\r\n        }\r\n        return pathConverter.convert(finalPath);\r\n    }\r\n}\r\n", "import type { FlowGraphAssetType } from \"core/FlowGraph/flowGraphAssetsContext\";\nimport type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { FlowGraphPathConverterComponent } from \"core/FlowGraph/flowGraphPathConverterComponent\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\nimport type { IObjectAccessor } from \"core/FlowGraph/typeDefinitions\";\nimport type { IPathToObjectConverter } from \"core/ObjectModel/objectModelInterfaces\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport type { Animation } from \"core/Animations/animation\";\nimport type { EasingFunction } from \"core/Animations/easing\";\nimport type { Vector4 } from \"core/Maths/math.vector\";\nimport { Color3, Color4 } from \"core/Maths/math.color\";\nimport { FlowGraphCachedOperationBlock } from \"../flowGraphCachedOperationBlock\";\n\n/**\n * Configuration for the JSON pointer parser block.\n */\nexport interface IFlowGraphJsonPointerParserBlockConfiguration extends IFlowGraphBlockConfiguration {\n    /**\n     * The JSON pointer to parse.\n     */\n    jsonPointer: string;\n    /**\n     * The path converter to use to convert the path to an object accessor.\n     */\n    pathConverter: IPathToObjectConverter<IObjectAccessor>;\n\n    /**\n     * Whether to output the value of the property.\n     */\n    outputValue?: boolean;\n}\n\n/**\n * This block will take a JSON pointer and parse it to get the value from the JSON object.\n * The output is an object and a property name.\n * Optionally, the block can also output the value of the property. This is configurable.\n */\nexport class FlowGraphJsonPointerParserBlock<P extends any, O extends FlowGraphAssetType> extends FlowGraphCachedOperationBlock<P> {\n    /**\n     * Output connection: The object that contains the property.\n     */\n    public readonly object: FlowGraphDataConnection<O>;\n\n    /**\n     * Output connection: The property name.\n     */\n    public readonly propertyName: FlowGraphDataConnection<string>;\n\n    /**\n     * Output connection: A function that can be used to update the value of the property.\n     */\n    public readonly setterFunction: FlowGraphDataConnection<(target: O, propertyName: string, value: P, context: FlowGraphContext) => void>;\n\n    /**\n     * Output connection: A function that can be used to get the value of the property.\n     */\n    public readonly getterFunction: FlowGraphDataConnection<(target: O, propertyName: string, context: FlowGraphContext) => P | undefined>;\n\n    /**\n     * Output connection: A function that can be used to get the interpolation animation property info.\n     */\n    public readonly generateAnimationsFunction: FlowGraphDataConnection<() => (keys: any[], fps: number, easingFunction?: EasingFunction) => Animation[]>;\n\n    /**\n     * The component with the templated inputs for the provided path.\n     */\n    public readonly templateComponent: FlowGraphPathConverterComponent;\n\n    constructor(\n        /**\n         * the configuration of the block\n         */\n        public override config: IFlowGraphJsonPointerParserBlockConfiguration\n    ) {\n        super(RichTypeAny, config);\n        this.object = this.registerDataOutput(\"object\", RichTypeAny);\n        this.propertyName = this.registerDataOutput(\"propertyName\", RichTypeAny);\n        this.setterFunction = this.registerDataOutput(\"setFunction\", RichTypeAny, this._setPropertyValue.bind(this));\n        this.getterFunction = this.registerDataOutput(\"getFunction\", RichTypeAny, this._getPropertyValue.bind(this));\n        this.generateAnimationsFunction = this.registerDataOutput(\"generateAnimationsFunction\", RichTypeAny, this._getInterpolationAnimationPropertyInfo.bind(this));\n        this.templateComponent = new FlowGraphPathConverterComponent(config.jsonPointer, this);\n    }\n\n    public override _doOperation(context: FlowGraphContext): P {\n        const accessorContainer = this.templateComponent.getAccessor(this.config.pathConverter, context);\n        const value = accessorContainer.info.get(accessorContainer.object) as P;\n        const object = accessorContainer.info.getTarget?.(accessorContainer.object);\n        const propertyName = accessorContainer.info.getPropertyName?.[0](accessorContainer.object);\n        if (!object) {\n            throw new Error(\"Object is undefined\");\n        } else {\n            this.object.setValue(object, context);\n            if (propertyName) {\n                this.propertyName.setValue(propertyName, context);\n            }\n        }\n        return value;\n    }\n\n    private _setPropertyValue(_target: O, _propertyName: string, value: P, context: FlowGraphContext): void {\n        const accessorContainer = this.templateComponent.getAccessor(this.config.pathConverter, context);\n        const type = accessorContainer.info.type;\n        if (type.startsWith(\"Color\")) {\n            value = ToColor(value as Vector4, type) as unknown as P;\n        }\n        accessorContainer.info.set?.(value, accessorContainer.object);\n    }\n\n    private _getPropertyValue(_target: O, _propertyName: string, context: FlowGraphContext): P | undefined {\n        const accessorContainer = this.templateComponent.getAccessor(this.config.pathConverter, context);\n        return accessorContainer.info.get(accessorContainer.object);\n    }\n\n    private _getInterpolationAnimationPropertyInfo(\n        _target: O,\n        _propertyName: string,\n        context: FlowGraphContext\n    ): (keys: any[], fps: number, animationType: number, easingFunction?: EasingFunction) => Animation[] {\n        const accessorContainer = this.templateComponent.getAccessor(this.config.pathConverter, context);\n        return (keys: any[], fps: number, animationType: number, easingFunction?: EasingFunction) => {\n            const animations: Animation[] = [];\n            // make sure keys are of the right type (in case of float3 color/vector)\n            const type = accessorContainer.info.type;\n            if (type.startsWith(\"Color\")) {\n                keys = keys.map((key) => {\n                    return {\n                        frame: key.frame,\n                        value: ToColor(key.value, type),\n                    };\n                });\n            }\n            accessorContainer.info.interpolation?.forEach((info, index) => {\n                const name = accessorContainer.info.getPropertyName?.[index](accessorContainer.object) || \"Animation-interpolation-\" + index;\n                // generate the keys based on interpolation info\n                let newKeys: any[] = keys;\n                if (animationType !== info.type) {\n                    // convert the keys to the right type\n                    newKeys = keys.map((key) => {\n                        return {\n                            frame: key.frame,\n                            value: info.getValue(undefined, key.value.asArray ? key.value.asArray() : [key.value], 0, 1),\n                        };\n                    });\n                }\n                const animationData = info.buildAnimations(accessorContainer.object, name, 60, newKeys);\n                animationData.forEach((animation) => {\n                    if (easingFunction) {\n                        animation.babylonAnimation.setEasingFunction(easingFunction);\n                    }\n                    animations.push(animation.babylonAnimation);\n                });\n            });\n\n            return animations;\n        };\n    }\n\n    /**\n     * Gets the class name of this block\n     * @returns the class name\n     */\n    public override getClassName(): string {\n        return FlowGraphBlockNames.JsonPointerParser;\n    }\n}\n\nfunction ToColor(value: any, expectedValue: string) {\n    if (value.getClassName().startsWith(\"Color\")) {\n        return value as unknown as Color3 | Color4;\n    }\n    if (expectedValue === \"Color3\") {\n        return new Color3(value.x, value.y, value.z);\n    } else if (expectedValue === \"Color4\") {\n        return new Color4(value.x, value.y, value.z, value.w);\n    }\n    return value;\n}\n\nRegisterClass(FlowGraphBlockNames.JsonPointerParser, FlowGraphJsonPointerParserBlock);\n"],
  "mappings": "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",
  "names": ["_a"]
}
