{
  "version": 3,
  "sources": ["../../../dev/core/src/AudioV2/abstractAudio/abstractAudioBus.ts"],
  "sourcesContent": ["import type { Nullable } from \"../../types\";\nimport { AbstractNamedAudioNode, AudioNodeType } from \"./abstractAudioNode\";\nimport type { AudioEngineV2 } from \"./audioEngineV2\";\nimport type { _AbstractAudioSubGraph } from \"./subNodes/abstractAudioSubGraph\";\nimport type { IVolumeAudioOptions } from \"./subNodes/volumeAudioSubNode\";\nimport { _GetVolumeAudioProperty, _GetVolumeAudioSubNode } from \"./subNodes/volumeAudioSubNode\";\nimport type { AbstractAudioAnalyzer, IAudioAnalyzerOptions } from \"./subProperties/abstractAudioAnalyzer\";\nimport { _AudioAnalyzer } from \"./subProperties/audioAnalyzer\";\n\n/** @internal */\nexport interface IAbstractAudioBusOptions extends IAudioAnalyzerOptions, IVolumeAudioOptions {}\n\n/**\n * Abstract class representing an audio bus with volume control.\n *\n * An audio bus is a node in the audio graph that can have multiple inputs and outputs. It is typically used to group\n * sounds together and apply effects to them.\n */\nexport abstract class AbstractAudioBus extends AbstractNamedAudioNode {\n    private _analyzer: Nullable<AbstractAudioAnalyzer> = null;\n\n    protected abstract _subGraph: _AbstractAudioSubGraph;\n\n    protected constructor(name: string, engine: AudioEngineV2) {\n        super(name, engine, AudioNodeType.HAS_INPUTS_AND_OUTPUTS);\n    }\n\n    /**\n     * The analyzer features of the bus.\n     */\n    public get analyzer(): AbstractAudioAnalyzer {\n        return this._analyzer ?? (this._analyzer = new _AudioAnalyzer(this._subGraph));\n    }\n\n    /**\n     * The output volume of the bus.\n     */\n    public get volume(): number {\n        return _GetVolumeAudioProperty(this._subGraph, \"volume\");\n    }\n\n    public set volume(value: number) {\n        // The volume subnode is created on initialization and should always exist.\n        const node = _GetVolumeAudioSubNode(this._subGraph);\n        if (!node) {\n            throw new Error(\"No volume subnode\");\n        }\n\n        node.volume = value;\n    }\n\n    /**\n     * Releases associated resources.\n     */\n    public override dispose(): void {\n        super.dispose();\n\n        this._analyzer?.dispose();\n        this._analyzer = null;\n\n        this._subGraph.dispose();\n    }\n}\n"],
  "mappings": ";;;;;;;;AAkBM,IAAgB,mBAAhB,cAAyC,uBAAsB;EAKjE,YAAsB,MAAc,QAAqB;AACrD;MAAM;MAAM;MAAM;;IAAA;AALd,SAAA,YAA6C;EAMrD;;;;EAKA,IAAW,WAAQ;AACf,WAAO,KAAK,cAAc,KAAK,YAAY,IAAI,eAAe,KAAK,SAAS;EAChF;;;;EAKA,IAAW,SAAM;AACb,WAAO,wBAAwB,KAAK,WAAW,QAAQ;EAC3D;EAEA,IAAW,OAAO,OAAa;AAE3B,UAAM,OAAO,uBAAuB,KAAK,SAAS;AAClD,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,MAAM,mBAAmB;IACvC;AAEA,SAAK,SAAS;EAClB;;;;EAKgB,UAAO;AArD3B;AAsDQ,UAAM,QAAO;AAEb,eAAK,cAAL,mBAAgB;AAChB,SAAK,YAAY;AAEjB,SAAK,UAAU,QAAO;EAC1B;;",
  "names": []
}
