{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/Utils/flowGraphArrayIndexBlock.ts"],
  "sourcesContent": ["import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\nimport type { FlowGraphNumber } from \"core/FlowGraph/utils\";\nimport { getNumericValue } from \"core/FlowGraph/utils\";\nimport type { Nullable } from \"core/types\";\n\n/**\n * This simple Util block takes an array as input and selects a single element from it.\n */\nexport class FlowGraphArrayIndexBlock<T = any> extends FlowGraphBlock {\n    /**\n     * Input connection: The array to select from.\n     */\n    public readonly array: FlowGraphDataConnection<T[]>;\n\n    /**\n     * Input connection: The index to select.\n     */\n    public readonly index: FlowGraphDataConnection<FlowGraphNumber>;\n\n    /**\n     * Output connection: The selected element.\n     */\n    public readonly value: FlowGraphDataConnection<Nullable<T>>;\n\n    /**\n     * Construct a FlowGraphArrayIndexBlock.\n     * @param config construction parameters\n     */\n    constructor(public override config: IFlowGraphBlockConfiguration) {\n        super(config);\n\n        this.array = this.registerDataInput(\"array\", RichTypeAny);\n        this.index = this.registerDataInput(\"index\", RichTypeAny, new FlowGraphInteger(-1));\n        this.value = this.registerDataOutput(\"value\", RichTypeAny);\n    }\n\n    /**\n     * @internal\n     */\n    public override _updateOutputs(context: FlowGraphContext): void {\n        const array = this.array.getValue(context);\n        const index = getNumericValue(this.index.getValue(context));\n        if (array && index >= 0 && index < array.length) {\n            this.value.setValue(array[index], context);\n        } else {\n            this.value.setValue(null, context);\n        }\n    }\n\n    /**\n     * Serializes this block\n     * @param serializationObject the object to serialize to\n     */\n    public override serialize(serializationObject?: any): void {\n        super.serialize(serializationObject);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.ArrayIndex;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.ArrayIndex, FlowGraphArrayIndexBlock);\n"],
  "mappings": ";;;;;;;;;;;;;AAeM,IAAO,2BAAP,cAAiD,eAAc;;;;;EAoBjE,YAA4B,QAAoC;AAC5D,UAAM,MAAM;AADY,SAAA,SAAA;AAGxB,SAAK,QAAQ,KAAK,kBAAkB,SAAS,WAAW;AACxD,SAAK,QAAQ,KAAK,kBAAkB,SAAS,aAAa,IAAI,iBAAiB,EAAE,CAAC;AAClF,SAAK,QAAQ,KAAK,mBAAmB,SAAS,WAAW;EAC7D;;;;EAKgB,eAAe,SAAyB;AACpD,UAAM,QAAQ,KAAK,MAAM,SAAS,OAAO;AACzC,UAAM,QAAQ,gBAAgB,KAAK,MAAM,SAAS,OAAO,CAAC;AAC1D,QAAI,SAAS,SAAS,KAAK,QAAQ,MAAM,QAAQ;AAC7C,WAAK,MAAM,SAAS,MAAM,KAAK,GAAG,OAAO;IAC7C,OAAO;AACH,WAAK,MAAM,SAAS,MAAM,OAAO;IACrC;EACJ;;;;;EAMgB,UAAU,qBAAyB;AAC/C,UAAM,UAAU,mBAAmB;EACvC;EAEgB,eAAY;AACxB,WAAA;EACJ;;AAGJ,cAAa,4BAAiC,wBAAwB;",
  "names": []
}
