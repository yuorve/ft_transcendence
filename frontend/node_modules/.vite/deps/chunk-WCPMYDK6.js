import {
  getNumericValue
} from "./chunk-2EXF6GXX.js";
import {
  FlowGraphBlock,
  FlowGraphInteger,
  RichTypeAny
} from "./chunk-PQRK4BIZ.js";
import {
  RegisterClass
} from "./chunk-LMH7SWDS.js";

// node_modules/@babylonjs/core/FlowGraph/flowGraphAssetsContext.js
var FlowGraphAssetType;
(function(FlowGraphAssetType2) {
  FlowGraphAssetType2["Animation"] = "Animation";
  FlowGraphAssetType2["AnimationGroup"] = "AnimationGroup";
  FlowGraphAssetType2["Mesh"] = "Mesh";
  FlowGraphAssetType2["Material"] = "Material";
  FlowGraphAssetType2["Camera"] = "Camera";
  FlowGraphAssetType2["Light"] = "Light";
})(FlowGraphAssetType || (FlowGraphAssetType = {}));
function GetFlowGraphAssetWithType(assetsContext, type, index, useIndexAsUniqueId) {
  switch (type) {
    case "Animation":
      return useIndexAsUniqueId ? assetsContext.animations.find((a) => a.uniqueId === index) ?? null : assetsContext.animations[index] ?? null;
    case "AnimationGroup":
      return useIndexAsUniqueId ? assetsContext.animationGroups.find((a) => a.uniqueId === index) ?? null : assetsContext.animationGroups[index] ?? null;
    case "Mesh":
      return useIndexAsUniqueId ? assetsContext.meshes.find((a) => a.uniqueId === index) ?? null : assetsContext.meshes[index] ?? null;
    case "Material":
      return useIndexAsUniqueId ? assetsContext.materials.find((a) => a.uniqueId === index) ?? null : assetsContext.materials[index] ?? null;
    case "Camera":
      return useIndexAsUniqueId ? assetsContext.cameras.find((a) => a.uniqueId === index) ?? null : assetsContext.cameras[index] ?? null;
    case "Light":
      return useIndexAsUniqueId ? assetsContext.lights.find((a) => a.uniqueId === index) ?? null : assetsContext.lights[index] ?? null;
    default:
      return null;
  }
}

// node_modules/@babylonjs/core/FlowGraph/Blocks/Data/flowGraphGetAssetBlock.js
var FlowGraphGetAssetBlock = class extends FlowGraphBlock {
  constructor(config) {
    super(config);
    this.config = config;
    this.type = this.registerDataInput("type", RichTypeAny, config.type);
    this.value = this.registerDataOutput("value", RichTypeAny);
    this.index = this.registerDataInput("index", RichTypeAny, new FlowGraphInteger(getNumericValue(config.index ?? -1)));
  }
  _updateOutputs(context) {
    const type = this.type.getValue(context);
    const index = this.index.getValue(context);
    const asset = GetFlowGraphAssetWithType(context.assetsContext, type, getNumericValue(index), this.config.useIndexAsUniqueId);
    this.value.setValue(asset, context);
  }
  /**
   * Gets the class name of this block
   * @returns the class name
   */
  getClassName() {
    return "FlowGraphGetAssetBlock";
  }
};
RegisterClass("FlowGraphGetAssetBlock", FlowGraphGetAssetBlock);

export {
  FlowGraphAssetType,
  GetFlowGraphAssetWithType,
  FlowGraphGetAssetBlock
};
//# sourceMappingURL=chunk-WCPMYDK6.js.map
