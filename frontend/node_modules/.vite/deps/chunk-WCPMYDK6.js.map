{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/flowGraphAssetsContext.ts", "../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphGetAssetBlock.ts"],
  "sourcesContent": ["import type { AnimationGroup } from \"core/Animations/animationGroup\";\nimport type { Animation } from \"core/Animations/animation\";\nimport type { Nullable } from \"core/types\";\nimport type { Mesh } from \"core/Meshes/mesh\";\nimport type { Material } from \"core/Materials/material\";\nimport type { Camera } from \"core/Cameras/camera\";\nimport type { Light } from \"core/Lights/light\";\nimport type { IAssetContainer } from \"core/IAssetContainer\";\n\n/**\n * The type of the assets that flow graph supports\n */\nexport const enum FlowGraphAssetType {\n    Animation = \"Animation\",\n    AnimationGroup = \"AnimationGroup\",\n    Mesh = \"Mesh\",\n    Material = \"Material\",\n    Camera = \"Camera\",\n    Light = \"Light\",\n    // Further asset types will be added here when needed.\n}\n\nexport type AssetType<T extends FlowGraphAssetType> = T extends FlowGraphAssetType.Animation\n    ? Animation\n    : T extends FlowGraphAssetType.AnimationGroup\n      ? AnimationGroup\n      : T extends FlowGraphAssetType.Mesh\n        ? Mesh\n        : T extends FlowGraphAssetType.Material\n          ? Material\n          : T extends FlowGraphAssetType.Camera\n            ? Camera\n            : T extends FlowGraphAssetType.Light\n              ? Light\n              : never;\n\n/**\n * Returns the asset with the given index and type from the assets context.\n * @param assetsContext The assets context to get the asset from\n * @param type The type of the asset\n * @param index The index of the asset\n * @param useIndexAsUniqueId If set to true, instead of the index in the array it will search for the unique id of the asset.\n * @returns The asset or null if not found\n */\nexport function GetFlowGraphAssetWithType<T extends FlowGraphAssetType>(\n    assetsContext: IAssetContainer,\n    type: T,\n    index: number,\n    useIndexAsUniqueId?: boolean\n): Nullable<AssetType<T>> {\n    switch (type) {\n        case FlowGraphAssetType.Animation:\n            return useIndexAsUniqueId\n                ? ((assetsContext.animations.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.animations[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.AnimationGroup:\n            return useIndexAsUniqueId\n                ? ((assetsContext.animationGroups.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.animationGroups[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Mesh:\n            return useIndexAsUniqueId\n                ? ((assetsContext.meshes.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.meshes[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Material:\n            return useIndexAsUniqueId\n                ? ((assetsContext.materials.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.materials[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Camera:\n            return useIndexAsUniqueId\n                ? ((assetsContext.cameras.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.cameras[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Light:\n            return useIndexAsUniqueId\n                ? ((assetsContext.lights.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.lights[index] as AssetType<typeof type>) ?? null);\n        default:\n            return null;\n    }\n}\n", "import type { AssetType, FlowGraphAssetType } from \"core/FlowGraph/flowGraphAssetsContext\";\nimport { GetFlowGraphAssetWithType } from \"core/FlowGraph/flowGraphAssetsContext\";\nimport type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\nimport type { Nullable } from \"core/types\";\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\nimport type { FlowGraphNumber } from \"core/FlowGraph/utils\";\nimport { getNumericValue } from \"core/FlowGraph/utils\";\n\n/**\n * Configuration for the get asset block.\n */\nexport interface IFlowGraphGetAssetBlockConfiguration<T> extends IFlowGraphBlockConfiguration {\n    /**\n     * The type of the asset that will be retrieved.\n     */\n    type: T;\n    /**\n     * The index of the asset in the corresponding array in the assets context.\n     * If not provided you can still change it using the input connection.\n     */\n    index?: number | FlowGraphInteger;\n\n    /**\n     * If set to true, instead of the index in the array it will search for the unique id of the asset.\n     * The value of index will be used as the unique id.\n     */\n    useIndexAsUniqueId?: boolean;\n}\n\n/**\n * A block that will deliver an asset as an output, based on its type and place in the assets index.\n *\n * The assets are loaded from the assetsContext defined in the context running this block. The assetsContext is a class extending AbstractClass,\n * meaning it can be a Scene, an AssetsContainers, and any other class that extends AbstractClass.\n */\nexport class FlowGraphGetAssetBlock<T extends FlowGraphAssetType> extends FlowGraphBlock {\n    /**\n     * Output connection: The value of the property.\n     */\n    public readonly value: FlowGraphDataConnection<Nullable<AssetType<T>>>;\n\n    /**\n     * Input connection: The type of the asset.\n     */\n    public readonly type: FlowGraphDataConnection<T>;\n\n    /**\n     * Input connection: The index of the asset in the corresponding array in the assets context.\n     */\n    public readonly index: FlowGraphDataConnection<FlowGraphNumber>;\n\n    public constructor(\n        /**\n         * the configuration of the block\n         */\n        public override config: IFlowGraphGetAssetBlockConfiguration<T>\n    ) {\n        super(config);\n        this.type = this.registerDataInput(\"type\", RichTypeAny, config.type);\n        this.value = this.registerDataOutput(\"value\", RichTypeAny);\n        this.index = this.registerDataInput(\"index\", RichTypeAny, new FlowGraphInteger(getNumericValue(config.index ?? -1)));\n    }\n\n    public override _updateOutputs(context: FlowGraphContext): void {\n        const type = this.type.getValue(context);\n        const index = this.index.getValue(context);\n        // get the asset from the context\n        const asset = GetFlowGraphAssetWithType(context.assetsContext, type, getNumericValue(index), this.config.useIndexAsUniqueId);\n        this.value.setValue(asset, context);\n    }\n\n    /**\n     * Gets the class name of this block\n     * @returns the class name\n     */\n    public override getClassName(): string {\n        return FlowGraphBlockNames.GetAsset;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.GetAsset, FlowGraphGetAssetBlock);\n"],
  "mappings": ";;;;;;;;;;;;;AAYA,IAAkB;CAAlB,SAAkBA,qBAAkB;AAChC,EAAAA,oBAAA,WAAA,IAAA;AACA,EAAAA,oBAAA,gBAAA,IAAA;AACA,EAAAA,oBAAA,MAAA,IAAA;AACA,EAAAA,oBAAA,UAAA,IAAA;AACA,EAAAA,oBAAA,QAAA,IAAA;AACA,EAAAA,oBAAA,OAAA,IAAA;AAEJ,GARkB,uBAAA,qBAAkB,CAAA,EAAA;AAgC9B,SAAU,0BACZ,eACA,MACA,OACA,oBAA4B;AAE5B,UAAQ,MAAM;IACV,KAAA;AACI,aAAO,qBACC,cAAc,WAAW,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OACzF,cAAc,WAAW,KAAK,KAAgC;IAC1E,KAAA;AACI,aAAO,qBACC,cAAc,gBAAgB,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OAC9F,cAAc,gBAAgB,KAAK,KAAgC;IAC/E,KAAA;AACI,aAAO,qBACC,cAAc,OAAO,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OACrF,cAAc,OAAO,KAAK,KAAgC;IACtE,KAAA;AACI,aAAO,qBACC,cAAc,UAAU,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OACxF,cAAc,UAAU,KAAK,KAAgC;IACzE,KAAA;AACI,aAAO,qBACC,cAAc,QAAQ,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OACtF,cAAc,QAAQ,KAAK,KAAgC;IACvE,KAAA;AACI,aAAO,qBACC,cAAc,OAAO,KAAK,CAAC,MAAM,EAAE,aAAa,KAAK,KAAgC,OACrF,cAAc,OAAO,KAAK,KAAgC;IACtE;AACI,aAAO;EACf;AACJ;;;ACrCM,IAAO,yBAAP,cAAoE,eAAc;EAgBpF,YAIoB,QAA+C;AAE/D,UAAM,MAAM;AAFI,SAAA,SAAA;AAGhB,SAAK,OAAO,KAAK,kBAAkB,QAAQ,aAAa,OAAO,IAAI;AACnE,SAAK,QAAQ,KAAK,mBAAmB,SAAS,WAAW;AACzD,SAAK,QAAQ,KAAK,kBAAkB,SAAS,aAAa,IAAI,iBAAiB,gBAAgB,OAAO,SAAS,EAAE,CAAC,CAAC;EACvH;EAEgB,eAAe,SAAyB;AACpD,UAAM,OAAO,KAAK,KAAK,SAAS,OAAO;AACvC,UAAM,QAAQ,KAAK,MAAM,SAAS,OAAO;AAEzC,UAAM,QAAQ,0BAA0B,QAAQ,eAAe,MAAM,gBAAgB,KAAK,GAAG,KAAK,OAAO,kBAAkB;AAC3H,SAAK,MAAM,SAAS,OAAO,OAAO;EACtC;;;;;EAMgB,eAAY;AACxB,WAAA;EACJ;;AAGJ,cAAa,0BAA+B,sBAAsB;",
  "names": ["FlowGraphAssetType"]
}
