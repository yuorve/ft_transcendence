{
  "version": 3,
  "sources": ["../../../dev/core/src/Materials/Textures/Loaders/ddsTextureLoader.ts"],
  "sourcesContent": ["import type { Nullable } from \"../../../types\";\r\nimport { SphericalPolynomial } from \"../../../Maths/sphericalPolynomial\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"./internalTextureLoader\";\r\nimport type { DDSInfo } from \"../../../Misc/dds\";\r\nimport { DDSTools } from \"../../../Misc/dds\";\r\n\r\nimport type { Engine } from \"core/Engines/engine\";\r\n\r\n/**\r\n * Implementation of the DDS Texture Loader.\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _DDSTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = true;\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param imgs contains the cube maps\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     */\r\n    public loadCubeData(imgs: ArrayBufferView | ArrayBufferView[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>): void {\r\n        const engine = texture.getEngine() as Engine;\r\n        let info: DDSInfo | undefined;\r\n        let loadMipmap: boolean = false;\r\n        let maxLevel: number = 1000;\r\n        if (Array.isArray(imgs)) {\r\n            for (let index = 0; index < imgs.length; index++) {\r\n                const data = imgs[index];\r\n                info = DDSTools.GetDDSInfo(data);\r\n\r\n                texture.width = info.width;\r\n                texture.height = info.height;\r\n\r\n                loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\r\n\r\n                engine._unpackFlipY(info.isCompressed);\r\n\r\n                DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6, -1, index);\r\n\r\n                if (!info.isFourCC && info.mipmapCount === 1) {\r\n                    engine.generateMipMapsForCubemap(texture);\r\n                } else {\r\n                    maxLevel = info.mipmapCount - 1;\r\n                }\r\n            }\r\n        } else {\r\n            const data = imgs;\r\n            info = DDSTools.GetDDSInfo(data);\r\n\r\n            texture.width = info.width;\r\n            texture.height = info.height;\r\n\r\n            if (createPolynomials) {\r\n                info.sphericalPolynomial = new SphericalPolynomial();\r\n            }\r\n\r\n            loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\r\n            engine._unpackFlipY(info.isCompressed);\r\n\r\n            DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6);\r\n\r\n            if (!info.isFourCC && info.mipmapCount === 1) {\r\n                // Do not unbind as we still need to set the parameters.\r\n                engine.generateMipMapsForCubemap(texture, false);\r\n            } else {\r\n                maxLevel = info.mipmapCount - 1;\r\n            }\r\n        }\r\n        engine._setCubeMapTextureParams(texture, loadMipmap, maxLevel);\r\n        texture.isReady = true;\r\n        texture.onLoadedObservable.notifyObservers(texture);\r\n        texture.onLoadedObservable.clear();\r\n\r\n        if (onLoad) {\r\n            onLoad({ isDDS: true, width: texture.width, info, data: imgs, texture });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(\r\n        data: ArrayBufferView,\r\n        texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void\r\n    ): void {\r\n        const info = DDSTools.GetDDSInfo(data);\r\n\r\n        const loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps && Math.max(info.width, info.height) >> (info.mipmapCount - 1) === 1;\r\n        callback(info.width, info.height, loadMipmap, info.isFourCC, () => {\r\n            DDSTools.UploadDDSLevels(texture.getEngine(), texture, data, info, loadMipmap, 1);\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;AAcM,IAAO,oBAAP,MAAwB;EAA9B,cAAA;AAIoB,SAAA,kBAAkB;EAqFtC;;;;;;;;EA5EW,aAAa,MAA2C,SAA0B,mBAA4B,QAAsC;AACvJ,UAAM,SAAS,QAAQ,UAAS;AAChC,QAAI;AACJ,QAAI,aAAsB;AAC1B,QAAI,WAAmB;AACvB,QAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,eAAS,QAAQ,GAAG,QAAQ,KAAK,QAAQ,SAAS;AAC9C,cAAM,OAAO,KAAK,KAAK;AACvB,eAAO,SAAS,WAAW,IAAI;AAE/B,gBAAQ,QAAQ,KAAK;AACrB,gBAAQ,SAAS,KAAK;AAEtB,sBAAc,KAAK,SAAS,KAAK,eAAe,KAAK,cAAc,MAAM,QAAQ;AAEjF,eAAO,aAAa,KAAK,YAAY;AAErC,iBAAS,gBAAgB,QAAQ,SAAS,MAAM,MAAM,YAAY,GAAG,IAAI,KAAK;AAE9E,YAAI,CAAC,KAAK,YAAY,KAAK,gBAAgB,GAAG;AAC1C,iBAAO,0BAA0B,OAAO;QAC5C,OAAO;AACH,qBAAW,KAAK,cAAc;QAClC;MACJ;IACJ,OAAO;AACH,YAAM,OAAO;AACb,aAAO,SAAS,WAAW,IAAI;AAE/B,cAAQ,QAAQ,KAAK;AACrB,cAAQ,SAAS,KAAK;AAEtB,UAAI,mBAAmB;AACnB,aAAK,sBAAsB,IAAI,oBAAmB;MACtD;AAEA,oBAAc,KAAK,SAAS,KAAK,eAAe,KAAK,cAAc,MAAM,QAAQ;AACjF,aAAO,aAAa,KAAK,YAAY;AAErC,eAAS,gBAAgB,QAAQ,SAAS,MAAM,MAAM,YAAY,CAAC;AAEnE,UAAI,CAAC,KAAK,YAAY,KAAK,gBAAgB,GAAG;AAE1C,eAAO,0BAA0B,SAAS,KAAK;MACnD,OAAO;AACH,mBAAW,KAAK,cAAc;MAClC;IACJ;AACA,WAAO,yBAAyB,SAAS,YAAY,QAAQ;AAC7D,YAAQ,UAAU;AAClB,YAAQ,mBAAmB,gBAAgB,OAAO;AAClD,YAAQ,mBAAmB,MAAK;AAEhC,QAAI,QAAQ;AACR,aAAO,EAAE,OAAO,MAAM,OAAO,QAAQ,OAAO,MAAM,MAAM,MAAM,QAAO,CAAE;IAC3E;EACJ;;;;;;;EAQO,SACH,MACA,SACA,UAA+G;AAE/G,UAAM,OAAO,SAAS,WAAW,IAAI;AAErC,UAAM,cAAc,KAAK,SAAS,KAAK,eAAe,KAAK,cAAc,MAAM,QAAQ,mBAAmB,KAAK,IAAI,KAAK,OAAO,KAAK,MAAM,KAAM,KAAK,cAAc,MAAO;AAC1K,aAAS,KAAK,OAAO,KAAK,QAAQ,YAAY,KAAK,UAAU,MAAK;AAC9D,eAAS,gBAAgB,QAAQ,UAAS,GAAI,SAAS,MAAM,MAAM,YAAY,CAAC;IACpF,CAAC;EACL;;",
  "names": []
}
