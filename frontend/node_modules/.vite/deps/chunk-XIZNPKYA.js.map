{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphConstantOperationBlock.ts", "../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphMathBlocks.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { RichType } from \"../../flowGraphRichTypes\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphCachedOperationBlock } from \"./flowGraphCachedOperationBlock\";\r\n/**\r\n * Block that outputs a value of type ResultT, resulting of an operation with no inputs.\r\n * This block is being extended by some math operations and should not be used directly.\r\n * @internal\r\n */\r\nexport class FlowGraphConstantOperationBlock<ResultT> extends FlowGraphCachedOperationBlock<ResultT> {\r\n    constructor(\r\n        richType: RichType<ResultT>,\r\n        private _operation: (context: FlowGraphContext) => ResultT,\r\n        private _className: string,\r\n        config?: IFlowGraphBlockConfiguration\r\n    ) {\r\n        super(richType, config);\r\n    }\r\n\r\n    /**\r\n     * the operation performed by this block\r\n     * @param context the graph context\r\n     * @returns the result of the operation\r\n     */\r\n    public override _doOperation(context: FlowGraphContext): ResultT {\r\n        return this._operation(context);\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of this block\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return this._className;\r\n    }\r\n}\r\n", "import { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphTypes, getRichTypeByFlowGraphType, RichTypeAny, RichTypeBoolean, RichTypeFlowGraphInteger, RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphConstantOperationBlock } from \"../flowGraphConstantOperationBlock\";\r\nimport { Quaternion, Matrix, Vector2, Vector3, Vector4 } from \"../../../../Maths/math.vector\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport { FlowGraphTernaryOperationBlock } from \"../flowGraphTernaryOperationBlock\";\r\nimport { FlowGraphInteger } from \"../../../CustomTypes/flowGraphInteger\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\r\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport { FlowGraphMatrix2D, FlowGraphMatrix3D } from \"core/FlowGraph/CustomTypes/flowGraphMatrix\";\r\nimport type { FlowGraphMathOperationType, FlowGraphNumber } from \"core/FlowGraph/utils\";\r\nimport { _areSameIntegerClass, _areSameMatrixClass, _areSameVectorClass, _getClassNameOf, getNumericValue, isNumeric } from \"core/FlowGraph/utils\";\r\n\r\n/**\r\n * A configuration interface  for math blocks\r\n */\r\nexport interface IFlowGraphMathBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * If true, the multiplication is done per component.\r\n     * This is the behavior in glTF interactivity.\r\n     */\r\n    useMatrixPerComponent?: boolean;\r\n\r\n    /**\r\n     * The type of the variable.\r\n     */\r\n    type?: FlowGraphTypes;\r\n}\r\n\r\n/**\r\n * Polymorphic add block.\r\n */\r\nexport class FlowGraphAddBlock extends FlowGraphBinaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    /**\r\n     * Construct a new add block.\r\n     * @param config optional configuration\r\n     */\r\n    constructor(config?: IFlowGraphMathBlockConfiguration) {\r\n        super(\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            (a, b) => this._polymorphicAdd(a, b),\r\n            FlowGraphBlockNames.Add,\r\n            config\r\n        );\r\n    }\r\n\r\n    private _polymorphicAdd(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType) {\r\n        const aClassName = _getClassNameOf(a);\r\n        const bClassName = _getClassNameOf(b);\r\n        if (_areSameVectorClass(aClassName, bClassName) || _areSameMatrixClass(aClassName, bClassName) || _areSameIntegerClass(aClassName, bClassName)) {\r\n            // cast to vector3, but any other cast will be fine\r\n            return (a as Vector3).add(b as Vector3);\r\n        } else if (aClassName === FlowGraphTypes.Quaternion || bClassName === FlowGraphTypes.Quaternion) {\r\n            // this is a simple add, and should be also supported between Quat and Vector4. Therefore -\r\n            return (a as Quaternion).add(b as Quaternion);\r\n        } else {\r\n            return (a as number) + (b as number);\r\n        }\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Add, FlowGraphAddBlock);\r\n\r\n/**\r\n * Polymorphic subtract block.\r\n */\r\nexport class FlowGraphSubtractBlock extends FlowGraphBinaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    /**\r\n     * Construct a new subtract block.\r\n     * @param config optional configuration\r\n     */\r\n    constructor(config?: IFlowGraphMathBlockConfiguration) {\r\n        super(\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            (a, b) => this._polymorphicSubtract(a, b),\r\n            FlowGraphBlockNames.Subtract,\r\n            config\r\n        );\r\n    }\r\n\r\n    private _polymorphicSubtract(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType) {\r\n        const aClassName = _getClassNameOf(a);\r\n        const bClassName = _getClassNameOf(b);\r\n        if (_areSameVectorClass(aClassName, bClassName) || _areSameIntegerClass(aClassName, bClassName) || _areSameMatrixClass(aClassName, bClassName)) {\r\n            return (a as Vector3).subtract(b as Vector3);\r\n        } else if (aClassName === FlowGraphTypes.Quaternion || bClassName === FlowGraphTypes.Quaternion) {\r\n            // this is a simple subtract, and should be also supported between Quat and Vector4. Therefore -\r\n            return (a as Quaternion).subtract(b as Quaternion);\r\n        } else {\r\n            return (a as number) - (b as number);\r\n        }\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Subtract, FlowGraphSubtractBlock);\r\n\r\n/**\r\n * Polymorphic multiply block.\r\n * In case of matrix, it is configurable whether the multiplication is done per component.\r\n */\r\nexport class FlowGraphMultiplyBlock extends FlowGraphBinaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphMathBlockConfiguration) {\r\n        super(\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            (a, b) => this._polymorphicMultiply(a, b),\r\n            FlowGraphBlockNames.Multiply,\r\n            config\r\n        );\r\n    }\r\n\r\n    private _polymorphicMultiply(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType) {\r\n        const aClassName = _getClassNameOf(a);\r\n        const bClassName = _getClassNameOf(b);\r\n        if (_areSameVectorClass(aClassName, bClassName) || _areSameIntegerClass(aClassName, bClassName)) {\r\n            return (a as Vector3).multiply(b as Vector3);\r\n        } else if (aClassName === FlowGraphTypes.Quaternion || bClassName === FlowGraphTypes.Quaternion) {\r\n            // this is a simple multiply (per component!), and should be also supported between Quat and Vector4. Therefore -\r\n            const aClone = (a as Quaternion).clone();\r\n            aClone.x *= (b as Quaternion).x;\r\n            aClone.y *= (b as Quaternion).y;\r\n            aClone.z *= (b as Quaternion).z;\r\n            aClone.w *= (b as Quaternion).w;\r\n            return aClone;\r\n        } else if (_areSameMatrixClass(aClassName, bClassName)) {\r\n            if (this.config?.useMatrixPerComponent) {\r\n                // this is the definition of multiplication of glTF interactivity\r\n                // get a's m as array, and multiply each component with b's m\r\n                const aM = (a as FlowGraphMatrix2D).m;\r\n                for (let i = 0; i < aM.length; i++) {\r\n                    aM[i] *= (b as FlowGraphMatrix2D).m[i];\r\n                }\r\n                if (aClassName === FlowGraphTypes.Matrix2D) {\r\n                    return new FlowGraphMatrix2D(aM);\r\n                } else if (aClassName === FlowGraphTypes.Matrix3D) {\r\n                    return new FlowGraphMatrix3D(aM);\r\n                } else {\r\n                    return Matrix.FromArray(aM);\r\n                }\r\n            } else {\r\n                a = a as Matrix;\r\n                b = b as Matrix;\r\n                return b.multiply(a);\r\n            }\r\n        } else {\r\n            return (a as number) * (b as number);\r\n        }\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Multiply, FlowGraphMultiplyBlock);\r\n\r\n/**\r\n * Polymorphic division block.\r\n */\r\nexport class FlowGraphDivideBlock extends FlowGraphBinaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    /**\r\n     * Construct a new divide block.\r\n     * @param config - Optional configuration\r\n     */\r\n    constructor(config?: IFlowGraphMathBlockConfiguration) {\r\n        super(\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            getRichTypeByFlowGraphType(config?.type),\r\n            (a, b) => this._polymorphicDivide(a, b),\r\n            FlowGraphBlockNames.Divide,\r\n            config\r\n        );\r\n    }\r\n\r\n    private _polymorphicDivide(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType) {\r\n        const aClassName = _getClassNameOf(a);\r\n        const bClassName = _getClassNameOf(b);\r\n        if (_areSameVectorClass(aClassName, bClassName) || _areSameIntegerClass(aClassName, bClassName)) {\r\n            // cast to vector3, but it can be casted to any vector type\r\n            return (a as Vector3).divide(b as Vector3);\r\n        } else if (aClassName === FlowGraphTypes.Quaternion || bClassName === FlowGraphTypes.Quaternion) {\r\n            // this is a simple division (per component!), and should be also supported between Quat and Vector4. Therefore -\r\n            const aClone = (a as Quaternion).clone();\r\n            aClone.x /= (b as Quaternion).x;\r\n            aClone.y /= (b as Quaternion).y;\r\n            aClone.z /= (b as Quaternion).z;\r\n            aClone.w /= (b as Quaternion).w;\r\n            return aClone;\r\n        } else if (_areSameMatrixClass(aClassName, bClassName)) {\r\n            if (this.config?.useMatrixPerComponent) {\r\n                // get a's m as array, and divide each component with b's m\r\n                const aM = (a as FlowGraphMatrix2D).m;\r\n                for (let i = 0; i < aM.length; i++) {\r\n                    aM[i] /= (b as FlowGraphMatrix2D).m[i];\r\n                }\r\n                if (aClassName === FlowGraphTypes.Matrix2D) {\r\n                    return new FlowGraphMatrix2D(aM);\r\n                } else if (aClassName === FlowGraphTypes.Matrix3D) {\r\n                    return new FlowGraphMatrix3D(aM);\r\n                } else {\r\n                    return Matrix.FromArray(aM);\r\n                }\r\n            } else {\r\n                a = a as Matrix;\r\n                b = b as Matrix;\r\n                return a.divide(b);\r\n            }\r\n        } else {\r\n            return (a as number) / (b as number);\r\n        }\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Divide, FlowGraphDivideBlock);\r\n\r\n/**\r\n * Configuration interface for the random block.\r\n */\r\nexport interface IFlowGraphRandomBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The minimum value. defaults to 0.\r\n     */\r\n    min?: number;\r\n    /**\r\n     * The maximum value. defaults to 1.\r\n     */\r\n    max?: number;\r\n\r\n    /**\r\n     * The seed for the random number generator for deterministic random values.\r\n     * If not set, Math.random() is used.\r\n     */\r\n    seed?: number;\r\n}\r\n\r\n/**\r\n * Random number between min and max (defaults to 0 to 1)\r\n *\r\n * This node will cache the result for he same node reference. i.e., a Math.eq that references the SAME random node will always return true.\r\n */\r\nexport class FlowGraphRandomBlock extends FlowGraphConstantOperationBlock<FlowGraphMathOperationType> {\r\n    /**\r\n     * The minimum value. defaults to 0.\r\n     */\r\n    public readonly min: FlowGraphDataConnection<number>;\r\n    /**\r\n     * The maximum value. defaults to 1.\r\n     */\r\n    public readonly max: FlowGraphDataConnection<number>;\r\n\r\n    private _seed?: number;\r\n\r\n    /**\r\n     * Construct a new random block.\r\n     * @param config optional configuration\r\n     */\r\n    constructor(config?: IFlowGraphRandomBlockConfiguration) {\r\n        super(RichTypeNumber, (context) => this._random(context), FlowGraphBlockNames.Random, config);\r\n        this.min = this.registerDataInput(\"min\", RichTypeNumber, config?.min ?? 0);\r\n        this.max = this.registerDataInput(\"max\", RichTypeNumber, config?.max ?? 1);\r\n        if (config?.seed) {\r\n            this._seed = config.seed;\r\n        }\r\n    }\r\n\r\n    private _isSeed(seed = this._seed): seed is number {\r\n        return seed !== undefined;\r\n    }\r\n\r\n    private _getRandomValue() {\r\n        if (this._isSeed(this._seed)) {\r\n            // compute seed-based random number, deterministic randomness!\r\n            const x = Math.sin(this._seed++) * 10000;\r\n            return x - Math.floor(x);\r\n        }\r\n        return Math.random();\r\n    }\r\n\r\n    private _random(context: FlowGraphContext) {\r\n        const min = this.min.getValue(context);\r\n        const max = this.max.getValue(context);\r\n        return this._getRandomValue() * (max - min) + min;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Random, FlowGraphRandomBlock);\r\n\r\n/**\r\n * E constant.\r\n */\r\nexport class FlowGraphEBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Math.E, FlowGraphBlockNames.E, config);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.E, FlowGraphEBlock);\r\n\r\n/**\r\n * Pi constant.\r\n */\r\nexport class FlowGraphPiBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Math.PI, FlowGraphBlockNames.PI, config);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.PI, FlowGraphPiBlock);\r\n\r\n/**\r\n * Positive inf constant.\r\n */\r\nexport class FlowGraphInfBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Number.POSITIVE_INFINITY, FlowGraphBlockNames.Inf, config);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Inf, FlowGraphInfBlock);\r\n\r\n/**\r\n * NaN constant.\r\n */\r\nexport class FlowGraphNaNBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Number.NaN, FlowGraphBlockNames.NaN, config);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.NaN, FlowGraphNaNBlock);\r\n\r\nfunction _componentWiseUnaryOperation(a: FlowGraphMathOperationType, op: (a: number) => number) {\r\n    const aClassName = _getClassNameOf(a);\r\n    switch (aClassName) {\r\n        case \"FlowGraphInteger\":\r\n            a = a as FlowGraphInteger;\r\n            return new FlowGraphInteger(op(a.value));\r\n        case FlowGraphTypes.Vector2:\r\n            a = a as Vector2;\r\n            return new Vector2(op(a.x), op(a.y));\r\n        case FlowGraphTypes.Vector3:\r\n            a = a as Vector3;\r\n            return new Vector3(op(a.x), op(a.y), op(a.z));\r\n        case FlowGraphTypes.Vector4:\r\n            a = a as Vector4;\r\n            return new Vector4(op(a.x), op(a.y), op(a.z), op(a.w));\r\n        case FlowGraphTypes.Quaternion:\r\n            a = a as Quaternion;\r\n            return new Quaternion(op(a.x), op(a.y), op(a.z), op(a.w));\r\n        case FlowGraphTypes.Matrix:\r\n            a = a as Matrix;\r\n            return Matrix.FromArray(a.m.map(op));\r\n        case FlowGraphTypes.Matrix2D:\r\n            a = a as FlowGraphMatrix2D;\r\n            // reason for not using .map is performance\r\n            return new FlowGraphMatrix2D(a.m.map(op));\r\n        case FlowGraphTypes.Matrix3D:\r\n            a = a as FlowGraphMatrix3D;\r\n            return new FlowGraphMatrix3D(a.m.map(op));\r\n        default:\r\n            a = a as number;\r\n            return op(a);\r\n    }\r\n}\r\n\r\n/**\r\n * Absolute value block.\r\n */\r\nexport class FlowGraphAbsBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAbs(a), FlowGraphBlockNames.Abs, config);\r\n    }\r\n\r\n    private _polymorphicAbs(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.abs);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Abs, FlowGraphAbsBlock);\r\n\r\n/**\r\n * Sign block.\r\n */\r\nexport class FlowGraphSignBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicSign(a), FlowGraphBlockNames.Sign, config);\r\n    }\r\n\r\n    private _polymorphicSign(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.sign);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Sign, FlowGraphSignBlock);\r\n\r\n/**\r\n * Truncation block.\r\n */\r\nexport class FlowGraphTruncBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicTrunc(a), FlowGraphBlockNames.Trunc, config);\r\n    }\r\n\r\n    private _polymorphicTrunc(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.trunc);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Trunc, FlowGraphTruncBlock);\r\n\r\n/**\r\n * Floor block.\r\n */\r\nexport class FlowGraphFloorBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicFloor(a), FlowGraphBlockNames.Floor, config);\r\n    }\r\n\r\n    private _polymorphicFloor(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.floor);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Floor, FlowGraphFloorBlock);\r\n\r\n/**\r\n * Ceiling block.\r\n */\r\nexport class FlowGraphCeilBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicCeiling(a), FlowGraphBlockNames.Ceil, config);\r\n    }\r\n\r\n    private _polymorphicCeiling(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.ceil);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Ceil, FlowGraphCeilBlock);\r\n\r\n/**\r\n * Configuration for the round block.\r\n */\r\nexport interface IFlowGraphRoundBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * If true, the rounding is away from zero, even when negative. i.e. -7.5 goes to -8, and not -7 as Math.round does (it rounds up).\r\n     * This is the default when using glTF\r\n     */\r\n    roundHalfAwayFromZero?: boolean;\r\n}\r\n/**\r\n * Round block.\r\n */\r\nexport class FlowGraphRoundBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphRoundBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicRound(a), FlowGraphBlockNames.Round, config);\r\n    }\r\n\r\n    private _polymorphicRound(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, (a) => (a < 0 && this.config?.roundHalfAwayFromZero ? -Math.round(-a) : Math.round(a)));\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.Round, FlowGraphRoundBlock);\r\n\r\n/**\r\n * A block that returns the fractional part of a number.\r\n */\r\nexport class FlowGraphFractionBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicFraction(a), FlowGraphBlockNames.Fraction, config);\r\n    }\r\n\r\n    private _polymorphicFraction(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, (a) => a - Math.floor(a));\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Fraction, FlowGraphFractionBlock);\r\n\r\n/**\r\n * Negation block.\r\n */\r\nexport class FlowGraphNegationBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    /**\r\n     * construct a new negation block.\r\n     * @param config optional configuration\r\n     */\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicNeg(a), FlowGraphBlockNames.Negation, config);\r\n    }\r\n\r\n    private _polymorphicNeg(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, (a) => -a);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Negation, FlowGraphNegationBlock);\r\n\r\nfunction _componentWiseBinaryOperation(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType, op: (a: number, b: number) => number) {\r\n    const aClassName = _getClassNameOf(a);\r\n    switch (aClassName) {\r\n        case \"FlowGraphInteger\":\r\n            a = a as FlowGraphInteger;\r\n            b = b as FlowGraphInteger;\r\n            return new FlowGraphInteger(op(a.value, b.value));\r\n        case FlowGraphTypes.Vector2:\r\n            a = a as Vector2;\r\n            b = b as Vector2;\r\n            return new Vector2(op(a.x, b.x), op(a.y, b.y));\r\n        case FlowGraphTypes.Vector3:\r\n            a = a as Vector3;\r\n            b = b as Vector3;\r\n            return new Vector3(op(a.x, b.x), op(a.y, b.y), op(a.z, b.z));\r\n        case FlowGraphTypes.Vector4:\r\n            a = a as Vector4;\r\n            b = b as Vector4;\r\n            return new Vector4(op(a.x, b.x), op(a.y, b.y), op(a.z, b.z), op(a.w, b.w));\r\n        case FlowGraphTypes.Quaternion:\r\n            a = a as Quaternion;\r\n            b = b as Quaternion;\r\n            return new Quaternion(op(a.x, b.x), op(a.y, b.y), op(a.z, b.z), op(a.w, b.w));\r\n        case FlowGraphTypes.Matrix:\r\n            a = a as Matrix;\r\n            return Matrix.FromArray(a.m.map((v, i) => op(v, (b as Matrix).m[i])));\r\n        case FlowGraphTypes.Matrix2D:\r\n            a = a as FlowGraphMatrix2D;\r\n            return new FlowGraphMatrix2D(a.m.map((v, i) => op(v, (b as FlowGraphMatrix2D).m[i])));\r\n        case FlowGraphTypes.Matrix3D:\r\n            a = a as FlowGraphMatrix3D;\r\n            return new FlowGraphMatrix3D(a.m.map((v, i) => op(v, (b as FlowGraphMatrix3D).m[i])));\r\n        default:\r\n            return op(a as number, b as number);\r\n    }\r\n}\r\n\r\n/**\r\n * Remainder block.\r\n */\r\nexport class FlowGraphModuloBlock extends FlowGraphBinaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicRemainder(a, b), FlowGraphBlockNames.Modulo, config);\r\n    }\r\n\r\n    private _polymorphicRemainder(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType) {\r\n        return _componentWiseBinaryOperation(a, b, (a, b) => a % b);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Modulo, FlowGraphModuloBlock);\r\n\r\n/**\r\n * Min block.\r\n */\r\nexport class FlowGraphMinBlock extends FlowGraphBinaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicMin(a, b), FlowGraphBlockNames.Min, config);\r\n    }\r\n\r\n    private _polymorphicMin(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType) {\r\n        return _componentWiseBinaryOperation(a, b, Math.min);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Min, FlowGraphMinBlock);\r\n\r\n/**\r\n * Max block\r\n */\r\nexport class FlowGraphMaxBlock extends FlowGraphBinaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicMax(a, b), FlowGraphBlockNames.Max, config);\r\n    }\r\n\r\n    private _polymorphicMax(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType) {\r\n        return _componentWiseBinaryOperation(a, b, Math.max);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Max, FlowGraphMaxBlock);\r\n\r\nfunction _clamp(a: number, b: number, c: number) {\r\n    return Math.min(Math.max(a, Math.min(b, c)), Math.max(b, c));\r\n}\r\n\r\nfunction _componentWiseTernaryOperation(\r\n    a: FlowGraphMathOperationType,\r\n    b: FlowGraphMathOperationType,\r\n    c: FlowGraphMathOperationType,\r\n    op: (a: number, b: number, c: number) => number\r\n) {\r\n    const aClassName = _getClassNameOf(a);\r\n    switch (aClassName) {\r\n        case \"FlowGraphInteger\":\r\n            a = a as FlowGraphInteger;\r\n            b = b as FlowGraphInteger;\r\n            c = c as FlowGraphInteger;\r\n            return new FlowGraphInteger(op(a.value, b.value, c.value));\r\n        case FlowGraphTypes.Vector2:\r\n            a = a as Vector2;\r\n            b = b as Vector2;\r\n            c = c as Vector2;\r\n            return new Vector2(op(a.x, b.x, c.x), op(a.y, b.y, c.y));\r\n        case FlowGraphTypes.Vector3:\r\n            a = a as Vector3;\r\n            b = b as Vector3;\r\n            c = c as Vector3;\r\n            return new Vector3(op(a.x, b.x, c.x), op(a.y, b.y, c.y), op(a.z, b.z, c.z));\r\n        case FlowGraphTypes.Vector4:\r\n            a = a as Vector4;\r\n            b = b as Vector4;\r\n            c = c as Vector4;\r\n            return new Vector4(op(a.x, b.x, c.x), op(a.y, b.y, c.y), op(a.z, b.z, c.z), op(a.w, b.w, c.w));\r\n        case FlowGraphTypes.Quaternion:\r\n            a = a as Quaternion;\r\n            b = b as Quaternion;\r\n            c = c as Quaternion;\r\n            return new Quaternion(op(a.x, b.x, c.x), op(a.y, b.y, c.y), op(a.z, b.z, c.z), op(a.w, b.w, c.w));\r\n        case FlowGraphTypes.Matrix:\r\n            return Matrix.FromArray((a as Matrix).m.map((v, i) => op(v, (b as Matrix).m[i], (c as Matrix).m[i])));\r\n        case FlowGraphTypes.Matrix2D:\r\n            return new FlowGraphMatrix2D((a as FlowGraphMatrix2D).m.map((v, i) => op(v, (b as FlowGraphMatrix2D).m[i], (c as FlowGraphMatrix2D).m[i])));\r\n        case FlowGraphTypes.Matrix3D:\r\n            return new FlowGraphMatrix3D((a as FlowGraphMatrix3D).m.map((v, i) => op(v, (b as FlowGraphMatrix3D).m[i], (c as FlowGraphMatrix3D).m[i])));\r\n        default:\r\n            return op(a as number, b as number, c as number);\r\n    }\r\n}\r\n\r\n/**\r\n * Clamp block.\r\n */\r\nexport class FlowGraphClampBlock extends FlowGraphTernaryOperationBlock<\r\n    FlowGraphMathOperationType,\r\n    FlowGraphMathOperationType,\r\n    FlowGraphMathOperationType,\r\n    FlowGraphMathOperationType\r\n> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, RichTypeAny, (a, b, c) => this._polymorphicClamp(a, b, c), FlowGraphBlockNames.Clamp, config);\r\n    }\r\n\r\n    private _polymorphicClamp(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType, c: FlowGraphMathOperationType) {\r\n        return _componentWiseTernaryOperation(a, b, c, _clamp);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Clamp, FlowGraphClampBlock);\r\n\r\nfunction _saturate(a: number): number {\r\n    return Math.min(Math.max(a, 0), 1);\r\n}\r\n\r\n/**\r\n * Saturate block.\r\n */\r\nexport class FlowGraphSaturateBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicSaturate(a), FlowGraphBlockNames.Saturate, config);\r\n    }\r\n\r\n    private _polymorphicSaturate(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, _saturate);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Saturate, FlowGraphSaturateBlock);\r\n\r\nfunction _interpolate(a: number, b: number, c: number) {\r\n    return (1 - c) * a + c * b;\r\n}\r\n\r\n/**\r\n * Interpolate block.\r\n */\r\nexport class FlowGraphMathInterpolationBlock extends FlowGraphTernaryOperationBlock<\r\n    FlowGraphMathOperationType,\r\n    FlowGraphMathOperationType,\r\n    FlowGraphMathOperationType,\r\n    FlowGraphMathOperationType\r\n> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, RichTypeAny, (a, b, c) => this._polymorphicInterpolate(a, b, c), FlowGraphBlockNames.MathInterpolation, config);\r\n    }\r\n\r\n    private _polymorphicInterpolate(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType, c: FlowGraphMathOperationType) {\r\n        return _componentWiseTernaryOperation(a, b, c, _interpolate);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.MathInterpolation, FlowGraphMathInterpolationBlock);\r\n\r\n/**\r\n * Equals block.\r\n */\r\nexport class FlowGraphEqualityBlock extends FlowGraphBinaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicEq(a, b), FlowGraphBlockNames.Equality, config);\r\n    }\r\n\r\n    private _polymorphicEq(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType) {\r\n        const aClassName = _getClassNameOf(a);\r\n        const bClassName = _getClassNameOf(b);\r\n        if (_areSameVectorClass(aClassName, bClassName) || _areSameMatrixClass(aClassName, bClassName) || _areSameIntegerClass(aClassName, bClassName)) {\r\n            return (a as Vector3).equals(b as Vector3);\r\n        } else {\r\n            return a === b;\r\n        }\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Equality, FlowGraphEqualityBlock);\r\n\r\nfunction _comparisonOperators(a: FlowGraphNumber, b: FlowGraphNumber, op: (a: number, b: number) => boolean) {\r\n    if (isNumeric(a) && isNumeric(b)) {\r\n        return op(getNumericValue(a), getNumericValue(b));\r\n    } else {\r\n        throw new Error(`Cannot compare ${a} and ${b}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Less than block.\r\n */\r\nexport class FlowGraphLessThanBlock extends FlowGraphBinaryOperationBlock<FlowGraphNumber, FlowGraphNumber, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicLessThan(a, b), FlowGraphBlockNames.LessThan, config);\r\n    }\r\n\r\n    private _polymorphicLessThan(a: FlowGraphNumber, b: FlowGraphNumber) {\r\n        return _comparisonOperators(a, b, (a, b) => a < b);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.LessThan, FlowGraphLessThanBlock);\r\n\r\n/**\r\n * Less than or equal block.\r\n */\r\nexport class FlowGraphLessThanOrEqualBlock extends FlowGraphBinaryOperationBlock<FlowGraphNumber, FlowGraphNumber, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicLessThanOrEqual(a, b), FlowGraphBlockNames.LessThanOrEqual, config);\r\n    }\r\n\r\n    private _polymorphicLessThanOrEqual(a: FlowGraphNumber, b: FlowGraphNumber) {\r\n        return _comparisonOperators(a, b, (a, b) => a <= b);\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.LessThanOrEqual, FlowGraphLessThanOrEqualBlock);\r\n\r\n/**\r\n * Greater than block.\r\n */\r\nexport class FlowGraphGreaterThanBlock extends FlowGraphBinaryOperationBlock<FlowGraphNumber, FlowGraphNumber, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicGreaterThan(a, b), FlowGraphBlockNames.GreaterThan, config);\r\n    }\r\n\r\n    private _polymorphicGreaterThan(a: FlowGraphNumber, b: FlowGraphNumber) {\r\n        return _comparisonOperators(a, b, (a, b) => a > b);\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.GreaterThan, FlowGraphGreaterThanBlock);\r\n\r\n/**\r\n * Greater than or equal block.\r\n */\r\nexport class FlowGraphGreaterThanOrEqualBlock extends FlowGraphBinaryOperationBlock<FlowGraphNumber, FlowGraphNumber, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeBoolean, (a, b) => this._polymorphicGreaterThanOrEqual(a, b), FlowGraphBlockNames.GreaterThanOrEqual, config);\r\n    }\r\n\r\n    private _polymorphicGreaterThanOrEqual(a: FlowGraphNumber, b: FlowGraphNumber) {\r\n        return _comparisonOperators(a, b, (a, b) => a >= b);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.GreaterThanOrEqual, FlowGraphGreaterThanOrEqualBlock);\r\n\r\n/**\r\n * Is NaN block.\r\n */\r\nexport class FlowGraphIsNanBlock extends FlowGraphUnaryOperationBlock<FlowGraphNumber, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeBoolean, (a) => this._polymorphicIsNan(a), FlowGraphBlockNames.IsNaN, config);\r\n    }\r\n\r\n    private _polymorphicIsNan(a: FlowGraphNumber) {\r\n        if (isNumeric(a)) {\r\n            return isNaN(getNumericValue(a));\r\n        } else {\r\n            throw new Error(`Cannot get NaN of ${a}`);\r\n        }\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.IsNaN, FlowGraphIsNanBlock);\r\n\r\n/**\r\n * Is Inf block.\r\n */\r\nexport class FlowGraphIsInfinityBlock extends FlowGraphUnaryOperationBlock<FlowGraphNumber, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeBoolean, (a) => this._polymorphicIsInf(a), FlowGraphBlockNames.IsInfinity, config);\r\n    }\r\n\r\n    private _polymorphicIsInf(a: FlowGraphNumber) {\r\n        if (isNumeric(a)) {\r\n            return !isFinite(getNumericValue(a));\r\n        } else {\r\n            throw new Error(`Cannot get isInf of ${a}`);\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.IsInfinity, FlowGraphIsInfinityBlock);\r\n\r\n/**\r\n * Convert degrees to radians block.\r\n */\r\nexport class FlowGraphDegToRadBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    /**\r\n     * Constructs a new instance of the flow graph math block.\r\n     * @param config - Optional configuration for the flow graph block.\r\n     */\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicDegToRad(a), FlowGraphBlockNames.DegToRad, config);\r\n    }\r\n\r\n    private _degToRad(a: number) {\r\n        return (a * Math.PI) / 180;\r\n    }\r\n\r\n    private _polymorphicDegToRad(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, this._degToRad);\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.DegToRad, FlowGraphDegToRadBlock);\r\n\r\n/**\r\n * Convert radians to degrees block.\r\n */\r\nexport class FlowGraphRadToDegBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicRadToDeg(a), FlowGraphBlockNames.RadToDeg, config);\r\n    }\r\n\r\n    private _radToDeg(a: number) {\r\n        return (a * 180) / Math.PI;\r\n    }\r\n\r\n    private _polymorphicRadToDeg(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, this._radToDeg);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.RadToDeg, FlowGraphRadToDegBlock);\r\n\r\n/**\r\n * Sin block.\r\n */\r\nexport class FlowGraphSinBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicSin(a), FlowGraphBlockNames.Sin, config);\r\n    }\r\n\r\n    private _polymorphicSin(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.sin);\r\n    }\r\n}\r\n\r\n/**\r\n * Cos block.\r\n */\r\nexport class FlowGraphCosBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicCos(a), FlowGraphBlockNames.Cos, config);\r\n    }\r\n\r\n    private _polymorphicCos(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.cos);\r\n    }\r\n}\r\n\r\n/**\r\n * Tan block.\r\n */\r\nexport class FlowGraphTanBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicTan(a), FlowGraphBlockNames.Tan, config);\r\n    }\r\n\r\n    private _polymorphicTan(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.tan);\r\n    }\r\n}\r\n\r\n/**\r\n * Arcsin block.\r\n */\r\nexport class FlowGraphAsinBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAsin(a), FlowGraphBlockNames.Asin, config);\r\n    }\r\n\r\n    private _polymorphicAsin(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.asin);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Asin, FlowGraphAsinBlock);\r\n\r\n/**\r\n * Arccos block.\r\n */\r\nexport class FlowGraphAcosBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAcos(a), FlowGraphBlockNames.Acos, config);\r\n    }\r\n\r\n    private _polymorphicAcos(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.acos);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Acos, FlowGraphAcosBlock);\r\n\r\n/**\r\n * Arctan block.\r\n */\r\nexport class FlowGraphAtanBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (a) => this._polymorphicAtan(a), FlowGraphBlockNames.Atan, config);\r\n    }\r\n\r\n    private _polymorphicAtan(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.atan);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Atan, FlowGraphAtanBlock);\r\n\r\n/**\r\n * Arctan2 block.\r\n */\r\nexport class FlowGraphAtan2Block extends FlowGraphBinaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, RichTypeAny, (a, b) => this._polymorphicAtan2(a, b), FlowGraphBlockNames.Atan2, config);\r\n    }\r\n\r\n    private _polymorphicAtan2(a: any, b: any) {\r\n        return _componentWiseBinaryOperation(a, b, Math.atan2);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Atan2, FlowGraphAtan2Block);\r\n\r\n/**\r\n * Hyperbolic sin block.\r\n */\r\nexport class FlowGraphSinhBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicSinh(a), FlowGraphBlockNames.Sinh, config);\r\n    }\r\n\r\n    private _polymorphicSinh(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.sinh);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Sinh, FlowGraphSinhBlock);\r\n\r\n/**\r\n * Hyperbolic cos block.\r\n */\r\nexport class FlowGraphCoshBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicCosh(a), FlowGraphBlockNames.Cosh, config);\r\n    }\r\n\r\n    private _polymorphicCosh(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.cosh);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Cosh, FlowGraphCoshBlock);\r\n\r\n/**\r\n * Hyperbolic tan block.\r\n */\r\nexport class FlowGraphTanhBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeAny, (a) => this._polymorphicTanh(a), FlowGraphBlockNames.Tanh, config);\r\n    }\r\n\r\n    private _polymorphicTanh(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.tanh);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Tanh, FlowGraphTanhBlock);\r\n\r\n/**\r\n * Hyperbolic arcsin block.\r\n */\r\nexport class FlowGraphAsinhBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAsinh(a), FlowGraphBlockNames.Asinh, config);\r\n    }\r\n\r\n    private _polymorphicAsinh(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.asinh);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Asinh, FlowGraphAsinhBlock);\r\n\r\n/**\r\n * Hyperbolic arccos block.\r\n */\r\nexport class FlowGraphAcoshBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAcosh(a), FlowGraphBlockNames.Acosh, config);\r\n    }\r\n\r\n    private _polymorphicAcosh(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.acosh);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Acosh, FlowGraphAcoshBlock);\r\n\r\n/**\r\n * Hyperbolic arctan block.\r\n */\r\nexport class FlowGraphAtanhBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicAtanh(a), FlowGraphBlockNames.Atanh, config);\r\n    }\r\n\r\n    private _polymorphicAtanh(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.atanh);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Atanh, FlowGraphAtanhBlock);\r\n\r\n/**\r\n * Exponential block.\r\n */\r\nexport class FlowGraphExpBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicExp(a), FlowGraphBlockNames.Exponential, config);\r\n    }\r\n\r\n    private _polymorphicExp(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.exp);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Exponential, FlowGraphExpBlock);\r\n\r\n/**\r\n * Logarithm block.\r\n */\r\nexport class FlowGraphLogBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog(a), FlowGraphBlockNames.Log, config);\r\n    }\r\n\r\n    private _polymorphicLog(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.log);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Log, FlowGraphLogBlock);\r\n\r\n/**\r\n * Base 2 logarithm block.\r\n */\r\nexport class FlowGraphLog2Block extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog2(a), FlowGraphBlockNames.Log2, config);\r\n    }\r\n\r\n    private _polymorphicLog2(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.log2);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Log2, FlowGraphLog2Block);\r\n\r\n/**\r\n * Base 10 logarithm block.\r\n */\r\nexport class FlowGraphLog10Block extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicLog10(a), FlowGraphBlockNames.Log10, config);\r\n    }\r\n\r\n    private _polymorphicLog10(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.log10);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Log10, FlowGraphLog10Block);\r\n\r\n/**\r\n * Square root block.\r\n */\r\nexport class FlowGraphSquareRootBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicSqrt(a), FlowGraphBlockNames.SquareRoot, config);\r\n    }\r\n\r\n    private _polymorphicSqrt(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.sqrt);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.SquareRoot, FlowGraphSquareRootBlock);\r\n\r\n/**\r\n * Cube root block.\r\n */\r\nexport class FlowGraphCubeRootBlock extends FlowGraphUnaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, (a) => this._polymorphicCubeRoot(a), FlowGraphBlockNames.CubeRoot, config);\r\n    }\r\n\r\n    private _polymorphicCubeRoot(a: FlowGraphMathOperationType) {\r\n        return _componentWiseUnaryOperation(a, Math.cbrt);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.CubeRoot, FlowGraphCubeRootBlock);\r\n\r\n/**\r\n * Power block.\r\n */\r\nexport class FlowGraphPowerBlock extends FlowGraphBinaryOperationBlock<FlowGraphMathOperationType, FlowGraphMathOperationType, FlowGraphMathOperationType> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeAny, RichTypeNumber, RichTypeNumber, (a, b) => this._polymorphicPow(a, b), FlowGraphBlockNames.Power, config);\r\n    }\r\n\r\n    private _polymorphicPow(a: FlowGraphMathOperationType, b: FlowGraphMathOperationType) {\r\n        return _componentWiseBinaryOperation(a, b, Math.pow);\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.Power, FlowGraphPowerBlock);\r\n\r\n/**\r\n * Configuration for bitwise operators\r\n */\r\nexport interface IFlowGraphBitwiseBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The type of the values that will be operated on\r\n     * Defaults to FlowGraphInteger, but can be a number or boolean as well.\r\n     */\r\n    valueType: FlowGraphTypes;\r\n}\r\n\r\ntype FlowGraphBitwiseTypes = FlowGraphInteger | FlowGraphNumber | boolean;\r\n/**\r\n * Bitwise NOT operation\r\n */\r\nexport class FlowGraphBitwiseNotBlock extends FlowGraphUnaryOperationBlock<FlowGraphBitwiseTypes, FlowGraphBitwiseTypes> {\r\n    constructor(config?: IFlowGraphBitwiseBlockConfiguration) {\r\n        super(\r\n            getRichTypeByFlowGraphType(config?.valueType || FlowGraphTypes.Integer),\r\n            getRichTypeByFlowGraphType(config?.valueType || FlowGraphTypes.Integer),\r\n            (a) => {\r\n                if (typeof a === \"boolean\") {\r\n                    return !a;\r\n                } else if (typeof a === \"number\") {\r\n                    return ~a;\r\n                }\r\n                return new FlowGraphInteger(~a.value);\r\n            },\r\n            FlowGraphBlockNames.BitwiseNot,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.BitwiseNot, FlowGraphBitwiseNotBlock);\r\n\r\n/**\r\n * Bitwise AND operation\r\n */\r\nexport class FlowGraphBitwiseAndBlock extends FlowGraphBinaryOperationBlock<FlowGraphBitwiseTypes, FlowGraphBitwiseTypes, FlowGraphBitwiseTypes> {\r\n    constructor(config?: IFlowGraphBitwiseBlockConfiguration) {\r\n        super(\r\n            getRichTypeByFlowGraphType(config?.valueType || FlowGraphTypes.Integer),\r\n            getRichTypeByFlowGraphType(config?.valueType || FlowGraphTypes.Integer),\r\n            getRichTypeByFlowGraphType(config?.valueType || FlowGraphTypes.Integer),\r\n            (a, b) => {\r\n                if (typeof a === \"boolean\" && typeof b === \"boolean\") {\r\n                    return a && b;\r\n                } else if (typeof a === \"number\" && typeof b === \"number\") {\r\n                    return a & b;\r\n                } else if (typeof a === \"object\" && typeof b === \"object\") {\r\n                    return new FlowGraphInteger(a.value & b.value);\r\n                } else {\r\n                    throw new Error(`Cannot perform bitwise AND on ${a} and ${b}`);\r\n                }\r\n            },\r\n            FlowGraphBlockNames.BitwiseAnd,\r\n            config\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.BitwiseAnd, FlowGraphBitwiseAndBlock);\r\n\r\n/**\r\n * Bitwise OR operation\r\n */\r\nexport class FlowGraphBitwiseOrBlock extends FlowGraphBinaryOperationBlock<FlowGraphBitwiseTypes, FlowGraphBitwiseTypes, FlowGraphBitwiseTypes> {\r\n    constructor(config?: IFlowGraphBitwiseBlockConfiguration) {\r\n        super(\r\n            getRichTypeByFlowGraphType(config?.valueType || FlowGraphTypes.Integer),\r\n            getRichTypeByFlowGraphType(config?.valueType || FlowGraphTypes.Integer),\r\n            getRichTypeByFlowGraphType(config?.valueType || FlowGraphTypes.Integer),\r\n            (a, b) => {\r\n                if (typeof a === \"boolean\" && typeof b === \"boolean\") {\r\n                    return a || b;\r\n                } else if (typeof a === \"number\" && typeof b === \"number\") {\r\n                    return a | b;\r\n                } else if (typeof a === \"object\" && typeof b === \"object\") {\r\n                    return new FlowGraphInteger(a.value | b.value);\r\n                } else {\r\n                    throw new Error(`Cannot perform bitwise OR on ${a} and ${b}`);\r\n                }\r\n            },\r\n            FlowGraphBlockNames.BitwiseOr,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.BitwiseOr, FlowGraphBitwiseOrBlock);\r\n\r\n/**\r\n * Bitwise XOR operation\r\n */\r\nexport class FlowGraphBitwiseXorBlock extends FlowGraphBinaryOperationBlock<FlowGraphBitwiseTypes, FlowGraphBitwiseTypes, FlowGraphBitwiseTypes> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            getRichTypeByFlowGraphType(config?.valueType || FlowGraphTypes.Integer),\r\n            getRichTypeByFlowGraphType(config?.valueType || FlowGraphTypes.Integer),\r\n            getRichTypeByFlowGraphType(config?.valueType || FlowGraphTypes.Integer),\r\n            (a, b) => {\r\n                if (typeof a === \"boolean\" && typeof b === \"boolean\") {\r\n                    return a !== b;\r\n                } else if (typeof a === \"number\" && typeof b === \"number\") {\r\n                    return a ^ b;\r\n                } else if (typeof a === \"object\" && typeof b === \"object\") {\r\n                    return new FlowGraphInteger(a.value ^ b.value);\r\n                } else {\r\n                    throw new Error(`Cannot perform bitwise XOR on ${a} and ${b}`);\r\n                }\r\n            },\r\n            FlowGraphBlockNames.BitwiseXor,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.BitwiseXor, FlowGraphBitwiseXorBlock);\r\n\r\n/**\r\n * Bitwise left shift operation\r\n */\r\nexport class FlowGraphBitwiseLeftShiftBlock extends FlowGraphBinaryOperationBlock<FlowGraphInteger, FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            (a, b) => new FlowGraphInteger(a.value << b.value),\r\n            FlowGraphBlockNames.BitwiseLeftShift,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.BitwiseLeftShift, FlowGraphBitwiseLeftShiftBlock);\r\n\r\n/**\r\n * Bitwise right shift operation\r\n */\r\nexport class FlowGraphBitwiseRightShiftBlock extends FlowGraphBinaryOperationBlock<FlowGraphInteger, FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            (a, b) => new FlowGraphInteger(a.value >> b.value),\r\n            FlowGraphBlockNames.BitwiseRightShift,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.BitwiseRightShift, FlowGraphBitwiseRightShiftBlock);\r\n\r\n/**\r\n * Count leading zeros operation\r\n */\r\nexport class FlowGraphLeadingZerosBlock extends FlowGraphUnaryOperationBlock<FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a) => new FlowGraphInteger(Math.clz32(a.value)), FlowGraphBlockNames.LeadingZeros, config);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.LeadingZeros, FlowGraphLeadingZerosBlock);\r\n\r\n/**\r\n * Count trailing zeros operation\r\n */\r\nexport class FlowGraphTrailingZerosBlock extends FlowGraphUnaryOperationBlock<FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeFlowGraphInteger,\r\n            RichTypeFlowGraphInteger,\r\n            (a) => new FlowGraphInteger(a.value ? 31 - Math.clz32(a.value & -a.value) : 32),\r\n            FlowGraphBlockNames.TrailingZeros,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.TrailingZeros, FlowGraphTrailingZerosBlock);\r\n\r\n/**\r\n * Given a number (which is converted to a 32-bit integer), return the\r\n * number of bits set to one on that number.\r\n * @param n the number to run the op on\r\n * @returns the number of bits set to one on that number\r\n */\r\nfunction _countOnes(n: number) {\r\n    let result = 0;\r\n    while (n) {\r\n        // This zeroes out all bits except for the least significant one.\r\n        // So if the bit is set, it will be 1, otherwise it will be 0.\r\n        result += n & 1;\r\n        // This shifts n's bits to the right by one\r\n        n >>= 1;\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Count one bits operation\r\n */\r\nexport class FlowGraphOneBitsCounterBlock extends FlowGraphUnaryOperationBlock<FlowGraphInteger, FlowGraphInteger> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeFlowGraphInteger, RichTypeFlowGraphInteger, (a) => new FlowGraphInteger(_countOnes(a.value)), FlowGraphBlockNames.OneBitsCounter, config);\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.OneBitsCounter, FlowGraphOneBitsCounterBlock);\r\n"],
  "mappings": "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",
  "names": ["a", "b"]
}
