{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/Transformers/flowGraphTypeToTypeBlocks.ts"],
  "sourcesContent": ["import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\nimport { RichTypeBoolean, RichTypeFlowGraphInteger, RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\n\n/**\n * A block that converts a boolean to a float.\n */\nexport class FlowGraphBooleanToFloat extends FlowGraphUnaryOperationBlock<boolean, number> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(RichTypeBoolean, RichTypeNumber, (a) => +a, FlowGraphBlockNames.BooleanToFloat, config);\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.BooleanToFloat, FlowGraphBooleanToFloat);\n\n/**\n * A block that converts a boolean to an integer\n */\nexport class FlowGraphBooleanToInt extends FlowGraphUnaryOperationBlock<boolean, FlowGraphInteger> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(RichTypeBoolean, RichTypeFlowGraphInteger, (a) => FlowGraphInteger.FromValue(+a), FlowGraphBlockNames.BooleanToInt, config);\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.BooleanToInt, FlowGraphBooleanToInt);\n\n/**\n * A block that converts a float to a boolean.\n */\nexport class FlowGraphFloatToBoolean extends FlowGraphUnaryOperationBlock<number, boolean> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(RichTypeNumber, RichTypeBoolean, (a) => !!a, FlowGraphBlockNames.FloatToBoolean, config);\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.FloatToBoolean, FlowGraphFloatToBoolean);\n\n/**\n * A block that converts an integer to a boolean.\n */\nexport class FlowGraphIntToBoolean extends FlowGraphUnaryOperationBlock<FlowGraphInteger, boolean> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(RichTypeFlowGraphInteger, RichTypeBoolean, (a) => !!a.value, FlowGraphBlockNames.IntToBoolean, config);\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.IntToBoolean, FlowGraphIntToBoolean);\n\n/**\n * A block that converts an integer to a float.\n */\nexport class FlowGraphIntToFloat extends FlowGraphUnaryOperationBlock<FlowGraphInteger, number> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(RichTypeFlowGraphInteger, RichTypeNumber, (a) => a.value, FlowGraphBlockNames.IntToFloat, config);\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.IntToFloat, FlowGraphIntToFloat);\n\n/**\n * Configuration for the float to int block.\n */\nexport interface IFlowGraphFloatToIntConfiguration extends IFlowGraphBlockConfiguration {\n    /**\n     * The rounding mode to use.\n     * if not defined, it will use the FlowGraphInteger default rounding ( a | 0 )\n     */\n    roundingMode?: \"floor\" | \"ceil\" | \"round\";\n}\n/**\n * A block that converts a float to an integer.\n */\nexport class FlowGraphFloatToInt extends FlowGraphUnaryOperationBlock<number, FlowGraphInteger> {\n    constructor(config?: IFlowGraphFloatToIntConfiguration) {\n        super(\n            RichTypeNumber,\n            RichTypeFlowGraphInteger,\n            (a) => {\n                const roundingMode = config?.roundingMode;\n                switch (roundingMode) {\n                    case \"floor\":\n                        return FlowGraphInteger.FromValue(Math.floor(a));\n                    case \"ceil\":\n                        return FlowGraphInteger.FromValue(Math.ceil(a));\n                    case \"round\":\n                        return FlowGraphInteger.FromValue(Math.round(a));\n                    default:\n                        return FlowGraphInteger.FromValue(a);\n                }\n            },\n            FlowGraphBlockNames.FloatToInt,\n            config\n        );\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.FloatToInt, FlowGraphFloatToInt);\n"],
  "mappings": ";;;;;;;;;;;;;;AAUM,IAAO,0BAAP,cAAuC,6BAA6C;EACtF,YAAY,QAAqC;AAC7C,UAAM,iBAAiB,gBAAgB,CAAC,MAAM,CAAC,GAAC,2BAAsC,MAAM;EAChG;;AAGJ,cAAa,2BAAqC,uBAAuB;AAKnE,IAAO,wBAAP,cAAqC,6BAAuD;EAC9F,YAAY,QAAqC;AAC7C,UAAM,iBAAiB,0BAA0B,CAAC,MAAM,iBAAiB,UAAU,CAAC,CAAC,GAAC,yBAAoC,MAAM;EACpI;;AAGJ,cAAa,yBAAmC,qBAAqB;AAK/D,IAAO,0BAAP,cAAuC,6BAA6C;EACtF,YAAY,QAAqC;AAC7C,UAAM,gBAAgB,iBAAiB,CAAC,MAAM,CAAC,CAAC,GAAC,2BAAsC,MAAM;EACjG;;AAGJ,cAAa,2BAAqC,uBAAuB;AAKnE,IAAO,wBAAP,cAAqC,6BAAuD;EAC9F,YAAY,QAAqC;AAC7C,UAAM,0BAA0B,iBAAiB,CAAC,MAAM,CAAC,CAAC,EAAE,OAAK,yBAAoC,MAAM;EAC/G;;AAGJ,cAAa,yBAAmC,qBAAqB;AAK/D,IAAO,sBAAP,cAAmC,6BAAsD;EAC3F,YAAY,QAAqC;AAC7C,UAAM,0BAA0B,gBAAgB,CAAC,MAAM,EAAE,OAAK,uBAAkC,MAAM;EAC1G;;AAGJ,cAAa,uBAAiC,mBAAmB;AAe3D,IAAO,sBAAP,cAAmC,6BAAsD;EAC3F,YAAY,QAA0C;AAClD,UACI,gBACA,0BACA,CAAC,MAAK;AACF,YAAM,eAAe,iCAAQ;AAC7B,cAAQ,cAAc;QAClB,KAAK;AACD,iBAAO,iBAAiB,UAAU,KAAK,MAAM,CAAC,CAAC;QACnD,KAAK;AACD,iBAAO,iBAAiB,UAAU,KAAK,KAAK,CAAC,CAAC;QAClD,KAAK;AACD,iBAAO,iBAAiB,UAAU,KAAK,MAAM,CAAC,CAAC;QACnD;AACI,iBAAO,iBAAiB,UAAU,CAAC;MAC3C;IACJ,GAAC,uBAED,MAAM;EAEd;;AAGJ,cAAa,uBAAiC,mBAAmB;",
  "names": []
}
