{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphConditionalDataBlock.ts"],
  "sourcesContent": ["import type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport { FlowGraphBlock } from \"../../flowGraphBlock\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { RichTypeBoolean, RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\r\n\r\n/**\r\n * Block that returns a value based on a condition.\r\n */\r\nexport class FlowGraphConditionalDataBlock<T> extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The condition to check.\r\n     */\r\n    public readonly condition: FlowGraphDataConnection<boolean>;\r\n    /**\r\n     * Input connection: The value to return if the condition is true.\r\n     */\r\n    public readonly onTrue: FlowGraphDataConnection<T>;\r\n    /**\r\n     * Input connection: The value to return if the condition is false.\r\n     */\r\n    public readonly onFalse: FlowGraphDataConnection<T>;\r\n\r\n    /**\r\n     * Output connection: The value that was returned.\r\n     */\r\n    public readonly output: FlowGraphDataConnection<T>;\r\n\r\n    /**\r\n     * Creates a new instance of the block\r\n     * @param config optional configuration for this block\r\n     */\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.condition = this.registerDataInput(\"condition\", RichTypeBoolean);\r\n        this.onTrue = this.registerDataInput(\"onTrue\", RichTypeAny);\r\n        this.onFalse = this.registerDataInput(\"onFalse\", RichTypeAny);\r\n\r\n        this.output = this.registerDataOutput(\"output\", RichTypeAny);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _updateOutputs(context: FlowGraphContext): void {\r\n        // get the value of the condition\r\n        const condition = this.condition.getValue(context);\r\n        // set the value based on the condition truth-ness.\r\n        this.output.setValue(condition ? this.onTrue.getValue(context) : this.onFalse.getValue(context), context);\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of this block\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.Conditional;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Conditional, FlowGraphConditionalDataBlock);\r\n"],
  "mappings": ";;;;;;;;;;AAWM,IAAO,gCAAP,cAAgD,eAAc;;;;;EAuBhE,YAAY,QAAqC;AAC7C,UAAM,MAAM;AAEZ,SAAK,YAAY,KAAK,kBAAkB,aAAa,eAAe;AACpE,SAAK,SAAS,KAAK,kBAAkB,UAAU,WAAW;AAC1D,SAAK,UAAU,KAAK,kBAAkB,WAAW,WAAW;AAE5D,SAAK,SAAS,KAAK,mBAAmB,UAAU,WAAW;EAC/D;;;;EAKgB,eAAe,SAAyB;AAEpD,UAAM,YAAY,KAAK,UAAU,SAAS,OAAO;AAEjD,SAAK,OAAO,SAAS,YAAY,KAAK,OAAO,SAAS,OAAO,IAAI,KAAK,QAAQ,SAAS,OAAO,GAAG,OAAO;EAC5G;;;;;EAMgB,eAAY;AACxB,WAAA;EACJ;;AAEJ,cAAa,6BAAkC,6BAA6B;",
  "names": []
}
