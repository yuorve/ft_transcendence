{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphSendCustomEventBlock.ts"],
  "sourcesContent": ["import type { RichType } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../flowGraphExecutionBlockWithOutSignal\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\r\n\r\n/**\r\n * Parameters used to create a FlowGraphSendCustomEventBlock.\r\n */\r\nexport interface IFlowGraphSendCustomEventBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The id of the event to send.\r\n     * Note - in the glTF specs this is an index to the event array (i.e. - a number)\r\n     */\r\n    eventId: string;\r\n    /**\r\n     * The names of the data inputs for that event.\r\n     */\r\n    eventData: { [key: string]: { type: RichType<any>; value?: any } };\r\n}\r\n/**\r\n * A block that sends a custom event.\r\n * To receive this event you need to use the ReceiveCustomEvent block.\r\n * This block has no output, but does have inputs based on the eventData from the configuration.\r\n * @see FlowGraphReceiveCustomEventBlock\r\n */\r\nexport class FlowGraphSendCustomEventBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    public constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public override config: IFlowGraphSendCustomEventBlockConfiguration\r\n    ) {\r\n        super(config);\r\n        for (const key in this.config.eventData) {\r\n            this.registerDataInput(key, this.config.eventData[key].type, this.config.eventData[key].value);\r\n        }\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        const eventId = this.config.eventId;\r\n        // eventData is a map with the key being the data input's name, and value being the data input's value\r\n        const eventData: any = {};\r\n        this.dataInputs.forEach((port) => {\r\n            eventData[port.name] = port.getValue(context);\r\n        });\r\n\r\n        context.configuration.coordinator.notifyCustomEvent(eventId, eventData);\r\n\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.ReceiveCustomEvent;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.ReceiveCustomEvent, FlowGraphSendCustomEventBlock);\r\n"],
  "mappings": ";;;;;;;;AA2BM,IAAO,gCAAP,cAA6C,qCAAoC;EACnF,YAIoB,QAAmD;AAEnE,UAAM,MAAM;AAFI,SAAA,SAAA;AAGhB,eAAW,OAAO,KAAK,OAAO,WAAW;AACrC,WAAK,kBAAkB,KAAK,KAAK,OAAO,UAAU,GAAG,EAAE,MAAM,KAAK,OAAO,UAAU,GAAG,EAAE,KAAK;IACjG;EACJ;EAEO,SAAS,SAAyB;AACrC,UAAM,UAAU,KAAK,OAAO;AAE5B,UAAM,YAAiB,CAAA;AACvB,SAAK,WAAW,QAAQ,CAAC,SAAQ;AAC7B,gBAAU,KAAK,IAAI,IAAI,KAAK,SAAS,OAAO;IAChD,CAAC;AAED,YAAQ,cAAc,YAAY,kBAAkB,SAAS,SAAS;AAEtE,SAAK,IAAI,gBAAgB,OAAO;EACpC;;;;EAKgB,eAAY;AACxB,WAAA;EACJ;;AAEJ,cAAa,oCAAyC,6BAA6B;",
  "names": []
}
