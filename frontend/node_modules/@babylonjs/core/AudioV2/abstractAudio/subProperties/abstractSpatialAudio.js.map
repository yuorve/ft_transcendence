{"version":3,"file":"abstractSpatialAudio.js","sourceRoot":"","sources":["../../../../../../dev/core/src/AudioV2/abstractAudio/subProperties/abstractSpatialAudio.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AAKjE,MAAM,CAAC,MAAM,qBAAqB,GAAG;IACjC,cAAc,EAAE,aAAuB;IACvC,cAAc,EAAE,aAAuB;IACvC,eAAe,EAAE,CAAW;IAC5B,aAAa,EAAE,QAA6B;IAC5C,WAAW,EAAE,KAAe;IAC5B,WAAW,EAAE,CAAW;IACxB,YAAY,EAAE,YAAgC;IAC9C,QAAQ,EAAE,OAAO,CAAC,IAAI,EAAE;IACxB,aAAa,EAAE,CAAW;IAC1B,QAAQ,EAAE,OAAO,CAAC,IAAI,EAAE;IACxB,kBAAkB,EAAE,IAAI,UAAU,EAAE;CAC9B,CAAC;AA6FX;;;GAGG;AACH,MAAM,UAAU,uBAAuB,CAAC,OAAsC;IAC1E,OAAO,CACH,OAAO,CAAC,cAAc;QACtB,OAAO,CAAC,iBAAiB,KAAK,SAAS;QACvC,OAAO,CAAC,qBAAqB,KAAK,SAAS;QAC3C,OAAO,CAAC,qBAAqB,KAAK,SAAS;QAC3C,OAAO,CAAC,sBAAsB,KAAK,SAAS;QAC5C,OAAO,CAAC,oBAAoB,KAAK,SAAS;QAC1C,OAAO,CAAC,kBAAkB,KAAK,SAAS;QACxC,OAAO,CAAC,kBAAkB,KAAK,SAAS;QACxC,OAAO,CAAC,oBAAoB,KAAK,SAAS;QAC1C,OAAO,CAAC,mBAAmB,KAAK,SAAS;QACzC,OAAO,CAAC,eAAe,KAAK,SAAS;QACrC,OAAO,CAAC,oBAAoB,KAAK,SAAS;QAC1C,OAAO,CAAC,eAAe,KAAK,SAAS;QACrC,OAAO,CAAC,yBAAyB,KAAK,SAAS,CAClD,CAAC;AACN,CAAC;AAED;;;;GAIG;AACH,MAAM,OAAgB,oBAAoB;CAgHzC","sourcesContent":["import { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport type { Node } from \"../../../node\";\nimport type { Nullable } from \"../../../types\";\nimport type { SpatialAudioAttachmentType } from \"../../spatialAudioAttachmentType\";\n\nexport const _SpatialAudioDefaults = {\n    coneInnerAngle: 6.28318530718 as number,\n    coneOuterAngle: 6.28318530718 as number,\n    coneOuterVolume: 0 as number,\n    distanceModel: \"linear\" as DistanceModelType,\n    maxDistance: 10000 as number,\n    minDistance: 1 as number,\n    panningModel: \"equalpower\" as PanningModelType,\n    position: Vector3.Zero(),\n    rolloffFactor: 1 as number,\n    rotation: Vector3.Zero(),\n    rotationQuaternion: new Quaternion(),\n} as const;\n\n/**\n * Options for spatial audio.\n */\nexport interface ISpatialAudioOptions {\n    /**\n     * Whether to automatically update the spatial properties of the audio node. Defaults to `true`.\n     */\n    spatialAutoUpdate: boolean;\n    /**\n     * The spatial cone inner angle, in radians. Defaults to 2π.\n     * - When the listener is inside the cone inner angle, the volume is at its maximum.\n     */\n    spatialConeInnerAngle: number;\n    /**\n     * The spatial cone outer angle, in radians. Defaults to 2π.\n     * - When the listener is between the the cone inner and outer angles, the volume fades to its minimum as the listener approaches the outer angle.\n     * - When the listener is outside the cone outer angle, the volume is at its minimum.\n     */\n    spatialConeOuterAngle: number;\n    /**\n     * The amount of volume reduction outside the {@link spatialConeOuterAngle}. Defaults to 0.\n     */\n    spatialConeOuterVolume: number;\n    /**\n     * The algorithm to use to reduce the volume of the audio source as it moves away from the listener. Defaults to \"inverse\".\n     *\n     * Possible values are:\n     * - `\"linear\"`: The volume is reduced linearly as the source moves away from the listener.\n     * - `\"inverse\"`: The volume is reduced inversely as the source moves away from the listener.\n     * - `\"exponential\"`: The volume is reduced exponentially as the source moves away from the listener.\n     *\n     * @see {@link spatialMaxDistance}\n     * @see {@link spatialMinDistance}\n     * @see {@link spatialRolloffFactor}\n     */\n    spatialDistanceModel: \"linear\" | \"inverse\" | \"exponential\";\n    /**\n     * Enable spatial audio. Defaults to false.\n     *\n     * When set to `true`, the audio node's spatial properties will be initialized on creation and there will be no\n     * delay when setting the first spatial value.\n     *\n     * When not specified, or set to `false`, the audio node's spatial properties will not be initialized on creation\n     * and there will be a small delay when setting the first spatial value.\n     *\n     * - This option is ignored if any other spatial options are set.\n     */\n    spatialEnabled: boolean;\n    /**\n     * The maximum distance between the audio source and the listener, after which the volume is not reduced any further. Defaults to 10000.\n     * - This value is used only when the {@link spatialDistanceModel} is set to `\"linear\"`.\n     * @see {@link spatialDistanceModel}\n     */\n    spatialMaxDistance: number;\n    /**\n     * The minimum update time in seconds of the spatialization if it is attached to a mesh or transform node. Defaults to `0`.\n     * - The spatialization's position and rotation will not update faster than this time, but they may update slower depending on the frame rate.\n     */\n    spatialMinUpdateTime: number;\n    /**\n     * Possible values are:\n     * - `\"equalpower\"`: Represents the equal-power panning algorithm, generally regarded as simple and efficient.\n     * - `\"HRTF\"`: Renders a stereo output of higher quality than `\"equalpower\"` — it uses a convolution with measured impulse responses from human subjects.\n     */\n    spatialPanningModel: \"equalpower\" | \"HRTF\";\n    /**\n     * The spatial position. Defaults to (0, 0, 0).\n     */\n    spatialPosition: Vector3;\n    /**\n     * The distance for reducing volume as the audio source moves away from the listener – i.e. the distance the volume reduction starts at. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link spatialDistanceModel}\n     */\n    spatialMinDistance: number;\n    /**\n     * How quickly the volume is reduced as the source moves away from the listener. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link spatialDistanceModel}\n     */\n    spatialRolloffFactor: number;\n    /**\n     * The spatial rotation, as Euler angles. Defaults to (0, 0, 0).\n     */\n    spatialRotation: Vector3;\n    /**\n     * The spatial rotation, as a quaternion. Defaults to (0, 0, 0, 1).\n     */\n    spatialRotationQuaternion: Quaternion;\n}\n\n/**\n * @param options The spatial audio options to check.\n * @returns `true` if spatial audio options are defined, otherwise `false`.\n */\nexport function _HasSpatialAudioOptions(options: Partial<ISpatialAudioOptions>): boolean {\n    return (\n        options.spatialEnabled ||\n        options.spatialAutoUpdate !== undefined ||\n        options.spatialConeInnerAngle !== undefined ||\n        options.spatialConeOuterAngle !== undefined ||\n        options.spatialConeOuterVolume !== undefined ||\n        options.spatialDistanceModel !== undefined ||\n        options.spatialMaxDistance !== undefined ||\n        options.spatialMinDistance !== undefined ||\n        options.spatialMinUpdateTime !== undefined ||\n        options.spatialPanningModel !== undefined ||\n        options.spatialPosition !== undefined ||\n        options.spatialRolloffFactor !== undefined ||\n        options.spatialRotation !== undefined ||\n        options.spatialRotationQuaternion !== undefined\n    );\n}\n\n/**\n * Abstract class representing the `spatial` audio property on a sound or audio bus.\n *\n * @see {@link AudioEngineV2.listener}\n */\nexport abstract class AbstractSpatialAudio {\n    /**\n     * The spatial cone inner angle, in radians. Defaults to 2π.\n     * - When the listener is inside the cone inner angle, the volume is at its maximum.\n     */\n    public abstract coneInnerAngle: number;\n\n    /**\n     * The spatial cone outer angle, in radians. Defaults to 2π.\n     * - When the listener is between the the cone inner and outer angles, the volume fades to its minimum as the listener approaches the outer angle.\n     * - When the listener is outside the cone outer angle, the volume is at its minimum.\n     */\n    public abstract coneOuterAngle: number;\n\n    /**\n     * The amount of volume reduction outside the {@link coneOuterAngle}. Defaults to 0.\n     */\n    public abstract coneOuterVolume: number;\n\n    /**\n     * The algorithm to use to reduce the volume of the audio source as it moves away from the listener. Defaults to \"inverse\".\n     *\n     * Possible values are:\n     * - `\"linear\"`: The volume is reduced linearly as the source moves away from the listener.\n     * - `\"inverse\"`: The volume is reduced inversely as the source moves away from the listener.\n     * - `\"exponential\"`: The volume is reduced exponentially as the source moves away from the listener.\n     *\n     * @see {@link spatialMaxDistance}\n     * @see {@link spatialMinDistance}\n     * @see {@link spatialRolloffFactor}\n     */\n    public abstract distanceModel: \"linear\" | \"inverse\" | \"exponential\";\n\n    /**\n     * Whether the audio source is attached to a mesh or transform node.\n     */\n    public abstract isAttached: boolean;\n\n    /**\n     * The maximum distance between the audio source and the listener, after which the volume is not reduced any further. Defaults to 10000.\n     * - This value is used only when the {@link distanceModel} is set to `\"linear\"`.\n     * @see {@link distanceModel}\n     */\n    public abstract maxDistance: number;\n\n    /**\n     * The distance for reducing volume as the audio source moves away from the listener – i.e. the distance the volume reduction starts at. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link distanceModel}\n     */\n    public abstract minDistance: number;\n\n    /**\n     * The minimum update time in seconds of the spatialization if it is attached to a mesh or transform node. Defaults to `0`.\n     * - The spatialization's position and rotation will not update faster than this time, but they may update slower depending on the frame rate.\n     */\n    public abstract minUpdateTime: number;\n\n    /**\n     * The spatial panning model. Defaults to \"equalpower\".\n     *\n     * Possible values are:\n     * - `\"equalpower\"`: Represents the equal-power panning algorithm, generally regarded as simple and efficient.\n     * - `\"HRTF\"`:Renders a stereo output of higher quality than `\"equalpower\"` — it uses a convolution with measured impulse responses from human subjects.\n     */\n    public abstract panningModel: \"equalpower\" | \"HRTF\";\n\n    /**\n     * The spatial position. Defaults to (0, 0, 0).\n     */\n    public abstract position: Vector3;\n\n    /**\n     * How quickly the volume is reduced as the source moves away from the listener. Defaults to 1.\n     * - This value is used by all distance models.\n     * @see {@link distanceModel}\n     */\n    public abstract rolloffFactor: number;\n\n    /**\n     * The spatial rotation. Defaults to (0, 0, 0).\n     */\n    public abstract rotation: Vector3;\n\n    /**\n     * The spatial rotation quaternion. Defaults to (0, 0, 0, 1).\n     */\n    public abstract rotationQuaternion: Quaternion;\n\n    /**\n     * Attaches to a scene node.\n     *\n     * Detaches automatically before attaching to the given scene node.\n     * If `sceneNode` is `null` it is the same as calling `detach()`.\n     *\n     * @param sceneNode The scene node to attach to, or `null` to detach.\n     * @param useBoundingBox Whether to use the bounding box of the node for positioning. Defaults to `false`.\n     * @param attachmentType Whether to attach to the node's position and/or rotation. Defaults to `PositionAndRotation`.\n     */\n    public abstract attach(sceneNode: Nullable<Node>, useBoundingBox?: boolean, attachmentType?: SpatialAudioAttachmentType): void;\n\n    /**\n     * Detaches from the scene node if attached.\n     */\n    public abstract detach(): void;\n\n    /**\n     * Updates the position and rotation of the associated audio engine object in the audio rendering graph.\n     *\n     * This is called automatically by default and only needs to be called manually if automatic updates are disabled.\n     */\n    public abstract update(): void;\n}\n"]}