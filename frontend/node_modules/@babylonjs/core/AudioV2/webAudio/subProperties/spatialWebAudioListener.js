import { Matrix, Quaternion, Vector3 } from "../../../Maths/math.vector.js";
import { _SpatialAudioListener } from "../../abstractAudio/subProperties/spatialAudioListener.js";
import { _SpatialWebAudioUpdaterComponent } from "../components/spatialWebAudioUpdaterComponent.js";
const TmpMatrix = Matrix.Zero();
const TmpQuaternion = new Quaternion();
const TmpVector = Vector3.Zero();
/** @internal */
export function _CreateSpatialAudioListener(engine, autoUpdate, minUpdateTime) {
    return new _SpatialWebAudioListener(engine, autoUpdate, minUpdateTime);
}
/**
 * This sub property is not backed by a sub node and all properties are set directly on the audio context listener.
 *
 * @internal
 */
class _SpatialWebAudioListener extends _SpatialAudioListener {
    /** @internal */
    constructor(engine, autoUpdate, minUpdateTime) {
        super();
        this._lastPosition = Vector3.Zero();
        this._lastRotation = Vector3.Zero();
        this._lastRotationQuaternion = new Quaternion();
        /** @internal */
        this.position = Vector3.Zero();
        /** @internal */
        this.rotation = Vector3.Zero();
        /** @internal */
        this.rotationQuaternion = new Quaternion();
        this.engine = engine;
        this._audioContext = engine._audioContext;
        this._updaterComponent = new _SpatialWebAudioUpdaterComponent(this, autoUpdate, minUpdateTime);
    }
    /** @internal */
    get minUpdateTime() {
        return this._updaterComponent.minUpdateTime;
    }
    /** @internal */
    set minUpdateTime(value) {
        this._updaterComponent.minUpdateTime = value;
    }
    /** @internal */
    dispose() {
        super.dispose();
        this._updaterComponent.dispose();
        this._updaterComponent = null;
    }
    /** @internal */
    update() {
        if (this.isAttached) {
            this._attacherComponent?.update();
        }
        else {
            this._updatePosition();
            this._updateRotation();
        }
    }
    /** @internal */
    _updatePosition() {
        if (this._lastPosition.equalsWithEpsilon(this.position)) {
            return;
        }
        const listener = this._audioContext.listener;
        this.engine._setAudioParam(listener.positionX, this.position.x);
        this.engine._setAudioParam(listener.positionY, this.position.y);
        this.engine._setAudioParam(listener.positionZ, this.position.z);
        this._lastPosition.copyFrom(this.position);
    }
    /** @internal */
    _updateRotation() {
        if (!this._lastRotationQuaternion.equalsWithEpsilon(this.rotationQuaternion)) {
            TmpQuaternion.copyFrom(this.rotationQuaternion);
            this._lastRotationQuaternion.copyFrom(this.rotationQuaternion);
        }
        else if (!this._lastRotation.equalsWithEpsilon(this.rotation)) {
            Quaternion.FromEulerAnglesToRef(this.rotation.x, this.rotation.y, this.rotation.z, TmpQuaternion);
            this._lastRotation.copyFrom(this.rotation);
        }
        else {
            return;
        }
        Matrix.FromQuaternionToRef(TmpQuaternion, TmpMatrix);
        const listener = this._audioContext.listener;
        // NB: The WebAudio API is right-handed.
        Vector3.TransformNormalToRef(Vector3.RightHandedForwardReadOnly, TmpMatrix, TmpVector);
        this.engine._setAudioParam(listener.forwardX, TmpVector.x);
        this.engine._setAudioParam(listener.forwardY, TmpVector.y);
        this.engine._setAudioParam(listener.forwardZ, TmpVector.z);
        Vector3.TransformNormalToRef(Vector3.Up(), TmpMatrix, TmpVector);
        this.engine._setAudioParam(listener.upX, TmpVector.x);
        this.engine._setAudioParam(listener.upY, TmpVector.y);
        this.engine._setAudioParam(listener.upZ, TmpVector.z);
    }
}
//# sourceMappingURL=spatialWebAudioListener.js.map