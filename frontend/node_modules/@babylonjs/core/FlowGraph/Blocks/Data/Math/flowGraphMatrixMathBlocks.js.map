{"version":3,"file":"flowGraphMatrixMathBlocks.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphMatrixMathBlocks.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport {\n    FlowGraphTypes,\n    getRichTypeByFlowGraphType,\n    RichTypeBoolean,\n    RichTypeMatrix,\n    RichTypeNumber,\n    RichTypeQuaternion,\n    RichTypeVector3,\n} from \"core/FlowGraph/flowGraphRichTypes\";\nimport { Matrix, Quaternion, Vector3 } from \"core/Maths/math.vector\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\nimport type { FlowGraphMatrix2D } from \"core/FlowGraph/CustomTypes/flowGraphMatrix\";\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\nimport type { FlowGraphMatrix } from \"core/FlowGraph/utils\";\n\n/**\n * Configuration for the matrix blocks.\n */\nexport interface IFlowGraphMatrixBlockConfiguration extends IFlowGraphBlockConfiguration {\n    /**\n     * The type of the matrix. Default is Matrix (which is 4x4)\n     */\n    matrixType: FlowGraphTypes;\n}\n/**\n * Transposes a matrix.\n */\nexport class FlowGraphTransposeBlock extends FlowGraphUnaryOperationBlock<FlowGraphMatrix, FlowGraphMatrix> {\n    /**\n     * Creates a new instance of the block.\n     * @param config the configuration of the block\n     */\n    constructor(config?: IFlowGraphMatrixBlockConfiguration) {\n        super(\n            getRichTypeByFlowGraphType(config?.matrixType || FlowGraphTypes.Matrix),\n            getRichTypeByFlowGraphType(config?.matrixType || FlowGraphTypes.Matrix),\n            (a) => (a.transpose ? a.transpose() : Matrix.Transpose(a as Matrix)),\n            FlowGraphBlockNames.Transpose,\n            config\n        );\n    }\n}\nRegisterClass(FlowGraphBlockNames.Transpose, FlowGraphTransposeBlock);\n\n/**\n * Gets the determinant of a matrix.\n */\nexport class FlowGraphDeterminantBlock extends FlowGraphUnaryOperationBlock<FlowGraphMatrix, number> {\n    /**\n     * Creates a new instance of the block.\n     * @param config the configuration of the block\n     */\n    constructor(config?: IFlowGraphMatrixBlockConfiguration) {\n        super(getRichTypeByFlowGraphType(config?.matrixType || FlowGraphTypes.Matrix), RichTypeNumber, (a) => a.determinant(), FlowGraphBlockNames.Determinant, config);\n    }\n}\nRegisterClass(FlowGraphBlockNames.Determinant, FlowGraphDeterminantBlock);\n\n/**\n * Inverts a matrix.\n */\nexport class FlowGraphInvertMatrixBlock extends FlowGraphUnaryOperationBlock<FlowGraphMatrix, FlowGraphMatrix> {\n    /**\n     * Creates a new instance of the inverse block.\n     * @param config the configuration of the block\n     */\n    constructor(config?: IFlowGraphMatrixBlockConfiguration) {\n        super(\n            getRichTypeByFlowGraphType(config?.matrixType || FlowGraphTypes.Matrix),\n            getRichTypeByFlowGraphType(config?.matrixType || FlowGraphTypes.Matrix),\n            (a) => ((a as FlowGraphMatrix2D).inverse ? (a as FlowGraphMatrix2D).inverse() : Matrix.Invert(a as Matrix)),\n            FlowGraphBlockNames.InvertMatrix,\n            config\n        );\n    }\n}\nRegisterClass(FlowGraphBlockNames.InvertMatrix, FlowGraphInvertMatrixBlock);\n\n/**\n * Multiplies two matrices.\n */\nexport class FlowGraphMatrixMultiplicationBlock extends FlowGraphBinaryOperationBlock<FlowGraphMatrix, FlowGraphMatrix, FlowGraphMatrix> {\n    /**\n     * Creates a new instance of the multiplication block.\n     * Note - this is similar to the math multiplication if not using matrix per-component multiplication.\n     * @param config the configuration of the block\n     */\n    constructor(config?: IFlowGraphMatrixBlockConfiguration) {\n        super(\n            getRichTypeByFlowGraphType(config?.matrixType || FlowGraphTypes.Matrix),\n            getRichTypeByFlowGraphType(config?.matrixType || FlowGraphTypes.Matrix),\n            getRichTypeByFlowGraphType(config?.matrixType || FlowGraphTypes.Matrix),\n            (a, b) => b.multiply(a as any),\n            FlowGraphBlockNames.MatrixMultiplication,\n            config\n        );\n    }\n}\nRegisterClass(FlowGraphBlockNames.MatrixMultiplication, FlowGraphMatrixMultiplicationBlock);\n\n/**\n * Matrix decompose block\n */\nexport class FlowGraphMatrixDecomposeBlock extends FlowGraphBlock {\n    /**\n     * The input of this block\n     */\n    public readonly input: FlowGraphDataConnection<Matrix>;\n\n    /**\n     * The position output of this block\n     */\n    public readonly position: FlowGraphDataConnection<Vector3>;\n    /**\n     * The rotation output of this block\n     */\n    public readonly rotationQuaternion: FlowGraphDataConnection<Quaternion>;\n    /**\n     * The scaling output of this block\n     */\n    public readonly scaling: FlowGraphDataConnection<Vector3>;\n\n    /**\n     * Is the matrix valid\n     */\n    public readonly isValid: FlowGraphDataConnection<boolean>;\n\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(config);\n        this.input = this.registerDataInput(\"input\", RichTypeMatrix);\n        this.position = this.registerDataOutput(\"position\", RichTypeVector3);\n        this.rotationQuaternion = this.registerDataOutput(\"rotationQuaternion\", RichTypeQuaternion);\n        this.scaling = this.registerDataOutput(\"scaling\", RichTypeVector3);\n        this.isValid = this.registerDataOutput(\"isValid\", RichTypeBoolean, false);\n    }\n\n    public override _updateOutputs(context: FlowGraphContext) {\n        const cachedExecutionId = context._getExecutionVariable(this, \"executionId\", -1);\n        const cachedPosition = context._getExecutionVariable(this, \"cachedPosition\", null);\n        const cachedRotation = context._getExecutionVariable(this, \"cachedRotation\", null);\n        const cachedScaling = context._getExecutionVariable(this, \"cachedScaling\", null);\n        if (cachedExecutionId === context.executionId && cachedPosition && cachedRotation && cachedScaling) {\n            this.position.setValue(cachedPosition, context);\n            this.rotationQuaternion.setValue(cachedRotation, context);\n            this.scaling.setValue(cachedScaling, context);\n        } else {\n            const matrix = this.input.getValue(context);\n            const position = cachedPosition || new Vector3();\n            const rotation = cachedRotation || new Quaternion();\n            const scaling = cachedScaling || new Vector3();\n            // check matrix last column components should be 0,0,0,1\n            // round them to 4 decimal places\n            const m3 = Math.round(matrix.m[3] * 10000) / 10000;\n            const m7 = Math.round(matrix.m[7] * 10000) / 10000;\n            const m11 = Math.round(matrix.m[11] * 10000) / 10000;\n            const m15 = Math.round(matrix.m[15] * 10000) / 10000;\n            if (m3 !== 0 || m7 !== 0 || m11 !== 0 || m15 !== 1) {\n                this.isValid.setValue(false, context);\n                this.position.setValue(Vector3.Zero(), context);\n                this.rotationQuaternion.setValue(Quaternion.Identity(), context);\n                this.scaling.setValue(Vector3.One(), context);\n                return;\n            }\n            // make the checks for validity\n            const valid = matrix.decompose(scaling, rotation, position);\n            this.isValid.setValue(valid, context);\n            this.position.setValue(position, context);\n            this.rotationQuaternion.setValue(rotation, context);\n            this.scaling.setValue(scaling, context);\n            context._setExecutionVariable(this, \"cachedPosition\", position);\n            context._setExecutionVariable(this, \"cachedRotation\", rotation);\n            context._setExecutionVariable(this, \"cachedScaling\", scaling);\n            context._setExecutionVariable(this, \"executionId\", context.executionId);\n        }\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.MatrixDecompose;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.MatrixDecompose, FlowGraphMatrixDecomposeBlock);\n\n/**\n * Matrix compose block\n */\nexport class FlowGraphMatrixComposeBlock extends FlowGraphBlock {\n    /**\n     * The position input of this block\n     */\n    public readonly position: FlowGraphDataConnection<Vector3>;\n    /**\n     * The rotation input of this block\n     */\n    public readonly rotationQuaternion: FlowGraphDataConnection<Quaternion>;\n    /**\n     * The scaling input of this block\n     */\n    public readonly scaling: FlowGraphDataConnection<Vector3>;\n    /**\n     * The output of this block\n     */\n    public readonly value: FlowGraphDataConnection<Matrix>;\n\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(config);\n        this.position = this.registerDataInput(\"position\", RichTypeVector3);\n        this.rotationQuaternion = this.registerDataInput(\"rotationQuaternion\", RichTypeQuaternion);\n        this.scaling = this.registerDataInput(\"scaling\", RichTypeVector3);\n        this.value = this.registerDataOutput(\"value\", RichTypeMatrix);\n    }\n\n    public override _updateOutputs(context: FlowGraphContext) {\n        const cachedExecutionId = context._getExecutionVariable(this, \"executionId\", -1);\n        const cachedMatrix = context._getExecutionVariable(this, \"cachedMatrix\", null);\n        if (cachedExecutionId === context.executionId && cachedMatrix) {\n            this.value.setValue(cachedMatrix, context);\n        } else {\n            const matrix = Matrix.Compose(this.scaling.getValue(context), this.rotationQuaternion.getValue(context), this.position.getValue(context));\n            this.value.setValue(matrix, context);\n            context._setExecutionVariable(this, \"cachedMatrix\", matrix);\n            context._setExecutionVariable(this, \"executionId\", context.executionId);\n        }\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.MatrixCompose;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.MatrixCompose, FlowGraphMatrixComposeBlock);\n"]}