{"version":3,"file":"flowGraphTypeToTypeBlocks.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Transformers/flowGraphTypeToTypeBlocks.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,4BAA4B,EAAE,MAAM,iCAAiC,CAAC;AAC/E,OAAO,EAAE,eAAe,EAAE,wBAAwB,EAAE,cAAc,EAAE,uCAA0C;AAE9G,OAAO,EAAE,aAAa,EAAE,sCAA4B;AACpD,OAAO,EAAE,gBAAgB,EAAE,iDAAoD;AAE/E;;GAEG;AACH,MAAM,OAAO,uBAAwB,SAAQ,4BAA6C;IACtF,YAAY,MAAqC;QAC7C,KAAK,CAAC,eAAe,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,sEAAsC,MAAM,CAAC,CAAC;IAClG,CAAC;CACJ;AAED,aAAa,qEAAqC,uBAAuB,CAAC,CAAC;AAE3E;;GAEG;AACH,MAAM,OAAO,qBAAsB,SAAQ,4BAAuD;IAC9F,YAAY,MAAqC;QAC7C,KAAK,CAAC,eAAe,EAAE,wBAAwB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,kEAAoC,MAAM,CAAC,CAAC;IACtI,CAAC;CACJ;AAED,aAAa,iEAAmC,qBAAqB,CAAC,CAAC;AAEvE;;GAEG;AACH,MAAM,OAAO,uBAAwB,SAAQ,4BAA6C;IACtF,YAAY,MAAqC;QAC7C,KAAK,CAAC,cAAc,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,sEAAsC,MAAM,CAAC,CAAC;IACnG,CAAC;CACJ;AAED,aAAa,qEAAqC,uBAAuB,CAAC,CAAC;AAE3E;;GAEG;AACH,MAAM,OAAO,qBAAsB,SAAQ,4BAAuD;IAC9F,YAAY,MAAqC;QAC7C,KAAK,CAAC,wBAAwB,EAAE,eAAe,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,kEAAoC,MAAM,CAAC,CAAC;IACjH,CAAC;CACJ;AAED,aAAa,iEAAmC,qBAAqB,CAAC,CAAC;AAEvE;;GAEG;AACH,MAAM,OAAO,mBAAoB,SAAQ,4BAAsD;IAC3F,YAAY,MAAqC;QAC7C,KAAK,CAAC,wBAAwB,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,8DAAkC,MAAM,CAAC,CAAC;IAC5G,CAAC;CACJ;AAED,aAAa,6DAAiC,mBAAmB,CAAC,CAAC;AAYnE;;GAEG;AACH,MAAM,OAAO,mBAAoB,SAAQ,4BAAsD;IAC3F,YAAY,MAA0C;QAClD,KAAK,CACD,cAAc,EACd,wBAAwB,EACxB,CAAC,CAAC,EAAE,EAAE;YACF,MAAM,YAAY,GAAG,MAAM,EAAE,YAAY,CAAC;YAC1C,QAAQ,YAAY,EAAE,CAAC;gBACnB,KAAK,OAAO;oBACR,OAAO,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrD,KAAK,MAAM;oBACP,OAAO,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpD,KAAK,OAAO;oBACR,OAAO,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrD;oBACI,OAAO,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC7C,CAAC;QACL,CAAC,8DAED,MAAM,CACT,CAAC;IACN,CAAC;CACJ;AAED,aAAa,6DAAiC,mBAAmB,CAAC,CAAC","sourcesContent":["import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\nimport { RichTypeBoolean, RichTypeFlowGraphInteger, RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\n\n/**\n * A block that converts a boolean to a float.\n */\nexport class FlowGraphBooleanToFloat extends FlowGraphUnaryOperationBlock<boolean, number> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(RichTypeBoolean, RichTypeNumber, (a) => +a, FlowGraphBlockNames.BooleanToFloat, config);\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.BooleanToFloat, FlowGraphBooleanToFloat);\n\n/**\n * A block that converts a boolean to an integer\n */\nexport class FlowGraphBooleanToInt extends FlowGraphUnaryOperationBlock<boolean, FlowGraphInteger> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(RichTypeBoolean, RichTypeFlowGraphInteger, (a) => FlowGraphInteger.FromValue(+a), FlowGraphBlockNames.BooleanToInt, config);\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.BooleanToInt, FlowGraphBooleanToInt);\n\n/**\n * A block that converts a float to a boolean.\n */\nexport class FlowGraphFloatToBoolean extends FlowGraphUnaryOperationBlock<number, boolean> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(RichTypeNumber, RichTypeBoolean, (a) => !!a, FlowGraphBlockNames.FloatToBoolean, config);\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.FloatToBoolean, FlowGraphFloatToBoolean);\n\n/**\n * A block that converts an integer to a boolean.\n */\nexport class FlowGraphIntToBoolean extends FlowGraphUnaryOperationBlock<FlowGraphInteger, boolean> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(RichTypeFlowGraphInteger, RichTypeBoolean, (a) => !!a.value, FlowGraphBlockNames.IntToBoolean, config);\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.IntToBoolean, FlowGraphIntToBoolean);\n\n/**\n * A block that converts an integer to a float.\n */\nexport class FlowGraphIntToFloat extends FlowGraphUnaryOperationBlock<FlowGraphInteger, number> {\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(RichTypeFlowGraphInteger, RichTypeNumber, (a) => a.value, FlowGraphBlockNames.IntToFloat, config);\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.IntToFloat, FlowGraphIntToFloat);\n\n/**\n * Configuration for the float to int block.\n */\nexport interface IFlowGraphFloatToIntConfiguration extends IFlowGraphBlockConfiguration {\n    /**\n     * The rounding mode to use.\n     * if not defined, it will use the FlowGraphInteger default rounding ( a | 0 )\n     */\n    roundingMode?: \"floor\" | \"ceil\" | \"round\";\n}\n/**\n * A block that converts a float to an integer.\n */\nexport class FlowGraphFloatToInt extends FlowGraphUnaryOperationBlock<number, FlowGraphInteger> {\n    constructor(config?: IFlowGraphFloatToIntConfiguration) {\n        super(\n            RichTypeNumber,\n            RichTypeFlowGraphInteger,\n            (a) => {\n                const roundingMode = config?.roundingMode;\n                switch (roundingMode) {\n                    case \"floor\":\n                        return FlowGraphInteger.FromValue(Math.floor(a));\n                    case \"ceil\":\n                        return FlowGraphInteger.FromValue(Math.ceil(a));\n                    case \"round\":\n                        return FlowGraphInteger.FromValue(Math.round(a));\n                    default:\n                        return FlowGraphInteger.FromValue(a);\n                }\n            },\n            FlowGraphBlockNames.FloatToInt,\n            config\n        );\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.FloatToInt, FlowGraphFloatToInt);\n"]}