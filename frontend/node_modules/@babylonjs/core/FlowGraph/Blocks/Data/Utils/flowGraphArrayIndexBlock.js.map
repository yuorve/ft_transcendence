{"version":3,"file":"flowGraphArrayIndexBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Utils/flowGraphArrayIndexBlock.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,mCAAsC;AAG/D,OAAO,EAAE,WAAW,EAAE,uCAA0C;AAEhE,OAAO,EAAE,aAAa,EAAE,sCAA4B;AACpD,OAAO,EAAE,gBAAgB,EAAE,iDAAoD;AAE/E,OAAO,EAAE,eAAe,EAAE,0BAA6B;AAGvD;;GAEG;AACH,MAAM,OAAO,wBAAkC,SAAQ,cAAc;IAgBjE;;;OAGG;IACH,YAA4B,MAAoC;QAC5D,KAAK,CAAC,MAAM,CAAC,CAAC;QADU,WAAM,GAAN,MAAM,CAA8B;QAG5D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAC1D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,WAAW,EAAE,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IAC/D,CAAC;IAED;;OAEG;IACa,cAAc,CAAC,OAAyB;QACpD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC3C,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5D,IAAI,KAAK,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;YAC9C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;QAC/C,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACvC,CAAC;IACL,CAAC;IAED;;;OAGG;IACa,SAAS,CAAC,mBAAyB;QAC/C,KAAK,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;IACzC,CAAC;IAEe,YAAY;QACxB,uEAAsC;IAC1C,CAAC;CACJ;AAED,aAAa,kEAAiC,wBAAwB,CAAC,CAAC","sourcesContent":["import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\nimport type { FlowGraphNumber } from \"core/FlowGraph/utils\";\nimport { getNumericValue } from \"core/FlowGraph/utils\";\nimport type { Nullable } from \"core/types\";\n\n/**\n * This simple Util block takes an array as input and selects a single element from it.\n */\nexport class FlowGraphArrayIndexBlock<T = any> extends FlowGraphBlock {\n    /**\n     * Input connection: The array to select from.\n     */\n    public readonly array: FlowGraphDataConnection<T[]>;\n\n    /**\n     * Input connection: The index to select.\n     */\n    public readonly index: FlowGraphDataConnection<FlowGraphNumber>;\n\n    /**\n     * Output connection: The selected element.\n     */\n    public readonly value: FlowGraphDataConnection<Nullable<T>>;\n\n    /**\n     * Construct a FlowGraphArrayIndexBlock.\n     * @param config construction parameters\n     */\n    constructor(public override config: IFlowGraphBlockConfiguration) {\n        super(config);\n\n        this.array = this.registerDataInput(\"array\", RichTypeAny);\n        this.index = this.registerDataInput(\"index\", RichTypeAny, new FlowGraphInteger(-1));\n        this.value = this.registerDataOutput(\"value\", RichTypeAny);\n    }\n\n    /**\n     * @internal\n     */\n    public override _updateOutputs(context: FlowGraphContext): void {\n        const array = this.array.getValue(context);\n        const index = getNumericValue(this.index.getValue(context));\n        if (array && index >= 0 && index < array.length) {\n            this.value.setValue(array[index], context);\n        } else {\n            this.value.setValue(null, context);\n        }\n    }\n\n    /**\n     * Serializes this block\n     * @param serializationObject the object to serialize to\n     */\n    public override serialize(serializationObject?: any): void {\n        super.serialize(serializationObject);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.ArrayIndex;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.ArrayIndex, FlowGraphArrayIndexBlock);\n"]}