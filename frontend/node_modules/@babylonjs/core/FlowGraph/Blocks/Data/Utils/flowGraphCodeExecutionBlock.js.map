{"version":3,"file":"flowGraphCodeExecutionBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Utils/flowGraphCodeExecutionBlock.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,mCAAsC;AAE/D,OAAO,EAAE,WAAW,EAAE,uCAA0C;AAMhE;;;;GAIG;AACH,MAAM,OAAO,2BAA4B,SAAQ,cAAc;IAgB3D;;;OAGG;IACH,YAA4B,MAAoC;QAC5D,KAAK,CAAC,MAAM,CAAC,CAAC;QADU,WAAM,GAAN,MAAM,CAA8B;QAG5D,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACzE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAC1D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACa,cAAc,CAAC,OAAyB;QACpD,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACtD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC3C,IAAI,IAAI,EAAE,CAAC;YACP,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;QACxD,CAAC;IACL,CAAC;IAEe,YAAY;QACxB,6EAAyC;IAC7C,CAAC;CACJ","sourcesContent":["import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\n\nexport type CodeExecutionFunction = (value: any, context: FlowGraphContext) => any;\n\n/**\n * This block takes in a function that is defined OUTSIDE of the flow graph and executes it.\n * The function can be a normal function or an async function.\n * The function's arguments will be the value of the input connection as the first variable, and the flow graph context as the second variable.\n */\nexport class FlowGraphCodeExecutionBlock extends FlowGraphBlock {\n    /**\n     * Input connection: The function to execute.\n     */\n    public readonly executionFunction: FlowGraphDataConnection<CodeExecutionFunction>;\n\n    /**\n     * Input connection: The value to pass to the function.\n     */\n    public readonly value: FlowGraphDataConnection<any>;\n\n    /**\n     * Output connection: The result of the function.\n     */\n    public readonly result: FlowGraphDataConnection<any>;\n\n    /**\n     * Construct a FlowGraphCodeExecutionBlock.\n     * @param config construction parameters\n     */\n    constructor(public override config: IFlowGraphBlockConfiguration) {\n        super(config);\n\n        this.executionFunction = this.registerDataInput(\"function\", RichTypeAny);\n        this.value = this.registerDataInput(\"value\", RichTypeAny);\n        this.result = this.registerDataOutput(\"result\", RichTypeAny);\n    }\n\n    /**\n     * @internal\n     */\n    public override _updateOutputs(context: FlowGraphContext): void {\n        const func = this.executionFunction.getValue(context);\n        const value = this.value.getValue(context);\n        if (func) {\n            this.result.setValue(func(value, context), context);\n        }\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.CodeExecution;\n    }\n}\n"]}