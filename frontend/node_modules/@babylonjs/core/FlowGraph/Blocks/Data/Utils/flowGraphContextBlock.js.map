{"version":3,"file":"flowGraphContextBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Utils/flowGraphContextBlock.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAqC,mCAAsC;AAGlG,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,uCAA0C;AAEhF,OAAO,EAAE,aAAa,EAAE,sCAA4B;AAEpD;;GAEG;AACH,MAAM,OAAO,qBAAsB,SAAQ,cAAc;IAWrD,YAAY,MAAqC;QAC7C,KAAK,CAAC,MAAM,CAAC,CAAC;QAEd,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;IAC9E,CAAC;IAEe,cAAc,CAAC,OAAyB;QACpD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAC5D,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC5D,CAAC;IAEe,SAAS,CAAC,mBAAyB;QAC/C,KAAK,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;IACzC,CAAC;IAEe,YAAY;QACxB,iEAAmC;IACvC,CAAC;CACJ;AAED,aAAa,4DAA8B,qBAAqB,CAAC,CAAC","sourcesContent":["import { FlowGraphBlock, type IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny, RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\n\n/**\n * A block that outputs elements from the context\n */\nexport class FlowGraphContextBlock extends FlowGraphBlock {\n    /**\n     * Output connection: The user variables from the context\n     */\n    public readonly userVariables: FlowGraphDataConnection<FlowGraphContext[\"userVariables\"]>;\n\n    /**\n     * Output connection: The execution id from the context\n     */\n    public readonly executionId: FlowGraphDataConnection<FlowGraphContext[\"executionId\"]>;\n\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(config);\n\n        this.userVariables = this.registerDataOutput(\"userVariables\", RichTypeAny);\n        this.executionId = this.registerDataOutput(\"executionId\", RichTypeNumber);\n    }\n\n    public override _updateOutputs(context: FlowGraphContext): void {\n        this.userVariables.setValue(context.userVariables, context);\n        this.executionId.setValue(context.executionId, context);\n    }\n\n    public override serialize(serializationObject?: any): void {\n        super.serialize(serializationObject);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.Context;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.Context, FlowGraphContextBlock);\n"]}