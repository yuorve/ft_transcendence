{"version":3,"file":"flowGraphFunctionReferenceBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Utils/flowGraphFunctionReferenceBlock.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,mCAAsC;AAG/D,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,uCAA0C;AAChF,OAAO,EAAE,aAAa,EAAE,sCAA4B;AAGpD;;GAEG;AACH,MAAM,OAAO,+BAAgC,SAAQ,cAAc;IAoB/D;IACI;;OAEG;IACH,MAAqC;QAErC,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QAC3E,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC5D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QACpE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IACjE,CAAC;IAEe,cAAc,CAAC,OAAyB;QACpD,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7C,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACpD,IAAI,MAAM,IAAI,YAAY,EAAE,CAAC;YACzB,MAAM,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;YAClC,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE,CAAC;gBACrC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,CAAC;YAC3D,CAAC;QACL,CAAC;IACL,CAAC;IAEe,YAAY;QACxB,gFAA6C;IACjD,CAAC;CACJ;AAED,aAAa,2EAAwC,+BAA+B,CAAC,CAAC","sourcesContent":["import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny, RichTypeString } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\n\n/**\n * A flow graph block that takes a function name, an object and an optional context as inputs and calls the function on the object.\n */\nexport class FlowGraphFunctionReferenceBlock extends FlowGraphBlock {\n    /**\n     * Input: The function name.\n     */\n    public readonly functionName: FlowGraphDataConnection<string>;\n    /**\n     * Input: The object to get the function from.\n     * This can be a constructed class or a collection of stand-alone functions.\n     */\n    public readonly object: FlowGraphDataConnection<any>;\n    /**\n     * Input: The context to call the function with.\n     * This is optional. If not provided, the function will be bound to null.\n     */\n    public readonly context: FlowGraphDataConnection<any>;\n    /**\n     * Output: The function referenced by functionName from the object, bound to the context.\n     */\n    public readonly output: FlowGraphDataConnection<Function>;\n\n    constructor(\n        /**\n         * the configuration of the block\n         */\n        config?: IFlowGraphBlockConfiguration\n    ) {\n        super(config);\n        this.functionName = this.registerDataInput(\"functionName\", RichTypeString);\n        this.object = this.registerDataInput(\"object\", RichTypeAny);\n        this.context = this.registerDataInput(\"context\", RichTypeAny, null);\n        this.output = this.registerDataOutput(\"output\", RichTypeAny);\n    }\n\n    public override _updateOutputs(context: FlowGraphContext) {\n        const functionName = this.functionName.getValue(context);\n        const object = this.object.getValue(context);\n        const contextValue = this.context.getValue(context);\n        if (object && functionName) {\n            const func = object[functionName];\n            if (func && typeof func === \"function\") {\n                this.output.setValue(func.bind(contextValue), context);\n            }\n        }\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.FunctionReference;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.FunctionReference, FlowGraphFunctionReferenceBlock);\n"]}