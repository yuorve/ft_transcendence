{"version":3,"file":"flowGraphGetAssetBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphGetAssetBlock.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,yBAAyB,EAAE,wCAA8C;AAElF,OAAO,EAAE,cAAc,EAAE,gCAAsC;AAG/D,OAAO,EAAE,WAAW,EAAE,oCAA0C;AAGhE,OAAO,EAAE,aAAa,EAAE,mCAA4B;AACpD,OAAO,EAAE,gBAAgB,EAAE,8CAAoD;AAE/E,OAAO,EAAE,eAAe,EAAE,uBAA6B;AAuBvD;;;;;GAKG;AACH,MAAM,OAAO,sBAAqD,SAAQ,cAAc;IAgBpF;IACI;;OAEG;IACa,MAA+C;QAE/D,KAAK,CAAC,MAAM,CAAC,CAAC;QAFE,WAAM,GAAN,MAAM,CAAyC;QAG/D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAC3D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,WAAW,EAAE,IAAI,gBAAgB,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzH,CAAC;IAEe,cAAc,CAAC,OAAyB;QACpD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC3C,iCAAiC;QACjC,MAAM,KAAK,GAAG,yBAAyB,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,EAAE,eAAe,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAC7H,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED;;;OAGG;IACa,YAAY;QACxB,mEAAoC;IACxC,CAAC;CACJ;AAED,aAAa,8DAA+B,sBAAsB,CAAC,CAAC","sourcesContent":["import type { AssetType, FlowGraphAssetType } from \"core/FlowGraph/flowGraphAssetsContext\";\nimport { GetFlowGraphAssetWithType } from \"core/FlowGraph/flowGraphAssetsContext\";\nimport type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\nimport type { Nullable } from \"core/types\";\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\nimport type { FlowGraphNumber } from \"core/FlowGraph/utils\";\nimport { getNumericValue } from \"core/FlowGraph/utils\";\n\n/**\n * Configuration for the get asset block.\n */\nexport interface IFlowGraphGetAssetBlockConfiguration<T> extends IFlowGraphBlockConfiguration {\n    /**\n     * The type of the asset that will be retrieved.\n     */\n    type: T;\n    /**\n     * The index of the asset in the corresponding array in the assets context.\n     * If not provided you can still change it using the input connection.\n     */\n    index?: number | FlowGraphInteger;\n\n    /**\n     * If set to true, instead of the index in the array it will search for the unique id of the asset.\n     * The value of index will be used as the unique id.\n     */\n    useIndexAsUniqueId?: boolean;\n}\n\n/**\n * A block that will deliver an asset as an output, based on its type and place in the assets index.\n *\n * The assets are loaded from the assetsContext defined in the context running this block. The assetsContext is a class extending AbstractClass,\n * meaning it can be a Scene, an AssetsContainers, and any other class that extends AbstractClass.\n */\nexport class FlowGraphGetAssetBlock<T extends FlowGraphAssetType> extends FlowGraphBlock {\n    /**\n     * Output connection: The value of the property.\n     */\n    public readonly value: FlowGraphDataConnection<Nullable<AssetType<T>>>;\n\n    /**\n     * Input connection: The type of the asset.\n     */\n    public readonly type: FlowGraphDataConnection<T>;\n\n    /**\n     * Input connection: The index of the asset in the corresponding array in the assets context.\n     */\n    public readonly index: FlowGraphDataConnection<FlowGraphNumber>;\n\n    public constructor(\n        /**\n         * the configuration of the block\n         */\n        public override config: IFlowGraphGetAssetBlockConfiguration<T>\n    ) {\n        super(config);\n        this.type = this.registerDataInput(\"type\", RichTypeAny, config.type);\n        this.value = this.registerDataOutput(\"value\", RichTypeAny);\n        this.index = this.registerDataInput(\"index\", RichTypeAny, new FlowGraphInteger(getNumericValue(config.index ?? -1)));\n    }\n\n    public override _updateOutputs(context: FlowGraphContext): void {\n        const type = this.type.getValue(context);\n        const index = this.index.getValue(context);\n        // get the asset from the context\n        const asset = GetFlowGraphAssetWithType(context.assetsContext, type, getNumericValue(index), this.config.useIndexAsUniqueId);\n        this.value.setValue(asset, context);\n    }\n\n    /**\n     * Gets the class name of this block\n     * @returns the class name\n     */\n    public override getClassName(): string {\n        return FlowGraphBlockNames.GetAsset;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.GetAsset, FlowGraphGetAssetBlock);\n"]}