{"version":3,"file":"flowGraphGetVariableBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphGetVariableBlock.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAEtD,OAAO,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAC;AACvD,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAkBxD;;;GAGG;AACH,MAAM,OAAO,yBAA6B,SAAQ,cAAc;IAM5D;;;OAGG;IACH,YAA4B,MAAkD;QAC1E,KAAK,CAAC,MAAM,CAAC,CAAC;QADU,WAAM,GAAN,MAAM,CAA4C;QAG1E,8DAA8D;QAC9D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;IACpF,CAAC;IAED;;OAEG;IACa,cAAc,CAAC,OAAyB;QACpD,MAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC/C,IAAI,OAAO,CAAC,WAAW,CAAC,iBAAiB,CAAC,EAAE,CAAC;YACzC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,iBAAiB,CAAC,EAAE,OAAO,CAAC,CAAC;QACzE,CAAC;IACL,CAAC;IAED;;;OAGG;IACa,SAAS,CAAC,mBAAyB;QAC/C,KAAK,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACrC,mBAAmB,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC/D,CAAC;IAEe,YAAY;QACxB,yEAAuC;IAC3C,CAAC;CACJ;AAED,aAAa,oEAAkC,yBAAyB,CAAC,CAAC","sourcesContent":["import type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../flowGraphBlock\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { RichTypeAny } from \"../../flowGraphRichTypes\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\r\n\r\n/**\r\n * The configuration of the FlowGraphGetVariableBlock.\r\n */\r\nexport interface IFlowGraphGetVariableBlockConfiguration<T> extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The name of the variable to get.\r\n     */\r\n    variable: string;\r\n\r\n    /**\r\n     * The initial value of the variable.\r\n     */\r\n    initialValue?: T;\r\n}\r\n\r\n/**\r\n * A block that gets the value of a variable.\r\n * Variables are an stored in the context of the flow graph.\r\n */\r\nexport class FlowGraphGetVariableBlock<T> extends FlowGraphBlock {\r\n    /**\r\n     * Output connection: The value of the variable.\r\n     */\r\n    public readonly value: FlowGraphDataConnection<T>;\r\n\r\n    /**\r\n     * Construct a FlowGraphGetVariableBlock.\r\n     * @param config construction parameters\r\n     */\r\n    constructor(public override config: IFlowGraphGetVariableBlockConfiguration<T>) {\r\n        super(config);\r\n\r\n        // The output connection has to have the name of the variable.\r\n        this.value = this.registerDataOutput(\"value\", RichTypeAny, config.initialValue);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _updateOutputs(context: FlowGraphContext): void {\r\n        const variableNameValue = this.config.variable;\r\n        if (context.hasVariable(variableNameValue)) {\r\n            this.value.setValue(context.getVariable(variableNameValue), context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes this block\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public override serialize(serializationObject?: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.config.variable = this.config.variable;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.GetVariable;\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.GetVariable, FlowGraphGetVariableBlock);\r\n"]}