{"version":3,"file":"flowGraphMeshPickEventBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphMeshPickEventBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AbstractMesh } from \"../../../Meshes/abstractMesh\";\r\nimport { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport type { PointerInfo } from \"../../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../../Events/pointerEvents\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { _isADescendantOf } from \"../../utils\";\r\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\r\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\r\nimport { RichTypeAny, RichTypeNumber, RichTypeVector3 } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport { FlowGraphEventType } from \"core/FlowGraph/flowGraphEventType\";\r\n/**\r\n * Configuration for the mesh pick event block.\r\n */\r\nexport interface IFlowGraphMeshPickEventBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * Should this mesh block propagation of the event.\r\n     */\r\n    stopPropagation?: boolean;\r\n\r\n    /**\r\n     * The mesh to listen to. Can also be set by the asset input.\r\n     */\r\n    targetMesh?: AbstractMesh;\r\n}\r\n/**\r\n * A block that activates when a mesh is picked.\r\n */\r\nexport class FlowGraphMeshPickEventBlock extends FlowGraphEventBlock {\r\n    /**\r\n     * Input connection: The mesh to listen to.\r\n     */\r\n    public readonly asset: FlowGraphDataConnection<AbstractMesh>;\r\n\r\n    /**\r\n     * Output connection: The picked point.\r\n     */\r\n    public readonly pickedPoint: FlowGraphDataConnection<Vector3>;\r\n\r\n    /**\r\n     * Output connection: The picked origin.\r\n     */\r\n    public readonly pickOrigin: FlowGraphDataConnection<Vector3>;\r\n\r\n    /**\r\n     * Output connection: The pointer id.\r\n     */\r\n    public readonly pointerId: FlowGraphDataConnection<number>;\r\n\r\n    /**\r\n     * Output connection: The picked mesh. Possibly NOT the same as the asset (could be a descendant).\r\n     */\r\n    public readonly pickedMesh: FlowGraphDataConnection<AbstractMesh>;\r\n\r\n    /**\r\n     * Input connection: The type of the pointer event.\r\n     */\r\n    public readonly pointerType: FlowGraphDataConnection<PointerEventTypes>;\r\n\r\n    /**\r\n     * the type of the event this block reacts to\r\n     */\r\n    public override readonly type: FlowGraphEventType = FlowGraphEventType.MeshPick;\r\n\r\n    public constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public override config?: IFlowGraphMeshPickEventBlockConfiguration\r\n    ) {\r\n        super(config);\r\n        this.asset = this.registerDataInput(\"asset\", RichTypeAny, config?.targetMesh);\r\n        this.pickedPoint = this.registerDataOutput(\"pickedPoint\", RichTypeVector3);\r\n        this.pickOrigin = this.registerDataOutput(\"pickOrigin\", RichTypeVector3);\r\n        this.pointerId = this.registerDataOutput(\"pointerId\", RichTypeNumber);\r\n        this.pickedMesh = this.registerDataOutput(\"pickedMesh\", RichTypeAny);\r\n        this.pointerType = this.registerDataInput(\"pointerType\", RichTypeAny, PointerEventTypes.POINTERPICK);\r\n    }\r\n\r\n    public _getReferencedMesh(context: FlowGraphContext): AbstractMesh {\r\n        return this.asset.getValue(context) as AbstractMesh;\r\n    }\r\n\r\n    public override _executeEvent(context: FlowGraphContext, pickedInfo: PointerInfo): boolean {\r\n        // get the pointer type\r\n        const pointerType = this.pointerType.getValue(context);\r\n        if (pointerType !== pickedInfo.type) {\r\n            // returning true here to continue the propagation of the pointer event to the rest of the blocks\r\n            return true;\r\n        }\r\n        // check if the mesh is the picked mesh or a descendant\r\n        const mesh = this._getReferencedMesh(context);\r\n        if (mesh && pickedInfo.pickInfo?.pickedMesh && (pickedInfo.pickInfo?.pickedMesh === mesh || _isADescendantOf(pickedInfo.pickInfo?.pickedMesh, mesh))) {\r\n            this.pointerId.setValue((pickedInfo.event as PointerEvent).pointerId, context);\r\n            this.pickOrigin.setValue(pickedInfo.pickInfo.ray?.origin!, context);\r\n            this.pickedPoint.setValue(pickedInfo.pickInfo.pickedPoint!, context);\r\n            this.pickedMesh.setValue(pickedInfo.pickInfo.pickedMesh, context);\r\n            this._execute(context);\r\n            // stop the propagation if the configuration says so\r\n            return !this.config?.stopPropagation;\r\n        } else {\r\n            // reset the outputs\r\n            this.pointerId.resetToDefaultValue(context);\r\n            this.pickOrigin.resetToDefaultValue(context);\r\n            this.pickedPoint.resetToDefaultValue(context);\r\n            this.pickedMesh.resetToDefaultValue(context);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preparePendingTasks(_context: FlowGraphContext): void {\r\n        // no-op\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cancelPendingTasks(_context: FlowGraphContext): void {\r\n        // no-op\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.MeshPickEvent;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.MeshPickEvent, FlowGraphMeshPickEventBlock);\r\n"]}