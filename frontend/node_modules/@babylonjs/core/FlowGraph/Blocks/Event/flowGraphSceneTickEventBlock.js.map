{"version":3,"file":"flowGraphSceneTickEventBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphSceneTickEventBlock.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAEhE,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACxD,OAAO,EAAE,cAAc,EAAE,oCAA0C;AAmBnE;;GAEG;AACH,MAAM,OAAO,4BAA6B,SAAQ,mBAAmB;IAajE;QACI,KAAK,EAAE,CAAC;QAHa,SAAI,kEAA4D;QAIrF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;QAChF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACa,oBAAoB,CAAC,QAA0B;QAC3D,QAAQ;IACZ,CAAC;IAED;;OAEG;IACa,aAAa,CAAC,OAAyB,EAAE,OAAqC;QAC1F,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QAC9D,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACpD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,mBAAmB,CAAC,QAA0B;QACjD,QAAQ;IACZ,CAAC;IAED;;OAEG;IACa,YAAY;QACxB,+EAA0C;IAC9C,CAAC;CACJ;AACD,aAAa,0EAAqC,4BAA4B,CAAC,CAAC","sourcesContent":["import { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\r\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\r\nimport { FlowGraphEventType } from \"core/FlowGraph/flowGraphEventType\";\r\n\r\n/**\r\n * Payload for the scene tick event.\r\n */\r\nexport interface IFlowGraphOnTickEventPayload {\r\n    /**\r\n     * the time in seconds since the scene started.\r\n     */\r\n    timeSinceStart: number;\r\n    /**\r\n     * the time in seconds since the last frame.\r\n     */\r\n    deltaTime: number;\r\n}\r\n\r\n/**\r\n * Block that triggers on scene tick (before each render).\r\n */\r\nexport class FlowGraphSceneTickEventBlock extends FlowGraphEventBlock {\r\n    /**\r\n     * the time in seconds since the scene started.\r\n     */\r\n    public readonly timeSinceStart: FlowGraphDataConnection<number>;\r\n\r\n    /**\r\n     * the time in seconds since the last frame.\r\n     */\r\n    public readonly deltaTime: FlowGraphDataConnection<number>;\r\n\r\n    public override readonly type: FlowGraphEventType = FlowGraphEventType.SceneBeforeRender;\r\n\r\n    constructor() {\r\n        super();\r\n        this.timeSinceStart = this.registerDataOutput(\"timeSinceStart\", RichTypeNumber);\r\n        this.deltaTime = this.registerDataOutput(\"deltaTime\", RichTypeNumber);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _preparePendingTasks(_context: FlowGraphContext): void {\r\n        // no-op\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _executeEvent(context: FlowGraphContext, payload: IFlowGraphOnTickEventPayload): boolean {\r\n        this.timeSinceStart.setValue(payload.timeSinceStart, context);\r\n        this.deltaTime.setValue(payload.deltaTime, context);\r\n        this._execute(context);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cancelPendingTasks(_context: FlowGraphContext) {\r\n        // no-op\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.SceneTickEvent;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.SceneTickEvent, FlowGraphSceneTickEventBlock);\r\n"]}