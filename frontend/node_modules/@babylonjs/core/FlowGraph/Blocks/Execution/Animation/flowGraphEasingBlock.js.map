{"version":3,"file":"flowGraphEasingBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/Animation/flowGraphEasingBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import type { EasingFunction } from \"core/Animations/easing\";\nimport { BackEase, BezierCurveEase, BounceEase, CircleEase, CubicEase, ElasticEase, ExponentialEase } from \"core/Animations/easing\";\nimport type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport { RichTypeAny, RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\n\n/**\n * The type of the easing function.\n */\nexport const enum EasingFunctionType {\n    CircleEase = 0,\n    BackEase = 1,\n    BounceEase = 2,\n    CubicEase = 3,\n    ElasticEase = 4,\n    ExponentialEase = 5,\n    PowerEase = 6,\n    QuadraticEase = 7,\n    QuarticEase = 8,\n    QuinticEase = 9,\n    SineEase = 10,\n    BezierCurveEase = 11,\n}\n\n/**\n * @internal\n * Creates an easing function object based on the type and parameters provided.\n * This is not tree-shaking friendly, so if you need cubic bezier, use the dedicated bezier block.\n * @param type The type of the easing function.\n * @param controlPoint1 The first control point for the bezier curve.\n * @param controlPoint2 The second control point for the bezier curve.\n * @returns The easing function object.\n */\nfunction CreateEasingFunction(type: EasingFunctionType, ...parameters: number[]): EasingFunction {\n    switch (type) {\n        case EasingFunctionType.BezierCurveEase:\n            return new BezierCurveEase(...parameters);\n        case EasingFunctionType.CircleEase:\n            return new CircleEase();\n        case EasingFunctionType.BackEase:\n            return new BackEase(...parameters);\n        case EasingFunctionType.BounceEase:\n            return new BounceEase(...parameters);\n        case EasingFunctionType.CubicEase:\n            return new CubicEase();\n        case EasingFunctionType.ElasticEase:\n            return new ElasticEase(...parameters);\n        case EasingFunctionType.ExponentialEase:\n            return new ExponentialEase(...parameters);\n        default:\n            throw new Error(\"Easing type not yet implemented\");\n    }\n}\n\n/**\n * An easing block that generates an easingFunction object based on the data provided.\n */\nexport class FlowGraphEasingBlock extends FlowGraphBlock {\n    /**\n     * Input connection: The type of the easing function.\n     */\n    public readonly type: FlowGraphDataConnection<EasingFunctionType>;\n\n    /**\n     * Input connection: The mode of the easing function.\n     * EasingFunction.EASINGMODE_EASEIN, EasingFunction.EASINGMODE_EASEOUT, EasingFunction.EASINGMODE_EASEINOUT\n     */\n    public readonly mode: FlowGraphDataConnection<number>;\n\n    /**\n     * Input connection:parameters for easing. for example control points for BezierCurveEase.\n     */\n    public readonly parameters: FlowGraphDataConnection<number[]>;\n\n    /**\n     * Output connection: The easing function object.\n     */\n    public readonly easingFunction: FlowGraphDataConnection<EasingFunction>;\n\n    /**\n     * Internal cache of reusable easing functions.\n     * key is type-mode-properties\n     */\n    private _easingFunctions: { [key: string]: EasingFunction } = {};\n\n    constructor(\n        /**\n         * the configuration of the block\n         */\n        public override config?: IFlowGraphBlockConfiguration\n    ) {\n        super(config);\n\n        this.type = this.registerDataInput(\"type\", RichTypeAny, 11);\n        this.mode = this.registerDataInput(\"mode\", RichTypeNumber, 0);\n        this.parameters = this.registerDataInput(\"parameters\", RichTypeAny, [1, 0, 0, 1]);\n\n        this.easingFunction = this.registerDataOutput(\"easingFunction\", RichTypeAny);\n    }\n\n    public override _updateOutputs(context: FlowGraphContext) {\n        const type = this.type.getValue(context);\n        const mode = this.mode.getValue(context);\n        const parameters = this.parameters.getValue(context);\n\n        if (type === undefined || mode === undefined) {\n            return;\n        }\n\n        const key = `${type}-${mode}-${parameters.join(\"-\")}`;\n        if (!this._easingFunctions[key]) {\n            const easing = CreateEasingFunction(type, ...parameters);\n            easing.setEasingMode(mode);\n            this._easingFunctions[key] = easing;\n        }\n        this.easingFunction.setValue(this._easingFunctions[key], context);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.Easing;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.Easing, FlowGraphEasingBlock);\n"]}