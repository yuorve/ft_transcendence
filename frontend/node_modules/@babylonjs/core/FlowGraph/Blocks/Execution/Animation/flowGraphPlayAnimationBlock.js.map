{"version":3,"file":"flowGraphPlayAnimationBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/Animation/flowGraphPlayAnimationBlock.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,4BAA4B,EAAE,MAAM,uCAAuC,CAAC;AACrF,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,eAAe,EAAE,MAAM,6BAA6B,CAAC;AAC3F,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAE3D,OAAO,EAAE,cAAc,EAAE,iDAAuC;AAIhE;;;GAGG;AACH,MAAM,OAAO,2BAA4B,SAAQ,4BAA4B;IAiDzE;IACI;;OAEG;IACa,MAAqC;QAErD,KAAK,CAAC,MAAM,EAAE,CAAC,eAAe,EAAE,cAAc,EAAE,oBAAoB,CAAC,CAAC,CAAC;QAFvD,WAAM,GAAN,MAAM,CAA+B;QAIrD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QAC7D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;QAC5D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAEvD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;QAE1E,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,EAAE,WAAW,CAAC,CAAC;QAC3F,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,WAAW,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;QACpG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QAClE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAChE,CAAC;IAED;;;OAGG;IACI,oBAAoB,CAAC,OAAyB;QACjD,MAAM,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACnD,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;YACpB,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,0CAA0C,CAAC,CAAC;QAClF,CAAC;aAAM,CAAC;YACJ,6EAA6E;YAC7E,MAAM,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC3E,IAAI,qBAAqB,IAAI,qBAAqB,KAAK,EAAE,EAAE,CAAC;gBACxD,qBAAqB,CAAC,OAAO,EAAE,CAAC;YACpC,CAAC;YACD,IAAI,mBAAmB,GAAG,EAAE,CAAC;YAC7B,kHAAkH;YAClH,IAAI,SAAS,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBACpC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAC7C,IAAI,CAAC,MAAM,EAAE,CAAC;oBACV,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,2BAA2B,CAAC,CAAC;gBACnE,CAAC;gBACD,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;gBAC3E,MAAM,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBACrC,mBAAmB,GAAG,IAAI,cAAc,CAAC,0BAA0B,GAAG,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC7H,IAAI,eAAe,GAAG,KAAK,CAAC;gBAC5B,MAAM,uBAAuB,GAAG,OAAO,CAAC,yBAAyB,CAAC,yBAAyB,EAAE,EAAE,CAAa,CAAC;gBAC7G,KAAK,MAAM,IAAI,IAAI,eAAe,EAAE,CAAC;oBACjC,mBAAmB,CAAC,oBAAoB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;oBACvD,IAAI,uBAAuB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;wBACxD,eAAe,GAAG,IAAI,CAAC;oBAC3B,CAAC;gBACL,CAAC;gBAED,IAAI,eAAe,EAAE,CAAC;oBAClB,IAAI,CAAC,+BAA+B,CAAC,OAAO,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;gBAC3E,CAAC;YACL,CAAC;YACD,kBAAkB;YAClB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC9C,kBAAkB;YAClB,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,mBAAmB,CAAC,EAAE,CAAC;YAC/D,MAAM,IAAI,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC1D,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;YAElE,MAAM,+BAA+B,GAAG,OAAO,CAAC,yBAAyB,CAAC,iCAAiC,EAAE,EAAE,CAAa,CAAC;YAC7H,8BAA8B;YAC9B,IAAI,+BAA+B,CAAC,OAAO,CAAC,mBAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;gBAC/E,mBAAmB,CAAC,IAAI,EAAE,CAAC;YAC/B,CAAC;YACD,IAAI,CAAC;gBACD,mBAAmB,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;gBACjD,mBAAmB,CAAC,6BAA6B,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;gBAChG,mBAAmB,CAAC,wBAAwB,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC3H,mBAAmB,CAAC,yBAAyB,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC7H,mBAAmB,CAAC,8BAA8B,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;gBACvI,+BAA+B,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;gBACnE,OAAO,CAAC,yBAAyB,CAAC,iCAAiC,EAAE,+BAA+B,CAAC,CAAC;YAC1G,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACT,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YAClC,CAAC;QACL,CAAC;IACL,CAAC;IAEkB,YAAY,CAAC,OAAyB,EAAE,KAAqB;QAC5E,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACa,cAAc,CAAC,QAA0B;QACrD,MAAM,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACzD,IAAI,EAAE,EAAE,CAAC;YACL,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,eAAe,EAAE,EAAE,QAAQ,CAAC,CAAC;YAC3D,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,IAAI,CAAC,EAAE,QAAQ,CAAC,CAAC;QAC7E,CAAC;IACL,CAAC;IAEM,QAAQ,CAAC,OAAyB;QACrC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAEO,oBAAoB,CAAC,OAAyB;QAClD,IAAI,CAAC,2BAA2B,CAAC,OAAO,EAAE,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QACxF,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACK,+BAA+B,CAAC,OAAyB,EAAE,SAAsB,EAAE,MAAW;QAClG,MAAM,+BAA+B,GAAG,OAAO,CAAC,yBAAyB,CAAC,iCAAiC,EAAE,EAAE,CAAa,CAAC;QAC7H,KAAK,MAAM,QAAQ,IAAI,+BAA+B,EAAE,CAAC;YACrD,MAAM,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;YACxF,IAAI,EAAE,EAAE,CAAC;gBACL,KAAK,MAAM,IAAI,IAAI,EAAE,CAAC,kBAAkB,EAAE,CAAC;oBACvC,KAAK,MAAM,WAAW,IAAI,SAAS,EAAE,CAAC;wBAClC,IAAI,IAAI,CAAC,SAAS,CAAC,cAAc,KAAK,WAAW,CAAC,cAAc,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;4BACzF,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;wBAC1C,CAAC;oBACL,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAEO,mBAAmB,CAAC,OAAyB,EAAE,cAA8B;QACjF,gFAAgF;QAChF,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,cAAc,CAAC,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC,2BAA2B,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IAC9D,CAAC;IAEO,2BAA2B,CAAC,OAAyB,EAAE,cAA8B;QACzF,MAAM,+BAA+B,GAAG,OAAO,CAAC,yBAAyB,CAAC,iCAAiC,EAAE,EAAE,CAAa,CAAC;QAC7H,MAAM,GAAG,GAAG,+BAA+B,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC7E,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC;YACb,+BAA+B,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAC/C,OAAO,CAAC,yBAAyB,CAAC,iCAAiC,EAAE,+BAA+B,CAAC,CAAC;QAC1G,CAAC;IACL,CAAC;IAED;;;OAGG;IACI,mBAAmB,CAAC,OAAyB;QAChD,MAAM,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACxD,IAAI,EAAE,EAAE,CAAC;YACL,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC1C,CAAC;IACL,CAAC;IAED;;OAEG;IACa,YAAY;QACxB,6EAAyC;IAC7C,CAAC;CACJ;AAED,aAAa,wEAAoC,2BAA2B,CAAC,CAAC","sourcesContent":["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphAsyncExecutionBlock } from \"../../../flowGraphAsyncExecutionBlock\";\r\nimport { RichTypeAny, RichTypeNumber, RichTypeBoolean } from \"../../../flowGraphRichTypes\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\n\r\n/**\r\n * @experimental\r\n * A block that plays an animation on an animatable object.\r\n */\r\nexport class FlowGraphPlayAnimationBlock extends FlowGraphAsyncExecutionBlock {\r\n    /**\r\n     * Input connection: The speed of the animation.\r\n     */\r\n    public readonly speed: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: Should the animation loop?\r\n     * Not in glTF specs, but useful for the engine.\r\n     */\r\n    public readonly loop: FlowGraphDataConnection<boolean>;\r\n    /**\r\n     * Input connection: The starting frame of the animation.\r\n     */\r\n    public readonly from: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The ending frame of the animation.\r\n     */\r\n    public readonly to: FlowGraphDataConnection<number>;\r\n\r\n    /**\r\n     * Output connection: The current frame of the animation.\r\n     */\r\n    public readonly currentFrame: FlowGraphDataConnection<number>;\r\n\r\n    /**\r\n     * Output connection: The current time of the animation.\r\n     */\r\n    public readonly currentTime: FlowGraphDataConnection<number>;\r\n\r\n    /**\r\n     * Output connection: The animatable that is currently running.\r\n     */\r\n    public readonly currentAnimationGroup: FlowGraphDataConnection<AnimationGroup>;\r\n\r\n    /**\r\n     * Input: Will be initialized if no animation group was provided in the configuration.\r\n     */\r\n    public readonly animationGroup: FlowGraphDataConnection<AnimationGroup>;\r\n\r\n    /**\r\n     * Input: If provided this animation will be used. Priority will be given to the animation group input.\r\n     */\r\n    public readonly animation: FlowGraphDataConnection<Animation | Animation[]>;\r\n\r\n    /**\r\n     * Input connection: The target object that will be animated. If animation group is provided this input will be ignored.\r\n     */\r\n    public readonly object: FlowGraphDataConnection<any>;\r\n\r\n    public constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public override config?: IFlowGraphBlockConfiguration\r\n    ) {\r\n        super(config, [\"animationLoop\", \"animationEnd\", \"animationGroupLoop\"]);\r\n\r\n        this.speed = this.registerDataInput(\"speed\", RichTypeNumber);\r\n        this.loop = this.registerDataInput(\"loop\", RichTypeBoolean);\r\n        this.from = this.registerDataInput(\"from\", RichTypeNumber, 0);\r\n        this.to = this.registerDataInput(\"to\", RichTypeNumber);\r\n\r\n        this.currentFrame = this.registerDataOutput(\"currentFrame\", RichTypeNumber);\r\n        this.currentTime = this.registerDataOutput(\"currentTime\", RichTypeNumber);\r\n\r\n        this.currentAnimationGroup = this.registerDataOutput(\"currentAnimationGroup\", RichTypeAny);\r\n        this.animationGroup = this.registerDataInput(\"animationGroup\", RichTypeAny, config?.animationGroup);\r\n        this.animation = this.registerDataInput(\"animation\", RichTypeAny);\r\n        this.object = this.registerDataInput(\"object\", RichTypeAny);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param context\r\n     */\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        const ag = this.animationGroup.getValue(context);\r\n        const animation = this.animation.getValue(context);\r\n        if (!ag && !animation) {\r\n            return this._reportError(context, \"No animation or animation group provided\");\r\n        } else {\r\n            // if an animation group was already created, dispose it and create a new one\r\n            const currentAnimationGroup = this.currentAnimationGroup.getValue(context);\r\n            if (currentAnimationGroup && currentAnimationGroup !== ag) {\r\n                currentAnimationGroup.dispose();\r\n            }\r\n            let animationGroupToUse = ag;\r\n            // check which animation to use. If no animationGroup was defined and an animation was provided, use the animation\r\n            if (animation && !animationGroupToUse) {\r\n                const target = this.object.getValue(context);\r\n                if (!target) {\r\n                    return this._reportError(context, \"No target object provided\");\r\n                }\r\n                const animationsArray = Array.isArray(animation) ? animation : [animation];\r\n                const name = animationsArray[0].name;\r\n                animationGroupToUse = new AnimationGroup(\"flowGraphAnimationGroup-\" + name + \"-\" + target.name, context.configuration.scene);\r\n                let isInterpolation = false;\r\n                const interpolationAnimations = context._getGlobalContextVariable(\"interpolationAnimations\", []) as number[];\r\n                for (const anim of animationsArray) {\r\n                    animationGroupToUse.addTargetedAnimation(anim, target);\r\n                    if (interpolationAnimations.indexOf(anim.uniqueId) !== -1) {\r\n                        isInterpolation = true;\r\n                    }\r\n                }\r\n\r\n                if (isInterpolation) {\r\n                    this._checkInterpolationDuplications(context, animationsArray, target);\r\n                }\r\n            }\r\n            // not accepting 0\r\n            const speed = this.speed.getValue(context) || 1;\r\n            const from = this.from.getValue(context) ?? 0;\r\n            // not accepting 0\r\n            const to = this.to.getValue(context) || animationGroupToUse.to;\r\n            const loop = !isFinite(to) || this.loop.getValue(context);\r\n            this.currentAnimationGroup.setValue(animationGroupToUse, context);\r\n\r\n            const currentlyRunningAnimationGroups = context._getGlobalContextVariable(\"currentlyRunningAnimationGroups\", []) as number[];\r\n            // check if it already running\r\n            if (currentlyRunningAnimationGroups.indexOf(animationGroupToUse.uniqueId) !== -1) {\r\n                animationGroupToUse.stop();\r\n            }\r\n            try {\r\n                animationGroupToUse.start(loop, speed, from, to);\r\n                animationGroupToUse.onAnimationGroupEndObservable.add(() => this._onAnimationGroupEnd(context));\r\n                animationGroupToUse.onAnimationEndObservable.add(() => this._eventsSignalOutputs[\"animationEnd\"]._activateSignal(context));\r\n                animationGroupToUse.onAnimationLoopObservable.add(() => this._eventsSignalOutputs[\"animationLoop\"]._activateSignal(context));\r\n                animationGroupToUse.onAnimationGroupLoopObservable.add(() => this._eventsSignalOutputs[\"animationGroupLoop\"]._activateSignal(context));\r\n                currentlyRunningAnimationGroups.push(animationGroupToUse.uniqueId);\r\n                context._setGlobalContextVariable(\"currentlyRunningAnimationGroups\", currentlyRunningAnimationGroups);\r\n            } catch (e) {\r\n                this._reportError(context, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected override _reportError(context: FlowGraphContext, error: string | Error): void {\r\n        super._reportError(context, error);\r\n        this.currentFrame.setValue(-1, context);\r\n        this.currentTime.setValue(-1, context);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _executeOnTick(_context: FlowGraphContext): void {\r\n        const ag = this.currentAnimationGroup.getValue(_context);\r\n        if (ag) {\r\n            this.currentFrame.setValue(ag.getCurrentFrame(), _context);\r\n            this.currentTime.setValue(ag.animatables[0]?.elapsedTime ?? 0, _context);\r\n        }\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        this._startPendingTasks(context);\r\n    }\r\n\r\n    private _onAnimationGroupEnd(context: FlowGraphContext) {\r\n        this._removeFromCurrentlyRunning(context, this.currentAnimationGroup.getValue(context));\r\n        this._resetAfterCanceled(context);\r\n        this.done._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * The idea behind this function is to check every running animation group and check if the targeted animations it uses are interpolation animations.\r\n     * If they are, we want to see that they don't collide with the current interpolation animations that are starting to play.\r\n     * If they do, we want to stop the already-running animation group.\r\n     * @internal\r\n     */\r\n    private _checkInterpolationDuplications(context: FlowGraphContext, animation: Animation[], target: any) {\r\n        const currentlyRunningAnimationGroups = context._getGlobalContextVariable(\"currentlyRunningAnimationGroups\", []) as number[];\r\n        for (const uniqueId of currentlyRunningAnimationGroups) {\r\n            const ag = context.assetsContext.animationGroups.find((ag) => ag.uniqueId === uniqueId);\r\n            if (ag) {\r\n                for (const anim of ag.targetedAnimations) {\r\n                    for (const animToCheck of animation) {\r\n                        if (anim.animation.targetProperty === animToCheck.targetProperty && anim.target === target) {\r\n                            this._stopAnimationGroup(context, ag);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _stopAnimationGroup(context: FlowGraphContext, animationGroup: AnimationGroup) {\r\n        // stop, while skipping the on AnimationEndObservable to avoid the \"done\" signal\r\n        animationGroup.stop(true);\r\n        animationGroup.dispose();\r\n        this._removeFromCurrentlyRunning(context, animationGroup);\r\n    }\r\n\r\n    private _removeFromCurrentlyRunning(context: FlowGraphContext, animationGroup: AnimationGroup) {\r\n        const currentlyRunningAnimationGroups = context._getGlobalContextVariable(\"currentlyRunningAnimationGroups\", []) as number[];\r\n        const idx = currentlyRunningAnimationGroups.indexOf(animationGroup.uniqueId);\r\n        if (idx !== -1) {\r\n            currentlyRunningAnimationGroups.splice(idx, 1);\r\n            context._setGlobalContextVariable(\"currentlyRunningAnimationGroups\", currentlyRunningAnimationGroups);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Stop any currently running animations.\r\n     */\r\n    public _cancelPendingTasks(context: FlowGraphContext): void {\r\n        const ag = this.currentAnimationGroup.getValue(context);\r\n        if (ag) {\r\n            this._stopAnimationGroup(context, ag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.PlayAnimation;\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.PlayAnimation, FlowGraphPlayAnimationBlock);\r\n"]}