{"version":3,"file":"flowGraphStopAnimationBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/Animation/flowGraphStopAnimationBlock.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAE1E,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAG3D,OAAO,EAAE,MAAM,EAAE,mCAAyB;AAC1C,OAAO,EAAE,4BAA4B,EAAE,iDAAoD;AAC3F;;;GAGG;AACH,MAAM,OAAO,2BAA4B,SAAQ,4BAA4B;IAWzE,YAAY,MAAqC;QAC7C,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;IACjF,CAAC;IAEe,oBAAoB,CAAC,OAAyB;QAC1D,MAAM,oBAAoB,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,2BAA2B;QAC3B,MAAM,qBAAqB,GAAG,OAAO,CAAC,yBAAyB,CAC3D,uBAAuB,EACvB,EAGG,CACN,CAAC;QACF,gCAAgC;QAChC,qBAAqB,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,oBAAoB,CAAC,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC;QACrF,kCAAkC;QAClC,OAAO,CAAC,yBAAyB,CAAC,uBAAuB,EAAE,qBAAqB,CAAC,CAAC;IACtF,CAAC;IACe,mBAAmB,CAAC,OAAyB;QACzD,qCAAqC;QACrC,MAAM,oBAAoB,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,qBAAqB,GAAG,OAAO,CAAC,yBAAyB,CAC3D,uBAAuB,EACvB,EAGG,CACN,CAAC;QACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpD,IAAI,qBAAqB,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,oBAAoB,CAAC,QAAQ,EAAE,CAAC;gBACtE,qBAAqB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnC,kCAAkC;gBAClC,OAAO,CAAC,yBAAyB,CAAC,uBAAuB,EAAE,qBAAqB,CAAC,CAAC;gBAClF,MAAM;YACV,CAAC;QACL,CAAC;IACL,CAAC;IAEM,QAAQ,CAAC,OAAyB;QACrC,MAAM,oBAAoB,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1D,mBAAmB;QACnB,IAAI,CAAC,oBAAoB,EAAE,CAAC;YACxB,MAAM,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACpD,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,sCAAsC,CAAC,CAAC;QAC9E,CAAC;QACD,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;YAClB,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;QAC5D,CAAC;QACD,IAAI,QAAQ,GAAG,CAAC,EAAE,CAAC;YACf,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,cAAc,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;QACvD,CAAC;QACD,0DAA0D;QAC1D,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAEe,cAAc,CAAC,OAAyB;QACpD,MAAM,oBAAoB,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACnE,sDAAsD;QACtD,MAAM,qBAAqB,GAAG,OAAO,CAAC,yBAAyB,CAAC,uBAAuB,EAAE,EAAiD,CAAC,CAAC;QAC5I,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpD,gDAAgD;YAChD,IAAI,qBAAqB,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,oBAAoB,CAAC,QAAQ,EAAE,CAAC;gBACtE,sDAAsD;gBACtD,IAAI,oBAAoB,CAAC,eAAe,EAAE,IAAI,qBAAqB,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;oBACjF,qBAAqB;oBACrB,IAAI,CAAC,cAAc,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;oBACnD,qCAAqC;oBACrC,qBAAqB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACnC,kCAAkC;oBAClC,OAAO,CAAC,yBAAyB,CAAC,uBAAuB,EAAE,qBAAqB,CAAC,CAAC;oBAClF,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;oBACnC,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;oBAClC,MAAM;gBACV,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAED;;OAEG;IACa,YAAY;QACxB,6EAAyC;IAC7C,CAAC;IAEO,cAAc,CAAC,cAA8B,EAAE,OAAyB;QAC5E,MAAM,gBAAgB,GAAG,OAAO,CAAC,yBAAyB,CAAC,iCAAiC,EAAE,EAAE,CAAa,CAAC;QAC9G,MAAM,KAAK,GAAG,gBAAgB,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAChE,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC;YACf,cAAc,CAAC,IAAI,EAAE,CAAC;YACtB,gBAAgB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAClC,qCAAqC;YACrC,OAAO,CAAC,yBAAyB,CAAC,iCAAiC,EAAE,gBAAgB,CAAC,CAAC;QAC3F,CAAC;aAAM,CAAC;YACJ,mEAAmE;YACnE,wDAAwD;QAC5D,CAAC;IACL,CAAC;CACJ;AACD,aAAa,wEAAoC,2BAA2B,CAAC,CAAC","sourcesContent":["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { RichTypeAny, RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { FlowGraphAsyncExecutionBlock } from \"core/FlowGraph/flowGraphAsyncExecutionBlock\";\r\n/**\r\n * @experimental\r\n * Block that stops a running animation\r\n */\r\nexport class FlowGraphStopAnimationBlock extends FlowGraphAsyncExecutionBlock {\r\n    /**\r\n     * Input connection: The animation to stop.\r\n     */\r\n    public readonly animationGroup: FlowGraphDataConnection<AnimationGroup>;\r\n\r\n    /**\r\n     * Input connection - if defined (positive integer) the animation will stop at this frame.\r\n     */\r\n    public readonly stopAtFrame: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.animationGroup = this.registerDataInput(\"animationGroup\", RichTypeAny);\r\n        this.stopAtFrame = this.registerDataInput(\"stopAtFrame\", RichTypeNumber, -1);\r\n    }\r\n\r\n    public override _preparePendingTasks(context: FlowGraphContext): void {\r\n        const animationToStopValue = this.animationGroup.getValue(context);\r\n        const stopAtFrame = this.stopAtFrame.getValue(context) ?? -1;\r\n        // get the context variable\r\n        const pendingStopAnimations = context._getGlobalContextVariable(\r\n            \"pendingStopAnimations\",\r\n            [] as {\r\n                uniqueId: number;\r\n                stopAtFrame: number;\r\n            }[]\r\n        );\r\n        // add the animation to the list\r\n        pendingStopAnimations.push({ uniqueId: animationToStopValue.uniqueId, stopAtFrame });\r\n        // set the global context variable\r\n        context._setGlobalContextVariable(\"pendingStopAnimations\", pendingStopAnimations);\r\n    }\r\n    public override _cancelPendingTasks(context: FlowGraphContext): void {\r\n        // remove the animation from the list\r\n        const animationToStopValue = this.animationGroup.getValue(context);\r\n        const pendingStopAnimations = context._getGlobalContextVariable(\r\n            \"pendingStopAnimations\",\r\n            [] as {\r\n                uniqueId: number;\r\n                stopAtFrame: number;\r\n            }[]\r\n        );\r\n        for (let i = 0; i < pendingStopAnimations.length; i++) {\r\n            if (pendingStopAnimations[i].uniqueId === animationToStopValue.uniqueId) {\r\n                pendingStopAnimations.splice(i, 1);\r\n                // set the global context variable\r\n                context._setGlobalContextVariable(\"pendingStopAnimations\", pendingStopAnimations);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        const animationToStopValue = this.animationGroup.getValue(context);\r\n        const stopTime = this.stopAtFrame.getValue(context) ?? -1;\r\n        // check the values\r\n        if (!animationToStopValue) {\r\n            Logger.Warn(\"No animation group provided to stop.\");\r\n            return this._reportError(context, \"No animation group provided to stop.\");\r\n        }\r\n        if (isNaN(stopTime)) {\r\n            return this._reportError(context, \"Invalid stop time.\");\r\n        }\r\n        if (stopTime > 0) {\r\n            this._startPendingTasks(context);\r\n        } else {\r\n            this._stopAnimation(animationToStopValue, context);\r\n        }\r\n        // note that out will not be triggered in case of an error\r\n        this.out._activateSignal(context);\r\n    }\r\n\r\n    public override _executeOnTick(context: FlowGraphContext): void {\r\n        const animationToStopValue = this.animationGroup.getValue(context);\r\n        // check each frame if any animation should be stopped\r\n        const pendingStopAnimations = context._getGlobalContextVariable(\"pendingStopAnimations\", [] as { uniqueId: number; stopAtFrame: number }[]);\r\n        for (let i = 0; i < pendingStopAnimations.length; i++) {\r\n            // compare the uniqueId to the animation to stop\r\n            if (pendingStopAnimations[i].uniqueId === animationToStopValue.uniqueId) {\r\n                // check if the current frame is AFTER the stopAtFrame\r\n                if (animationToStopValue.getCurrentFrame() >= pendingStopAnimations[i].stopAtFrame) {\r\n                    // stop the animation\r\n                    this._stopAnimation(animationToStopValue, context);\r\n                    // remove the animation from the list\r\n                    pendingStopAnimations.splice(i, 1);\r\n                    // set the global context variable\r\n                    context._setGlobalContextVariable(\"pendingStopAnimations\", pendingStopAnimations);\r\n                    this.done._activateSignal(context);\r\n                    context._removePendingBlock(this);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.StopAnimation;\r\n    }\r\n\r\n    private _stopAnimation(animationGroup: AnimationGroup, context: FlowGraphContext): void {\r\n        const currentlyRunning = context._getGlobalContextVariable(\"currentlyRunningAnimationGroups\", []) as number[];\r\n        const index = currentlyRunning.indexOf(animationGroup.uniqueId);\r\n        if (index !== -1) {\r\n            animationGroup.stop();\r\n            currentlyRunning.splice(index, 1);\r\n            // update the global context variable\r\n            context._setGlobalContextVariable(\"currentlyRunningAnimationGroups\", currentlyRunning);\r\n        } else {\r\n            // Logger.Warn(\"Trying to stop an animation that is not running.\");\r\n            // no-op for now. Probably no need to log anything here.\r\n        }\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.StopAnimation, FlowGraphStopAnimationBlock);\r\n"]}