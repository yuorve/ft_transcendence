{"version":3,"file":"flowGraphForLoopBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphForLoopBlock.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,oCAAoC,EAAE,yDAA4D;AAE3G,OAAO,EAAE,WAAW,EAAE,wBAAwB,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AACpG,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAI3D,OAAO,EAAE,eAAe,EAAE,0BAA6B;AACvD,OAAO,EAAE,gBAAgB,EAAE,iDAAoD;AAY/E;;GAEG;AACH,MAAM,OAAO,qBAAsB,SAAQ,oCAAoC;IAiC3E,YAAmB,MAA4C;QAC3D,KAAK,CAAC,MAAM,CAAC,CAAC;QAEd,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;QACvE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;QAE9D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,wBAAwB,EAAE,IAAI,gBAAgB,CAAC,eAAe,CAAC,MAAM,EAAE,YAAY,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1I,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;QACjE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;QAEzD,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACI,QAAQ,CAAC,OAAyB;QACrC,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QACjE,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,QAAQ,GAAG,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QAChE,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;YAC1C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,gBAAgB,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YACtD,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YAC5C,QAAQ,GAAG,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,GAAG,qBAAqB,CAAC,iBAAiB,EAAE,CAAC;gBAC9C,MAAM;YACV,CAAC;QACL,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACa,YAAY;QACxB,iEAAmC;IACvC,CAAC;;AAtED;;;GAGG;AACW,uCAAiB,GAAG,IAAI,CAAC;AAoE3C,aAAa,4DAA8B,qBAAqB,CAAC,CAAC","sourcesContent":["import type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"core/FlowGraph/flowGraphExecutionBlockWithOutSignal\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport { RichTypeAny, RichTypeFlowGraphInteger, RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\nimport type { FlowGraphNumber } from \"core/FlowGraph/utils\";\r\nimport { getNumericValue } from \"core/FlowGraph/utils\";\r\nimport { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\r\n\r\n/**\r\n * Configuration for the For Loop block.\r\n */\r\nexport interface IFlowGraphForLoopBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The initial index of the loop.\r\n     * if not set will default to 0\r\n     */\r\n    initialIndex?: FlowGraphNumber;\r\n}\r\n/**\r\n * Block that executes an action in a loop.\r\n */\r\nexport class FlowGraphForLoopBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * The maximum number of iterations allowed for the loop.\r\n     * If the loop exceeds this number, it will stop. This number is configurable to avoid infinite loops.\r\n     */\r\n    public static MaxLoopIterations = 1000;\r\n    /**\r\n     * Input connection: The start index of the loop.\r\n     */\r\n    public readonly startIndex: FlowGraphDataConnection<FlowGraphNumber>;\r\n    /**\r\n     * Input connection: The end index of the loop.\r\n     */\r\n    public readonly endIndex: FlowGraphDataConnection<FlowGraphNumber>;\r\n    /**\r\n     * Input connection: The step of the loop.\r\n     */\r\n    public readonly step: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Output connection: The current index of the loop.\r\n     */\r\n    public readonly index: FlowGraphDataConnection<FlowGraphInteger>;\r\n    /**\r\n     * Output connection: The signal that is activated when the loop body is executed.\r\n     */\r\n    public readonly executionFlow: FlowGraphSignalConnection;\r\n\r\n    /**\r\n     * Output connection: The completed signal. Triggered when condition is false.\r\n     * No out signal is available.\r\n     */\r\n    public readonly completed: FlowGraphSignalConnection;\r\n\r\n    public constructor(config?: IFlowGraphForLoopBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.startIndex = this.registerDataInput(\"startIndex\", RichTypeAny, 0);\r\n        this.endIndex = this.registerDataInput(\"endIndex\", RichTypeAny);\r\n        this.step = this.registerDataInput(\"step\", RichTypeNumber, 1);\r\n\r\n        this.index = this.registerDataOutput(\"index\", RichTypeFlowGraphInteger, new FlowGraphInteger(getNumericValue(config?.initialIndex ?? 0)));\r\n        this.executionFlow = this._registerSignalOutput(\"executionFlow\");\r\n        this.completed = this._registerSignalOutput(\"completed\");\r\n\r\n        this._unregisterSignalOutput(\"out\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _execute(context: FlowGraphContext): void {\r\n        const index = getNumericValue(this.startIndex.getValue(context));\r\n        const step = this.step.getValue(context);\r\n        let endIndex = getNumericValue(this.endIndex.getValue(context));\r\n        for (let i = index; i < endIndex; i += step) {\r\n            this.index.setValue(new FlowGraphInteger(i), context);\r\n            this.executionFlow._activateSignal(context);\r\n            endIndex = getNumericValue(this.endIndex.getValue(context));\r\n            if (i > FlowGraphForLoopBlock.MaxLoopIterations) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.completed._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.ForLoop;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.ForLoop, FlowGraphForLoopBlock);\r\n"]}