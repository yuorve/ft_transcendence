{"version":3,"file":"flowGraphSequenceBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphSequenceBlock.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAI3D,OAAO,EAAE,uBAAuB,EAAE,MAAM,kCAAkC,CAAC;AAa3E;;GAEG;AACH,MAAM,OAAO,sBAAuB,SAAQ,uBAAuB;IAM/D;IACI;;OAEG;IACa,MAA4C;QAE5D,KAAK,CAAC,MAAM,CAAC,CAAC;QAFE,WAAM,GAAN,MAAM,CAAsC;QAThE;;WAEG;QACI,qBAAgB,GAAgC,EAAE,CAAC;QAStD,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;IACjE,CAAC;IAEM,QAAQ,CAAC,OAAyB;QACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpD,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACtD,CAAC;IACL,CAAC;IAED;;;OAGG;IACI,wBAAwB,CAAC,oBAA4B,CAAC;QACzD,2EAA2E;QAC3E,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,iBAAiB,EAAE,CAAC;YACtD,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC;YACzC,IAAI,IAAI,EAAE,CAAC;gBACP,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5C,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,iBAAiB,EAAE,CAAC;YACtD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAClG,CAAC;IACL,CAAC;IAED;;OAEG;IACa,YAAY;QACxB,mEAAoC;IACxC,CAAC;CACJ;AAED,aAAa,8DAA+B,sBAAsB,CAAC,CAAC","sourcesContent":["import { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\n\r\n/**\r\n * Configuration for the sequence block.\r\n */\r\nexport interface IFlowGraphSequenceBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The number of output signals. Defaults to 1.\r\n     */\r\n    outputSignalCount?: number;\r\n}\r\n\r\n/**\r\n * A block that executes its output flows in sequence.\r\n */\r\nexport class FlowGraphSequenceBlock extends FlowGraphExecutionBlock {\r\n    /**\r\n     * The output flows.\r\n     */\r\n    public executionSignals: FlowGraphSignalConnection[] = [];\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public override config: IFlowGraphSequenceBlockConfiguration\r\n    ) {\r\n        super(config);\r\n        this.setNumberOfOutputSignals(this.config.outputSignalCount);\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext) {\r\n        for (let i = 0; i < this.executionSignals.length; i++) {\r\n            this.executionSignals[i]._activateSignal(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the block's output flows. Would usually be passed from the constructor but can be changed afterwards.\r\n     * @param outputSignalCount the number of output flows\r\n     */\r\n    public setNumberOfOutputSignals(outputSignalCount: number = 1) {\r\n        // check the size of the outFlow Array, see if it is not larger than needed\r\n        while (this.executionSignals.length > outputSignalCount) {\r\n            const flow = this.executionSignals.pop();\r\n            if (flow) {\r\n                flow.disconnectFromAll();\r\n                this._unregisterSignalOutput(flow.name);\r\n            }\r\n        }\r\n\r\n        while (this.executionSignals.length < outputSignalCount) {\r\n            this.executionSignals.push(this._registerSignalOutput(`out_${this.executionSignals.length}`));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.Sequence;\r\n    }\r\n}\r\n\r\nRegisterClass(FlowGraphBlockNames.Sequence, FlowGraphSequenceBlock);\r\n"]}