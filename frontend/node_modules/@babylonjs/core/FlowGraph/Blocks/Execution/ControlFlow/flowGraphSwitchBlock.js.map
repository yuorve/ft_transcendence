{"version":3,"file":"flowGraphSwitchBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphSwitchBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport { RichTypeAny } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\nimport type { FlowGraphNumber } from \"core/FlowGraph/utils\";\r\nimport { getNumericValue, isNumeric } from \"core/FlowGraph/utils\";\r\n/**\r\n * Configuration for a switch block.\r\n */\r\nexport interface IFlowGraphSwitchBlockConfiguration<T> extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The possible values for the selection.\r\n     */\r\n    cases: T[];\r\n}\r\n\r\n/**\r\n * A block that executes a branch based on a selection.\r\n */\r\nexport class FlowGraphSwitchBlock<T extends FlowGraphNumber> extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Input connection: The value of the selection.\r\n     */\r\n    public readonly case: FlowGraphDataConnection<T>;\r\n\r\n    /**\r\n     * The default case to execute if no other case is found.\r\n     */\r\n    public readonly default: FlowGraphSignalConnection = this._registerSignalOutput(\"default\");\r\n\r\n    private _caseToOutputFlow: Map<T, FlowGraphSignalConnection> = new Map();\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public override config: IFlowGraphSwitchBlockConfiguration<T>\r\n    ) {\r\n        super(config);\r\n\r\n        this.case = this.registerDataInput(\"case\", RichTypeAny);\r\n\r\n        // iterate the set not using for of\r\n        (this.config.cases || []).forEach((caseValue) => {\r\n            this._caseToOutputFlow.set(caseValue, this._registerSignalOutput(`out_${caseValue}`));\r\n        });\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\r\n        const selectionValue = this.case.getValue(context);\r\n        let outputFlow: FlowGraphSignalConnection | undefined;\r\n        if (isNumeric(selectionValue)) {\r\n            outputFlow = this._getOutputFlowForCase(getNumericValue(selectionValue) as T);\r\n        } else {\r\n            outputFlow = this._getOutputFlowForCase(selectionValue);\r\n        }\r\n\r\n        if (outputFlow) {\r\n            outputFlow._activateSignal(context);\r\n        } else {\r\n            this.default._activateSignal(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a new case to the switch block.\r\n     * @param newCase the new case to add.\r\n     */\r\n    public addCase(newCase: T): void {\r\n        if (this.config.cases.includes(newCase)) {\r\n            return;\r\n        }\r\n        this.config.cases.push(newCase);\r\n        this._caseToOutputFlow.set(newCase, this._registerSignalOutput(`out_${newCase}`));\r\n    }\r\n\r\n    /**\r\n     * Removes a case from the switch block.\r\n     * @param caseToRemove the case to remove.\r\n     */\r\n    public removeCase(caseToRemove: T): void {\r\n        if (!this.config.cases.includes(caseToRemove)) {\r\n            return;\r\n        }\r\n        const index = this.config.cases.indexOf(caseToRemove);\r\n        this.config.cases.splice(index, 1);\r\n        this._caseToOutputFlow.delete(caseToRemove);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getOutputFlowForCase(caseValue: T) {\r\n        return this._caseToOutputFlow.get(caseValue);\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.Switch;\r\n    }\r\n\r\n    /**\r\n     * Serialize the block to a JSON representation.\r\n     * @param serializationObject the object to serialize to.\r\n     */\r\n    public override serialize(serializationObject?: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.cases = this.config.cases;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Switch, FlowGraphSwitchBlock);\r\n"]}