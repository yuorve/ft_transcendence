{"version":3,"file":"flowGraphThrottleBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphThrottleBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\n/**\r\n * A block that throttles the execution of its output flow.\r\n */\r\nexport class FlowGraphThrottleBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Input connection: The duration of the throttle, in seconds.\r\n     */\r\n    public readonly duration: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: Resets the throttle.\r\n     */\r\n    public readonly reset: FlowGraphSignalConnection;\r\n    /**\r\n     * Output connection: The time remaining before the throttle is triggering again, in seconds.\r\n     */\r\n    public readonly lastRemainingTime: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n        this.duration = this.registerDataInput(\"duration\", RichTypeNumber);\r\n        this.lastRemainingTime = this.registerDataOutput(\"lastRemainingTime\", RichTypeNumber, NaN);\r\n    }\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        if (callingSignal === this.reset) {\r\n            this.lastRemainingTime.setValue(NaN, context);\r\n            context._setExecutionVariable(this, \"lastRemainingTime\", NaN);\r\n            context._setExecutionVariable(this, \"timestamp\", 0);\r\n            return;\r\n        }\r\n        // in seconds\r\n        const durationValue = this.duration.getValue(context);\r\n        if (durationValue <= 0 || isNaN(durationValue) || !isFinite(durationValue)) {\r\n            return this._reportError(context, \"Invalid duration in Throttle block\");\r\n        }\r\n        const lastRemainingTime = context._getExecutionVariable(this, \"lastRemainingTime\", NaN);\r\n        // Using Date.now() to get ms since epoch. not using performance.now() because its precision is not needed here\r\n        const currentTime = Date.now();\r\n        if (isNaN(lastRemainingTime)) {\r\n            this.lastRemainingTime.setValue(0, context);\r\n            context._setExecutionVariable(this, \"lastRemainingTime\", 0);\r\n            context._setExecutionVariable(this, \"timestamp\", currentTime);\r\n            // according to glTF interactivity specs\r\n            return this.out._activateSignal(context);\r\n        } else {\r\n            const elapsedTime = currentTime - context._getExecutionVariable(this, \"timestamp\", 0);\r\n            // duration is in seconds, so we need to multiply by 1000\r\n            const durationInMs = durationValue * 1000;\r\n            if (durationInMs <= elapsedTime) {\r\n                this.lastRemainingTime.setValue(0, context);\r\n                context._setExecutionVariable(this, \"lastRemainingTime\", 0);\r\n                context._setExecutionVariable(this, \"timestamp\", currentTime);\r\n                return this.out._activateSignal(context);\r\n            } else {\r\n                const remainingTime = durationInMs - elapsedTime;\r\n                // output is in seconds\r\n                this.lastRemainingTime.setValue(remainingTime / 1000, context);\r\n                context._setExecutionVariable(this, \"lastRemainingTime\", remainingTime);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.Throttle;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.Throttle, FlowGraphThrottleBlock);\r\n"]}