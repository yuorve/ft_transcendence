{"version":3,"file":"flowGraphWaitAllBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphWaitAllBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\r\nimport { RichTypeNumber } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\r\n/**\r\n * Configuration for the wait all block.\r\n */\r\nexport interface IFlowGraphWaitAllBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The number of input signals. There will always be at least one input flow.\r\n     * glTF interactivity has a max of 64 input flows.\r\n     */\r\n    inputSignalCount: number;\r\n}\r\n\r\n/**\r\n * A block that waits for all input flows to be activated before activating its output flow.\r\n */\r\nexport class FlowGraphWaitAllBlock extends FlowGraphExecutionBlockWithOutSignal {\r\n    /**\r\n     * Input connection: Resets the block.\r\n     */\r\n    public reset: FlowGraphSignalConnection;\r\n\r\n    /**\r\n     * Output connection:When the last missing flow is activated\r\n     */\r\n    public completed: FlowGraphSignalConnection;\r\n\r\n    /**\r\n     * Output connection: The number of remaining inputs to be activated.\r\n     */\r\n    public remainingInputs: FlowGraphDataConnection<number>;\r\n    /**\r\n     * An array of input signals\r\n     */\r\n    public readonly inFlows: FlowGraphSignalConnection[] = [];\r\n    private _cachedActivationState: boolean[] = [];\r\n\r\n    constructor(\r\n        /**\r\n         * the configuration of the block\r\n         */\r\n        public override config: IFlowGraphWaitAllBlockConfiguration\r\n    ) {\r\n        super(config);\r\n\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n        this.completed = this._registerSignalOutput(\"completed\");\r\n        this.remainingInputs = this.registerDataOutput(\"remainingInputs\", RichTypeNumber, this.config.inputSignalCount || 0);\r\n        // The first inFlow is the default input signal all execution blocks have\r\n        for (let i = 0; i < this.config.inputSignalCount; i++) {\r\n            this.inFlows.push(this._registerSignalInput(`in_${i}`));\r\n        }\r\n        // no need for in\r\n        this._unregisterSignalInput(\"in\");\r\n    }\r\n\r\n    private _getCurrentActivationState(context: FlowGraphContext) {\r\n        const activationState = this._cachedActivationState;\r\n        activationState.length = 0;\r\n        if (!context._hasExecutionVariable(this, \"activationState\")) {\r\n            for (let i = 0; i < this.config.inputSignalCount; i++) {\r\n                activationState.push(false);\r\n            }\r\n        } else {\r\n            const contextActivationState = context._getExecutionVariable(this, \"activationState\", [] as boolean[]);\r\n            for (let i = 0; i < contextActivationState.length; i++) {\r\n                activationState.push(contextActivationState[i]);\r\n            }\r\n        }\r\n        return activationState;\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        const activationState = this._getCurrentActivationState(context);\r\n        if (callingSignal === this.reset) {\r\n            for (let i = 0; i < this.config.inputSignalCount; i++) {\r\n                activationState[i] = false;\r\n            }\r\n        } else {\r\n            const index = this.inFlows.indexOf(callingSignal);\r\n            if (index >= 0) {\r\n                activationState[index] = true;\r\n            }\r\n        }\r\n        this.remainingInputs.setValue(activationState.filter((v) => !v).length, context);\r\n\r\n        context._setExecutionVariable(this, \"activationState\", activationState.slice());\r\n\r\n        if (!activationState.includes(false)) {\r\n            this.completed._activateSignal(context);\r\n            for (let i = 0; i < this.config.inputSignalCount; i++) {\r\n                activationState[i] = false;\r\n            }\r\n        } else {\r\n            callingSignal !== this.reset && this.out._activateSignal(context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns class name of the block.\r\n     */\r\n    public override getClassName(): string {\r\n        return FlowGraphBlockNames.WaitAll;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block into a object\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    public override serialize(serializationObject?: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.config.inputFlows = this.config.inputSignalCount;\r\n    }\r\n}\r\nRegisterClass(FlowGraphBlockNames.WaitAll, FlowGraphWaitAllBlock);\r\n"]}