{"version":3,"file":"flowGraphSetVariableBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphSetVariableBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { RegisterClass } from \"core/Misc/typeStore\";\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../flowGraphExecutionBlockWithOutSignal\";\nimport type { FlowGraphSignalConnection } from \"../../flowGraphSignalConnection\";\nimport { FlowGraphBlockNames } from \"../flowGraphBlockNames\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\n\n/**\n * The configuration of the FlowGraphGetVariableBlock.\n */\nexport interface IFlowGraphSetVariableBlockConfiguration extends IFlowGraphBlockConfiguration {\n    /**\n     * The name of the variable to set.\n     */\n    variable?: string;\n\n    /**\n     * The name of the variables to set.\n     */\n    variables?: string[];\n}\n\n/**\n * This block will set a variable on the context.\n */\nexport class FlowGraphSetVariableBlock<T> extends FlowGraphExecutionBlockWithOutSignal {\n    constructor(config: IFlowGraphSetVariableBlockConfiguration) {\n        super(config);\n        // check if the variable is defined\n        if (!config.variable && !config.variables) {\n            throw new Error(\"FlowGraphSetVariableBlock: variable/variables is not defined\");\n        }\n        // check if the variable is an array\n        if (config.variables && config.variable) {\n            throw new Error(\"FlowGraphSetVariableBlock: variable and variables are both defined\");\n        }\n        // check if we have either a variable or variables. If we have variables, set the inputs correctly\n        if (config.variables) {\n            for (const variable of config.variables) {\n                this.registerDataInput(variable, RichTypeAny);\n            }\n        } else {\n            this.registerDataInput(\"value\", RichTypeAny);\n        }\n    }\n\n    public override _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\n        if (this.config?.variables) {\n            for (const variable of this.config.variables) {\n                this._saveVariable(context, variable);\n            }\n        } else {\n            this._saveVariable(context, this.config?.variable!, \"value\");\n        }\n        this.out._activateSignal(context);\n    }\n\n    private _saveVariable(context: FlowGraphContext, variableName: string, inputName?: string): void {\n        // check if there is an animation(group) running on this variable. If there is, stop the animation - a value was force-set.\n        const currentlyRunningAnimationGroups = context._getGlobalContextVariable(\"currentlyRunningAnimationGroups\", []) as number[];\n        for (const animationUniqueId of currentlyRunningAnimationGroups) {\n            const animation = context.assetsContext.animationGroups[animationUniqueId];\n            // check if there is a target animation that has the target set to be the context\n            for (const targetAnimation of animation.targetedAnimations) {\n                if (targetAnimation.target === context) {\n                    // check if the target property is the variable we are setting\n                    if (targetAnimation.target === context) {\n                        // check the variable name\n                        if (targetAnimation.animation.targetProperty === variableName) {\n                            // stop the animation\n                            animation.stop();\n                            // remove the animation from the currently running animations\n                            const index = currentlyRunningAnimationGroups.indexOf(animationUniqueId);\n                            if (index > -1) {\n                                currentlyRunningAnimationGroups.splice(index, 1);\n                            }\n                            context._setGlobalContextVariable(\"currentlyRunningAnimationGroups\", currentlyRunningAnimationGroups);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        const value = this.getDataInput(inputName || variableName)?.getValue(context);\n        context.setVariable(variableName, value);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.SetVariable;\n    }\n\n    public override serialize(serializationObject?: any): void {\n        super.serialize(serializationObject);\n        serializationObject.config.variable = this.config?.variable;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.SetVariable, FlowGraphSetVariableBlock);\n"]}