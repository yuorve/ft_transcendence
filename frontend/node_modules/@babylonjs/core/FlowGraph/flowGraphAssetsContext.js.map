{"version":3,"file":"flowGraphAssetsContext.js","sourceRoot":"","sources":["../../../../dev/core/src/FlowGraph/flowGraphAssetsContext.ts"],"names":[],"mappings":"AASA;;GAEG;AACH,MAAM,CAAN,IAAkB,kBAQjB;AARD,WAAkB,kBAAkB;IAChC,6CAAuB,CAAA;IACvB,uDAAiC,CAAA;IACjC,mCAAa,CAAA;IACb,2CAAqB,CAAA;IACrB,uCAAiB,CAAA;IACjB,qCAAe,CAAA;IACf,sDAAsD;AAC1D,CAAC,EARiB,kBAAkB,KAAlB,kBAAkB,QAQnC;AAgBD;;;;;;;GAOG;AACH,MAAM,UAAU,yBAAyB,CACrC,aAA8B,EAC9B,IAAO,EACP,KAAa,EACb,kBAA4B;IAE5B,QAAQ,IAAI,EAAE,CAAC;QACX;YACI,OAAO,kBAAkB;gBACrB,CAAC,CAAC,CAAE,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,KAAK,CAA4B,IAAI,IAAI,CAAC;gBAClG,CAAC,CAAC,CAAE,aAAa,CAAC,UAAU,CAAC,KAAK,CAA4B,IAAI,IAAI,CAAC,CAAC;QAChF;YACI,OAAO,kBAAkB;gBACrB,CAAC,CAAC,CAAE,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,KAAK,CAA4B,IAAI,IAAI,CAAC;gBACvG,CAAC,CAAC,CAAE,aAAa,CAAC,eAAe,CAAC,KAAK,CAA4B,IAAI,IAAI,CAAC,CAAC;QACrF;YACI,OAAO,kBAAkB;gBACrB,CAAC,CAAC,CAAE,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,KAAK,CAA4B,IAAI,IAAI,CAAC;gBAC9F,CAAC,CAAC,CAAE,aAAa,CAAC,MAAM,CAAC,KAAK,CAA4B,IAAI,IAAI,CAAC,CAAC;QAC5E;YACI,OAAO,kBAAkB;gBACrB,CAAC,CAAC,CAAE,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,KAAK,CAA4B,IAAI,IAAI,CAAC;gBACjG,CAAC,CAAC,CAAE,aAAa,CAAC,SAAS,CAAC,KAAK,CAA4B,IAAI,IAAI,CAAC,CAAC;QAC/E;YACI,OAAO,kBAAkB;gBACrB,CAAC,CAAC,CAAE,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,KAAK,CAA4B,IAAI,IAAI,CAAC;gBAC/F,CAAC,CAAC,CAAE,aAAa,CAAC,OAAO,CAAC,KAAK,CAA4B,IAAI,IAAI,CAAC,CAAC;QAC7E;YACI,OAAO,kBAAkB;gBACrB,CAAC,CAAC,CAAE,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,KAAK,CAA4B,IAAI,IAAI,CAAC;gBAC9F,CAAC,CAAC,CAAE,aAAa,CAAC,MAAM,CAAC,KAAK,CAA4B,IAAI,IAAI,CAAC,CAAC;QAC5E;YACI,OAAO,IAAI,CAAC;IACpB,CAAC;AACL,CAAC","sourcesContent":["import type { AnimationGroup } from \"core/Animations/animationGroup\";\nimport type { Animation } from \"core/Animations/animation\";\nimport type { Nullable } from \"core/types\";\nimport type { Mesh } from \"core/Meshes/mesh\";\nimport type { Material } from \"core/Materials/material\";\nimport type { Camera } from \"core/Cameras/camera\";\nimport type { Light } from \"core/Lights/light\";\nimport type { IAssetContainer } from \"core/IAssetContainer\";\n\n/**\n * The type of the assets that flow graph supports\n */\nexport const enum FlowGraphAssetType {\n    Animation = \"Animation\",\n    AnimationGroup = \"AnimationGroup\",\n    Mesh = \"Mesh\",\n    Material = \"Material\",\n    Camera = \"Camera\",\n    Light = \"Light\",\n    // Further asset types will be added here when needed.\n}\n\nexport type AssetType<T extends FlowGraphAssetType> = T extends FlowGraphAssetType.Animation\n    ? Animation\n    : T extends FlowGraphAssetType.AnimationGroup\n      ? AnimationGroup\n      : T extends FlowGraphAssetType.Mesh\n        ? Mesh\n        : T extends FlowGraphAssetType.Material\n          ? Material\n          : T extends FlowGraphAssetType.Camera\n            ? Camera\n            : T extends FlowGraphAssetType.Light\n              ? Light\n              : never;\n\n/**\n * Returns the asset with the given index and type from the assets context.\n * @param assetsContext The assets context to get the asset from\n * @param type The type of the asset\n * @param index The index of the asset\n * @param useIndexAsUniqueId If set to true, instead of the index in the array it will search for the unique id of the asset.\n * @returns The asset or null if not found\n */\nexport function GetFlowGraphAssetWithType<T extends FlowGraphAssetType>(\n    assetsContext: IAssetContainer,\n    type: T,\n    index: number,\n    useIndexAsUniqueId?: boolean\n): Nullable<AssetType<T>> {\n    switch (type) {\n        case FlowGraphAssetType.Animation:\n            return useIndexAsUniqueId\n                ? ((assetsContext.animations.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.animations[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.AnimationGroup:\n            return useIndexAsUniqueId\n                ? ((assetsContext.animationGroups.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.animationGroups[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Mesh:\n            return useIndexAsUniqueId\n                ? ((assetsContext.meshes.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.meshes[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Material:\n            return useIndexAsUniqueId\n                ? ((assetsContext.materials.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.materials[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Camera:\n            return useIndexAsUniqueId\n                ? ((assetsContext.cameras.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.cameras[index] as AssetType<typeof type>) ?? null);\n        case FlowGraphAssetType.Light:\n            return useIndexAsUniqueId\n                ? ((assetsContext.lights.find((a) => a.uniqueId === index) as AssetType<typeof type>) ?? null)\n                : ((assetsContext.lights[index] as AssetType<typeof type>) ?? null);\n        default:\n            return null;\n    }\n}\n"]}