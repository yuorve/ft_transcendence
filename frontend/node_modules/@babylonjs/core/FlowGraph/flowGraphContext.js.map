{"version":3,"file":"flowGraphContext.js","sourceRoot":"","sources":["../../../../dev/core/src/FlowGraph/flowGraphContext.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize } from \"../Misc/decorators\";\r\nimport { RandomGUID } from \"../Misc/guid\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { FlowGraphAsyncExecutionBlock } from \"./flowGraphAsyncExecutionBlock\";\r\nimport type { FlowGraphBlock } from \"./flowGraphBlock\";\r\nimport type { FlowGraphDataConnection } from \"./flowGraphDataConnection\";\r\nimport type { FlowGraph } from \"./flowGraph\";\r\nimport { defaultValueSerializationFunction } from \"./serialization\";\r\nimport type { FlowGraphCoordinator } from \"./flowGraphCoordinator\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { AssetType, FlowGraphAssetType } from \"./flowGraphAssetsContext\";\r\nimport { GetFlowGraphAssetWithType } from \"./flowGraphAssetsContext\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { FlowGraphAction, FlowGraphLogger } from \"./flowGraphLogger\";\r\nimport type { IFlowGraphOnTickEventPayload } from \"./Blocks/Event/flowGraphSceneTickEventBlock\";\r\n\r\n/**\r\n * Construction parameters for the context.\r\n */\r\nexport interface IFlowGraphContextConfiguration {\r\n    /**\r\n     * The scene that the flow graph context belongs to.\r\n     */\r\n    readonly scene: Scene;\r\n    /**\r\n     * The event coordinator used by the flow graph context.\r\n     */\r\n    readonly coordinator: FlowGraphCoordinator;\r\n\r\n    /**\r\n     * The assets context used by the flow graph context.\r\n     * If none is provided, a default one will be created.\r\n     */\r\n    readonly assetsContext?: IAssetContainer;\r\n}\r\n\r\n/**\r\n * Options for parsing a context.\r\n */\r\nexport interface IFlowGraphContextParseOptions {\r\n    /**\r\n     * A function that parses a value from a serialization object.\r\n     * @param key the key of the value\r\n     * @param serializationObject the object containing the value\r\n     * @param scene the current scene\r\n     * @returns\r\n     */\r\n    readonly valueParseFunction?: (key: string, serializationObject: any, assetsContainer: IAssetContainer, scene: Scene) => any;\r\n    /**\r\n     * The graph that the context is being parsed in.\r\n     */\r\n    readonly graph: FlowGraph;\r\n}\r\n/**\r\n * The context represents the current state and execution of the flow graph.\r\n * It contains both user-defined variables, which are derived from\r\n * a more general variable definition, and execution variables that\r\n * are set by the blocks.\r\n */\r\nexport class FlowGraphContext {\r\n    /**\r\n     * A randomly generated GUID for each context.\r\n     */\r\n    @serialize()\r\n    public uniqueId = RandomGUID();\r\n    /**\r\n     * These are the variables defined by a user.\r\n     */\r\n    private _userVariables: { [key: string]: any } = {};\r\n    /**\r\n     * These are the variables set by the blocks.\r\n     */\r\n    private _executionVariables: { [key: string]: any } = {};\r\n\r\n    /**\r\n     * A context-specific global variables, available to all blocks in the context.\r\n     */\r\n    private _globalContextVariables: { [key: string]: any } = {};\r\n    /**\r\n     * These are the values for the data connection points\r\n     */\r\n    private _connectionValues: { [key: string]: any } = {};\r\n    /**\r\n     * These are the variables set by the graph.\r\n     */\r\n    private readonly _configuration: IFlowGraphContextConfiguration;\r\n    /**\r\n     * These are blocks that have currently pending tasks/listeners that need to be cleaned up.\r\n     */\r\n    private _pendingBlocks: FlowGraphAsyncExecutionBlock[] = [];\r\n    /**\r\n     * A monotonically increasing ID for each execution.\r\n     * Incremented for every block executed.\r\n     */\r\n    private _executionId = 0;\r\n    /**\r\n     * Observable that is triggered when a node is executed.\r\n     */\r\n    public onNodeExecutedObservable: Observable<FlowGraphBlock> = new Observable<FlowGraphBlock>();\r\n\r\n    /**\r\n     * The assets context used by the flow graph context.\r\n     * Note that it can be shared between flow graph contexts.\r\n     */\r\n    public assetsContext: IAssetContainer;\r\n\r\n    /**\r\n     * Whether to treat data as right-handed.\r\n     * This is used when serializing data from a right-handed system, while running the context in a left-handed system, for example in glTF parsing.\r\n     * Default is false.\r\n     */\r\n    public treatDataAsRightHanded = false;\r\n\r\n    private _enableLogging = false;\r\n\r\n    /**\r\n     * The logger used by the context to log actions.\r\n     */\r\n    public logger: Nullable<FlowGraphLogger>;\r\n\r\n    /**\r\n     * Enable logging on this context\r\n     */\r\n    public get enableLogging() {\r\n        return this._enableLogging;\r\n    }\r\n\r\n    public set enableLogging(value: boolean) {\r\n        if (this._enableLogging === value) {\r\n            return;\r\n        }\r\n        this._enableLogging = value;\r\n        if (this._enableLogging) {\r\n            this.logger = new FlowGraphLogger();\r\n            this.logger.logToConsole = true;\r\n        } else {\r\n            this.logger = null;\r\n        }\r\n    }\r\n\r\n    constructor(params: IFlowGraphContextConfiguration) {\r\n        this._configuration = params;\r\n        this.assetsContext = params.assetsContext ?? params.scene;\r\n    }\r\n\r\n    /**\r\n     * Check if a user-defined variable is defined.\r\n     * @param name the name of the variable\r\n     * @returns true if the variable is defined\r\n     */\r\n    public hasVariable(name: string) {\r\n        return name in this._userVariables;\r\n    }\r\n\r\n    /**\r\n     * Set a user-defined variable.\r\n     * @param name the name of the variable\r\n     * @param value the value of the variable\r\n     */\r\n    public setVariable(name: string, value: any) {\r\n        this._userVariables[name] = value;\r\n        this.logger?.addLogItem({\r\n            time: Date.now(),\r\n            className: this.getClassName(),\r\n            uniqueId: this.uniqueId,\r\n            action: FlowGraphAction.ContextVariableSet,\r\n            payload: {\r\n                name,\r\n                value,\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get an assets from the assets context based on its type and index in the array\r\n     * @param type The type of the asset\r\n     * @param index The index of the asset\r\n     * @returns The asset or null if not found\r\n     */\r\n    public getAsset<T extends FlowGraphAssetType>(type: T, index: number): Nullable<AssetType<T>> {\r\n        return GetFlowGraphAssetWithType(this.assetsContext, type, index);\r\n    }\r\n\r\n    /**\r\n     * Get a user-defined variable.\r\n     * @param name the name of the variable\r\n     * @returns the value of the variable\r\n     */\r\n    public getVariable(name: string): any {\r\n        this.logger?.addLogItem({\r\n            time: Date.now(),\r\n            className: this.getClassName(),\r\n            uniqueId: this.uniqueId,\r\n            action: FlowGraphAction.ContextVariableGet,\r\n            payload: {\r\n                name,\r\n                value: this._userVariables[name],\r\n            },\r\n        });\r\n        return this._userVariables[name];\r\n    }\r\n\r\n    /**\r\n     * Gets all user variables map\r\n     */\r\n    public get userVariables() {\r\n        return this._userVariables;\r\n    }\r\n\r\n    /**\r\n     * Get the scene that the context belongs to.\r\n     * @returns the scene\r\n     */\r\n    public getScene() {\r\n        return this._configuration.scene;\r\n    }\r\n\r\n    private _getUniqueIdPrefixedName(obj: FlowGraphBlock, name: string): string {\r\n        return `${obj.uniqueId}_${name}`;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @param name name of the variable\r\n     * @param defaultValue default value to return if the variable is not defined\r\n     * @returns the variable value or the default value if the variable is not defined\r\n     */\r\n    public _getGlobalContextVariable<T>(name: string, defaultValue: T): T {\r\n        this.logger?.addLogItem({\r\n            time: Date.now(),\r\n            className: this.getClassName(),\r\n            uniqueId: this.uniqueId,\r\n            action: FlowGraphAction.GlobalVariableGet,\r\n            payload: {\r\n                name,\r\n                defaultValue,\r\n                possibleValue: this._globalContextVariables[name],\r\n            },\r\n        });\r\n        if (this._hasGlobalContextVariable(name)) {\r\n            return this._globalContextVariables[name];\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a global context variable\r\n     * @internal\r\n     * @param name the name of the variable\r\n     * @param value the value of the variable\r\n     */\r\n    public _setGlobalContextVariable<T>(name: string, value: T) {\r\n        this.logger?.addLogItem({\r\n            time: Date.now(),\r\n            className: this.getClassName(),\r\n            uniqueId: this.uniqueId,\r\n            action: FlowGraphAction.GlobalVariableSet,\r\n            payload: { name, value },\r\n        });\r\n        this._globalContextVariables[name] = value;\r\n    }\r\n\r\n    /**\r\n     * Delete a global context variable\r\n     * @internal\r\n     * @param name the name of the variable\r\n     */\r\n    public _deleteGlobalContextVariable(name: string) {\r\n        this.logger?.addLogItem({\r\n            time: Date.now(),\r\n            className: this.getClassName(),\r\n            uniqueId: this.uniqueId,\r\n            action: FlowGraphAction.GlobalVariableDelete,\r\n            payload: { name },\r\n        });\r\n        delete this._globalContextVariables[name];\r\n    }\r\n\r\n    /**\r\n     * Check if a global context variable is defined\r\n     * @internal\r\n     * @param name the name of the variable\r\n     * @returns true if the variable is defined\r\n     */\r\n    public _hasGlobalContextVariable(name: string) {\r\n        return name in this._globalContextVariables;\r\n    }\r\n\r\n    /**\r\n     * Set an internal execution variable\r\n     * @internal\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public _setExecutionVariable(block: FlowGraphBlock, name: string, value: any) {\r\n        this._executionVariables[this._getUniqueIdPrefixedName(block, name)] = value;\r\n    }\r\n\r\n    /**\r\n     * Get an internal execution variable\r\n     * @internal\r\n     * @param name\r\n     * @returns\r\n     */\r\n    public _getExecutionVariable<T>(block: FlowGraphBlock, name: string, defaultValue: T): T {\r\n        if (this._hasExecutionVariable(block, name)) {\r\n            return this._executionVariables[this._getUniqueIdPrefixedName(block, name)];\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete an internal execution variable\r\n     * @internal\r\n     * @param block\r\n     * @param name\r\n     */\r\n    public _deleteExecutionVariable(block: FlowGraphBlock, name: string) {\r\n        delete this._executionVariables[this._getUniqueIdPrefixedName(block, name)];\r\n    }\r\n\r\n    /**\r\n     * Check if an internal execution variable is defined\r\n     * @internal\r\n     * @param block\r\n     * @param name\r\n     * @returns\r\n     */\r\n    public _hasExecutionVariable(block: FlowGraphBlock, name: string) {\r\n        return this._getUniqueIdPrefixedName(block, name) in this._executionVariables;\r\n    }\r\n\r\n    /**\r\n     * Check if a connection value is defined\r\n     * @internal\r\n     * @param connectionPoint\r\n     * @returns\r\n     */\r\n    public _hasConnectionValue(connectionPoint: FlowGraphDataConnection<any>) {\r\n        return connectionPoint.uniqueId in this._connectionValues;\r\n    }\r\n\r\n    /**\r\n     * Set a connection value\r\n     * @internal\r\n     * @param connectionPoint\r\n     * @param value\r\n     */\r\n    public _setConnectionValue<T>(connectionPoint: FlowGraphDataConnection<T>, value: T) {\r\n        this._connectionValues[connectionPoint.uniqueId] = value;\r\n        this.logger?.addLogItem({\r\n            time: Date.now(),\r\n            className: this.getClassName(),\r\n            uniqueId: this.uniqueId,\r\n            action: FlowGraphAction.SetConnectionValue,\r\n            payload: {\r\n                connectionPointId: connectionPoint.uniqueId,\r\n                value,\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set a connection value by key\r\n     * @internal\r\n     * @param key the key of the connection value\r\n     * @param value the value of the connection\r\n     */\r\n    public _setConnectionValueByKey<T>(key: string, value: T) {\r\n        this._connectionValues[key] = value;\r\n    }\r\n\r\n    /**\r\n     * Get a connection value\r\n     * @internal\r\n     * @param connectionPoint\r\n     * @returns\r\n     */\r\n    public _getConnectionValue<T>(connectionPoint: FlowGraphDataConnection<T>): T {\r\n        this.logger?.addLogItem({\r\n            time: Date.now(),\r\n            className: this.getClassName(),\r\n            uniqueId: this.uniqueId,\r\n            action: FlowGraphAction.GetConnectionValue,\r\n            payload: {\r\n                connectionPointId: connectionPoint.uniqueId,\r\n                value: this._connectionValues[connectionPoint.uniqueId],\r\n            },\r\n        });\r\n        return this._connectionValues[connectionPoint.uniqueId];\r\n    }\r\n\r\n    /**\r\n     * Get the configuration\r\n     * @internal\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public get configuration() {\r\n        return this._configuration;\r\n    }\r\n\r\n    /**\r\n     * Check if there are any pending blocks in this context\r\n     * @returns true if there are pending blocks\r\n     */\r\n    public get hasPendingBlocks() {\r\n        return this._pendingBlocks.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Add a block to the list of blocks that have pending tasks.\r\n     * @internal\r\n     * @param block\r\n     */\r\n    public _addPendingBlock(block: FlowGraphAsyncExecutionBlock) {\r\n        // check if block is already in the array\r\n        if (this._pendingBlocks.includes(block)) {\r\n            return;\r\n        }\r\n        this._pendingBlocks.push(block);\r\n        // sort pending blocks by priority\r\n        this._pendingBlocks.sort((a, b) => a.priority - b.priority);\r\n    }\r\n\r\n    /**\r\n     * Remove a block from the list of blocks that have pending tasks.\r\n     * @internal\r\n     * @param block\r\n     */\r\n    public _removePendingBlock(block: FlowGraphAsyncExecutionBlock) {\r\n        const index = this._pendingBlocks.indexOf(block);\r\n        if (index !== -1) {\r\n            this._pendingBlocks.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all pending blocks.\r\n     * @internal\r\n     */\r\n    public _clearPendingBlocks() {\r\n        for (const block of this._pendingBlocks) {\r\n            block._cancelPendingTasks(this);\r\n        }\r\n        this._pendingBlocks.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Function that notifies the node executed observable\r\n     * @param node\r\n     */\r\n    public _notifyExecuteNode(node: FlowGraphBlock) {\r\n        this.onNodeExecutedObservable.notifyObservers(node);\r\n        this.logger?.addLogItem({\r\n            time: Date.now(),\r\n            className: node.getClassName(),\r\n            uniqueId: node.uniqueId,\r\n            action: FlowGraphAction.ExecuteBlock,\r\n        });\r\n    }\r\n\r\n    public _notifyOnTick(framePayload: IFlowGraphOnTickEventPayload) {\r\n        // set the values as global variables\r\n        this._setGlobalContextVariable(\"timeSinceStart\", framePayload.timeSinceStart);\r\n        this._setGlobalContextVariable(\"deltaTime\", framePayload.deltaTime);\r\n        // iterate the pending blocks and run each one's onFrame function\r\n        for (const block of this._pendingBlocks) {\r\n            block._executeOnTick?.(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _increaseExecutionId() {\r\n        this._executionId++;\r\n    }\r\n    /**\r\n     * A monotonically increasing ID for each execution.\r\n     * Incremented for every block executed.\r\n     */\r\n    public get executionId() {\r\n        return this._executionId;\r\n    }\r\n\r\n    /**\r\n     * Serializes a context\r\n     * @param serializationObject the object to write the values in\r\n     * @param valueSerializationFunction a function to serialize complex values\r\n     */\r\n    public serialize(serializationObject: any = {}, valueSerializationFunction: (key: string, value: any, serializationObject: any) => void = defaultValueSerializationFunction) {\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject._userVariables = {};\r\n        for (const key in this._userVariables) {\r\n            valueSerializationFunction(key, this._userVariables[key], serializationObject._userVariables);\r\n        }\r\n        serializationObject._connectionValues = {};\r\n        for (const key in this._connectionValues) {\r\n            valueSerializationFunction(key, this._connectionValues[key], serializationObject._connectionValues);\r\n        }\r\n        // serialize assets context, if not scene\r\n        if (this.assetsContext !== this.getScene()) {\r\n            serializationObject._assetsContext = {\r\n                meshes: this.assetsContext.meshes.map((m) => m.id),\r\n                materials: this.assetsContext.materials.map((m) => m.id),\r\n                textures: this.assetsContext.textures.map((m) => m.name),\r\n                animations: this.assetsContext.animations.map((m) => m.name),\r\n                lights: this.assetsContext.lights.map((m) => m.id),\r\n                cameras: this.assetsContext.cameras.map((m) => m.id),\r\n                sounds: this.assetsContext.sounds?.map((m) => m.name),\r\n                skeletons: this.assetsContext.skeletons.map((m) => m.id),\r\n                particleSystems: this.assetsContext.particleSystems.map((m) => m.name),\r\n                geometries: this.assetsContext.geometries.map((m) => m.id),\r\n                multiMaterials: this.assetsContext.multiMaterials.map((m) => m.id),\r\n                transformNodes: this.assetsContext.transformNodes.map((m) => m.id),\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns the class name of the object.\r\n     */\r\n    public getClassName() {\r\n        return \"FlowGraphContext\";\r\n    }\r\n}\r\n"]}