{"version":3,"file":"flowGraphEventBlock.js","sourceRoot":"","sources":["../../../../dev/core/src/FlowGraph/flowGraphEventBlock.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,4BAA4B,EAAE,MAAM,gCAAgC,CAAC;AAI9E;;;GAGG;AACH,MAAM,OAAgB,mBAAoB,SAAQ,4BAA4B;IAA9E;;QACI;;;WAGG;QACI,iBAAY,GAAW,CAAC,CAAC;QAEhC;;WAEG;QACa,SAAI,kDAAoD;IAgB5E,CAAC;IAfG;;OAEG;IACI,QAAQ,CAAC,OAAyB;QACrC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;CASJ","sourcesContent":["import { FlowGraphAsyncExecutionBlock } from \"./flowGraphAsyncExecutionBlock\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { FlowGraphEventType } from \"./flowGraphEventType\";\r\n\r\n/**\r\n * A type of block that listens to an event observable and activates\r\n * its output signal when the event is triggered.\r\n */\r\nexport abstract class FlowGraphEventBlock extends FlowGraphAsyncExecutionBlock {\r\n    /**\r\n     * the priority of initialization of this block.\r\n     * For example, scene start should have a negative priority because it should be initialized last.\r\n     */\r\n    public initPriority: number = 0;\r\n\r\n    /**\r\n     * The type of the event\r\n     */\r\n    public readonly type: FlowGraphEventType = FlowGraphEventType.NoTrigger;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _execute(context: FlowGraphContext): void {\r\n        context._notifyExecuteNode(this);\r\n        this.done._activateSignal(context);\r\n    }\r\n\r\n    /**\r\n     * Execute the event. This function should be called by the flow graph when the event is triggered.\r\n     * @param context the context in which the event is executed\r\n     * @param payload the payload of the event\r\n     * @returns a boolean indicating if the event should stop propagation. if false, the event will stop propagating.\r\n     */\r\n    public abstract _executeEvent(context: FlowGraphContext, payload: any): boolean;\r\n}\r\n"]}