{"version":3,"file":"flowGraphRichTypes.js","sourceRoot":"","sources":["../../../../dev/core/src/FlowGraph/flowGraphRichTypes.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector2, Vector3, Vector4, Matrix, Quaternion } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { FlowGraphInteger } from \"./CustomTypes/flowGraphInteger\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { FlowGraphMatrix2D, FlowGraphMatrix3D } from \"./CustomTypes/flowGraphMatrix\";\r\n\r\n/**\r\n * The types supported by the flow graph.\r\n */\r\nexport const enum FlowGraphTypes {\r\n    Any = \"any\",\r\n    String = \"string\",\r\n    Number = \"number\",\r\n    Boolean = \"boolean\",\r\n    Object = \"object\",\r\n    Integer = \"FlowGraphInteger\",\r\n    Vector2 = \"Vector2\",\r\n    Vector3 = \"Vector3\",\r\n    Vector4 = \"Vector4\",\r\n    Quaternion = \"Quaternion\",\r\n    Matrix = \"Matrix\",\r\n    Matrix2D = \"Matrix2D\",\r\n    Matrix3D = \"Matrix3D\",\r\n    Color3 = \"Color3\",\r\n    Color4 = \"Color4\",\r\n}\r\n\r\n/**\r\n * A rich type represents extra information about a type,\r\n * such as its name and a default value constructor.\r\n */\r\nexport class RichType<T> {\r\n    /**\r\n     * A function that can be used to transform a value of any type into a value of this rich type.\r\n     * This can be used, for example, between vector4 and quaternion.\r\n     */\r\n    public typeTransformer: (value: any) => T;\r\n\r\n    constructor(\r\n        /**\r\n         * The name given to the type.\r\n         */\r\n        public typeName: string,\r\n        /**\r\n         * The default value of the type.\r\n         */\r\n        public defaultValue: T,\r\n\r\n        /**\r\n         * [-1] The ANIMATIONTYPE of the type, if available\r\n         */\r\n        public animationType: number = -1\r\n    ) {}\r\n\r\n    /**\r\n     * Serializes this rich type into a serialization object.\r\n     * @param serializationObject the object to serialize to\r\n     */\r\n    serialize(serializationObject: any) {\r\n        serializationObject.typeName = this.typeName;\r\n        serializationObject.defaultValue = this.defaultValue;\r\n    }\r\n}\r\n\r\nexport const RichTypeAny: RichType<any> = new RichType(FlowGraphTypes.Any, undefined);\r\n\r\nexport const RichTypeString: RichType<string> = new RichType(FlowGraphTypes.String, \"\");\r\n\r\nexport const RichTypeNumber: RichType<number> = new RichType(FlowGraphTypes.Number, 0, Constants.ANIMATIONTYPE_FLOAT);\r\n\r\nexport const RichTypeBoolean: RichType<boolean> = new RichType(FlowGraphTypes.Boolean, false);\r\n\r\nexport const RichTypeVector2: RichType<Vector2> = new RichType(FlowGraphTypes.Vector2, Vector2.Zero(), Constants.ANIMATIONTYPE_VECTOR2);\r\n\r\nexport const RichTypeVector3: RichType<Vector3> = new RichType(FlowGraphTypes.Vector3, Vector3.Zero(), Constants.ANIMATIONTYPE_VECTOR3);\r\n\r\nexport const RichTypeVector4: RichType<Vector4> = new RichType(FlowGraphTypes.Vector4, Vector4.Zero());\r\n\r\nexport const RichTypeMatrix: RichType<Matrix> = new RichType(FlowGraphTypes.Matrix, Matrix.Identity(), Constants.ANIMATIONTYPE_MATRIX);\r\n\r\nexport const RichTypeMatrix2D: RichType<FlowGraphMatrix2D> = new RichType(FlowGraphTypes.Matrix2D, new FlowGraphMatrix2D());\r\n\r\nexport const RichTypeMatrix3D: RichType<FlowGraphMatrix3D> = new RichType(FlowGraphTypes.Matrix3D, new FlowGraphMatrix3D());\r\n\r\nexport const RichTypeColor3: RichType<Color3> = new RichType(FlowGraphTypes.Color3, Color3.Black(), Constants.ANIMATIONTYPE_COLOR3);\r\n\r\nexport const RichTypeColor4: RichType<Color4> = new RichType(FlowGraphTypes.Color4, new Color4(0, 0, 0, 0), Constants.ANIMATIONTYPE_COLOR4);\r\n\r\nexport const RichTypeQuaternion: RichType<Quaternion> = new RichType(FlowGraphTypes.Quaternion, Quaternion.Identity(), Constants.ANIMATIONTYPE_QUATERNION);\r\nRichTypeQuaternion.typeTransformer = (value: any) => {\r\n    if (value.getClassName && value.getClassName() === FlowGraphTypes.Vector4) {\r\n        return Quaternion.FromArray(value.asArray());\r\n    } else if (value.getClassName && value.getClassName() === FlowGraphTypes.Vector3) {\r\n        return Quaternion.FromEulerVector(value);\r\n    } else if (value.getClassName && value.getClassName() === FlowGraphTypes.Matrix) {\r\n        return Quaternion.FromRotationMatrix(value);\r\n    }\r\n    return value;\r\n};\r\nexport const RichTypeFlowGraphInteger: RichType<FlowGraphInteger> = new RichType(FlowGraphTypes.Integer, new FlowGraphInteger(0), Constants.ANIMATIONTYPE_FLOAT);\r\n\r\n/**\r\n * Given a value, try to deduce its rich type.\r\n * @param value the value to deduce the rich type from\r\n * @returns the value's rich type, or RichTypeAny if the type could not be deduced.\r\n */\r\nexport function getRichTypeFromValue<T>(value: T): RichType<T> {\r\n    const anyValue = value as any;\r\n    switch (typeof value) {\r\n        case FlowGraphTypes.String:\r\n            return RichTypeString as RichType<T>;\r\n        case FlowGraphTypes.Number:\r\n            return RichTypeNumber as RichType<T>;\r\n        case FlowGraphTypes.Boolean:\r\n            return RichTypeBoolean as RichType<T>;\r\n        case FlowGraphTypes.Object:\r\n            if (anyValue.getClassName) {\r\n                switch (anyValue.getClassName() as string) {\r\n                    case FlowGraphTypes.Vector2:\r\n                        return RichTypeVector2 as RichType<T>;\r\n                    case FlowGraphTypes.Vector3:\r\n                        return RichTypeVector3 as RichType<T>;\r\n                    case FlowGraphTypes.Vector4:\r\n                        return RichTypeVector4 as RichType<T>;\r\n                    case FlowGraphTypes.Matrix:\r\n                        return RichTypeMatrix as RichType<T>;\r\n                    case FlowGraphTypes.Color3:\r\n                        return RichTypeColor3 as RichType<T>;\r\n                    case FlowGraphTypes.Color4:\r\n                        return RichTypeColor4 as RichType<T>;\r\n                    case FlowGraphTypes.Quaternion:\r\n                        return RichTypeQuaternion as RichType<T>;\r\n                    case FlowGraphTypes.Integer:\r\n                        return RichTypeFlowGraphInteger as RichType<T>;\r\n                    case FlowGraphTypes.Matrix2D:\r\n                        return RichTypeMatrix2D as RichType<T>;\r\n                    case FlowGraphTypes.Matrix3D:\r\n                        return RichTypeMatrix3D as RichType<T>;\r\n                }\r\n            }\r\n            return RichTypeAny as RichType<T>;\r\n        default:\r\n            return RichTypeAny as RichType<T>;\r\n    }\r\n}\r\n\r\n/**\r\n * Given a flow graph type, return the rich type that corresponds to it.\r\n * @param flowGraphType the flow graph type\r\n * @returns the rich type that corresponds to the flow graph type\r\n */\r\nexport function getRichTypeByFlowGraphType(flowGraphType?: string): RichType<any> {\r\n    switch (flowGraphType) {\r\n        case FlowGraphTypes.String:\r\n            return RichTypeString;\r\n        case FlowGraphTypes.Number:\r\n            return RichTypeNumber;\r\n        case FlowGraphTypes.Boolean:\r\n            return RichTypeBoolean;\r\n        case FlowGraphTypes.Vector2:\r\n            return RichTypeVector2;\r\n        case FlowGraphTypes.Vector3:\r\n            return RichTypeVector3;\r\n        case FlowGraphTypes.Vector4:\r\n            return RichTypeVector4;\r\n        case FlowGraphTypes.Matrix:\r\n            return RichTypeMatrix;\r\n        case FlowGraphTypes.Color3:\r\n            return RichTypeColor3;\r\n        case FlowGraphTypes.Color4:\r\n            return RichTypeColor4;\r\n        case FlowGraphTypes.Quaternion:\r\n            return RichTypeQuaternion;\r\n        case FlowGraphTypes.Integer:\r\n            return RichTypeFlowGraphInteger;\r\n        case FlowGraphTypes.Matrix2D:\r\n            return RichTypeMatrix2D;\r\n        case FlowGraphTypes.Matrix3D:\r\n            return RichTypeMatrix3D;\r\n        default:\r\n            return RichTypeAny;\r\n    }\r\n}\r\n\r\n/**\r\n * get the animation type for a given flow graph type\r\n * @param flowGraphType the flow graph type\r\n * @returns the animation type for this flow graph type\r\n */\r\nexport function getAnimationTypeByFlowGraphType(flowGraphType: FlowGraphTypes): number {\r\n    switch (flowGraphType) {\r\n        case FlowGraphTypes.Number:\r\n            return Constants.ANIMATIONTYPE_FLOAT;\r\n        case FlowGraphTypes.Vector2:\r\n            return Constants.ANIMATIONTYPE_VECTOR2;\r\n        case FlowGraphTypes.Vector3:\r\n            return Constants.ANIMATIONTYPE_VECTOR3;\r\n        case FlowGraphTypes.Matrix:\r\n            return Constants.ANIMATIONTYPE_MATRIX;\r\n        case FlowGraphTypes.Color3:\r\n            return Constants.ANIMATIONTYPE_COLOR3;\r\n        case FlowGraphTypes.Color4:\r\n            return Constants.ANIMATIONTYPE_COLOR4;\r\n        case FlowGraphTypes.Quaternion:\r\n            return Constants.ANIMATIONTYPE_QUATERNION;\r\n        default:\r\n            return Constants.ANIMATIONTYPE_FLOAT;\r\n    }\r\n}\r\n\r\n/**\r\n * Given an animation type, return the rich type that corresponds to it.\r\n * @param animationType the animation type\r\n * @returns the rich type that corresponds to the animation type\r\n */\r\nexport function getRichTypeByAnimationType(animationType: number): RichType<any> {\r\n    switch (animationType) {\r\n        case Constants.ANIMATIONTYPE_FLOAT:\r\n            return RichTypeNumber;\r\n        case Constants.ANIMATIONTYPE_VECTOR2:\r\n            return RichTypeVector2;\r\n        case Constants.ANIMATIONTYPE_VECTOR3:\r\n            return RichTypeVector3;\r\n        case Constants.ANIMATIONTYPE_MATRIX:\r\n            return RichTypeMatrix;\r\n        case Constants.ANIMATIONTYPE_COLOR3:\r\n            return RichTypeColor3;\r\n        case Constants.ANIMATIONTYPE_COLOR4:\r\n            return RichTypeColor4;\r\n        case Constants.ANIMATIONTYPE_QUATERNION:\r\n            return RichTypeQuaternion;\r\n        default:\r\n            return RichTypeAny;\r\n    }\r\n}\r\n"]}