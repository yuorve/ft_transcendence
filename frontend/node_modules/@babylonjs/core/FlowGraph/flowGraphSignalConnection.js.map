{"version":3,"file":"flowGraphSignalConnection.js","sourceRoot":"","sources":["../../../../dev/core/src/FlowGraph/flowGraphSignalConnection.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAA2B,MAAM,uBAAuB,CAAC;AAErF,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAGlD;;;;GAIG;AACH,MAAM,OAAO,yBAA0B,SAAQ,mBAAuE;IAAtH;;QAMI;;;WAGG;QACI,aAAQ,GAAW,CAAC,CAAC;IAmChC,CAAC;IAjCmB,qBAAqB;QACjC,OAAO,KAAK,CAAC;IACjB,CAAC;IAEe,SAAS,CAAC,KAAgC;QACtD,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACvB,uDAAuD;QACvD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACI,eAAe,CAAC,OAAyB;QAC5C,OAAO,CAAC,MAAM,EAAE,UAAU,CAAC;YACvB,MAAM,uDAAgC;YACtC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE;YAC1C,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ;YACnC,OAAO,EAAE;gBACL,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,IAAI,EAAE,IAAI,CAAC,IAAI;aAClB;SACJ,CAAC,CAAC;QACH,IAAI,IAAI,CAAC,cAAc,0CAAkC,EAAE,CAAC;YACxD,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC7C,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACzC,OAAO,CAAC,oBAAoB,EAAE,CAAC;QACnC,CAAC;aAAM,CAAC;YACJ,KAAK,MAAM,cAAc,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;gBAChD,cAAc,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YAC5C,CAAC;QACL,CAAC;IACL,CAAC;CACJ;AAED,aAAa,CAAC,2BAA2B,EAAE,yBAAyB,CAAC,CAAC","sourcesContent":["import type { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\r\nimport { FlowGraphConnection, FlowGraphConnectionType } from \"./flowGraphConnection\";\r\nimport type { FlowGraphContext } from \"./flowGraphContext\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { FlowGraphAction } from \"./flowGraphLogger\";\r\n\r\n/**\r\n * Represents a connection point for a signal.\r\n * When an output point is activated, it will activate the connected input point.\r\n * When an input point is activated, it will execute the block it belongs to.\r\n */\r\nexport class FlowGraphSignalConnection extends FlowGraphConnection<FlowGraphExecutionBlock, FlowGraphSignalConnection> {\r\n    /**\r\n     * Optional payload. Can be used, for example, when an error is thrown to pass additional information.\r\n     */\r\n    public payload: any;\r\n\r\n    /**\r\n     * The priority of the signal. Signals with higher priority will be executed first.\r\n     * Set priority before adding the connection as sorting happens only when the connection is added.\r\n     */\r\n    public priority: number = 0;\r\n\r\n    public override _isSingularConnection(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public override connectTo(point: FlowGraphSignalConnection): void {\r\n        super.connectTo(point);\r\n        // sort according to priority to handle execution order\r\n        this._connectedPoint.sort((a, b) => b.priority - a.priority);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _activateSignal(context: FlowGraphContext): void {\r\n        context.logger?.addLogItem({\r\n            action: FlowGraphAction.ActivateSignal,\r\n            className: this._ownerBlock.getClassName(),\r\n            uniqueId: this._ownerBlock.uniqueId,\r\n            payload: {\r\n                connectionType: this.connectionType,\r\n                name: this.name,\r\n            },\r\n        });\r\n        if (this.connectionType === FlowGraphConnectionType.Input) {\r\n            context._notifyExecuteNode(this._ownerBlock);\r\n            this._ownerBlock._execute(context, this);\r\n            context._increaseExecutionId();\r\n        } else {\r\n            for (const connectedPoint of this._connectedPoint) {\r\n                connectedPoint._activateSignal(context);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"FlowGraphSignalConnection\", FlowGraphSignalConnection);\r\n"]}