{"version":3,"file":"renderPass.js","sourceRoot":"","sources":["../../../../../dev/core/src/FrameGraph/Passes/renderPass.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line import/no-internal-modules\r\nimport type { Nullable, FrameGraphRenderContext, AbstractEngine, IFrameGraphPass, FrameGraphTextureHandle, FrameGraphTask, FrameGraphRenderTarget } from \"core/index\";\r\nimport { FrameGraphPass } from \"./pass\";\r\n\r\n/**\r\n * Render pass used to render objects.\r\n */\r\nexport class FrameGraphRenderPass extends FrameGraphPass<FrameGraphRenderContext> {\r\n    protected readonly _engine: AbstractEngine;\r\n    protected _renderTarget: FrameGraphTextureHandle | FrameGraphTextureHandle[] | undefined;\r\n    protected _renderTargetDepth: FrameGraphTextureHandle | undefined;\r\n    protected _frameGraphRenderTarget: FrameGraphRenderTarget | undefined;\r\n    protected _dependencies: Set<FrameGraphTextureHandle> = new Set();\r\n\r\n    /**\r\n     * Checks if a pass is a render pass.\r\n     * @param pass The pass to check.\r\n     * @returns True if the pass is a render pass, else false.\r\n     */\r\n    public static IsRenderPass(pass: IFrameGraphPass): pass is FrameGraphRenderPass {\r\n        return (pass as FrameGraphRenderPass).setRenderTarget !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets the render target(s) used by the render pass.\r\n     */\r\n    public get renderTarget(): FrameGraphTextureHandle | FrameGraphTextureHandle[] | undefined {\r\n        return this._renderTarget;\r\n    }\r\n\r\n    /**\r\n     * Gets the render target depth used by the render pass.\r\n     */\r\n    public get renderTargetDepth(): FrameGraphTextureHandle | undefined {\r\n        return this._renderTargetDepth;\r\n    }\r\n\r\n    /** @internal */\r\n    constructor(name: string, parentTask: FrameGraphTask, context: FrameGraphRenderContext, engine: AbstractEngine) {\r\n        super(name, parentTask, context);\r\n        this._engine = engine;\r\n    }\r\n\r\n    /**\r\n     * Sets the render target(s) to use for rendering.\r\n     * @param renderTargetHandle The render target to use for rendering, or an array of render targets to use for multi render target rendering.\r\n     */\r\n    public setRenderTarget(renderTargetHandle?: FrameGraphTextureHandle | FrameGraphTextureHandle[]) {\r\n        this._renderTarget = renderTargetHandle;\r\n    }\r\n\r\n    /**\r\n     * Sets the render target depth to use for rendering.\r\n     * @param renderTargetHandle The render target depth to use for rendering.\r\n     */\r\n    public setRenderTargetDepth(renderTargetHandle?: FrameGraphTextureHandle) {\r\n        this._renderTargetDepth = renderTargetHandle;\r\n    }\r\n\r\n    /**\r\n     * Adds dependencies to the render pass.\r\n     * @param dependencies The dependencies to add.\r\n     */\r\n    public addDependencies(dependencies: FrameGraphTextureHandle | FrameGraphTextureHandle[]) {\r\n        if (Array.isArray(dependencies)) {\r\n            for (const dependency of dependencies) {\r\n                this._dependencies.add(dependency);\r\n            }\r\n        } else {\r\n            this._dependencies.add(dependencies);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collects the dependencies of the render pass.\r\n     * @param dependencies The set of dependencies to update.\r\n     */\r\n    public collectDependencies(dependencies: Set<FrameGraphTextureHandle>): void {\r\n        const iterator = this._dependencies.keys();\r\n        for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n            dependencies.add(key.value);\r\n        }\r\n\r\n        if (this._renderTarget) {\r\n            if (Array.isArray(this._renderTarget)) {\r\n                for (const handle of this._renderTarget) {\r\n                    if (handle !== undefined) {\r\n                        dependencies.add(handle);\r\n                    }\r\n                }\r\n            } else {\r\n                dependencies.add(this._renderTarget);\r\n            }\r\n        }\r\n\r\n        if (this._renderTargetDepth) {\r\n            dependencies.add(this._renderTargetDepth);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _execute() {\r\n        this._frameGraphRenderTarget = this._frameGraphRenderTarget || this._context.createRenderTarget(this.name, this._renderTarget, this._renderTargetDepth);\r\n\r\n        this._context.bindRenderTarget(this._frameGraphRenderTarget, `frame graph render pass - ${this.name}`);\r\n\r\n        super._execute();\r\n\r\n        this._context._flushDebugMessages();\r\n    }\r\n\r\n    /** @internal */\r\n    public override _isValid(): Nullable<string> {\r\n        const errMsg = super._isValid();\r\n        return errMsg\r\n            ? errMsg\r\n            : this._renderTarget !== undefined || this.renderTargetDepth !== undefined\r\n              ? null\r\n              : \"Render target and render target depth cannot both be undefined.\";\r\n    }\r\n}\r\n"]}