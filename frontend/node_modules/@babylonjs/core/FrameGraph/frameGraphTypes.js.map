{"version":3,"file":"frameGraphTypes.js","sourceRoot":"","sources":["../../../../dev/core/src/FrameGraph/frameGraphTypes.ts"],"names":[],"mappings":"AAQA;;GAEG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAA4B,CAAC,CAAC;AAEvE;;GAEG;AACH,MAAM,CAAC,MAAM,mCAAmC,GAA4B,CAAC,CAAC","sourcesContent":["// eslint-disable-next-line import/no-internal-modules\r\nimport type { Nullable, TextureSize, FrameGraphContext } from \"core/index\";\r\n\r\n/**\r\n * Represents a texture handle in the frame graph.\r\n */\r\nexport type FrameGraphTextureHandle = number;\r\n\r\n/**\r\n * Represents a texture handle for the backbuffer color texture.\r\n */\r\nexport const backbufferColorTextureHandle: FrameGraphTextureHandle = 0;\r\n\r\n/**\r\n * Represents a texture handle for the backbuffer depth/stencil texture.\r\n */\r\nexport const backbufferDepthStencilTextureHandle: FrameGraphTextureHandle = 1;\r\n\r\n/**\r\n * Options used to describe a texture to be created in the frame graph.\r\n */\r\nexport type FrameGraphTextureOptions = {\r\n    /** Specifies if mipmaps must be created for the textures (default: false) */\r\n    createMipMaps?: boolean;\r\n\r\n    /** Defines sample count (default: 1) */\r\n    samples?: number;\r\n\r\n    /** Defines the types of the textures */\r\n    types?: number[];\r\n\r\n    /** Defines the format of the textures (RED, RG, RGB, RGBA, ALPHA...) */\r\n    formats?: number[];\r\n\r\n    /** Defines if sRGB format should be used for each of texture */\r\n    useSRGBBuffers?: boolean[];\r\n\r\n    /** Defines the creation flags of the textures (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg) */\r\n    creationFlags?: number[];\r\n\r\n    /** Defines the names of the textures (used for debugging purpose) */\r\n    labels?: string[];\r\n};\r\n\r\n/**\r\n * Options used to create a texture / list of textures in the frame graph.\r\n */\r\nexport type FrameGraphTextureCreationOptions = {\r\n    /** Size of the textures. If sizeIsPercentage is true, these are percentages relative to the screen size (100 = 100%) */\r\n    size: TextureSize;\r\n\r\n    /** Options used to create the textures */\r\n    options: FrameGraphTextureOptions;\r\n\r\n    /** If true, indicates that \"size\" is percentages relative to the screen size */\r\n    sizeIsPercentage: boolean;\r\n\r\n    /** Indicates that the texture is a history texture (default: false) */\r\n    isHistoryTexture?: boolean;\r\n};\r\n\r\n/**\r\n * Represents a texture description in the frame graph.\r\n * This is basically the same thing than FrameGraphTextureCreationOptions, but the size is never in percentage and always in pixels.\r\n */\r\nexport type FrameGraphTextureDescription = {\r\n    /** Size of the texture */\r\n    size: { width: number; height: number };\r\n\r\n    /** Options used to create the texture */\r\n    options: FrameGraphTextureOptions;\r\n};\r\n\r\n/**\r\n * Defines a pass in the frame graph.\r\n */\r\nexport interface IFrameGraphPass {\r\n    /**\r\n     * The name of the pass.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Whether the pass is disabled.\r\n     */\r\n    disabled: boolean;\r\n\r\n    /**\r\n     * Sets the function to execute when the pass is executed\r\n     * @param func The function to execute when the pass is executed\r\n     */\r\n    setExecuteFunc(func: (context: FrameGraphContext) => void): void;\r\n\r\n    /** @internal */\r\n    _execute(): void;\r\n\r\n    /** @internal */\r\n    _isValid(): Nullable<string>;\r\n}\r\n"]}