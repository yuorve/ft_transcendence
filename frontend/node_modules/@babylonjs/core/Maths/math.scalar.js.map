{"version":3,"file":"math.scalar.js","sourceRoot":"","sources":["../../../../dev/core/src/Maths/math.scalar.ts"],"names":[],"mappings":"AAAA,yDAAyD;AACzD,OAAO,KAAK,SAAS,MAAM,yBAAyB,CAAC;AAErD,MAAM,GAAG,GAAqC,SAAS,CAAC,mBAAmB,CAAC;AAE5E;;GAEG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG;IAClB,GAAG,SAAS;IAEZ;;OAEG;IACH,KAAK,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC;IAElB;;;;OAIG;IACH,IAAI,EAAE,IAAI,CAAC,IAAI;IAEf;;;;OAIG;IACH,IAAI,EAAE,IAAI,CAAC,IAAI;IAEf;;;;;OAKG;IACH,GAAG;CACN,CAAC;AACF,wDAAwD","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport * as functions from \"./math.scalar.functions\";\r\n\r\nconst HCF: (a: number, b: number) => number = functions.HighestCommonFactor;\r\n\r\n/**\r\n * Scalar computation library\r\n */\r\nexport const Scalar = {\r\n    ...functions,\r\n\r\n    /**\r\n     * Two pi constants convenient for computation.\r\n     */\r\n    TwoPi: Math.PI * 2,\r\n\r\n    /**\r\n     * Returns -1 if value is negative and +1 is value is positive.\r\n     * @param value the value\r\n     * @returns the value itself if it's equal to zero.\r\n     */\r\n    Sign: Math.sign,\r\n\r\n    /**\r\n     * the log2 of value.\r\n     * @param value the value to compute log2 of\r\n     * @returns the log2 of value.\r\n     */\r\n    Log2: Math.log2,\r\n\r\n    /**\r\n     * Returns the highest common factor of two integers.\r\n     * @param a first parameter\r\n     * @param b second parameter\r\n     * @returns HCF of a and b\r\n     */\r\n    HCF,\r\n};\r\n/* eslint-enable @typescript-eslint/naming-convention */\r\n"]}