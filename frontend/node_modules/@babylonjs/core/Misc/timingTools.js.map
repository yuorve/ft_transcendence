{"version":3,"file":"timingTools.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/timingTools.ts"],"names":[],"mappings":"AAAA,IAAI,eAAe,GAAsB,EAAE,CAAC;AAE5C;;GAEG;AACH,MAAM,OAAO,WAAW;IACpB;;;OAGG;IACI,MAAM,CAAC,YAAY,CAAC,MAAkB;QACzC,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/B,UAAU,CAAC,GAAG,EAAE;gBACZ,kCAAkC;gBAClC,MAAM,eAAe,GAAG,eAAe,CAAC;gBACxC,eAAe,GAAG,EAAE,CAAC;gBAErB,KAAK,MAAM,IAAI,IAAI,eAAe,EAAE,CAAC;oBACjC,IAAI,EAAE,CAAC;gBACX,CAAC;YACL,CAAC,EAAE,CAAC,CAAC,CAAC;QACV,CAAC;QACD,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;CACJ;AAED,SAAS,iBAAiB,CAAC,SAAwB,EAAE,SAAqB,EAAE,OAAgD;IACxH,IAAI,CAAC;QACD,IAAI,SAAS,EAAE,EAAE,CAAC;YACd,SAAS,EAAE,CAAC;YACZ,OAAO,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACT,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAC9B,SAAwB,EACxB,SAAqB,EACrB,OAAgD,EAChD,IAAI,GAAG,EAAE,EACT,UAAU,GAAG,KAAK,EAClB,uBAAgC,IAAI,EACpC,yBAAkC,EACpC,EAAE;IACA,mHAAmH;IACnH,IAAI,oBAAoB,EAAE,CAAC;QACvB,gIAAgI;QAChI,IAAI,iBAAiB,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,CAAC;YACnD,4DAA4D;YAC5D,OAAO,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IACD,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE;QACzB,IAAI,iBAAiB,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,CAAC;YACnD,aAAa,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC;aAAM,CAAC;YACJ,UAAU,IAAI,IAAI,CAAC;YACnB,IAAI,UAAU,GAAG,CAAC,EAAE,CAAC;gBACjB,aAAa,CAAC,GAAG,CAAC,CAAC;gBACnB,OAAO,EAAE,CAAC,IAAI,KAAK,CAAC,6CAA6C,GAAG,CAAC,yBAAyB,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAClH,CAAC;QACL,CAAC;IACL,CAAC,EAAE,IAAI,CAAC,CAAC;IACT,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AACpC,CAAC,CAAC","sourcesContent":["let _immediateQueue: Array<() => void> = [];\r\n\r\n/**\r\n * Class used to provide helper for timing\r\n */\r\nexport class TimingTools {\r\n    /**\r\n     * Execute a function after the current execution block\r\n     * @param action defines the action to execute after the current execution block\r\n     */\r\n    public static SetImmediate(action: () => void) {\r\n        if (_immediateQueue.length === 0) {\r\n            setTimeout(() => {\r\n                // Execute all immediate functions\r\n                const functionsToCall = _immediateQueue;\r\n                _immediateQueue = [];\r\n\r\n                for (const func of functionsToCall) {\r\n                    func();\r\n                }\r\n            }, 1);\r\n        }\r\n        _immediateQueue.push(action);\r\n    }\r\n}\r\n\r\nfunction _runWithCondition(condition: () => boolean, onSuccess: () => void, onError?: (e?: any, isTimeout?: boolean) => void) {\r\n    try {\r\n        if (condition()) {\r\n            onSuccess();\r\n            return true;\r\n        }\r\n    } catch (e) {\r\n        onError?.(e);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const _retryWithInterval = (\r\n    condition: () => boolean,\r\n    onSuccess: () => void,\r\n    onError?: (e?: any, isTimeout?: boolean) => void,\r\n    step = 16,\r\n    maxTimeout = 30000,\r\n    checkConditionOnCall: boolean = true,\r\n    additionalStringOnTimeout?: string\r\n) => {\r\n    // if checkConditionOnCall is true, we check the condition immediately. If it is true, run everything synchronously\r\n    if (checkConditionOnCall) {\r\n        // that means that one of the two happened - either the condition is true or an exception was thrown when checking the condition\r\n        if (_runWithCondition(condition, onSuccess, onError)) {\r\n            // don't schedule the interval, no reason to check it again.\r\n            return null;\r\n        }\r\n    }\r\n    const int = setInterval(() => {\r\n        if (_runWithCondition(condition, onSuccess, onError)) {\r\n            clearInterval(int);\r\n        } else {\r\n            maxTimeout -= step;\r\n            if (maxTimeout < 0) {\r\n                clearInterval(int);\r\n                onError?.(new Error(\"Operation timed out after maximum retries. \" + (additionalStringOnTimeout || \"\")), true);\r\n            }\r\n        }\r\n    }, step);\r\n    return () => clearInterval(int);\r\n};\r\n"]}