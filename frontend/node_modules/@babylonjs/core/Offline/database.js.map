{"version":3,"file":"database.js","sourceRoot":"","sources":["../../../../dev/core/src/Offline/database.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { GetTGAHeader } from \"../Misc/tga\";\r\nimport type { IOfflineProvider } from \"./IOfflineProvider\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\nimport { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n// Sets the default offline provider to Babylon.js\r\nAbstractEngine.OfflineProviderFactory = (urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck = false) => {\r\n    return new Database(urlToScene, callbackManifestChecked, disableManifestCheck);\r\n};\r\n\r\n/**\r\n * Class used to enable access to IndexedDB\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimizeCached\r\n */\r\nexport class Database implements IOfflineProvider {\r\n    private _currentSceneUrl: string;\r\n    private _db: Nullable<IDBDatabase>;\r\n    private _enableSceneOffline: boolean;\r\n    private _enableTexturesOffline: boolean;\r\n    private _manifestVersionFound: number;\r\n    private _mustUpdateRessources: boolean;\r\n    private _hasReachedQuota: boolean;\r\n    private _isSupported: boolean;\r\n\r\n    // Handling various flavors of prefixed version of IndexedDB\r\n    private _idbFactory = <IDBFactory>(typeof indexedDB !== \"undefined\" ? indexedDB : undefined);\r\n\r\n    /** Gets a boolean indicating if the user agent supports blob storage (this value will be updated after creating the first Database object) */\r\n    private static _IsUASupportingBlobStorage = true;\r\n\r\n    /**\r\n     * Gets a boolean indicating if Database storage is enabled (off by default)\r\n     */\r\n    static IDBStorageEnabled = false;\r\n\r\n    /**\r\n     * Gets a boolean indicating if scene must be saved in the database\r\n     */\r\n    public get enableSceneOffline(): boolean {\r\n        return this._enableSceneOffline;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if textures must be saved in the database\r\n     */\r\n    public get enableTexturesOffline(): boolean {\r\n        return this._enableTexturesOffline;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Database\r\n     * @param urlToScene defines the url to load the scene\r\n     * @param callbackManifestChecked defines the callback to use when manifest is checked\r\n     * @param disableManifestCheck defines a boolean indicating that we want to skip the manifest validation (it will be considered validated and up to date)\r\n     */\r\n    constructor(urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck = false) {\r\n        this._currentSceneUrl = Database._ReturnFullUrlLocation(urlToScene);\r\n        this._db = null;\r\n        this._enableSceneOffline = false;\r\n        this._enableTexturesOffline = false;\r\n        this._manifestVersionFound = 0;\r\n        this._mustUpdateRessources = false;\r\n        this._hasReachedQuota = false;\r\n\r\n        if (!Database.IDBStorageEnabled) {\r\n            callbackManifestChecked(true);\r\n        } else {\r\n            if (disableManifestCheck) {\r\n                this._enableSceneOffline = true;\r\n                this._enableTexturesOffline = true;\r\n                this._manifestVersionFound = 1;\r\n                Tools.SetImmediate(() => {\r\n                    callbackManifestChecked(true);\r\n                });\r\n            } else {\r\n                this._checkManifestFile(callbackManifestChecked);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _ParseURL = (url: string) => {\r\n        const a = document.createElement(\"a\");\r\n        a.href = url;\r\n        const urlWithoutHash = url.substring(0, url.lastIndexOf(\"#\"));\r\n        const fileName = url.substring(urlWithoutHash.lastIndexOf(\"/\") + 1, url.length);\r\n        const absLocation = url.substring(0, url.indexOf(fileName, 0));\r\n        return absLocation;\r\n    };\r\n\r\n    private static _ReturnFullUrlLocation = (url: string): string => {\r\n        if (url.indexOf(\"http:/\") === -1 && url.indexOf(\"https:/\") === -1 && typeof window !== \"undefined\") {\r\n            return Database._ParseURL(window.location.href) + url;\r\n        } else {\r\n            return url;\r\n        }\r\n    };\r\n\r\n    private _checkManifestFile(callbackManifestChecked: (checked: boolean) => any) {\r\n        const noManifestFile = () => {\r\n            this._enableSceneOffline = false;\r\n            this._enableTexturesOffline = false;\r\n            callbackManifestChecked(false);\r\n        };\r\n\r\n        const createManifestURL = (): string => {\r\n            try {\r\n                // make sure we have a valid URL.\r\n                if (typeof URL === \"function\" && this._currentSceneUrl.indexOf(\"http\") === 0) {\r\n                    // we don't have the base url, so the URL string must have a protocol\r\n                    const url = new URL(this._currentSceneUrl);\r\n                    url.pathname += \".manifest\";\r\n                    return url.toString();\r\n                }\r\n            } catch (e) {\r\n                // defensive - if this fails for any reason, fall back to the older method\r\n            }\r\n\r\n            return `${this._currentSceneUrl}.manifest`;\r\n        };\r\n\r\n        let timeStampUsed = false;\r\n        let manifestURL = createManifestURL();\r\n\r\n        const xhr = new WebRequest();\r\n\r\n        if (navigator.onLine) {\r\n            // Adding a timestamp to by-pass browsers' cache\r\n            timeStampUsed = true;\r\n            manifestURL = manifestURL + (manifestURL.match(/\\?/) == null ? \"?\" : \"&\") + Date.now();\r\n        }\r\n        xhr.open(\"GET\", manifestURL);\r\n\r\n        xhr.addEventListener(\r\n            \"load\",\r\n            () => {\r\n                if (xhr.status === 200 || Database._ValidateXHRData(xhr, 1)) {\r\n                    try {\r\n                        const manifestFile = JSON.parse(xhr.response);\r\n                        this._enableSceneOffline = manifestFile.enableSceneOffline;\r\n                        this._enableTexturesOffline = manifestFile.enableTexturesOffline && Database._IsUASupportingBlobStorage;\r\n                        if (manifestFile.version && !isNaN(parseInt(manifestFile.version))) {\r\n                            this._manifestVersionFound = manifestFile.version;\r\n                        }\r\n                        callbackManifestChecked(true);\r\n                    } catch (ex) {\r\n                        noManifestFile();\r\n                    }\r\n                } else {\r\n                    noManifestFile();\r\n                }\r\n            },\r\n            false\r\n        );\r\n\r\n        xhr.addEventListener(\r\n            \"error\",\r\n            () => {\r\n                if (timeStampUsed) {\r\n                    timeStampUsed = false;\r\n                    // Let's retry without the timeStamp\r\n                    // It could fail when coupled with HTML5 Offline API\r\n                    const retryManifestURL = createManifestURL();\r\n                    xhr.open(\"GET\", retryManifestURL);\r\n                    xhr.send();\r\n                } else {\r\n                    noManifestFile();\r\n                }\r\n            },\r\n            false\r\n        );\r\n\r\n        try {\r\n            xhr.send();\r\n        } catch (ex) {\r\n            Logger.Error(\"Error on XHR send request.\");\r\n            callbackManifestChecked(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open the database and make it available\r\n     * @param successCallback defines the callback to call on success\r\n     * @param errorCallback defines the callback to call on error\r\n     */\r\n    public open(successCallback: () => void, errorCallback: () => void): void {\r\n        const handleError = () => {\r\n            this._isSupported = false;\r\n            if (errorCallback) {\r\n                errorCallback();\r\n            }\r\n        };\r\n\r\n        if (!this._idbFactory || !(this._enableSceneOffline || this._enableTexturesOffline)) {\r\n            // Your browser doesn't support IndexedDB\r\n            this._isSupported = false;\r\n            if (errorCallback) {\r\n                errorCallback();\r\n            }\r\n        } else {\r\n            // If the DB hasn't been opened or created yet\r\n            if (!this._db) {\r\n                this._hasReachedQuota = false;\r\n                this._isSupported = true;\r\n\r\n                const request: IDBOpenDBRequest = this._idbFactory.open(\"babylonjs\", 1);\r\n\r\n                // Could occur if user is blocking the quota for the DB and/or doesn't grant access to IndexedDB\r\n                request.onerror = () => {\r\n                    handleError();\r\n                };\r\n\r\n                // executes when a version change transaction cannot complete due to other active transactions\r\n                request.onblocked = () => {\r\n                    Logger.Error(\"IDB request blocked. Please reload the page.\");\r\n                    handleError();\r\n                };\r\n\r\n                // DB has been opened successfully\r\n                request.onsuccess = () => {\r\n                    this._db = request.result;\r\n                    successCallback();\r\n                };\r\n\r\n                // Initialization of the DB. Creating Scenes & Textures stores\r\n                request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\r\n                    this._db = (<any>event.target).result;\r\n                    if (this._db) {\r\n                        try {\r\n                            this._db.createObjectStore(\"scenes\", { keyPath: \"sceneUrl\" });\r\n                            this._db.createObjectStore(\"versions\", { keyPath: \"sceneUrl\" });\r\n                            this._db.createObjectStore(\"textures\", { keyPath: \"textureUrl\" });\r\n                        } catch (ex) {\r\n                            Logger.Error(\"Error while creating object stores. Exception: \" + ex.message);\r\n                            handleError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            // DB has already been created and opened\r\n            else {\r\n                if (successCallback) {\r\n                    successCallback();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads an image from the database\r\n     * @param url defines the url to load from\r\n     * @param image defines the target DOM image\r\n     */\r\n    public loadImage(url: string, image: HTMLImageElement) {\r\n        const completeURL = Database._ReturnFullUrlLocation(url);\r\n\r\n        const saveAndLoadImage = () => {\r\n            if (!this._hasReachedQuota && this._db !== null) {\r\n                // the texture is not yet in the DB, let's try to save it\r\n                this._saveImageIntoDBAsync(completeURL, image);\r\n            }\r\n            // If the texture is not in the DB and we've reached the DB quota limit\r\n            // let's load it directly from the web\r\n            else {\r\n                image.src = url;\r\n            }\r\n        };\r\n\r\n        if (!this._mustUpdateRessources) {\r\n            this._loadImageFromDBAsync(completeURL, image, saveAndLoadImage);\r\n        }\r\n        // First time we're download the images or update requested in the manifest file by a version change\r\n        else {\r\n            saveAndLoadImage();\r\n        }\r\n    }\r\n\r\n    private _loadImageFromDBAsync(url: string, image: HTMLImageElement, notInDBCallback: () => any) {\r\n        if (this._isSupported && this._db !== null) {\r\n            let texture: any;\r\n            const transaction: IDBTransaction = this._db.transaction([\"textures\"]);\r\n\r\n            transaction.onabort = () => {\r\n                image.src = url;\r\n            };\r\n\r\n            transaction.oncomplete = () => {\r\n                let blobTextureURL: string;\r\n                if (texture && typeof URL === \"function\") {\r\n                    blobTextureURL = URL.createObjectURL(texture.data);\r\n                    image.onerror = () => {\r\n                        Logger.Error(\"Error loading image from blob URL: \" + blobTextureURL + \" switching back to web url: \" + url);\r\n                        image.src = url;\r\n                    };\r\n                    image.src = blobTextureURL;\r\n                } else {\r\n                    notInDBCallback();\r\n                }\r\n            };\r\n\r\n            const getRequest: IDBRequest = transaction.objectStore(\"textures\").get(url);\r\n\r\n            getRequest.onsuccess = (event) => {\r\n                texture = (<any>event.target).result;\r\n            };\r\n            getRequest.onerror = () => {\r\n                Logger.Error(\"Error loading texture \" + url + \" from DB.\");\r\n                image.src = url;\r\n            };\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\r\n            image.src = url;\r\n        }\r\n    }\r\n\r\n    private _saveImageIntoDBAsync(url: string, image: HTMLImageElement) {\r\n        let blob: Blob;\r\n\r\n        if (this._isSupported) {\r\n            // In case of error (type not supported or quota exceeded), we're at least sending back XHR data to allow texture loading later on\r\n            const generateBlobUrl = () => {\r\n                let blobTextureURL;\r\n\r\n                if (blob && typeof URL === \"function\") {\r\n                    try {\r\n                        blobTextureURL = URL.createObjectURL(blob);\r\n                    } catch (ex) {\r\n                        // Chrome is raising a type error if we're setting the oneTimeOnly parameter\r\n                        blobTextureURL = URL.createObjectURL(blob);\r\n                    }\r\n                }\r\n\r\n                if (blobTextureURL) {\r\n                    image.src = blobTextureURL;\r\n                }\r\n            };\r\n\r\n            if (Database._IsUASupportingBlobStorage) {\r\n                // Create XHR\r\n                const xhr = new WebRequest();\r\n\r\n                xhr.open(\"GET\", url);\r\n                xhr.responseType = \"blob\";\r\n\r\n                xhr.addEventListener(\r\n                    \"load\",\r\n                    () => {\r\n                        if (xhr.status === 200 && this._db) {\r\n                            // Blob as response\r\n                            blob = xhr.response;\r\n\r\n                            const transaction = this._db.transaction([\"textures\"], \"readwrite\");\r\n\r\n                            // the transaction could abort because of a QuotaExceededError error\r\n                            transaction.onabort = (event) => {\r\n                                try {\r\n                                    //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                                    const srcElement = <any>event.target;\r\n                                    const error = srcElement.error;\r\n                                    if (error && error.name === \"QuotaExceededError\") {\r\n                                        this._hasReachedQuota = true;\r\n                                    }\r\n                                } catch (ex) {}\r\n                                generateBlobUrl();\r\n                            };\r\n\r\n                            transaction.oncomplete = () => {\r\n                                generateBlobUrl();\r\n                            };\r\n\r\n                            const newTexture = { textureUrl: url, data: blob };\r\n\r\n                            try {\r\n                                // Put the blob into the dabase\r\n                                const addRequest = transaction.objectStore(\"textures\").put(newTexture);\r\n                                addRequest.onsuccess = () => {};\r\n                                addRequest.onerror = () => {\r\n                                    generateBlobUrl();\r\n                                };\r\n                            } catch (ex) {\r\n                                // \"DataCloneError\" generated by Chrome when you try to inject blob into IndexedDB\r\n                                if (ex.code === 25) {\r\n                                    Database._IsUASupportingBlobStorage = false;\r\n                                    this._enableTexturesOffline = false;\r\n                                }\r\n                                image.src = url;\r\n                            }\r\n                        } else {\r\n                            image.src = url;\r\n                        }\r\n                    },\r\n                    false\r\n                );\r\n\r\n                xhr.addEventListener(\r\n                    \"error\",\r\n                    () => {\r\n                        Logger.Error(\"Error in XHR request in BABYLON.Database.\");\r\n                        image.src = url;\r\n                    },\r\n                    false\r\n                );\r\n\r\n                xhr.send();\r\n            } else {\r\n                image.src = url;\r\n            }\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            image.src = url;\r\n        }\r\n    }\r\n\r\n    private _checkVersionFromDB(url: string, versionLoaded: (version: number) => void) {\r\n        const updateVersion = () => {\r\n            // the version is not yet in the DB or we need to update it\r\n            this._saveVersionIntoDBAsync(url, versionLoaded);\r\n        };\r\n        this._loadVersionFromDBAsync(url, versionLoaded, updateVersion);\r\n    }\r\n\r\n    private _loadVersionFromDBAsync(url: string, callback: (version: number) => void, updateInDBCallback: () => void) {\r\n        if (this._isSupported && this._db) {\r\n            let version: any;\r\n            try {\r\n                const transaction = this._db.transaction([\"versions\"]);\r\n\r\n                transaction.oncomplete = () => {\r\n                    if (version) {\r\n                        // If the version in the JSON file is different from the version in DB\r\n                        if (this._manifestVersionFound !== version.data) {\r\n                            this._mustUpdateRessources = true;\r\n                            updateInDBCallback();\r\n                        } else {\r\n                            callback(version.data);\r\n                        }\r\n                    }\r\n                    // version was not found in DB\r\n                    else {\r\n                        this._mustUpdateRessources = true;\r\n                        updateInDBCallback();\r\n                    }\r\n                };\r\n\r\n                transaction.onabort = () => {\r\n                    callback(-1);\r\n                };\r\n\r\n                const getRequest = transaction.objectStore(\"versions\").get(url);\r\n\r\n                getRequest.onsuccess = (event) => {\r\n                    version = (<any>event.target).result;\r\n                };\r\n                getRequest.onerror = () => {\r\n                    Logger.Error(\"Error loading version for scene \" + url + \" from DB.\");\r\n                    callback(-1);\r\n                };\r\n            } catch (ex) {\r\n                Logger.Error(\"Error while accessing 'versions' object store (READ OP). Exception: \" + ex.message);\r\n                callback(-1);\r\n            }\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            callback(-1);\r\n        }\r\n    }\r\n\r\n    private _saveVersionIntoDBAsync(url: string, callback: (version: number) => void) {\r\n        if (this._isSupported && !this._hasReachedQuota && this._db) {\r\n            try {\r\n                // Open a transaction to the database\r\n                const transaction = this._db.transaction([\"versions\"], \"readwrite\");\r\n\r\n                // the transaction could abort because of a QuotaExceededError error\r\n                transaction.onabort = (event) => {\r\n                    try {\r\n                        //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                        const error = (<any>event.target)[\"error\"];\r\n                        if (error && error.name === \"QuotaExceededError\") {\r\n                            this._hasReachedQuota = true;\r\n                        }\r\n                    } catch (ex) {}\r\n                    callback(-1);\r\n                };\r\n\r\n                transaction.oncomplete = () => {\r\n                    callback(this._manifestVersionFound);\r\n                };\r\n\r\n                const newVersion = { sceneUrl: url, data: this._manifestVersionFound };\r\n\r\n                // Put the scene into the database\r\n                const addRequest = transaction.objectStore(\"versions\").put(newVersion);\r\n                addRequest.onsuccess = () => {};\r\n                addRequest.onerror = () => {\r\n                    Logger.Error(\"Error in DB add version request in BABYLON.Database.\");\r\n                };\r\n            } catch (ex) {\r\n                Logger.Error(\"Error while accessing 'versions' object store (WRITE OP). Exception: \" + ex.message);\r\n                callback(-1);\r\n            }\r\n        } else {\r\n            callback(-1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a file from database\r\n     * @param url defines the URL to load from\r\n     * @param sceneLoaded defines a callback to call on success\r\n     * @param progressCallBack defines a callback to call when progress changed\r\n     * @param errorCallback defines a callback to call on error\r\n     * @param useArrayBuffer defines a boolean to use array buffer instead of text string\r\n     */\r\n    public loadFile(url: string, sceneLoaded: (data: any) => void, progressCallBack?: (data: any) => void, errorCallback?: () => void, useArrayBuffer?: boolean): void {\r\n        const completeUrl = Database._ReturnFullUrlLocation(url);\r\n\r\n        const saveAndLoadFile = () => {\r\n            // the scene is not yet in the DB, let's try to save it\r\n            this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\r\n        };\r\n\r\n        this._checkVersionFromDB(completeUrl, (version) => {\r\n            if (version !== -1) {\r\n                if (!this._mustUpdateRessources) {\r\n                    this._loadFileAsync(completeUrl, sceneLoaded, saveAndLoadFile, progressCallBack);\r\n                } else {\r\n                    this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\r\n                }\r\n            } else {\r\n                if (errorCallback) {\r\n                    errorCallback();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _loadFileAsync(url: string, callback: (data?: any) => void, notInDBCallback: () => void, progressCallBack?: (data: any) => void) {\r\n        if (this._isSupported && this._db) {\r\n            let targetStore: string;\r\n            if (url.indexOf(\".babylon\") !== -1) {\r\n                targetStore = \"scenes\";\r\n            } else {\r\n                targetStore = \"textures\";\r\n            }\r\n\r\n            let file: any;\r\n            const transaction = this._db.transaction([targetStore]);\r\n\r\n            transaction.oncomplete = () => {\r\n                if (file) {\r\n                    if (progressCallBack) {\r\n                        const numberToLoad = file.data?.byteLength || 0;\r\n                        progressCallBack({\r\n                            total: numberToLoad,\r\n                            loaded: numberToLoad,\r\n                            lengthComputable: true,\r\n                        });\r\n                    }\r\n                    callback(file.data);\r\n                }\r\n                // file was not found in DB\r\n                else {\r\n                    notInDBCallback();\r\n                }\r\n            };\r\n\r\n            transaction.onabort = () => {\r\n                notInDBCallback();\r\n            };\r\n\r\n            const getRequest = transaction.objectStore(targetStore).get(url);\r\n\r\n            getRequest.onsuccess = (event) => {\r\n                file = (<any>event.target).result;\r\n            };\r\n            getRequest.onerror = () => {\r\n                Logger.Error(\"Error loading file \" + url + \" from DB.\");\r\n                notInDBCallback();\r\n            };\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\r\n            callback();\r\n        }\r\n    }\r\n\r\n    private _saveFileAsync(\r\n        url: string,\r\n        callback: (data?: any) => void,\r\n        progressCallback?: (this: XMLHttpRequestEventTarget, ev: ProgressEvent) => any,\r\n        useArrayBuffer?: boolean,\r\n        errorCallback?: (data?: any) => void\r\n    ) {\r\n        if (this._isSupported) {\r\n            let targetStore: string;\r\n            if (url.indexOf(\".babylon\") !== -1) {\r\n                targetStore = \"scenes\";\r\n            } else {\r\n                targetStore = \"textures\";\r\n            }\r\n\r\n            // Create XHR\r\n            const xhr = new WebRequest();\r\n            let fileData: any;\r\n            xhr.open(\"GET\", url + (url.match(/\\?/) == null ? \"?\" : \"&\") + Date.now());\r\n\r\n            if (useArrayBuffer) {\r\n                xhr.responseType = \"arraybuffer\";\r\n            }\r\n\r\n            if (progressCallback) {\r\n                xhr.onprogress = progressCallback;\r\n            }\r\n\r\n            xhr.addEventListener(\r\n                \"load\",\r\n                () => {\r\n                    if (xhr.status === 200 || (xhr.status < 400 && Database._ValidateXHRData(xhr, !useArrayBuffer ? 1 : 6))) {\r\n                        // Blob as response\r\n                        fileData = !useArrayBuffer ? xhr.responseText : xhr.response;\r\n\r\n                        if (!this._hasReachedQuota && this._db) {\r\n                            // Open a transaction to the database\r\n                            const transaction = this._db.transaction([targetStore], \"readwrite\");\r\n\r\n                            // the transaction could abort because of a QuotaExceededError error\r\n                            transaction.onabort = (event) => {\r\n                                try {\r\n                                    //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                                    const error = (<any>event.target)[\"error\"];\r\n                                    if (error && error.name === \"QuotaExceededError\") {\r\n                                        this._hasReachedQuota = true;\r\n                                    }\r\n                                } catch (ex) {}\r\n                                callback(fileData);\r\n                            };\r\n\r\n                            transaction.oncomplete = () => {\r\n                                callback(fileData);\r\n                            };\r\n\r\n                            let newFile;\r\n                            if (targetStore === \"scenes\") {\r\n                                newFile = { sceneUrl: url, data: fileData, version: this._manifestVersionFound };\r\n                            } else {\r\n                                newFile = { textureUrl: url, data: fileData };\r\n                            }\r\n\r\n                            try {\r\n                                // Put the scene into the database\r\n                                const addRequest = transaction.objectStore(targetStore).put(newFile);\r\n                                addRequest.onsuccess = () => {};\r\n                                addRequest.onerror = () => {\r\n                                    Logger.Error(\"Error in DB add file request in BABYLON.Database.\");\r\n                                };\r\n                            } catch (ex) {\r\n                                callback(fileData);\r\n                            }\r\n                        } else {\r\n                            callback(fileData);\r\n                        }\r\n                    } else {\r\n                        if (xhr.status >= 400 && errorCallback) {\r\n                            errorCallback(xhr);\r\n                        } else {\r\n                            callback();\r\n                        }\r\n                    }\r\n                },\r\n                false\r\n            );\r\n\r\n            xhr.addEventListener(\r\n                \"error\",\r\n                () => {\r\n                    Logger.Error(\"error on XHR request.\");\r\n                    errorCallback && errorCallback();\r\n                },\r\n                false\r\n            );\r\n\r\n            xhr.send();\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            errorCallback && errorCallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates if xhr data is correct\r\n     * @param xhr defines the request to validate\r\n     * @param dataType defines the expected data type\r\n     * @returns true if data is correct\r\n     */\r\n    private static _ValidateXHRData(xhr: WebRequest, dataType = 7): boolean {\r\n        // 1 for text (.babylon, manifest and shaders), 2 for TGA, 4 for DDS, 7 for all\r\n\r\n        try {\r\n            if (dataType & 1) {\r\n                if (xhr.responseText && xhr.responseText.length > 0) {\r\n                    return true;\r\n                } else if (dataType === 1) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (dataType & 2) {\r\n                // Check header width and height since there is no \"TGA\" magic number\r\n                const tgaHeader = GetTGAHeader(xhr.response);\r\n\r\n                if (tgaHeader.width && tgaHeader.height && tgaHeader.width > 0 && tgaHeader.height > 0) {\r\n                    return true;\r\n                } else if (dataType === 2) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (dataType & 4) {\r\n                // Check for the \"DDS\" magic number\r\n                const ddsHeader = new Uint8Array(xhr.response, 0, 3);\r\n\r\n                if (ddsHeader[0] === 68 && ddsHeader[1] === 68 && ddsHeader[2] === 83) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            // Global protection\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]}