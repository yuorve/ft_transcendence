{"version":3,"file":"ssrRenderingPipeline.js","sourceRoot":"","sources":["../../../../../../dev/core/src/PostProcesses/RenderPipeline/Pipelines/ssrRenderingPipeline.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize } from \"../../../Misc/decorators\";\r\nimport { SerializationHelper } from \"../../../Misc/decorators.serialization\";\r\nimport type { Camera } from \"../../../Cameras/camera\";\r\nimport type { Effect } from \"../../../Materials/effect\";\r\nimport { PostProcess } from \"../../postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../postProcessRenderEffect\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { ScreenSpaceReflections2Configuration } from \"../../../Rendering/screenSpaceReflections2Configuration\";\r\nimport type { PrePassRenderer } from \"../../../Rendering/prePassRenderer\";\r\nimport { GeometryBufferRenderer } from \"../../../Rendering/geometryBufferRenderer\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport type { CubeTexture } from \"../../../Materials/Textures/cubeTexture\";\r\nimport { DepthRenderer } from \"../../../Rendering/depthRenderer\";\r\nimport type { ISize } from \"../../../Maths/math.size\";\r\nimport { ThinSSRRenderingPipeline } from \"./thinSSRRenderingPipeline\";\r\nimport { ThinSSRPostProcess } from \"core/PostProcesses/thinSSRPostProcess\";\r\nimport { ThinSSRBlurPostProcess } from \"core/PostProcesses/thinSSRBlurPostProcess\";\r\nimport { ThinSSRBlurCombinerPostProcess } from \"core/PostProcesses/thinSSRBlurCombinerPostProcess\";\r\n\r\nimport \"../postProcessRenderPipelineManagerSceneComponent\";\r\n\r\n/**\r\n * Render pipeline to produce Screen Space Reflections (SSR) effect\r\n *\r\n * References:\r\n *   Screen Space Ray Tracing:\r\n *     - http://casual-effects.blogspot.com/2014/08/screen-space-ray-tracing.html\r\n *     - https://sourceforge.net/p/g3d/code/HEAD/tree/G3D10/data-files/shader/screenSpaceRayTrace.glsl\r\n *     - https://github.com/kode80/kode80SSR\r\n *   SSR:\r\n *     - general tips: https://sakibsaikia.github.io/graphics/2016/12/26/Screen-Space-Reflection-in-Killing-Floor-2.html\r\n *     - computation of blur radius from roughness and distance: https://github.com/godotengine/godot/blob/master/servers/rendering/renderer_rd/shaders/effects/screen_space_reflection.glsl\r\n *     - blur and usage of back depth buffer: https://github.com/kode80/kode80SSR\r\n */\r\nexport class SSRRenderingPipeline extends PostProcessRenderPipeline {\r\n    /**\r\n     * The SSR PostProcess effect id in the pipeline\r\n     */\r\n    public SSRRenderEffect: string = \"SSRRenderEffect\";\r\n    /**\r\n     * The blur PostProcess effect id in the pipeline\r\n     */\r\n    public SSRBlurRenderEffect: string = \"SSRBlurRenderEffect\";\r\n    /**\r\n     * The PostProcess effect id in the pipeline that combines the SSR-Blur output with the original scene color\r\n     */\r\n    public SSRCombineRenderEffect: string = \"SSRCombineRenderEffect\";\r\n\r\n    /** @internal */\r\n    public _thinSSRRenderingPipeline: ThinSSRRenderingPipeline;\r\n\r\n    private _samples = 1;\r\n    /**\r\n     * MSAA sample count, setting this to 4 will provide 4x anti aliasing. (default: 1)\r\n     */\r\n    public set samples(sampleCount: number) {\r\n        if (this._samples === sampleCount) {\r\n            return;\r\n        }\r\n        this._samples = sampleCount;\r\n        if (this._ssrPostProcess) {\r\n            this._ssrPostProcess.samples = this.samples;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get samples(): number {\r\n        return this._samples;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the maxDistance used to define how far we look for reflection during the ray-marching on the reflected ray (default: 1000).\r\n     * Note that this value is a view (camera) space distance (not pixels!).\r\n     */\r\n    @serialize()\r\n    public get maxDistance() {\r\n        return this._thinSSRRenderingPipeline.maxDistance;\r\n    }\r\n\r\n    public set maxDistance(distance: number) {\r\n        this._thinSSRRenderingPipeline.maxDistance = distance;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the step size used to iterate until the effect finds the color of the reflection's pixel. Should be an integer \\>= 1 as it is the number of pixels we advance at each step (default: 1).\r\n     * Use higher values to improve performances (but at the expense of quality).\r\n     */\r\n    @serialize()\r\n    public get step() {\r\n        return this._thinSSRRenderingPipeline.step;\r\n    }\r\n\r\n    public set step(step: number) {\r\n        this._thinSSRRenderingPipeline.step = step;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the thickness value used as tolerance when computing the intersection between the reflected ray and the scene (default: 0.5).\r\n     * If setting \"enableAutomaticThicknessComputation\" to true, you can use lower values for \"thickness\" (even 0), as the geometry thickness\r\n     * is automatically computed thank to the regular depth buffer + the backface depth buffer\r\n     */\r\n    @serialize()\r\n    public get thickness() {\r\n        return this._thinSSRRenderingPipeline.thickness;\r\n    }\r\n\r\n    public set thickness(thickness: number) {\r\n        this._thinSSRRenderingPipeline.thickness = thickness;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current reflection strength. 1.0 is an ideal value but can be increased/decreased for particular results (default: 1).\r\n     */\r\n    @serialize()\r\n    public get strength() {\r\n        return this._thinSSRRenderingPipeline.strength;\r\n    }\r\n\r\n    public set strength(strength: number) {\r\n        this._thinSSRRenderingPipeline.strength = strength;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the falloff exponent used to compute the reflection strength. Higher values lead to fainter reflections (default: 1).\r\n     */\r\n    @serialize()\r\n    public get reflectionSpecularFalloffExponent() {\r\n        return this._thinSSRRenderingPipeline.reflectionSpecularFalloffExponent;\r\n    }\r\n\r\n    public set reflectionSpecularFalloffExponent(exponent: number) {\r\n        this._thinSSRRenderingPipeline.reflectionSpecularFalloffExponent = exponent;\r\n    }\r\n\r\n    /**\r\n     * Maximum number of steps during the ray marching process after which we consider an intersection could not be found (default: 1000).\r\n     * Should be an integer value.\r\n     */\r\n    @serialize()\r\n    public get maxSteps() {\r\n        return this._thinSSRRenderingPipeline.maxSteps;\r\n    }\r\n\r\n    public set maxSteps(steps: number) {\r\n        this._thinSSRRenderingPipeline.maxSteps = steps;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the factor applied when computing roughness. Default value is 0.2.\r\n     * When blurring based on roughness is enabled (meaning blurDispersionStrength \\> 0), roughnessFactor is used as a global roughness factor applied on all objects.\r\n     * If you want to disable this global roughness set it to 0.\r\n     */\r\n    @serialize()\r\n    public get roughnessFactor() {\r\n        return this._thinSSRRenderingPipeline.roughnessFactor;\r\n    }\r\n\r\n    public set roughnessFactor(factor: number) {\r\n        this._thinSSRRenderingPipeline.roughnessFactor = factor;\r\n    }\r\n\r\n    /**\r\n     * Number of steps to skip at start when marching the ray to avoid self collisions (default: 1)\r\n     * 1 should normally be a good value, depending on the scene you may need to use a higher value (2 or 3)\r\n     */\r\n    @serialize()\r\n    public get selfCollisionNumSkip() {\r\n        return this._thinSSRRenderingPipeline.selfCollisionNumSkip;\r\n    }\r\n\r\n    public set selfCollisionNumSkip(skip: number) {\r\n        this._thinSSRRenderingPipeline.selfCollisionNumSkip = skip;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the minimum value for one of the reflectivity component of the material to consider it for SSR (default: 0.04).\r\n     * If all r/g/b components of the reflectivity is below or equal this value, the pixel will not be considered reflective and SSR won't be applied.\r\n     */\r\n    @serialize()\r\n    public get reflectivityThreshold() {\r\n        return this._thinSSRRenderingPipeline.reflectivityThreshold;\r\n    }\r\n\r\n    public set reflectivityThreshold(threshold: number) {\r\n        const currentThreshold = this.reflectivityThreshold;\r\n\r\n        if (threshold === currentThreshold) {\r\n            return;\r\n        }\r\n\r\n        this._thinSSRRenderingPipeline.reflectivityThreshold = threshold;\r\n\r\n        if ((threshold === 0 && currentThreshold !== 0) || (threshold !== 0 && currentThreshold === 0)) {\r\n            this._buildPipeline();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the downsample factor used to reduce the size of the texture used to compute the SSR contribution (default: 0).\r\n     * Use 0 to render the SSR contribution at full resolution, 1 to render at half resolution, 2 to render at 1/3 resolution, etc.\r\n     * Note that it is used only when blurring is enabled (blurDispersionStrength \\> 0), because in that mode the SSR contribution is generated in a separate texture.\r\n     */\r\n    @serialize()\r\n    public get ssrDownsample() {\r\n        return this._thinSSRRenderingPipeline.ssrDownsample;\r\n    }\r\n\r\n    public set ssrDownsample(downsample: number) {\r\n        this._thinSSRRenderingPipeline.ssrDownsample = downsample;\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the blur dispersion strength. Set this value to 0 to disable blurring (default: 0.03)\r\n     * The reflections are blurred based on the roughness of the surface and the distance between the pixel shaded and the reflected pixel: the higher the distance the more blurry the reflection is.\r\n     * blurDispersionStrength allows to increase or decrease this effect.\r\n     */\r\n    @serialize(\"blurDispersionStrength\")\r\n    public get blurDispersionStrength() {\r\n        return this._thinSSRRenderingPipeline.blurDispersionStrength;\r\n    }\r\n\r\n    public set blurDispersionStrength(strength: number) {\r\n        const currentStrength = this.blurDispersionStrength;\r\n\r\n        if (strength === currentStrength) {\r\n            return;\r\n        }\r\n\r\n        this._thinSSRRenderingPipeline.blurDispersionStrength = strength;\r\n\r\n        if ((strength === 0 && currentStrength !== 0) || (strength !== 0 && currentStrength === 0)) {\r\n            this._buildPipeline();\r\n        }\r\n    }\r\n\r\n    private _useBlur() {\r\n        return this.blurDispersionStrength > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the downsample factor used to reduce the size of the textures used to blur the reflection effect (default: 0).\r\n     * Use 0 to blur at full resolution, 1 to render at half resolution, 2 to render at 1/3 resolution, etc.\r\n     */\r\n    @serialize(\"blurDownsample\")\r\n    public get blurDownsample() {\r\n        return this._thinSSRRenderingPipeline.blurDownsample;\r\n    }\r\n\r\n    public set blurDownsample(downsample: number) {\r\n        this._thinSSRRenderingPipeline.blurDownsample = downsample;\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets whether or not smoothing reflections is enabled (default: false)\r\n     * Enabling smoothing will require more GPU power.\r\n     * Note that this setting has no effect if step = 1: it's only used if step \\> 1.\r\n     */\r\n    @serialize(\"enableSmoothReflections\")\r\n    public get enableSmoothReflections(): boolean {\r\n        return this._thinSSRRenderingPipeline.enableSmoothReflections;\r\n    }\r\n\r\n    public set enableSmoothReflections(enabled: boolean) {\r\n        this._thinSSRRenderingPipeline.enableSmoothReflections = enabled;\r\n    }\r\n\r\n    private get _useScreenspaceDepth() {\r\n        return this._thinSSRRenderingPipeline.useScreenspaceDepth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the environment cube texture used to define the reflection when the reflected rays of SSR leave the view space or when the maxDistance/maxSteps is reached.\r\n     */\r\n    @serialize(\"environmentTexture\")\r\n    public get environmentTexture() {\r\n        return this._thinSSRRenderingPipeline.environmentTexture;\r\n    }\r\n\r\n    public set environmentTexture(texture: Nullable<CubeTexture>) {\r\n        this._thinSSRRenderingPipeline.environmentTexture = texture;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the boolean defining if the environment texture is a standard cubemap (false) or a probe (true). Default value is false.\r\n     * Note: a probe cube texture is treated differently than an ordinary cube texture because the Y axis is reversed.\r\n     */\r\n    @serialize(\"environmentTextureIsProbe\")\r\n    public get environmentTextureIsProbe(): boolean {\r\n        return this._thinSSRRenderingPipeline.environmentTextureIsProbe;\r\n    }\r\n\r\n    public set environmentTextureIsProbe(isProbe: boolean) {\r\n        this._thinSSRRenderingPipeline.environmentTextureIsProbe = isProbe;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the reflections should be attenuated at the screen borders (default: true).\r\n     */\r\n    @serialize(\"attenuateScreenBorders\")\r\n    public get attenuateScreenBorders() {\r\n        return this._thinSSRRenderingPipeline.attenuateScreenBorders;\r\n    }\r\n\r\n    public set attenuateScreenBorders(attenuate: boolean) {\r\n        this._thinSSRRenderingPipeline.attenuateScreenBorders = attenuate;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the reflections should be attenuated according to the distance of the intersection (default: true).\r\n     */\r\n    @serialize(\"attenuateIntersectionDistance\")\r\n    public get attenuateIntersectionDistance() {\r\n        return this._thinSSRRenderingPipeline.attenuateIntersectionDistance;\r\n    }\r\n\r\n    public set attenuateIntersectionDistance(attenuate: boolean) {\r\n        this._thinSSRRenderingPipeline.attenuateIntersectionDistance = attenuate;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the reflections should be attenuated according to the number of iterations performed to find the intersection (default: true).\r\n     */\r\n    @serialize(\"attenuateIntersectionIterations\")\r\n    public get attenuateIntersectionIterations() {\r\n        return this._thinSSRRenderingPipeline.attenuateIntersectionIterations;\r\n    }\r\n\r\n    public set attenuateIntersectionIterations(attenuate: boolean) {\r\n        this._thinSSRRenderingPipeline.attenuateIntersectionIterations = attenuate;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the reflections should be attenuated when the reflection ray is facing the camera (the view direction) (default: false).\r\n     */\r\n    @serialize(\"attenuateFacingCamera\")\r\n    public get attenuateFacingCamera() {\r\n        return this._thinSSRRenderingPipeline.attenuateFacingCamera;\r\n    }\r\n\r\n    public set attenuateFacingCamera(attenuate: boolean) {\r\n        this._thinSSRRenderingPipeline.attenuateFacingCamera = attenuate;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the backface reflections should be attenuated (default: false).\r\n     */\r\n    @serialize(\"attenuateBackfaceReflection\")\r\n    public get attenuateBackfaceReflection() {\r\n        return this._thinSSRRenderingPipeline.attenuateBackfaceReflection;\r\n    }\r\n\r\n    public set attenuateBackfaceReflection(attenuate: boolean) {\r\n        this._thinSSRRenderingPipeline.attenuateBackfaceReflection = attenuate;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the ray should be clipped to the frustum (default: true).\r\n     * You can try to set this parameter to false to save some performances: it may produce some artefacts in some cases, but generally they won't really be visible\r\n     */\r\n    @serialize(\"clipToFrustum\")\r\n    public get clipToFrustum() {\r\n        return this._thinSSRRenderingPipeline.clipToFrustum;\r\n    }\r\n\r\n    public set clipToFrustum(clip: boolean) {\r\n        this._thinSSRRenderingPipeline.clipToFrustum = clip;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating whether the blending between the current color pixel and the reflection color should be done with a Fresnel coefficient (default: false).\r\n     * It is more physically accurate to use the Fresnel coefficient (otherwise it uses the reflectivity of the material for blending), but it is also more expensive when you use blur (when blurDispersionStrength \\> 0).\r\n     */\r\n    @serialize(\"useFresnel\")\r\n    public get useFresnel() {\r\n        return this._thinSSRRenderingPipeline.useFresnel;\r\n    }\r\n\r\n    public set useFresnel(fresnel: boolean) {\r\n        this._thinSSRRenderingPipeline.useFresnel = fresnel;\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if geometry thickness should be computed automatically (default: false).\r\n     * When enabled, a depth renderer is created which will render the back faces of the scene to a depth texture (meaning additional work for the GPU).\r\n     * In that mode, the \"thickness\" property is still used as an offset to compute the ray intersection, but you can typically use a much lower\r\n     * value than when enableAutomaticThicknessComputation is false (it's even possible to use a value of 0 when using low values for \"step\")\r\n     * Note that for performance reasons, this option will only apply to the first camera to which the rendering pipeline is attached!\r\n     */\r\n    @serialize(\"enableAutomaticThicknessComputation\")\r\n    public get enableAutomaticThicknessComputation(): boolean {\r\n        return this._thinSSRRenderingPipeline.enableAutomaticThicknessComputation;\r\n    }\r\n\r\n    public set enableAutomaticThicknessComputation(automatic: boolean) {\r\n        this._thinSSRRenderingPipeline.enableAutomaticThicknessComputation = automatic;\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Gets the depth renderer used to render the back faces of the scene to a depth texture.\r\n     */\r\n    public get backfaceDepthRenderer(): Nullable<DepthRenderer> {\r\n        return this._depthRenderer;\r\n    }\r\n\r\n    @serialize(\"backfaceDepthTextureDownsample\")\r\n    private _backfaceDepthTextureDownsample = 0;\r\n\r\n    /**\r\n     * Gets or sets the downsample factor (default: 0) used to create the backface depth texture - used only if enableAutomaticThicknessComputation = true.\r\n     * Use 0 to render the depth at full resolution, 1 to render at half resolution, 2 to render at 1/4 resolution, etc.\r\n     * Note that you will get rendering artefacts when using a value different from 0: it's a tradeoff between image quality and performances.\r\n     */\r\n    public get backfaceDepthTextureDownsample() {\r\n        return this._backfaceDepthTextureDownsample;\r\n    }\r\n\r\n    public set backfaceDepthTextureDownsample(factor: number) {\r\n        if (this._backfaceDepthTextureDownsample === factor) {\r\n            return;\r\n        }\r\n\r\n        this._backfaceDepthTextureDownsample = factor;\r\n        this._resizeDepthRenderer();\r\n    }\r\n\r\n    @serialize(\"backfaceForceDepthWriteTransparentMeshes\")\r\n    private _backfaceForceDepthWriteTransparentMeshes = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean (default: true) indicating if the depth of transparent meshes should be written to the backface depth texture (when automatic thickness computation is enabled).\r\n     */\r\n    public get backfaceForceDepthWriteTransparentMeshes() {\r\n        return this._backfaceForceDepthWriteTransparentMeshes;\r\n    }\r\n\r\n    public set backfaceForceDepthWriteTransparentMeshes(force: boolean) {\r\n        if (this._backfaceForceDepthWriteTransparentMeshes === force) {\r\n            return;\r\n        }\r\n\r\n        this._backfaceForceDepthWriteTransparentMeshes = force;\r\n\r\n        if (this._depthRenderer) {\r\n            this._depthRenderer.forceDepthWriteTransparentMeshes = force;\r\n        }\r\n    }\r\n\r\n    @serialize(\"isEnabled\")\r\n    private _isEnabled = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the effect is enabled (default: true).\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n\r\n        if (!value) {\r\n            if (this._cameras !== null) {\r\n                this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\r\n                this._cameras = this._camerasToBeAttached.slice();\r\n            }\r\n        } else if (value) {\r\n            if (!this._isDirty) {\r\n                if (this._cameras !== null) {\r\n                    this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\r\n                }\r\n            } else {\r\n                this._buildPipeline();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if the input color texture is in gamma space (default: true)\r\n     * The SSR effect works in linear space, so if the input texture is in gamma space, we must convert the texture to linear space before applying the effect\r\n     */\r\n    @serialize(\"inputTextureColorIsInGammaSpace\")\r\n    public get inputTextureColorIsInGammaSpace(): boolean {\r\n        return this._thinSSRRenderingPipeline.inputTextureColorIsInGammaSpace;\r\n    }\r\n\r\n    public set inputTextureColorIsInGammaSpace(gammaSpace: boolean) {\r\n        this._thinSSRRenderingPipeline.inputTextureColorIsInGammaSpace = gammaSpace;\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if the output color texture generated by the SSR pipeline should be in gamma space (default: true)\r\n     * If you have a post-process that comes after the SSR and that post-process needs the input to be in a linear space, you must disable generateOutputInGammaSpace\r\n     */\r\n    @serialize(\"generateOutputInGammaSpace\")\r\n    public get generateOutputInGammaSpace(): boolean {\r\n        return this._thinSSRRenderingPipeline.generateOutputInGammaSpace;\r\n    }\r\n\r\n    public set generateOutputInGammaSpace(gammaSpace: boolean) {\r\n        this._thinSSRRenderingPipeline.generateOutputInGammaSpace = gammaSpace;\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the effect should be rendered in debug mode (default: false).\r\n     * In this mode, colors have this meaning:\r\n     *   - blue: the ray hit the max distance (we reached maxDistance)\r\n     *   - red: the ray ran out of steps (we reached maxSteps)\r\n     *   - yellow: the ray went off screen\r\n     *   - green: the ray hit a surface. The brightness of the green color is proportional to the distance between the ray origin and the intersection point: A brighter green means more computation than a darker green.\r\n     * In the first 3 cases, the final color is calculated by mixing the skybox color with the pixel color (if environmentTexture is defined), otherwise the pixel color is not modified\r\n     * You should try to get as few blue/red/yellow pixels as possible, as this means that the ray has gone further than if it had hit a surface.\r\n     */\r\n    @serialize(\"debug\")\r\n    public get debug(): boolean {\r\n        return this._thinSSRRenderingPipeline.debug;\r\n    }\r\n\r\n    public set debug(value: boolean) {\r\n        this._thinSSRRenderingPipeline.debug = value;\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Gets the scene the effect belongs to.\r\n     * @returns the scene the effect belongs to.\r\n     */\r\n    public getScene() {\r\n        return this._scene;\r\n    }\r\n\r\n    private _forceGeometryBuffer = false;\r\n    private get _geometryBufferRenderer(): Nullable<GeometryBufferRenderer> {\r\n        if (!this._forceGeometryBuffer) {\r\n            return null;\r\n        }\r\n\r\n        return this._scene.geometryBufferRenderer;\r\n    }\r\n\r\n    private get _prePassRenderer(): Nullable<PrePassRenderer> {\r\n        if (this._forceGeometryBuffer) {\r\n            return null;\r\n        }\r\n\r\n        return this._scene.prePassRenderer;\r\n    }\r\n\r\n    private _scene: Scene;\r\n    private _isDirty = false;\r\n    private _camerasToBeAttached: Array<Camera> = [];\r\n    private _textureType: number;\r\n    private _ssrPostProcess: Nullable<PostProcess>;\r\n    private _blurPostProcessX: Nullable<PostProcess>;\r\n    private _blurPostProcessY: Nullable<PostProcess>;\r\n    private _blurCombinerPostProcess: Nullable<PostProcess>;\r\n    private _depthRenderer: Nullable<DepthRenderer>;\r\n    private _depthRendererCamera: Nullable<Camera>;\r\n\r\n    /**\r\n     * Gets active scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Returns true if SSR is supported by the running hardware\r\n     */\r\n    public override get isSupported(): boolean {\r\n        const caps = this._scene.getEngine().getCaps();\r\n\r\n        return caps.drawBuffersExtension && caps.texelFetch;\r\n    }\r\n\r\n    /**\r\n     * Constructor of the SSR rendering pipeline\r\n     * @param name The rendering pipeline name\r\n     * @param scene The scene linked to this pipeline\r\n     * @param cameras The array of cameras that the rendering pipeline will be attached to (default: scene.cameras)\r\n     * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer (default: false)\r\n     * @param textureType The texture type used by the different post processes created by SSR (default: Constants.TEXTURETYPE_UNSIGNED_BYTE)\r\n     * @param useScreenspaceDepth Indicates if the depth buffer should be linear or screenspace (default: false). This allows sharing the buffer with other effect pipelines that may require the depth to be in screenspace.\r\n     */\r\n    constructor(name: string, scene: Scene, cameras?: Camera[], forceGeometryBuffer = false, textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE, useScreenspaceDepth = false) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._thinSSRRenderingPipeline = new ThinSSRRenderingPipeline(name, scene);\r\n        this._thinSSRRenderingPipeline.isSSRSupported = false;\r\n        this._thinSSRRenderingPipeline.useScreenspaceDepth = useScreenspaceDepth;\r\n\r\n        this._cameras = cameras || scene.cameras;\r\n        this._cameras = this._cameras.slice();\r\n        this._camerasToBeAttached = this._cameras.slice();\r\n\r\n        this._scene = scene;\r\n        this._textureType = textureType;\r\n        this._forceGeometryBuffer = forceGeometryBuffer;\r\n\r\n        if (this.isSupported) {\r\n            this._createSSRPostProcess();\r\n\r\n            scene.postProcessRenderPipelineManager.addPipeline(this);\r\n\r\n            if (this._forceGeometryBuffer) {\r\n                const geometryBufferRenderer = scene.enableGeometryBufferRenderer();\r\n                if (geometryBufferRenderer) {\r\n                    geometryBufferRenderer.enableReflectivity = true;\r\n                    geometryBufferRenderer.useSpecificClearForDepthTexture = true;\r\n                    geometryBufferRenderer.enableScreenspaceDepth = this._useScreenspaceDepth;\r\n                    geometryBufferRenderer.enableDepth = !this._useScreenspaceDepth;\r\n                }\r\n            } else {\r\n                const prePassRenderer = scene.enablePrePassRenderer();\r\n                if (prePassRenderer) {\r\n                    prePassRenderer.useSpecificClearForDepthTexture = true;\r\n                    prePassRenderer.markAsDirty();\r\n                }\r\n            }\r\n\r\n            this._thinSSRRenderingPipeline.isSSRSupported = !!this._geometryBufferRenderer || !!this._prePassRenderer;\r\n\r\n            this._buildPipeline();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"SSRRenderingPipeline\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"SSRRenderingPipeline\";\r\n    }\r\n\r\n    /**\r\n     * Adds a camera to the pipeline\r\n     * @param camera the camera to be added\r\n     */\r\n    public addCamera(camera: Camera): void {\r\n        this._camerasToBeAttached.push(camera);\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Removes a camera from the pipeline\r\n     * @param camera the camera to remove\r\n     */\r\n    public removeCamera(camera: Camera): void {\r\n        const index = this._camerasToBeAttached.indexOf(camera);\r\n        this._camerasToBeAttached.splice(index, 1);\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n     * @param disableGeometryBufferRenderer if the geometry buffer renderer should be disabled\r\n     */\r\n    public override dispose(disableGeometryBufferRenderer: boolean = false): void {\r\n        this._disposeDepthRenderer();\r\n        this._disposeSSRPostProcess();\r\n        this._disposeBlurPostProcesses();\r\n\r\n        if (disableGeometryBufferRenderer) {\r\n            this._scene.disableGeometryBufferRenderer();\r\n        }\r\n\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\r\n\r\n        this._thinSSRRenderingPipeline.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _getTextureSize() {\r\n        const engine = this._scene.getEngine();\r\n        const prePassRenderer = this._prePassRenderer;\r\n\r\n        let textureSize: ISize = { width: engine.getRenderWidth(), height: engine.getRenderHeight() };\r\n\r\n        if (prePassRenderer && this._scene.activeCamera?._getFirstPostProcess() === this._ssrPostProcess) {\r\n            const renderTarget = prePassRenderer.getRenderTarget();\r\n\r\n            if (renderTarget && renderTarget.textures) {\r\n                textureSize = renderTarget.textures[prePassRenderer.getIndex(Constants.PREPASS_COLOR_TEXTURE_TYPE)].getSize();\r\n            }\r\n        } else if (this._ssrPostProcess?.inputTexture) {\r\n            textureSize.width = this._ssrPostProcess.inputTexture.width;\r\n            textureSize.height = this._ssrPostProcess.inputTexture.height;\r\n        }\r\n\r\n        return textureSize;\r\n    }\r\n\r\n    private _buildPipeline() {\r\n        if (!this.isSupported) {\r\n            return;\r\n        }\r\n\r\n        if (!this._isEnabled) {\r\n            this._isDirty = true;\r\n            return;\r\n        }\r\n\r\n        this._isDirty = false;\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._disposeDepthRenderer();\r\n        if (this._cameras !== null) {\r\n            this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\r\n            // get back cameras to be used to reattach pipeline\r\n            this._cameras = this._camerasToBeAttached.slice();\r\n            if (this._cameras.length > 0) {\r\n                this._thinSSRRenderingPipeline.camera = this._cameras[0];\r\n            }\r\n        }\r\n        this._reset();\r\n\r\n        this._thinSSRRenderingPipeline.normalsAreInWorldSpace = !!(this._geometryBufferRenderer?.generateNormalsInWorldSpace ?? this._prePassRenderer?.generateNormalsInWorldSpace);\r\n\r\n        if (this.enableAutomaticThicknessComputation) {\r\n            const camera = this._cameras?.[0];\r\n\r\n            if (camera) {\r\n                this._depthRendererCamera = camera;\r\n                this._depthRenderer = new DepthRenderer(\r\n                    this._scene,\r\n                    undefined,\r\n                    undefined,\r\n                    this._useScreenspaceDepth,\r\n                    Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                    !this._useScreenspaceDepth,\r\n                    \"SSRBackDepth\"\r\n                );\r\n                if (!this._useScreenspaceDepth) {\r\n                    this._depthRenderer.clearColor.r = 1e8; // \"infinity\": put a big value because we use the storeCameraSpaceZ mode\r\n                }\r\n                this._depthRenderer.reverseCulling = true; // we generate depth for the back faces\r\n                this._depthRenderer.forceDepthWriteTransparentMeshes = this.backfaceForceDepthWriteTransparentMeshes;\r\n\r\n                this._resizeDepthRenderer();\r\n\r\n                camera.customRenderTargets.push(this._depthRenderer.getDepthMap());\r\n            }\r\n        }\r\n\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                engine,\r\n                this.SSRRenderEffect,\r\n                () => {\r\n                    return this._ssrPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        this._disposeBlurPostProcesses();\r\n\r\n        if (this._useBlur()) {\r\n            this._createBlurAndCombinerPostProcesses();\r\n\r\n            this.addEffect(\r\n                new PostProcessRenderEffect(\r\n                    engine,\r\n                    this.SSRBlurRenderEffect,\r\n                    () => {\r\n                        return [this._blurPostProcessX!, this._blurPostProcessY!];\r\n                    },\r\n                    true\r\n                )\r\n            );\r\n            this.addEffect(\r\n                new PostProcessRenderEffect(\r\n                    engine,\r\n                    this.SSRCombineRenderEffect,\r\n                    () => {\r\n                        return this._blurCombinerPostProcess;\r\n                    },\r\n                    true\r\n                )\r\n            );\r\n        }\r\n\r\n        if (this._cameras !== null) {\r\n            this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\r\n        }\r\n    }\r\n\r\n    private _resizeDepthRenderer() {\r\n        if (!this._depthRenderer) {\r\n            return;\r\n        }\r\n\r\n        const textureSize = this._getTextureSize();\r\n        const depthRendererSize = this._depthRenderer.getDepthMap().getSize();\r\n\r\n        const width = Math.floor(textureSize.width / (this.backfaceDepthTextureDownsample + 1));\r\n        const height = Math.floor(textureSize.height / (this.backfaceDepthTextureDownsample + 1));\r\n\r\n        if (depthRendererSize.width !== width || depthRendererSize.height !== height) {\r\n            this._depthRenderer.getDepthMap().resize({ width, height });\r\n        }\r\n    }\r\n\r\n    private _disposeDepthRenderer() {\r\n        if (this._depthRenderer) {\r\n            if (this._depthRendererCamera) {\r\n                const idx = this._depthRendererCamera.customRenderTargets.indexOf(this._depthRenderer.getDepthMap()) ?? -1;\r\n                if (idx !== -1) {\r\n                    this._depthRendererCamera.customRenderTargets.splice(idx, 1);\r\n                }\r\n            }\r\n            this._depthRendererCamera = null;\r\n            this._depthRenderer.getDepthMap().dispose();\r\n        }\r\n        this._depthRenderer = null;\r\n    }\r\n\r\n    private _disposeBlurPostProcesses(): void {\r\n        for (let i = 0; i < this._cameras.length; i++) {\r\n            const camera = this._cameras[i];\r\n\r\n            this._blurPostProcessX?.dispose(camera);\r\n            this._blurPostProcessY?.dispose(camera);\r\n            this._blurCombinerPostProcess?.dispose(camera);\r\n        }\r\n\r\n        this._blurPostProcessX = null;\r\n        this._blurPostProcessY = null;\r\n        this._blurCombinerPostProcess = null;\r\n    }\r\n\r\n    private _disposeSSRPostProcess(): void {\r\n        for (let i = 0; i < this._cameras.length; i++) {\r\n            const camera = this._cameras[i];\r\n\r\n            this._ssrPostProcess?.dispose(camera);\r\n        }\r\n\r\n        this._ssrPostProcess = null;\r\n    }\r\n\r\n    private _createSSRPostProcess(): void {\r\n        this._ssrPostProcess = new PostProcess(\"ssr\", ThinSSRPostProcess.FragmentUrl, {\r\n            uniformNames: ThinSSRPostProcess.Uniforms,\r\n            samplerNames: ThinSSRPostProcess.Samplers,\r\n            size: 1.0,\r\n            samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n            engine: this._scene.getEngine(),\r\n            textureType: this._textureType,\r\n            effectWrapper: this._thinSSRRenderingPipeline._ssrPostProcess,\r\n        });\r\n\r\n        this._ssrPostProcess.onApply = (effect: Effect) => {\r\n            this._resizeDepthRenderer();\r\n\r\n            const geometryBufferRenderer = this._geometryBufferRenderer;\r\n            const prePassRenderer = this._prePassRenderer;\r\n\r\n            if (!prePassRenderer && !geometryBufferRenderer) {\r\n                return;\r\n            }\r\n\r\n            if (geometryBufferRenderer) {\r\n                const roughnessIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE);\r\n\r\n                const normalIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.NORMAL_TEXTURE_TYPE);\r\n                effect.setTexture(\"normalSampler\", geometryBufferRenderer.getGBuffer().textures[normalIndex]);\r\n                effect.setTexture(\"reflectivitySampler\", geometryBufferRenderer.getGBuffer().textures[roughnessIndex]);\r\n                if (this._useScreenspaceDepth) {\r\n                    const depthIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE);\r\n                    effect.setTexture(\"depthSampler\", geometryBufferRenderer.getGBuffer().textures[depthIndex]);\r\n                } else {\r\n                    const depthIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.DEPTH_TEXTURE_TYPE);\r\n                    effect.setTexture(\"depthSampler\", geometryBufferRenderer.getGBuffer().textures[depthIndex]);\r\n                }\r\n            } else if (prePassRenderer) {\r\n                const depthIndex = prePassRenderer.getIndex(this._useScreenspaceDepth ? Constants.PREPASS_SCREENSPACE_DEPTH_TEXTURE_TYPE : Constants.PREPASS_DEPTH_TEXTURE_TYPE);\r\n                const roughnessIndex = prePassRenderer.getIndex(Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE);\r\n                const normalIndex = prePassRenderer.getIndex(Constants.PREPASS_NORMAL_TEXTURE_TYPE);\r\n\r\n                effect.setTexture(\"normalSampler\", prePassRenderer.getRenderTarget().textures[normalIndex]);\r\n                effect.setTexture(\"depthSampler\", prePassRenderer.getRenderTarget().textures[depthIndex]);\r\n                effect.setTexture(\"reflectivitySampler\", prePassRenderer.getRenderTarget().textures[roughnessIndex]);\r\n            }\r\n\r\n            if (this.enableAutomaticThicknessComputation && this._depthRenderer) {\r\n                effect.setTexture(\"backDepthSampler\", this._depthRenderer.getDepthMap());\r\n                effect.setFloat(\"backSizeFactor\", this.backfaceDepthTextureDownsample + 1);\r\n            }\r\n\r\n            const textureSize = this._getTextureSize();\r\n\r\n            this._thinSSRRenderingPipeline._ssrPostProcess.textureWidth = textureSize.width;\r\n            this._thinSSRRenderingPipeline._ssrPostProcess.textureHeight = textureSize.height;\r\n        };\r\n\r\n        this._ssrPostProcess.samples = this.samples;\r\n\r\n        if (!this._forceGeometryBuffer) {\r\n            this._ssrPostProcess._prePassEffectConfiguration = new ScreenSpaceReflections2Configuration(this._useScreenspaceDepth);\r\n        }\r\n    }\r\n\r\n    private _createBlurAndCombinerPostProcesses() {\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._blurPostProcessX = new PostProcess(\"SSRblurX\", ThinSSRBlurPostProcess.FragmentUrl, {\r\n            uniformNames: ThinSSRBlurPostProcess.Uniforms,\r\n            samplerNames: ThinSSRBlurPostProcess.Samplers,\r\n            size: 1 / (this.ssrDownsample + 1),\r\n            samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            textureType: this._textureType,\r\n            effectWrapper: this._thinSSRRenderingPipeline._ssrBlurXPostProcess,\r\n        });\r\n        this._blurPostProcessX.autoClear = false;\r\n\r\n        this._blurPostProcessX.onApplyObservable.add(() => {\r\n            this._thinSSRRenderingPipeline._ssrBlurXPostProcess.textureWidth = this._blurPostProcessX?.inputTexture.width ?? this._scene.getEngine().getRenderWidth();\r\n            this._thinSSRRenderingPipeline._ssrBlurXPostProcess.textureHeight = 1; // not used\r\n        });\r\n\r\n        this._blurPostProcessY = new PostProcess(\"SSRblurY\", ThinSSRBlurPostProcess.FragmentUrl, {\r\n            uniformNames: ThinSSRBlurPostProcess.Uniforms,\r\n            samplerNames: ThinSSRBlurPostProcess.Samplers,\r\n            size: 1 / (this.blurDownsample + 1),\r\n            samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            textureType: this._textureType,\r\n            effectWrapper: this._thinSSRRenderingPipeline._ssrBlurYPostProcess,\r\n        });\r\n        this._blurPostProcessY.autoClear = false;\r\n\r\n        this._blurPostProcessY.onApplyObservable.add(() => {\r\n            this._thinSSRRenderingPipeline._ssrBlurYPostProcess.textureWidth = 1; // not used\r\n            this._thinSSRRenderingPipeline._ssrBlurYPostProcess.textureHeight = this._blurPostProcessY?.inputTexture.height ?? this._scene.getEngine().getRenderHeight();\r\n        });\r\n\r\n        this._blurCombinerPostProcess = new PostProcess(\"SSRblurCombiner\", ThinSSRBlurCombinerPostProcess.FragmentUrl, {\r\n            uniformNames: ThinSSRBlurCombinerPostProcess.Uniforms,\r\n            samplerNames: ThinSSRBlurCombinerPostProcess.Samplers,\r\n            size: 1 / (this.blurDownsample + 1),\r\n            samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n            engine,\r\n            textureType: this._textureType,\r\n            effectWrapper: this._thinSSRRenderingPipeline._ssrBlurCombinerPostProcess,\r\n        });\r\n        this._blurCombinerPostProcess.autoClear = false;\r\n\r\n        this._blurCombinerPostProcess.onApplyObservable.add((effect) => {\r\n            const geometryBufferRenderer = this._geometryBufferRenderer;\r\n            const prePassRenderer = this._prePassRenderer;\r\n\r\n            if (!prePassRenderer && !geometryBufferRenderer) {\r\n                return;\r\n            }\r\n\r\n            if (prePassRenderer && this._scene.activeCamera?._getFirstPostProcess() === this._ssrPostProcess) {\r\n                const renderTarget = prePassRenderer.getRenderTarget();\r\n\r\n                if (renderTarget && renderTarget.textures) {\r\n                    effect.setTexture(\"mainSampler\", renderTarget.textures[prePassRenderer.getIndex(Constants.PREPASS_COLOR_TEXTURE_TYPE)]);\r\n                }\r\n            } else {\r\n                effect.setTextureFromPostProcess(\"mainSampler\", this._ssrPostProcess);\r\n            }\r\n\r\n            if (geometryBufferRenderer) {\r\n                const roughnessIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE);\r\n                effect.setTexture(\"reflectivitySampler\", geometryBufferRenderer.getGBuffer().textures[roughnessIndex]);\r\n                if (this.useFresnel) {\r\n                    effect.setTexture(\"normalSampler\", geometryBufferRenderer.getGBuffer().textures[1]);\r\n                    if (this._useScreenspaceDepth) {\r\n                        const depthIndex = geometryBufferRenderer.getTextureIndex(GeometryBufferRenderer.SCREENSPACE_DEPTH_TEXTURE_TYPE);\r\n                        effect.setTexture(\"depthSampler\", geometryBufferRenderer.getGBuffer().textures[depthIndex]);\r\n                    } else {\r\n                        effect.setTexture(\"depthSampler\", geometryBufferRenderer.getGBuffer().textures[0]);\r\n                    }\r\n                }\r\n            } else if (prePassRenderer) {\r\n                const roughnessIndex = prePassRenderer.getIndex(Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE);\r\n                effect.setTexture(\"reflectivitySampler\", prePassRenderer.getRenderTarget().textures[roughnessIndex]);\r\n                if (this.useFresnel) {\r\n                    const depthIndex = prePassRenderer.getIndex(\r\n                        this._useScreenspaceDepth ? Constants.PREPASS_SCREENSPACE_DEPTH_TEXTURE_TYPE : Constants.PREPASS_DEPTH_TEXTURE_TYPE\r\n                    );\r\n                    const normalIndex = prePassRenderer.getIndex(Constants.PREPASS_NORMAL_TEXTURE_TYPE);\r\n\r\n                    effect.setTexture(\"normalSampler\", prePassRenderer.getRenderTarget().textures[normalIndex]);\r\n                    effect.setTexture(\"depthSampler\", prePassRenderer.getRenderTarget().textures[depthIndex]);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Serializes the rendering pipeline (Used when exporting)\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"SSRRenderingPipeline\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse the serialized pipeline\r\n     * @param source Source pipeline.\r\n     * @param scene The scene to load the pipeline to.\r\n     * @param rootUrl The URL of the serialized pipeline.\r\n     * @returns An instantiated pipeline from the serialized object.\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SSRRenderingPipeline {\r\n        return SerializationHelper.Parse(() => new SSRRenderingPipeline(source._name, scene, source._ratio), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SSRRenderingPipeline\", SSRRenderingPipeline);\r\n"]}