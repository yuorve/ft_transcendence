{"version":3,"file":"thinCircleOfConfusionPostProcess.js","sourceRoot":"","sources":["../../../../dev/core/src/PostProcesses/thinCircleOfConfusionPostProcess.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;AAE5D,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAY3C;;GAEG;AACH,MAAM,OAAO,gCAAiC,SAAQ,aAAa;IAqB5C,cAAc,CAAC,SAAkB,EAAE,IAAoB;QACtE,IAAI,SAAS,EAAE,CAAC;YACZ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,2CAA2C,CAAC,CAAC,CAAC;QACnE,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,uCAAuC,CAAC,CAAC,CAAC;QAC/D,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,YAAY,IAAY,EAAE,SAAmC,IAAI,EAAE,OAAiD;QAChH,KAAK,CAAC;YACF,GAAG,OAAO;YACV,IAAI;YACJ,MAAM,EAAE,MAAM,IAAI,MAAM,CAAC,iBAAkB;YAC3C,cAAc,EAAE,IAAI;YACpB,gBAAgB,EAAE,IAAI;YACtB,cAAc,EAAE,gCAAgC,CAAC,WAAW;YAC5D,QAAQ,EAAE,gCAAgC,CAAC,QAAQ;YACnD,QAAQ,EAAE,gCAAgC,CAAC,QAAQ;YACnD,OAAO,EAAE,OAAO,EAAE,kBAAkB,CAAC,CAAC,CAAC,gCAAgC,CAAC,yBAAyB,CAAC,CAAC,CAAC,SAAS;SAChH,CAAC,CAAC;QAQP;;WAEG;QACI,aAAQ,GAAG,EAAE,CAAC;QAErB;;WAEG;QACI,UAAK,GAAG,GAAG,CAAC;QAEnB;;WAEG;QACI,kBAAa,GAAG,IAAI,CAAC;QAE5B;;WAEG;QACI,gBAAW,GAAG,EAAE,CAAC;IAzBxB,CAAC;IA2Be,IAAI;QAChB,KAAK,CAAC,IAAI,EAAE,CAAC;QAEb,MAAM,OAAO,GAAG,IAAI,CAAC,OAAkD,CAAC;QAExE,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,MAAO,CAAC;QAEzC,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC;YAC9B,MAAM,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7F,CAAC;QAED,sGAAsG;QACtG,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5C,MAAM,iBAAiB,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,uFAAuF;QAE1L,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACrD,MAAM,CAAC,QAAQ,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;IAC5D,CAAC;;AA3FD;;GAEG;AACoB,4CAAW,GAAG,mBAAmB,AAAtB,CAAuB;AAEzD;;GAEG;AACoB,yCAAQ,GAAG,CAAC,eAAe,EAAE,eAAe,EAAE,mBAAmB,CAAC,AAA1D,CAA2D;AAE1F;;GAEG;AACoB,yCAAQ,GAAG,CAAC,cAAc,CAAC,AAAnB,CAAoB;AAEnD;;GAEG;AACoB,0DAAyB,GAAG,kCAAkC,AAArC,CAAsC","sourcesContent":["// eslint-disable-next-line import/no-internal-modules\r\nimport type { Nullable, AbstractEngine, EffectWrapperCreationOptions } from \"core/index\";\r\nimport { EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\n/**\r\n * Options used to create a ThinCircleOfConfusionPostProcess.\r\n */\r\nexport interface ThinCircleOfConfusionPostProcessOptions extends EffectWrapperCreationOptions {\r\n    /**\r\n     * If the (view) depth is normalized (0.0 to 1.0 from near to far) or not (0 to camera max distance)\r\n     */\r\n    depthNotNormalized?: boolean;\r\n}\r\n\r\n/**\r\n * Post process used to calculate the circle of confusion (used for depth of field, for example)\r\n */\r\nexport class ThinCircleOfConfusionPostProcess extends EffectWrapper {\r\n    /**\r\n     * The fragment shader url\r\n     */\r\n    public static readonly FragmentUrl = \"circleOfConfusion\";\r\n\r\n    /**\r\n     * The list of uniforms used by the effect\r\n     */\r\n    public static readonly Uniforms = [\"cameraMinMaxZ\", \"focusDistance\", \"cocPrecalculation\"];\r\n\r\n    /**\r\n     * The list of samplers used by the effect\r\n     */\r\n    public static readonly Samplers = [\"depthSampler\"];\r\n\r\n    /**\r\n     * Defines if the depth is normalized or not\r\n     */\r\n    public static readonly DefinesDepthNotNormalized = \"#define COC_DEPTH_NOT_NORMALIZED\";\r\n\r\n    protected override _gatherImports(useWebGPU: boolean, list: Promise<any>[]) {\r\n        if (useWebGPU) {\r\n            this._webGPUReady = true;\r\n            list.push(import(\"../ShadersWGSL/circleOfConfusion.fragment\"));\r\n        } else {\r\n            list.push(import(\"../Shaders/circleOfConfusion.fragment\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructs a new circle of confusion post process\r\n     * @param name Name of the effect\r\n     * @param engine Engine to use to render the effect. If not provided, the last created engine will be used\r\n     * @param options Options to configure the effect\r\n     */\r\n    constructor(name: string, engine: Nullable<AbstractEngine> = null, options?: ThinCircleOfConfusionPostProcessOptions) {\r\n        super({\r\n            ...options,\r\n            name,\r\n            engine: engine || Engine.LastCreatedEngine!,\r\n            useShaderStore: true,\r\n            useAsPostProcess: true,\r\n            fragmentShader: ThinCircleOfConfusionPostProcess.FragmentUrl,\r\n            uniforms: ThinCircleOfConfusionPostProcess.Uniforms,\r\n            samplers: ThinCircleOfConfusionPostProcess.Samplers,\r\n            defines: options?.depthNotNormalized ? ThinCircleOfConfusionPostProcess.DefinesDepthNotNormalized : undefined,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The camera to use to calculate the circle of confusion\r\n     */\r\n    public camera: Camera;\r\n\r\n    /**\r\n     * Max lens size in scene units/1000 (eg. millimeter). Standard cameras are 50mm. (default: 50) The diameter of the resulting aperture can be computed by lensSize/fStop.\r\n     */\r\n    public lensSize = 50;\r\n\r\n    /**\r\n     * F-Stop of the effect's camera. The diameter of the resulting aperture can be computed by lensSize/fStop. (default: 1.4)\r\n     */\r\n    public fStop = 1.4;\r\n\r\n    /**\r\n     * Distance away from the camera to focus on in scene units/1000 (eg. millimeter). (default: 2000)\r\n     */\r\n    public focusDistance = 2000;\r\n\r\n    /**\r\n     * Focal length of the effect's camera in scene units/1000 (eg. millimeter). (default: 50)\r\n     */\r\n    public focalLength = 50;\r\n\r\n    public override bind() {\r\n        super.bind();\r\n\r\n        const options = this.options as ThinCircleOfConfusionPostProcessOptions;\r\n\r\n        const effect = this._drawWrapper.effect!;\r\n\r\n        if (!options.depthNotNormalized) {\r\n            effect.setFloat2(\"cameraMinMaxZ\", this.camera.minZ, this.camera.maxZ - this.camera.minZ);\r\n        }\r\n\r\n        // Circle of confusion calculation, See https://developer.nvidia.com/gpugems/GPUGems/gpugems_ch23.html\r\n        const aperture = this.lensSize / this.fStop;\r\n        const cocPrecalculation = (aperture * this.focalLength) / (this.focusDistance - this.focalLength); // * ((this.focusDistance - pixelDistance)/pixelDistance) [This part is done in shader]\r\n\r\n        effect.setFloat(\"focusDistance\", this.focusDistance);\r\n        effect.setFloat(\"cocPrecalculation\", cocPrecalculation);\r\n    }\r\n}\r\n"]}