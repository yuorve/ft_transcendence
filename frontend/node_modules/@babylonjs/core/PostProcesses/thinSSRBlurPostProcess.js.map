{"version":3,"file":"thinSSRBlurPostProcess.js","sourceRoot":"","sources":["../../../../dev/core/src/PostProcesses/thinSSRBlurPostProcess.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;AAC5D,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAE/C;;GAEG;AACH,MAAM,OAAO,sBAAuB,SAAQ,aAAa;IAOlC,cAAc,CAAC,SAAkB,EAAE,IAAoB;QACtE,IAAI,SAAS,EAAE,CAAC;YACZ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,oDAAoD,CAAC,CAAC,CAAC;QAC5E,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gDAAgD,CAAC,CAAC,CAAC;QACxE,CAAC;IACL,CAAC;IAED,YAAY,IAAY,EAAE,SAAmC,IAAI,EAAE,SAAmB,EAAE,YAAqB,EAAE,OAAsC;QACjJ,KAAK,CAAC;YACF,GAAG,OAAO;YACV,IAAI;YACJ,MAAM,EAAE,MAAM,IAAI,MAAM,CAAC,iBAAkB;YAC3C,cAAc,EAAE,IAAI;YACpB,gBAAgB,EAAE,IAAI;YACtB,cAAc,EAAE,sBAAsB,CAAC,WAAW;YAClD,QAAQ,EAAE,sBAAsB,CAAC,QAAQ;YACzC,QAAQ,EAAE,sBAAsB,CAAC,QAAQ;SAC5C,CAAC,CAAC;QAWA,iBAAY,GAAW,CAAC,CAAC;QAEzB,kBAAa,GAAW,CAAC,CAAC;QAE1B,cAAS,GAAG,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAE9B,iBAAY,GAAG,IAAI,CAAC;QAfvB,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;YAC1B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC/B,CAAC;QAED,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACrC,CAAC;IACL,CAAC;IAUe,IAAI;QAChB,KAAK,CAAC,IAAI,EAAE,CAAC;QAEb,IAAI,CAAC,YAAY,CAAC,MAAO,CAAC,SAAS,CAC/B,kBAAkB,EAClB,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,EAC9D,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAClE,CAAC;IACN,CAAC;;AApDsB,kCAAW,GAAG,4BAA4B,AAA/B,CAAgC;AAE3C,+BAAQ,GAAG,CAAC,kBAAkB,CAAC,AAAvB,CAAwB;AAEhC,+BAAQ,GAAG,CAAC,gBAAgB,CAAC,AAArB,CAAsB","sourcesContent":["// eslint-disable-next-line import/no-internal-modules\r\nimport type { Nullable, AbstractEngine, EffectWrapperCreationOptions } from \"core/index\";\r\nimport { EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ThinSSRBlurPostProcess extends EffectWrapper {\r\n    public static readonly FragmentUrl = \"screenSpaceReflection2Blur\";\r\n\r\n    public static readonly Uniforms = [\"texelOffsetScale\"];\r\n\r\n    public static readonly Samplers = [\"textureSampler\"];\r\n\r\n    protected override _gatherImports(useWebGPU: boolean, list: Promise<any>[]) {\r\n        if (useWebGPU) {\r\n            this._webGPUReady = true;\r\n            list.push(import(\"../ShadersWGSL/screenSpaceReflection2Blur.fragment\"));\r\n        } else {\r\n            list.push(import(\"../Shaders/screenSpaceReflection2Blur.fragment\"));\r\n        }\r\n    }\r\n\r\n    constructor(name: string, engine: Nullable<AbstractEngine> = null, direction?: Vector2, blurStrength?: number, options?: EffectWrapperCreationOptions) {\r\n        super({\r\n            ...options,\r\n            name,\r\n            engine: engine || Engine.LastCreatedEngine!,\r\n            useShaderStore: true,\r\n            useAsPostProcess: true,\r\n            fragmentShader: ThinSSRBlurPostProcess.FragmentUrl,\r\n            uniforms: ThinSSRBlurPostProcess.Uniforms,\r\n            samplers: ThinSSRBlurPostProcess.Samplers,\r\n        });\r\n\r\n        if (direction !== undefined) {\r\n            this.direction = direction;\r\n        }\r\n\r\n        if (blurStrength !== undefined) {\r\n            this.blurStrength = blurStrength;\r\n        }\r\n    }\r\n\r\n    public textureWidth: number = 0;\r\n\r\n    public textureHeight: number = 0;\r\n\r\n    public direction = new Vector2(1, 0);\r\n\r\n    public blurStrength = 0.03;\r\n\r\n    public override bind() {\r\n        super.bind();\r\n\r\n        this._drawWrapper.effect!.setFloat2(\r\n            \"texelOffsetScale\",\r\n            (1 / this.textureWidth) * this.direction.x * this.blurStrength,\r\n            (1 / this.textureHeight) * this.direction.y * this.blurStrength\r\n        );\r\n    }\r\n}\r\n"]}