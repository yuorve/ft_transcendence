{"version":3,"file":"dynamic.js","sourceRoot":"","sources":["../../../dev/loaders/src/dynamic.ts"],"names":[],"mappings":"AAAA,yDAAyD;AAGzD,OAAO,EAAE,yBAAyB,EAAE,+CAAiC;AAErE,OAAO,EAAE,sBAAsB,EAAE,MAAM,gCAAgC,CAAC;AACxE,OAAO,EAAE,qBAAqB,EAAE,MAAM,8BAA8B,CAAC;AACrE,OAAO,EAAE,uBAAuB,EAAE,MAAM,kCAAkC,CAAC;AAC3E,OAAO,EAAE,qBAAqB,EAAE,MAAM,8BAA8B,CAAC;AAErE,OAAO,EAAE,6BAA6B,EAAE,MAAM,+BAA+B,CAAC;AAE9E;;;GAGG;AACH,MAAM,UAAU,sBAAsB;IAClC,oDAAoD;IACpD,yBAAyB,CAAC;QACtB,GAAG,sBAAsB;QACzB,YAAY,EAAE,KAAK,EAAE,OAAiC,EAAE,EAAE;YACtD,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,MAAM,CAAC,uBAAuB,CAAC,CAAC;YACjE,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC;QACpE,CAAC;KACgC,CAAC,CAAC;IAEvC,+CAA+C;IAC/C,6BAA6B,EAAE,CAAC;IAEhC,2BAA2B;IAC3B,yBAAyB,CAAC;QACtB,GAAG,qBAAqB;QACxB,YAAY,EAAE,KAAK,IAAI,EAAE;YACrB,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,CAAC;YAC9D,OAAO,IAAI,aAAa,EAAE,CAAC;QAC/B,CAAC;KACgC,CAAC,CAAC;IAEvC,6BAA6B;IAC7B,yBAAyB,CAAC;QACtB,GAAG,uBAAuB;QAC1B,YAAY,EAAE,KAAK,EAAE,OAAiC,EAAE,EAAE;YACtD,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM,MAAM,CAAC,yBAAyB,CAAC,CAAC;YACpE,OAAO,IAAI,eAAe,CAAC,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC;QACtE,CAAC;KACgC,CAAC,CAAC;IAEvC,2BAA2B;IAC3B,yBAAyB,CAAC;QACtB,GAAG,qBAAqB;QACxB,YAAY,EAAE,KAAK,IAAI,EAAE;YACrB,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,CAAC;YAC9D,OAAO,IAAI,aAAa,EAAE,CAAC;QAC/B,CAAC;KACgC,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n\r\nimport type { ISceneLoaderPluginFactory, SceneLoaderPluginOptions } from \"core/Loading/sceneLoader\";\r\nimport { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\n\r\nimport { GLTFFileLoaderMetadata } from \"./glTF/glTFFileLoader.metadata\";\r\nimport { OBJFileLoaderMetadata } from \"./OBJ/objFileLoader.metadata\";\r\nimport { SPLATFileLoaderMetadata } from \"./SPLAT/splatFileLoader.metadata\";\r\nimport { STLFileLoaderMetadata } from \"./STL/stlFileLoader.metadata\";\r\n\r\nimport { registerBuiltInGLTFExtensions } from \"./glTF/2.0/Extensions/dynamic\";\r\n\r\n/**\r\n * Registers the async plugin factories for all built-in loaders.\r\n * Loaders will be dynamically imported on demand, only when a SceneLoader load operation needs each respective loader.\r\n */\r\nexport function registerBuiltInLoaders() {\r\n    // Register the glTF loader (2.0) specifically/only.\r\n    RegisterSceneLoaderPlugin({\r\n        ...GLTFFileLoaderMetadata,\r\n        createPlugin: async (options: SceneLoaderPluginOptions) => {\r\n            const { GLTFFileLoader } = await import(\"./glTF/2.0/glTFLoader\");\r\n            return new GLTFFileLoader(options[GLTFFileLoaderMetadata.name]);\r\n        },\r\n    } satisfies ISceneLoaderPluginFactory);\r\n\r\n    // Register the built-in glTF (2.0) extensions.\r\n    registerBuiltInGLTFExtensions();\r\n\r\n    // Register the OBJ loader.\r\n    RegisterSceneLoaderPlugin({\r\n        ...OBJFileLoaderMetadata,\r\n        createPlugin: async () => {\r\n            const { OBJFileLoader } = await import(\"./OBJ/objFileLoader\");\r\n            return new OBJFileLoader();\r\n        },\r\n    } satisfies ISceneLoaderPluginFactory);\r\n\r\n    // Register the SPLAT loader.\r\n    RegisterSceneLoaderPlugin({\r\n        ...SPLATFileLoaderMetadata,\r\n        createPlugin: async (options: SceneLoaderPluginOptions) => {\r\n            const { SPLATFileLoader } = await import(\"./SPLAT/splatFileLoader\");\r\n            return new SPLATFileLoader(options[SPLATFileLoaderMetadata.name]);\r\n        },\r\n    } satisfies ISceneLoaderPluginFactory);\r\n\r\n    // Register the STL loader.\r\n    RegisterSceneLoaderPlugin({\r\n        ...STLFileLoaderMetadata,\r\n        createPlugin: async () => {\r\n            const { STLFileLoader } = await import(\"./STL/stlFileLoader\");\r\n            return new STLFileLoader();\r\n        },\r\n    } satisfies ISceneLoaderPluginFactory);\r\n}\r\n"]}