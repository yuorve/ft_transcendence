{"version":3,"file":"flowGraphGLTFDataProvider.js","sourceRoot":"","sources":["../../../../../../../dev/loaders/src/glTF/2.0/Extensions/KHR_interactivity/flowGraphGLTFDataProvider.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,oDAAsC;AAK/D,OAAO,EAAE,WAAW,EAAE,wDAA0C;AAYhE;;;GAGG;AACH,MAAM,OAAO,yBAA0B,SAAQ,cAAc;IAazD,YAAY,MAAoD;QAC5D,KAAK,EAAE,CAAC;QACR,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACzB,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;QACpF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;QAChG,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;QACpE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IACtE,CAAC;IAEe,YAAY;QACxB,OAAO,2BAA2B,CAAC;IACvC,CAAC;CACJ","sourcesContent":["import type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport { FlowGraphBlock } from \"core/FlowGraph/flowGraphBlock\";\nimport type { IGLTF } from \"../../glTFLoaderInterfaces\";\nimport type { FlowGraphDataConnection } from \"core/FlowGraph/flowGraphDataConnection\";\nimport type { AnimationGroup } from \"core/Animations/animationGroup\";\nimport type { TransformNode } from \"core/Meshes/transformNode\";\nimport { RichTypeAny } from \"core/FlowGraph/flowGraphRichTypes\";\n\n/**\n * a configuration interface for this block\n */\nexport interface IFlowGraphGLTFDataProviderBlockConfiguration extends IFlowGraphBlockConfiguration {\n    /**\n     * the glTF object to provide data from\n     */\n    glTF: IGLTF;\n}\n\n/**\n * a glTF-based FlowGraph block that provides arrays with babylon object, based on the glTF tree\n * Can be used, for example, to get animation index from a glTF animation\n */\nexport class FlowGraphGLTFDataProvider extends FlowGraphBlock {\n    /**\n     * Output: an array of animation groups\n     * Corresponds directly to the glTF animations array\n     */\n    public readonly animationGroups: FlowGraphDataConnection<AnimationGroup[]>;\n\n    /**\n     * Output an array of (Transform) nodes\n     * Corresponds directly to the glTF nodes array\n     */\n    public readonly nodes: FlowGraphDataConnection<TransformNode[]>;\n\n    constructor(config: IFlowGraphGLTFDataProviderBlockConfiguration) {\n        super();\n        const glTF = config.glTF;\n        const animationGroups = glTF.animations?.map((a) => a._babylonAnimationGroup) || [];\n        this.animationGroups = this.registerDataOutput(\"animationGroups\", RichTypeAny, animationGroups);\n        const nodes = glTF.nodes?.map((n) => n._babylonTransformNode) || [];\n        this.nodes = this.registerDataOutput(\"nodes\", RichTypeAny, nodes);\n    }\n\n    public override getClassName(): string {\n        return \"FlowGraphGLTFDataProvider\";\n    }\n}\n"]}