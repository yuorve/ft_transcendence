import { MaybeRef } from '@vueuse/shared';
import { Query, DocumentReference, DocumentData } from 'firebase/firestore';
import { Ref } from 'vue';

interface UseFirestoreOptions {
    errorHandler?: (err: Error) => void;
    autoDispose?: boolean | number;
}
type FirebaseDocRef<T> = Query<T> | DocumentReference<T>;
type Falsy = false | 0 | '' | null | undefined;
declare function useFirestore<T extends DocumentData>(maybeDocRef: MaybeRef<DocumentReference<T> | Falsy>, initialValue: T, options?: UseFirestoreOptions): Ref<T | null>;
declare function useFirestore<T extends DocumentData>(maybeDocRef: MaybeRef<Query<T> | Falsy>, initialValue: T[], options?: UseFirestoreOptions): Ref<T[]>;
declare function useFirestore<T extends DocumentData>(maybeDocRef: MaybeRef<DocumentReference<T> | Falsy>, initialValue?: T | undefined | null, options?: UseFirestoreOptions): Ref<T | undefined | null>;
declare function useFirestore<T extends DocumentData>(maybeDocRef: MaybeRef<Query<T> | Falsy>, initialValue?: T[], options?: UseFirestoreOptions): Ref<T[] | undefined>;

export { type FirebaseDocRef, type UseFirestoreOptions, useFirestore };
