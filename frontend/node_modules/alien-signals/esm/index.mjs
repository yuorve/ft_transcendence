var SubscriberFlags=(SubscriberFlags2=>{SubscriberFlags2[SubscriberFlags2["Computed"]=1]="Computed";SubscriberFlags2[SubscriberFlags2["Effect"]=2]="Effect";SubscriberFlags2[SubscriberFlags2["Tracking"]=4]="Tracking";SubscriberFlags2[SubscriberFlags2["Notified"]=8]="Notified";SubscriberFlags2[SubscriberFlags2["Recursed"]=16]="Recursed";SubscriberFlags2[SubscriberFlags2["Dirty"]=32]="Dirty";SubscriberFlags2[SubscriberFlags2["PendingComputed"]=64]="PendingComputed";SubscriberFlags2[SubscriberFlags2["PendingEffect"]=128]="PendingEffect";SubscriberFlags2[SubscriberFlags2["Propagated"]=224]="Propagated";return SubscriberFlags2})(SubscriberFlags||{});function createReactiveSystem({updateComputed,notifyEffect:notifyEffect2}){let queuedEffects;let queuedEffectsTail;return{link(dep,sub){const currentDep=sub.depsTail;if(currentDep!==void 0&&currentDep.dep===dep){return}const nextDep=currentDep!==void 0?currentDep.nextDep:sub.deps;if(nextDep!==void 0&&nextDep.dep===dep){sub.depsTail=nextDep;return}const depLastSub=dep.subsTail;if(depLastSub!==void 0&&depLastSub.sub===sub&&isValidLink(depLastSub,sub)){return}return linkNewDep(dep,sub,nextDep,currentDep)},propagate(current){let next=current.nextSub;let branchs;let branchDepth=0;let targetFlag=32;top:do{const sub=current.sub;const subFlags=sub.flags;let shouldNotify=false;if(!(subFlags&(4|16|224))){sub.flags=subFlags|targetFlag|8;shouldNotify=true}else if(subFlags&16&&!(subFlags&4)){sub.flags=subFlags&~16|targetFlag|8;shouldNotify=true}else if(!(subFlags&224)&&isValidLink(current,sub)){sub.flags=subFlags|16|targetFlag|8;shouldNotify=sub.subs!==void 0}if(shouldNotify){const subSubs=sub.subs;if(subSubs!==void 0){current=subSubs;if(subSubs.nextSub!==void 0){branchs={target:next,linked:branchs};++branchDepth;next=current.nextSub;targetFlag=64}else{targetFlag=subFlags&2?128:64}continue}if(subFlags&2){if(queuedEffectsTail!==void 0){queuedEffectsTail=queuedEffectsTail.linked={target:sub,linked:void 0}}else{queuedEffectsTail=queuedEffects={target:sub,linked:void 0}}}}else if(!(subFlags&(4|targetFlag))){sub.flags=subFlags|targetFlag|8;if((subFlags&(2|8))===2){if(queuedEffectsTail!==void 0){queuedEffectsTail=queuedEffectsTail.linked={target:sub,linked:void 0}}else{queuedEffectsTail=queuedEffects={target:sub,linked:void 0}}}}else if(!(subFlags&targetFlag)&&subFlags&224&&isValidLink(current,sub)){sub.flags=subFlags|targetFlag}if((current=next)!==void 0){next=current.nextSub;targetFlag=branchDepth?64:32;continue}while(branchDepth--){current=branchs.target;branchs=branchs.linked;if(current!==void 0){next=current.nextSub;targetFlag=branchDepth?64:32;continue top}}break}while(true)},startTracking(sub){sub.depsTail=void 0;sub.flags=sub.flags&~(8|16|224)|4},endTracking(sub){const depsTail=sub.depsTail;if(depsTail!==void 0){const nextDep=depsTail.nextDep;if(nextDep!==void 0){clearTracking(nextDep);depsTail.nextDep=void 0}}else if(sub.deps!==void 0){clearTracking(sub.deps);sub.deps=void 0}sub.flags&=~4},updateDirtyFlag(sub,flags){if(checkDirty(sub.deps)){sub.flags=flags|32;return true}else{sub.flags=flags&~64;return false}},processComputedUpdate(computed2,flags){if(flags&32||checkDirty(computed2.deps)){if(updateComputed(computed2)){const subs=computed2.subs;if(subs!==void 0){shallowPropagate(subs)}}}else{computed2.flags=flags&~64}},processPendingInnerEffects(sub,flags){if(flags&128){sub.flags=flags&~128;let link2=sub.deps;do{const dep=link2.dep;if("flags"in dep&&dep.flags&2&&dep.flags&224){notifyEffect2(dep)}link2=link2.nextDep}while(link2!==void 0)}},processEffectNotifications(){while(queuedEffects!==void 0){const effect2=queuedEffects.target;if((queuedEffects=queuedEffects.linked)===void 0){queuedEffectsTail=void 0}if(!notifyEffect2(effect2)){effect2.flags&=~8}}}};function linkNewDep(dep,sub,nextDep,depsTail){const newLink={dep,sub,nextDep,prevSub:void 0,nextSub:void 0};if(depsTail===void 0){sub.deps=newLink}else{depsTail.nextDep=newLink}if(dep.subs===void 0){dep.subs=newLink}else{const oldTail=dep.subsTail;newLink.prevSub=oldTail;oldTail.nextSub=newLink}sub.depsTail=newLink;dep.subsTail=newLink;return newLink}function checkDirty(current){let prevLinks;let checkDepth=0;top:do{const dep=current.dep;if("flags"in dep){const depFlags=dep.flags;if((depFlags&(1|32))===(1|32)){if(updateComputed(dep)){if(current.nextSub!==void 0||current.prevSub!==void 0){shallowPropagate(dep.subs)}while(checkDepth--){const computed2=current.sub;const firstSub=computed2.subs;if(updateComputed(computed2)){if(firstSub.nextSub!==void 0){shallowPropagate(firstSub);current=prevLinks.target;prevLinks=prevLinks.linked}else{current=firstSub}continue}if(firstSub.nextSub!==void 0){if((current=prevLinks.target.nextDep)===void 0){return false}prevLinks=prevLinks.linked;continue top}return false}return true}}else if((depFlags&(1|64))===(1|64)){dep.flags=depFlags&~64;if(current.nextSub!==void 0||current.prevSub!==void 0){prevLinks={target:current,linked:prevLinks}}++checkDepth;current=dep.deps;continue}}if((current=current.nextDep)===void 0){return false}}while(true)}function shallowPropagate(link2){do{const sub=link2.sub;const subFlags=sub.flags;if((subFlags&(64|32))===64){sub.flags=subFlags|32|8;if((subFlags&(2|8))===2){if(queuedEffectsTail!==void 0){queuedEffectsTail=queuedEffectsTail.linked={target:sub,linked:void 0}}else{queuedEffectsTail=queuedEffects={target:sub,linked:void 0}}}}link2=link2.nextSub}while(link2!==void 0)}function isValidLink(checkLink,sub){const depsTail=sub.depsTail;if(depsTail!==void 0){let link2=sub.deps;do{if(link2===checkLink){return true}if(link2===depsTail){break}link2=link2.nextDep}while(link2!==void 0)}return false}function clearTracking(link2){do{const dep=link2.dep;const nextDep=link2.nextDep;const nextSub=link2.nextSub;const prevSub=link2.prevSub;if(nextSub!==void 0){nextSub.prevSub=prevSub}else{dep.subsTail=prevSub}if(prevSub!==void 0){prevSub.nextSub=nextSub}else{dep.subs=nextSub}if(dep.subs===void 0&&"deps"in dep){const depFlags=dep.flags;if(!(depFlags&32)){dep.flags=depFlags|32}const depDeps=dep.deps;if(depDeps!==void 0){link2=depDeps;dep.depsTail.nextDep=nextDep;dep.deps=void 0;dep.depsTail=void 0;continue}}link2=nextDep}while(link2!==void 0)}}var{link,propagate,updateDirtyFlag,startTracking,endTracking,processEffectNotifications,processComputedUpdate,processPendingInnerEffects}=createReactiveSystem({updateComputed(computed2){const prevSub=activeSub;activeSub=computed2;startTracking(computed2);try{const oldValue=computed2.currentValue;const newValue=computed2.getter(oldValue);if(oldValue!==newValue){computed2.currentValue=newValue;return true}return false}finally{activeSub=prevSub;endTracking(computed2)}},notifyEffect(e){if("isScope"in e){return notifyEffectScope(e)}else{return notifyEffect(e)}}});var pauseStack=[];var batchDepth=0;var activeSub;var activeScope;function startBatch(){++batchDepth}function endBatch(){if(!--batchDepth){processEffectNotifications()}}function pauseTracking(){pauseStack.push(activeSub);activeSub=void 0}function resumeTracking(){activeSub=pauseStack.pop()}function signal(initialValue){return signalGetterSetter.bind({currentValue:initialValue,subs:void 0,subsTail:void 0})}function computed(getter){return computedGetter.bind({currentValue:void 0,subs:void 0,subsTail:void 0,deps:void 0,depsTail:void 0,flags:1|32,getter})}function effect(fn){const e={fn,subs:void 0,subsTail:void 0,deps:void 0,depsTail:void 0,flags:2};if(activeSub!==void 0){link(e,activeSub)}else if(activeScope!==void 0){link(e,activeScope)}const prevSub=activeSub;activeSub=e;try{e.fn()}finally{activeSub=prevSub}return effectStop.bind(e)}function effectScope(fn){const e={deps:void 0,depsTail:void 0,flags:2,isScope:true};const prevSub=activeScope;activeScope=e;try{fn()}finally{activeScope=prevSub}return effectStop.bind(e)}function notifyEffect(e){const flags=e.flags;if(flags&32||flags&64&&updateDirtyFlag(e,flags)){const prevSub=activeSub;activeSub=e;startTracking(e);try{e.fn()}finally{activeSub=prevSub;endTracking(e)}}else{processPendingInnerEffects(e,e.flags)}return true}function notifyEffectScope(e){const flags=e.flags;if(flags&128){processPendingInnerEffects(e,e.flags);return true}return false}function computedGetter(){const flags=this.flags;if(flags&(32|64)){processComputedUpdate(this,flags)}if(activeSub!==void 0){link(this,activeSub)}else if(activeScope!==void 0){link(this,activeScope)}return this.currentValue}function signalGetterSetter(...value){if(value.length){if(this.currentValue!==(this.currentValue=value[0])){const subs=this.subs;if(subs!==void 0){propagate(subs);if(!batchDepth){processEffectNotifications()}}}}else{if(activeSub!==void 0){link(this,activeSub)}return this.currentValue}}function effectStop(){startTracking(this);endTracking(this)}export{SubscriberFlags,batchDepth,computed,createReactiveSystem,effect,effectScope,endBatch,pauseTracking,resumeTracking,signal,startBatch};
