{
  "version": 3,
  "sources": ["../../../dev/core/src/Maths/math.axis.ts", "../../../dev/core/src/Maths/math.frustum.ts", "../../../dev/core/src/Maths/math.path.ts", "../../../dev/core/src/Maths/math.vertexFormat.ts", "../../../dev/core/src/PostProcesses/postProcessManager.ts", "../../../dev/core/src/Misc/smartArray.ts", "../../../dev/core/src/Rendering/renderingGroup.ts", "../../../dev/core/src/Rendering/renderingManager.ts"],
  "sourcesContent": ["import { Vector3 } from \"./math.vector\";\r\n\r\n/** Defines supported spaces */\r\nexport const enum Space {\r\n    /** Local (object) space */\r\n    LOCAL = 0,\r\n    /** World space */\r\n    WORLD = 1,\r\n    /** Bone space */\r\n    BONE = 2,\r\n}\r\n\r\n/** Defines the 3 main axes */\r\nexport class Axis {\r\n    /** X axis */\r\n    public static X: Vector3 = new Vector3(1.0, 0.0, 0.0);\r\n    /** Y axis */\r\n    public static Y: Vector3 = new Vector3(0.0, 1.0, 0.0);\r\n    /** Z axis */\r\n    public static Z: Vector3 = new Vector3(0.0, 0.0, 1.0);\r\n}\r\n\r\n/**\r\n * Defines cartesian components.\r\n */\r\nexport const enum Coordinate {\r\n    /** X axis */\r\n    X,\r\n    /** Y axis */\r\n    Y,\r\n    /** Z axis */\r\n    Z,\r\n}\r\n", "import type { Matrix, Vector3 } from \"./math.vector\";\r\nimport type { DeepImmutable } from \"../types\";\r\nimport { Plane } from \"./math.plane\";\r\n\r\n/**\r\n * Represents a camera frustum\r\n */\r\nexport class Frustum {\r\n    /**\r\n     * Gets the planes representing the frustum\r\n     * @param transform matrix to be applied to the returned planes\r\n     * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\r\n     */\r\n    public static GetPlanes(transform: DeepImmutable<Matrix>): Plane[] {\r\n        const frustumPlanes = [];\r\n        for (let index = 0; index < 6; index++) {\r\n            frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\r\n        }\r\n        Frustum.GetPlanesToRef(transform, frustumPlanes);\r\n        return frustumPlanes;\r\n    }\r\n\r\n    /**\r\n     * Gets the near frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetNearPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[2];\r\n        frustumPlane.normal.y = m[7] + m[6];\r\n        frustumPlane.normal.z = m[11] + m[10];\r\n        frustumPlane.d = m[15] + m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the far frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetFarPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[2];\r\n        frustumPlane.normal.y = m[7] - m[6];\r\n        frustumPlane.normal.z = m[11] - m[10];\r\n        frustumPlane.d = m[15] - m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the left frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetLeftPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[0];\r\n        frustumPlane.normal.y = m[7] + m[4];\r\n        frustumPlane.normal.z = m[11] + m[8];\r\n        frustumPlane.d = m[15] + m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the right frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetRightPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[0];\r\n        frustumPlane.normal.y = m[7] - m[4];\r\n        frustumPlane.normal.z = m[11] - m[8];\r\n        frustumPlane.d = m[15] - m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the top frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetTopPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[1];\r\n        frustumPlane.normal.y = m[7] - m[5];\r\n        frustumPlane.normal.z = m[11] - m[9];\r\n        frustumPlane.d = m[15] - m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the bottom frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetBottomPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[1];\r\n        frustumPlane.normal.y = m[7] + m[5];\r\n        frustumPlane.normal.z = m[11] + m[9];\r\n        frustumPlane.d = m[15] + m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\r\n     * @param transform transformation matrix to be applied to the resulting frustum planes\r\n     * @param frustumPlanes the resulting frustum planes\r\n     */\r\n    public static GetPlanesToRef(transform: DeepImmutable<Matrix>, frustumPlanes: Plane[]): void {\r\n        // Near\r\n        Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\r\n\r\n        // Far\r\n        Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\r\n\r\n        // Left\r\n        Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\r\n\r\n        // Right\r\n        Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\r\n\r\n        // Top\r\n        Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\r\n\r\n        // Bottom\r\n        Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is located between the frustum planes.\r\n     * @param point defines the point to test\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if the point is located between the frustum planes\r\n     */\r\n    public static IsPointInFrustum(point: Vector3, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(point) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n", "import type { DeepImmutable, Nullable } from \"../types\";\r\nimport { Clamp, WithinEpsilon } from \"./math.scalar.functions\";\r\nimport { Vector2, Vector3, Quaternion, Matrix } from \"./math.vector\";\r\nimport type { Vector4 } from \"./math.vector\";\r\nimport { Epsilon } from \"./math.constants\";\r\n\r\n/**\r\n * Defines potential orientation for back face culling\r\n */\r\nexport const enum Orientation {\r\n    /**\r\n     * Clockwise\r\n     */\r\n    CW = 0,\r\n    /** Counter clockwise */\r\n    CCW = 1,\r\n}\r\n\r\n/** Class used to represent a Bezier curve */\r\nexport class BezierCurve {\r\n    /**\r\n     * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\r\n     * @param t defines the time\r\n     * @param x1 defines the left coordinate on X axis\r\n     * @param y1 defines the left coordinate on Y axis\r\n     * @param x2 defines the right coordinate on X axis\r\n     * @param y2 defines the right coordinate on Y axis\r\n     * @returns the interpolated value\r\n     */\r\n    public static Interpolate(t: number, x1: number, y1: number, x2: number, y2: number): number {\r\n        // Extract X (which is equal to time here)\r\n        const f0 = 1 - 3 * x2 + 3 * x1;\r\n        const f1 = 3 * x2 - 6 * x1;\r\n        const f2 = 3 * x1;\r\n\r\n        let refinedT = t;\r\n        for (let i = 0; i < 5; i++) {\r\n            const refinedT2 = refinedT * refinedT;\r\n            const refinedT3 = refinedT2 * refinedT;\r\n\r\n            const x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;\r\n            const slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);\r\n            refinedT -= (x - t) * slope;\r\n            refinedT = Math.min(1, Math.max(0, refinedT));\r\n        }\r\n\r\n        // Resolve cubic bezier for the given x\r\n        return 3 * Math.pow(1 - refinedT, 2) * refinedT * y1 + 3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 + Math.pow(refinedT, 3);\r\n    }\r\n}\r\n\r\n/**\r\n * Defines angle representation\r\n */\r\nexport class Angle {\r\n    private _radians: number;\r\n\r\n    /**\r\n     * Creates an Angle object of \"radians\" radians (float).\r\n     * @param radians the angle in radians\r\n     */\r\n    constructor(radians: number) {\r\n        this._radians = radians;\r\n        if (this._radians < 0.0) {\r\n            this._radians += 2.0 * Math.PI;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get value in degrees\r\n     * @returns the Angle value in degrees (float)\r\n     */\r\n    public degrees() {\r\n        return (this._radians * 180.0) / Math.PI;\r\n    }\r\n\r\n    /**\r\n     * Get value in radians\r\n     * @returns the Angle value in radians (float)\r\n     */\r\n    public radians() {\r\n        return this._radians;\r\n    }\r\n\r\n    /**\r\n     * Gets a new Angle object with a value of the angle (in radians) between the line connecting the two points and the x-axis\r\n     * @param a defines first point as the origin\r\n     * @param b defines point\r\n     * @returns a new Angle\r\n     */\r\n    public static BetweenTwoPoints(a: DeepImmutable<Vector2>, b: DeepImmutable<Vector2>): Angle {\r\n        const delta = b.subtract(a);\r\n        const theta = Math.atan2(delta.y, delta.x);\r\n        return new Angle(theta);\r\n    }\r\n\r\n    /**\r\n     * Gets the angle between the two vectors\r\n     * @param a defines first vector\r\n     * @param b defines vector\r\n     * @returns Returns an new Angle between 0 and PI\r\n     */\r\n    public static BetweenTwoVectors<Vec extends Vector2 | Vector3 | Vector4>(a: DeepImmutable<Vec>, b: DeepImmutable<Vec>): Angle {\r\n        let product = a.lengthSquared() * b.lengthSquared();\r\n        if (product === 0) return new Angle(Math.PI / 2);\r\n        product = Math.sqrt(product);\r\n        let cosVal = a.dot(b as any) / product;\r\n        cosVal = Clamp(cosVal, -1, 1);\r\n        const angle = Math.acos(cosVal);\r\n        return new Angle(angle);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Angle object from the given float in radians\r\n     * @param radians defines the angle value in radians\r\n     * @returns a new Angle\r\n     */\r\n    public static FromRadians(radians: number): Angle {\r\n        return new Angle(radians);\r\n    }\r\n    /**\r\n     * Gets a new Angle object from the given float in degrees\r\n     * @param degrees defines the angle value in degrees\r\n     * @returns a new Angle\r\n     */\r\n    public static FromDegrees(degrees: number): Angle {\r\n        return new Angle((degrees * Math.PI) / 180.0);\r\n    }\r\n}\r\n\r\n/**\r\n * This represents an arc in a 2d space.\r\n */\r\nexport class Arc2 {\r\n    /**\r\n     * Defines the center point of the arc.\r\n     */\r\n    public centerPoint: Vector2;\r\n    /**\r\n     * Defines the radius of the arc.\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * Defines the angle of the arc (from mid point to end point).\r\n     */\r\n    public angle: Angle;\r\n    /**\r\n     * Defines the start angle of the arc (from start point to middle point).\r\n     */\r\n    public startAngle: Angle;\r\n    /**\r\n     * Defines the orientation of the arc (clock wise/counter clock wise).\r\n     */\r\n    public orientation: Orientation;\r\n\r\n    /**\r\n     * Creates an Arc object from the three given points : start, middle and end.\r\n     * @param startPoint Defines the start point of the arc\r\n     * @param midPoint Defines the middle point of the arc\r\n     * @param endPoint Defines the end point of the arc\r\n     */\r\n    constructor(\r\n        /** Defines the start point of the arc */\r\n        public startPoint: Vector2,\r\n        /** Defines the mid point of the arc */\r\n        public midPoint: Vector2,\r\n        /** Defines the end point of the arc */\r\n        public endPoint: Vector2\r\n    ) {\r\n        const temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);\r\n        const startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;\r\n        const midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;\r\n        const det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) - (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);\r\n\r\n        this.centerPoint = new Vector2(\r\n            (startToMid * (midPoint.y - endPoint.y) - midToEnd * (startPoint.y - midPoint.y)) / det,\r\n            ((startPoint.x - midPoint.x) * midToEnd - (midPoint.x - endPoint.x) * startToMid) / det\r\n        );\r\n\r\n        this.radius = this.centerPoint.subtract(this.startPoint).length();\r\n\r\n        this.startAngle = Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\r\n\r\n        const a1 = this.startAngle.degrees();\r\n        let a2 = Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();\r\n        let a3 = Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();\r\n\r\n        // angles correction\r\n        if (a2 - a1 > +180.0) {\r\n            a2 -= 360.0;\r\n        }\r\n        if (a2 - a1 < -180.0) {\r\n            a2 += 360.0;\r\n        }\r\n        if (a3 - a2 > +180.0) {\r\n            a3 -= 360.0;\r\n        }\r\n        if (a3 - a2 < -180.0) {\r\n            a3 += 360.0;\r\n        }\r\n\r\n        this.orientation = a2 - a1 < 0 ? Orientation.CW : Orientation.CCW;\r\n        this.angle = Angle.FromDegrees(this.orientation === Orientation.CW ? a1 - a3 : a3 - a1);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a 2D path made up of multiple 2D points\r\n */\r\nexport class Path2 {\r\n    private _points = new Array<Vector2>();\r\n    private _length = 0.0;\r\n\r\n    /**\r\n     * If the path start and end point are the same\r\n     */\r\n    public closed = false;\r\n\r\n    /**\r\n     * Creates a Path2 object from the starting 2D coordinates x and y.\r\n     * @param x the starting points x value\r\n     * @param y the starting points y value\r\n     */\r\n    constructor(x: number, y: number) {\r\n        this._points.push(new Vector2(x, y));\r\n    }\r\n\r\n    /**\r\n     * Adds a new segment until the given coordinates (x, y) to the current Path2.\r\n     * @param x the added points x value\r\n     * @param y the added points y value\r\n     * @returns the updated Path2.\r\n     */\r\n    public addLineTo(x: number, y: number): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n        const newPoint = new Vector2(x, y);\r\n        const previousPoint = this._points[this._points.length - 1];\r\n        this._points.push(newPoint);\r\n        this._length += newPoint.subtract(previousPoint).length();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\r\n     * @param midX middle point x value\r\n     * @param midY middle point y value\r\n     * @param endX end point x value\r\n     * @param endY end point y value\r\n     * @param numberOfSegments (default: 36)\r\n     * @returns the updated Path2.\r\n     */\r\n    public addArcTo(midX: number, midY: number, endX: number, endY: number, numberOfSegments = 36): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n        const startPoint = this._points[this._points.length - 1];\r\n        const midPoint = new Vector2(midX, midY);\r\n        const endPoint = new Vector2(endX, endY);\r\n\r\n        const arc = new Arc2(startPoint, midPoint, endPoint);\r\n\r\n        let increment = arc.angle.radians() / numberOfSegments;\r\n        if (arc.orientation === Orientation.CW) {\r\n            increment *= -1;\r\n        }\r\n        let currentAngle = arc.startAngle.radians() + increment;\r\n\r\n        for (let i = 0; i < numberOfSegments; i++) {\r\n            const x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;\r\n            const y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;\r\n            this.addLineTo(x, y);\r\n            currentAngle += increment;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds _numberOfSegments_ segments according to the quadratic curve definition to the current Path2.\r\n     * @param controlX control point x value\r\n     * @param controlY control point y value\r\n     * @param endX end point x value\r\n     * @param endY end point y value\r\n     * @param numberOfSegments (default: 36)\r\n     * @returns the updated Path2.\r\n     */\r\n    public addQuadraticCurveTo(controlX: number, controlY: number, endX: number, endY: number, numberOfSegments = 36): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n\r\n        const equation = (t: number, val0: number, val1: number, val2: number) => {\r\n            const res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\r\n            return res;\r\n        };\r\n        const startPoint = this._points[this._points.length - 1];\r\n        for (let i = 0; i <= numberOfSegments; i++) {\r\n            const step = i / numberOfSegments;\r\n            const x = equation(step, startPoint.x, controlX, endX);\r\n            const y = equation(step, startPoint.y, controlY, endY);\r\n            this.addLineTo(x, y);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds _numberOfSegments_ segments according to the bezier curve definition to the current Path2.\r\n     * @param originTangentX tangent vector at the origin point x value\r\n     * @param originTangentY tangent vector at the origin point y value\r\n     * @param destinationTangentX tangent vector at the destination point x value\r\n     * @param destinationTangentY tangent vector at the destination point y value\r\n     * @param endX end point x value\r\n     * @param endY end point y value\r\n     * @param numberOfSegments (default: 36)\r\n     * @returns the updated Path2.\r\n     */\r\n    public addBezierCurveTo(\r\n        originTangentX: number,\r\n        originTangentY: number,\r\n        destinationTangentX: number,\r\n        destinationTangentY: number,\r\n        endX: number,\r\n        endY: number,\r\n        numberOfSegments = 36\r\n    ): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n\r\n        const equation = (t: number, val0: number, val1: number, val2: number, val3: number) => {\r\n            const res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 + 3.0 * t * (1.0 - t) * (1.0 - t) * val1 + 3.0 * t * t * (1.0 - t) * val2 + t * t * t * val3;\r\n            return res;\r\n        };\r\n        const startPoint = this._points[this._points.length - 1];\r\n        for (let i = 0; i <= numberOfSegments; i++) {\r\n            const step = i / numberOfSegments;\r\n            const x = equation(step, startPoint.x, originTangentX, destinationTangentX, endX);\r\n            const y = equation(step, startPoint.y, originTangentY, destinationTangentY, endY);\r\n            this.addLineTo(x, y);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Defines if a given point is inside the polygon defines by the path\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside\r\n     */\r\n    public isPointInside(point: Vector2) {\r\n        let isInside = false;\r\n        const count = this._points.length;\r\n        for (let p = count - 1, q = 0; q < count; p = q++) {\r\n            let edgeLow = this._points[p];\r\n            let edgeHigh = this._points[q];\r\n\r\n            let edgeDx = edgeHigh.x - edgeLow.x;\r\n            let edgeDy = edgeHigh.y - edgeLow.y;\r\n\r\n            if (Math.abs(edgeDy) > Number.EPSILON) {\r\n                // Not parallel\r\n                if (edgeDy < 0) {\r\n                    edgeLow = this._points[q];\r\n                    edgeDx = -edgeDx;\r\n                    edgeHigh = this._points[p];\r\n                    edgeDy = -edgeDy;\r\n                }\r\n\r\n                if (point.y < edgeLow.y || point.y > edgeHigh.y) {\r\n                    continue;\r\n                }\r\n\r\n                if (point.y === edgeLow.y && point.x === edgeLow.x) {\r\n                    return true;\r\n                } else {\r\n                    const perpEdge = edgeDy * (point.x - edgeLow.x) - edgeDx * (point.y - edgeLow.y);\r\n                    if (perpEdge === 0) {\r\n                        return true;\r\n                    }\r\n                    if (perpEdge < 0) {\r\n                        continue;\r\n                    }\r\n                    isInside = !isInside;\r\n                }\r\n            } else {\r\n                // parallel or collinear\r\n                if (point.y !== edgeLow.y) {\r\n                    continue;\r\n                }\r\n\r\n                if ((edgeHigh.x <= point.x && point.x <= edgeLow.x) || (edgeLow.x <= point.x && point.x <= edgeHigh.x)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isInside;\r\n    }\r\n\r\n    /**\r\n     * Closes the Path2.\r\n     * @returns the Path2.\r\n     */\r\n    public close(): Path2 {\r\n        this.closed = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Gets the sum of the distance between each sequential point in the path\r\n     * @returns the Path2 total length (float).\r\n     */\r\n    public length(): number {\r\n        let result = this._length;\r\n\r\n        if (this.closed) {\r\n            const lastPoint = this._points[this._points.length - 1];\r\n            const firstPoint = this._points[0];\r\n            result += firstPoint.subtract(lastPoint).length();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the area of the polygon defined by the path\r\n     * @returns area value\r\n     */\r\n    public area(): number {\r\n        const n = this._points.length;\r\n        let value = 0.0;\r\n\r\n        for (let p = n - 1, q = 0; q < n; p = q++) {\r\n            value += this._points[p].x * this._points[q].y - this._points[q].x * this._points[p].y;\r\n        }\r\n\r\n        return value * 0.5;\r\n    }\r\n\r\n    /**\r\n     * Gets the points which construct the path\r\n     * @returns the Path2 internal array of points.\r\n     */\r\n    public getPoints(): Vector2[] {\r\n        return this._points;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the point at the distance aways from the starting point\r\n     * @param normalizedLengthPosition the length along the path to retrieve the point from\r\n     * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\r\n     */\r\n    public getPointAtLengthPosition(normalizedLengthPosition: number): Vector2 {\r\n        if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        const lengthPosition = normalizedLengthPosition * this.length();\r\n\r\n        let previousOffset = 0;\r\n        for (let i = 0; i < this._points.length; i++) {\r\n            const j = (i + 1) % this._points.length;\r\n\r\n            const a = this._points[i];\r\n            const b = this._points[j];\r\n            const bToA = b.subtract(a);\r\n\r\n            const nextOffset = bToA.length() + previousOffset;\r\n            if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\r\n                const dir = bToA.normalize();\r\n                const localOffset = lengthPosition - previousOffset;\r\n\r\n                return new Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);\r\n            }\r\n            previousOffset = nextOffset;\r\n        }\r\n\r\n        return Vector2.Zero();\r\n    }\r\n\r\n    /**\r\n     * Creates a new path starting from an x and y position\r\n     * @param x starting x value\r\n     * @param y starting y value\r\n     * @returns a new Path2 starting at the coordinates (x, y).\r\n     */\r\n    public static StartingAt(x: number, y: number): Path2 {\r\n        return new Path2(x, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a 3D path made up of multiple 3D points\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/path3D\r\n */\r\nexport class Path3D {\r\n    private _curve = new Array<Vector3>();\r\n    private _distances = new Array<number>();\r\n    private _tangents = new Array<Vector3>();\r\n    private _normals = new Array<Vector3>();\r\n    private _binormals = new Array<Vector3>();\r\n    private _raw: boolean;\r\n    private _alignTangentsWithPath: boolean;\r\n\r\n    // holds interpolated point data\r\n    private readonly _pointAtData = {\r\n        id: 0,\r\n        point: Vector3.Zero(),\r\n        previousPointArrayIndex: 0,\r\n\r\n        position: 0,\r\n        subPosition: 0,\r\n\r\n        interpolateReady: false,\r\n        interpolationMatrix: Matrix.Identity(),\r\n    };\r\n\r\n    /**\r\n     * new Path3D(path, normal, raw)\r\n     * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\r\n     * please read the description in the tutorial : https://doc.babylonjs.com/features/featuresDeepDive/mesh/path3D\r\n     * @param path an array of Vector3, the curve axis of the Path3D\r\n     * @param firstNormal (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\r\n     * @param raw (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\r\n     * @param alignTangentsWithPath (optional, default false) : boolean, if true the tangents will be aligned with the path.\r\n     */\r\n    constructor(\r\n        /**\r\n         * an array of Vector3, the curve axis of the Path3D\r\n         */\r\n        public path: Vector3[],\r\n        firstNormal: Nullable<Vector3> = null,\r\n        raw?: boolean,\r\n        alignTangentsWithPath = false\r\n    ) {\r\n        for (let p = 0; p < path.length; p++) {\r\n            this._curve[p] = path[p].clone(); // hard copy\r\n        }\r\n        this._raw = raw || false;\r\n        this._alignTangentsWithPath = alignTangentsWithPath;\r\n        this._compute(firstNormal, alignTangentsWithPath);\r\n    }\r\n\r\n    /**\r\n     * Returns the Path3D array of successive Vector3 designing its curve.\r\n     * @returns the Path3D array of successive Vector3 designing its curve.\r\n     */\r\n    public getCurve(): Vector3[] {\r\n        return this._curve;\r\n    }\r\n\r\n    /**\r\n     * Returns the Path3D array of successive Vector3 designing its curve.\r\n     * @returns the Path3D array of successive Vector3 designing its curve.\r\n     */\r\n    public getPoints(): Vector3[] {\r\n        return this._curve;\r\n    }\r\n\r\n    /**\r\n     * @returns the computed length (float) of the path.\r\n     */\r\n    public length() {\r\n        return this._distances[this._distances.length - 1];\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with tangent vectors on each Path3D curve point.\r\n     * @returns an array populated with tangent vectors on each Path3D curve point.\r\n     */\r\n    public getTangents(): Vector3[] {\r\n        return this._tangents;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with normal vectors on each Path3D curve point.\r\n     * @returns an array populated with normal vectors on each Path3D curve point.\r\n     */\r\n    public getNormals(): Vector3[] {\r\n        return this._normals;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with binormal vectors on each Path3D curve point.\r\n     * @returns an array populated with binormal vectors on each Path3D curve point.\r\n     */\r\n    public getBinormals(): Vector3[] {\r\n        return this._binormals;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with distances (float) of the i-th point from the first curve point.\r\n     * @returns an array populated with distances (float) of the i-th point from the first curve point.\r\n     */\r\n    public getDistances(): number[] {\r\n        return this._distances;\r\n    }\r\n\r\n    /**\r\n     * Returns an interpolated point along this path\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @returns a new Vector3 as the point\r\n     */\r\n    public getPointAt(position: number): Vector3 {\r\n        return this._updatePointAtData(position).point;\r\n    }\r\n\r\n    /**\r\n     * Returns the tangent vector of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @param interpolated (optional, default false) : boolean, if true returns an interpolated tangent instead of the tangent of the previous path point.\r\n     * @returns a tangent vector corresponding to the interpolated Path3D curve point, if not interpolated, the tangent is taken from the precomputed tangents array.\r\n     */\r\n    public getTangentAt(position: number, interpolated = false): Vector3 {\r\n        this._updatePointAtData(position, interpolated);\r\n        return interpolated ? Vector3.TransformCoordinates(Vector3.Forward(), this._pointAtData.interpolationMatrix) : this._tangents[this._pointAtData.previousPointArrayIndex];\r\n    }\r\n\r\n    /**\r\n     * Returns the tangent vector of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @param interpolated (optional, default false) : boolean, if true returns an interpolated normal instead of the normal of the previous path point.\r\n     * @returns a normal vector corresponding to the interpolated Path3D curve point, if not interpolated, the normal is taken from the precomputed normals array.\r\n     */\r\n    public getNormalAt(position: number, interpolated = false): Vector3 {\r\n        this._updatePointAtData(position, interpolated);\r\n        return interpolated ? Vector3.TransformCoordinates(Vector3.Right(), this._pointAtData.interpolationMatrix) : this._normals[this._pointAtData.previousPointArrayIndex];\r\n    }\r\n\r\n    /**\r\n     * Returns the binormal vector of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @param interpolated (optional, default false) : boolean, if true returns an interpolated binormal instead of the binormal of the previous path point.\r\n     * @returns a binormal vector corresponding to the interpolated Path3D curve point, if not interpolated, the binormal is taken from the precomputed binormals array.\r\n     */\r\n    public getBinormalAt(position: number, interpolated = false): Vector3 {\r\n        this._updatePointAtData(position, interpolated);\r\n        return interpolated ? Vector3.TransformCoordinates(Vector3.UpReadOnly, this._pointAtData.interpolationMatrix) : this._binormals[this._pointAtData.previousPointArrayIndex];\r\n    }\r\n\r\n    /**\r\n     * Returns the distance (float) of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @returns the distance of the interpolated Path3D curve point at the specified position along this path.\r\n     */\r\n    public getDistanceAt(position: number): number {\r\n        return this.length() * position;\r\n    }\r\n\r\n    /**\r\n     * Returns the array index of the previous point of an interpolated point along this path\r\n     * @param position the position of the point to interpolate along this path, from 0.0 to 1.0\r\n     * @returns the array index\r\n     */\r\n    public getPreviousPointIndexAt(position: number) {\r\n        this._updatePointAtData(position);\r\n        return this._pointAtData.previousPointArrayIndex;\r\n    }\r\n\r\n    /**\r\n     * Returns the position of an interpolated point relative to the two path points it lies between, from 0.0 (point A) to 1.0 (point B)\r\n     * @param position the position of the point to interpolate along this path, from 0.0 to 1.0\r\n     * @returns the sub position\r\n     */\r\n    public getSubPositionAt(position: number) {\r\n        this._updatePointAtData(position);\r\n        return this._pointAtData.subPosition;\r\n    }\r\n\r\n    /**\r\n     * Returns the position of the closest virtual point on this path to an arbitrary Vector3, from 0.0 to 1.0\r\n     * @param target the vector of which to get the closest position to\r\n     * @returns the position of the closest virtual point on this path to the target vector\r\n     */\r\n    public getClosestPositionTo(target: Vector3) {\r\n        let smallestDistance = Number.MAX_VALUE;\r\n        let closestPosition = 0.0;\r\n        for (let i = 0; i < this._curve.length - 1; i++) {\r\n            const point = this._curve[i + 0];\r\n            const tangent = this._curve[i + 1].subtract(point).normalize();\r\n            const subLength = this._distances[i + 1] - this._distances[i + 0];\r\n            const subPosition = Math.min((Math.max(Vector3.Dot(tangent, target.subtract(point).normalize()), 0.0) * Vector3.Distance(point, target)) / subLength, 1.0);\r\n            const distance = Vector3.Distance(point.add(tangent.scale(subPosition * subLength)), target);\r\n\r\n            if (distance < smallestDistance) {\r\n                smallestDistance = distance;\r\n                closestPosition = (this._distances[i + 0] + subLength * subPosition) / this.length();\r\n            }\r\n        }\r\n        return closestPosition;\r\n    }\r\n\r\n    /**\r\n     * Returns a sub path (slice) of this path\r\n     * @param start the position of the fist path point, from 0.0 to 1.0, or a negative value, which will get wrapped around from the end of the path to 0.0 to 1.0 values\r\n     * @param end the position of the last path point, from 0.0 to 1.0, or a negative value, which will get wrapped around from the end of the path to 0.0 to 1.0 values\r\n     * @returns a sub path (slice) of this path\r\n     */\r\n    public slice(start: number = 0.0, end: number = 1.0) {\r\n        if (start < 0.0) {\r\n            start = 1 - ((start * -1.0) % 1.0);\r\n        }\r\n        if (end < 0.0) {\r\n            end = 1 - ((end * -1.0) % 1.0);\r\n        }\r\n        if (start > end) {\r\n            const _start = start;\r\n            start = end;\r\n            end = _start;\r\n        }\r\n        const curvePoints = this.getCurve();\r\n\r\n        const startPoint = this.getPointAt(start);\r\n        let startIndex = this.getPreviousPointIndexAt(start);\r\n\r\n        const endPoint = this.getPointAt(end);\r\n        const endIndex = this.getPreviousPointIndexAt(end) + 1;\r\n\r\n        const slicePoints: Vector3[] = [];\r\n        if (start !== 0.0) {\r\n            startIndex++;\r\n            slicePoints.push(startPoint);\r\n        }\r\n\r\n        slicePoints.push(...curvePoints.slice(startIndex, endIndex));\r\n        if (end !== 1.0 || start === 1.0) {\r\n            slicePoints.push(endPoint);\r\n        }\r\n        return new Path3D(slicePoints, this.getNormalAt(start), this._raw, this._alignTangentsWithPath);\r\n    }\r\n\r\n    /**\r\n     * Forces the Path3D tangent, normal, binormal and distance recomputation.\r\n     * @param path path which all values are copied into the curves points\r\n     * @param firstNormal which should be projected onto the curve\r\n     * @param alignTangentsWithPath (optional, default false) : boolean, if true the tangents will be aligned with the path\r\n     * @returns the same object updated.\r\n     */\r\n    public update(path: Vector3[], firstNormal: Nullable<Vector3> = null, alignTangentsWithPath = false): Path3D {\r\n        for (let p = 0; p < path.length; p++) {\r\n            this._curve[p].x = path[p].x;\r\n            this._curve[p].y = path[p].y;\r\n            this._curve[p].z = path[p].z;\r\n        }\r\n        this._compute(firstNormal, alignTangentsWithPath);\r\n        return this;\r\n    }\r\n\r\n    // private function compute() : computes tangents, normals and binormals\r\n    private _compute(firstNormal: Nullable<Vector3>, alignTangentsWithPath = false): void {\r\n        const l = this._curve.length;\r\n\r\n        if (l < 2) {\r\n            return;\r\n        }\r\n\r\n        // first and last tangents\r\n        this._tangents[0] = this._getFirstNonNullVector(0);\r\n        if (!this._raw) {\r\n            this._tangents[0].normalize();\r\n        }\r\n        this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);\r\n        if (!this._raw) {\r\n            this._tangents[l - 1].normalize();\r\n        }\r\n\r\n        // normals and binormals at first point : arbitrary vector with _normalVector()\r\n        const tg0 = this._tangents[0];\r\n        const pp0 = this._normalVector(tg0, firstNormal);\r\n        this._normals[0] = pp0;\r\n        if (!this._raw) {\r\n            this._normals[0].normalize();\r\n        }\r\n        this._binormals[0] = Vector3.Cross(tg0, this._normals[0]);\r\n        if (!this._raw) {\r\n            this._binormals[0].normalize();\r\n        }\r\n        this._distances[0] = 0.0;\r\n\r\n        // normals and binormals : next points\r\n        let prev: Vector3; // previous vector (segment)\r\n        let cur: Vector3; // current vector (segment)\r\n        let curTang: Vector3; // current tangent\r\n        // previous normal\r\n        let prevNor: Vector3; // previous normal\r\n        let prevBinor: Vector3; // previous binormal\r\n\r\n        for (let i = 1; i < l; i++) {\r\n            // tangents\r\n            prev = this._getLastNonNullVector(i);\r\n            if (i < l - 1) {\r\n                cur = this._getFirstNonNullVector(i);\r\n                this._tangents[i] = alignTangentsWithPath ? cur : prev.add(cur);\r\n                this._tangents[i].normalize();\r\n            }\r\n            this._distances[i] = this._distances[i - 1] + this._curve[i].subtract(this._curve[i - 1]).length();\r\n\r\n            // normals and binormals\r\n            // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\r\n            curTang = this._tangents[i];\r\n            prevBinor = this._binormals[i - 1];\r\n            this._normals[i] = Vector3.Cross(prevBinor, curTang);\r\n            if (!this._raw) {\r\n                if (this._normals[i].length() === 0) {\r\n                    prevNor = this._normals[i - 1];\r\n                    this._normals[i] = prevNor.clone();\r\n                } else {\r\n                    this._normals[i].normalize();\r\n                }\r\n            }\r\n            this._binormals[i] = Vector3.Cross(curTang, this._normals[i]);\r\n            if (!this._raw) {\r\n                this._binormals[i].normalize();\r\n            }\r\n        }\r\n        this._pointAtData.id = NaN;\r\n    }\r\n\r\n    // private function getFirstNonNullVector(index)\r\n    // returns the first non null vector from index : curve[index + N].subtract(curve[index])\r\n    private _getFirstNonNullVector(index: number): Vector3 {\r\n        let i = 1;\r\n        let nNVector: Vector3 = this._curve[index + i].subtract(this._curve[index]);\r\n        while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\r\n            i++;\r\n            nNVector = this._curve[index + i].subtract(this._curve[index]);\r\n        }\r\n        return nNVector;\r\n    }\r\n\r\n    // private function getLastNonNullVector(index)\r\n    // returns the last non null vector from index : curve[index].subtract(curve[index - N])\r\n    private _getLastNonNullVector(index: number): Vector3 {\r\n        let i = 1;\r\n        let nLVector: Vector3 = this._curve[index].subtract(this._curve[index - i]);\r\n        while (nLVector.length() === 0 && index > i + 1) {\r\n            i++;\r\n            nLVector = this._curve[index].subtract(this._curve[index - i]);\r\n        }\r\n        return nLVector;\r\n    }\r\n\r\n    // private function normalVector(v0, vt, va) :\r\n    // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\r\n    // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\r\n    private _normalVector(vt: Vector3, va: Nullable<Vector3>): Vector3 {\r\n        let normal0: Vector3;\r\n        let tgl = vt.length();\r\n        if (tgl === 0.0) {\r\n            tgl = 1.0;\r\n        }\r\n\r\n        if (va === undefined || va === null) {\r\n            let point: Vector3;\r\n            if (!WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, Epsilon)) {\r\n                // search for a point in the plane\r\n                point = new Vector3(0.0, -1.0, 0.0);\r\n            } else if (!WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, Epsilon)) {\r\n                point = new Vector3(1.0, 0.0, 0.0);\r\n            } else if (!WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, Epsilon)) {\r\n                point = new Vector3(0.0, 0.0, 1.0);\r\n            } else {\r\n                point = Vector3.Zero();\r\n            }\r\n            normal0 = Vector3.Cross(vt, point);\r\n        } else {\r\n            normal0 = Vector3.Cross(vt, va);\r\n            Vector3.CrossToRef(normal0, vt, normal0);\r\n        }\r\n        normal0.normalize();\r\n        return normal0;\r\n    }\r\n\r\n    /**\r\n     * Updates the point at data for an interpolated point along this curve\r\n     * @param position the position of the point along this curve, from 0.0 to 1.0\r\n     * @param interpolateTNB\r\n     * @interpolateTNB whether to compute the interpolated tangent, normal and binormal\r\n     * @returns the (updated) point at data\r\n     */\r\n    private _updatePointAtData(position: number, interpolateTNB: boolean = false) {\r\n        // set an id for caching the result\r\n        if (this._pointAtData.id === position) {\r\n            if (!this._pointAtData.interpolateReady) {\r\n                this._updateInterpolationMatrix();\r\n            }\r\n            return this._pointAtData;\r\n        } else {\r\n            this._pointAtData.id = position;\r\n        }\r\n        const curvePoints = this.getPoints();\r\n\r\n        // clamp position between 0.0 and 1.0\r\n        if (position <= 0.0) {\r\n            return this._setPointAtData(0.0, 0.0, curvePoints[0], 0, interpolateTNB);\r\n        } else if (position >= 1.0) {\r\n            return this._setPointAtData(1.0, 1.0, curvePoints[curvePoints.length - 1], curvePoints.length - 1, interpolateTNB);\r\n        }\r\n\r\n        let previousPoint: Vector3 = curvePoints[0];\r\n        let currentPoint: Vector3;\r\n        let currentLength = 0.0;\r\n        const targetLength = position * this.length();\r\n\r\n        for (let i = 1; i < curvePoints.length; i++) {\r\n            currentPoint = curvePoints[i];\r\n            const distance = Vector3.Distance(previousPoint, currentPoint);\r\n            currentLength += distance;\r\n            if (currentLength === targetLength) {\r\n                return this._setPointAtData(position, 1.0, currentPoint, i, interpolateTNB);\r\n            } else if (currentLength > targetLength) {\r\n                const toLength = currentLength - targetLength;\r\n                const diff = toLength / distance;\r\n                const dir = previousPoint.subtract(currentPoint);\r\n                const point = currentPoint.add(dir.scaleInPlace(diff));\r\n                return this._setPointAtData(position, 1 - diff, point, i - 1, interpolateTNB);\r\n            }\r\n            previousPoint = currentPoint;\r\n        }\r\n        return this._pointAtData;\r\n    }\r\n\r\n    /**\r\n     * Updates the point at data from the specified parameters\r\n     * @param position where along the path the interpolated point is, from 0.0 to 1.0\r\n     * @param subPosition\r\n     * @param point the interpolated point\r\n     * @param parentIndex the index of an existing curve point that is on, or else positionally the first behind, the interpolated point\r\n     * @param interpolateTNB whether to compute the interpolated tangent, normal and binormal\r\n     * @returns the (updated) point at data\r\n     */\r\n    private _setPointAtData(position: number, subPosition: number, point: Vector3, parentIndex: number, interpolateTNB: boolean) {\r\n        this._pointAtData.point = point;\r\n        this._pointAtData.position = position;\r\n        this._pointAtData.subPosition = subPosition;\r\n        this._pointAtData.previousPointArrayIndex = parentIndex;\r\n        this._pointAtData.interpolateReady = interpolateTNB;\r\n\r\n        if (interpolateTNB) {\r\n            this._updateInterpolationMatrix();\r\n        }\r\n        return this._pointAtData;\r\n    }\r\n\r\n    /**\r\n     * Updates the point at interpolation matrix for the tangents, normals and binormals\r\n     */\r\n    private _updateInterpolationMatrix() {\r\n        this._pointAtData.interpolationMatrix = Matrix.Identity();\r\n        const parentIndex = this._pointAtData.previousPointArrayIndex;\r\n\r\n        if (parentIndex !== this._tangents.length - 1) {\r\n            const index = parentIndex + 1;\r\n\r\n            const tangentFrom = this._tangents[parentIndex].clone();\r\n            const normalFrom = this._normals[parentIndex].clone();\r\n            const binormalFrom = this._binormals[parentIndex].clone();\r\n\r\n            const tangentTo = this._tangents[index].clone();\r\n            const normalTo = this._normals[index].clone();\r\n            const binormalTo = this._binormals[index].clone();\r\n\r\n            const quatFrom = Quaternion.RotationQuaternionFromAxis(normalFrom, binormalFrom, tangentFrom);\r\n            const quatTo = Quaternion.RotationQuaternionFromAxis(normalTo, binormalTo, tangentTo);\r\n            const quatAt = Quaternion.Slerp(quatFrom, quatTo, this._pointAtData.subPosition);\r\n\r\n            quatAt.toRotationMatrix(this._pointAtData.interpolationMatrix);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n * A Curve3 is designed from a series of successive Vector3.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves\r\n */\r\nexport class Curve3 {\r\n    private _points: Vector3[];\r\n    private _length: number = 0.0;\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Quadratic Bezier curve : https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves#quadratic-bezier-curve\r\n     * @param v0 (Vector3) the origin point of the Quadratic Bezier\r\n     * @param v1 (Vector3) the control point\r\n     * @param v2 (Vector3) the end point of the Quadratic Bezier\r\n     * @param nbPoints (integer) the wanted number of points in the curve\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateQuadraticBezier(v0: DeepImmutable<Vector3>, v1: DeepImmutable<Vector3>, v2: DeepImmutable<Vector3>, nbPoints: number): Curve3 {\r\n        nbPoints = nbPoints > 2 ? nbPoints : 3;\r\n        const bez: Vector3[] = [];\r\n        const equation = (t: number, val0: number, val1: number, val2: number) => {\r\n            const res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\r\n            return res;\r\n        };\r\n        for (let i = 0; i <= nbPoints; i++) {\r\n            bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));\r\n        }\r\n        return new Curve3(bez);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Cubic Bezier curve : https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves#cubic-bezier-curve\r\n     * @param v0 (Vector3) the origin point of the Cubic Bezier\r\n     * @param v1 (Vector3) the first control point\r\n     * @param v2 (Vector3) the second control point\r\n     * @param v3 (Vector3) the end point of the Cubic Bezier\r\n     * @param nbPoints (integer) the wanted number of points in the curve\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateCubicBezier(v0: DeepImmutable<Vector3>, v1: DeepImmutable<Vector3>, v2: DeepImmutable<Vector3>, v3: DeepImmutable<Vector3>, nbPoints: number): Curve3 {\r\n        nbPoints = nbPoints > 3 ? nbPoints : 4;\r\n        const bez: Vector3[] = [];\r\n        const equation = (t: number, val0: number, val1: number, val2: number, val3: number) => {\r\n            const res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 + 3.0 * t * (1.0 - t) * (1.0 - t) * val1 + 3.0 * t * t * (1.0 - t) * val2 + t * t * t * val3;\r\n            return res;\r\n        };\r\n        for (let i = 0; i <= nbPoints; i++) {\r\n            bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));\r\n        }\r\n        return new Curve3(bez);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Hermite Spline curve : https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves#hermite-spline\r\n     * @param p1 (Vector3) the origin point of the Hermite Spline\r\n     * @param t1 (Vector3) the tangent vector at the origin point\r\n     * @param p2 (Vector3) the end point of the Hermite Spline\r\n     * @param t2 (Vector3) the tangent vector at the end point\r\n     * @param nSeg (integer) the number of curve segments or nSeg + 1 points in the array\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateHermiteSpline(p1: DeepImmutable<Vector3>, t1: DeepImmutable<Vector3>, p2: DeepImmutable<Vector3>, t2: DeepImmutable<Vector3>, nSeg: number): Curve3 {\r\n        const hermite: Vector3[] = [];\r\n        const step = 1.0 / nSeg;\r\n        for (let i = 0; i <= nSeg; i++) {\r\n            hermite.push(Vector3.Hermite(p1, t1, p2, t2, i * step));\r\n        }\r\n        return new Curve3(hermite);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a CatmullRom Spline curve :\r\n     * @param points (array of Vector3) the points the spline must pass through. At least, four points required\r\n     * @param nbPoints (integer) the wanted number of points between each curve control points\r\n     * @param closed (boolean) optional with default false, when true forms a closed loop from the points\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateCatmullRomSpline(points: DeepImmutable<Vector3[]>, nbPoints: number, closed?: boolean): Curve3 {\r\n        const catmullRom: Vector3[] = [];\r\n        const step = 1.0 / nbPoints;\r\n        let amount = 0.0;\r\n        if (closed) {\r\n            const pointsCount = points.length;\r\n            for (let i = 0; i < pointsCount; i++) {\r\n                amount = 0;\r\n                for (let c = 0; c < nbPoints; c++) {\r\n                    catmullRom.push(\r\n                        Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount)\r\n                    );\r\n                    amount += step;\r\n                }\r\n            }\r\n            catmullRom.push(catmullRom[0]);\r\n        } else {\r\n            const totalPoints: Vector3[] = [];\r\n            totalPoints.push(points[0].clone());\r\n            Array.prototype.push.apply(totalPoints, points);\r\n            totalPoints.push(points[points.length - 1].clone());\r\n            let i = 0;\r\n            for (; i < totalPoints.length - 3; i++) {\r\n                amount = 0;\r\n                for (let c = 0; c < nbPoints; c++) {\r\n                    catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\r\n                    amount += step;\r\n                }\r\n            }\r\n            i--;\r\n            catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\r\n        }\r\n        return new Curve3(catmullRom);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along an arc through three vector3 points:\r\n     * The three points should not be colinear. When they are the Curve3 is empty.\r\n     * @param first (Vector3) the first point the arc must pass through.\r\n     * @param second (Vector3) the second point the arc must pass through.\r\n     * @param third (Vector3) the third point the arc must pass through.\r\n     * @param steps (number) the larger the number of steps the more detailed the arc.\r\n     * @param closed (boolean) optional with default false, when true forms the chord from the first and third point\r\n     * @param fullCircle Circle (boolean) optional with default false, when true forms the complete circle through the three points\r\n     * @returns the created Curve3\r\n     */\r\n    public static ArcThru3Points(first: Vector3, second: Vector3, third: Vector3, steps: number = 32, closed: boolean = false, fullCircle: boolean = false): Curve3 {\r\n        const arc: Vector3[] = [];\r\n        const vec1 = second.subtract(first);\r\n        const vec2 = third.subtract(second);\r\n        const vec3 = first.subtract(third);\r\n        const zAxis = Vector3.Cross(vec1, vec2);\r\n        const len4 = zAxis.length();\r\n        if (len4 < Math.pow(10, -8)) {\r\n            return new Curve3(arc); // colinear points arc is empty\r\n        }\r\n        const len1_sq = vec1.lengthSquared();\r\n        const len2_sq = vec2.lengthSquared();\r\n        const len3_sq = vec3.lengthSquared();\r\n        const len4_sq = zAxis.lengthSquared();\r\n        const len1 = vec1.length();\r\n        const len2 = vec2.length();\r\n        const len3 = vec3.length();\r\n        const radius = (0.5 * len1 * len2 * len3) / len4;\r\n        const dot1 = Vector3.Dot(vec1, vec3);\r\n        const dot2 = Vector3.Dot(vec1, vec2);\r\n        const dot3 = Vector3.Dot(vec2, vec3);\r\n        const a = (-0.5 * len2_sq * dot1) / len4_sq;\r\n        const b = (-0.5 * len3_sq * dot2) / len4_sq;\r\n        const c = (-0.5 * len1_sq * dot3) / len4_sq;\r\n        const center = first.scale(a).add(second.scale(b)).add(third.scale(c));\r\n        const radiusVec = first.subtract(center);\r\n        const xAxis = radiusVec.normalize();\r\n        const yAxis = Vector3.Cross(zAxis, xAxis).normalize();\r\n        if (fullCircle) {\r\n            const dStep = (2 * Math.PI) / steps;\r\n            for (let theta = 0; theta <= 2 * Math.PI; theta += dStep) {\r\n                arc.push(center.add(xAxis.scale(radius * Math.cos(theta)).add(yAxis.scale(radius * Math.sin(theta)))));\r\n            }\r\n            arc.push(first);\r\n        } else {\r\n            const dStep = 1 / steps;\r\n            let theta = 0;\r\n            let point = Vector3.Zero();\r\n            do {\r\n                point = center.add(xAxis.scale(radius * Math.cos(theta)).add(yAxis.scale(radius * Math.sin(theta))));\r\n                arc.push(point);\r\n                theta += dStep;\r\n            } while (!point.equalsWithEpsilon(third, radius * dStep * 1.1));\r\n            arc.push(third);\r\n            if (closed) {\r\n                arc.push(first);\r\n            }\r\n        }\r\n        return new Curve3(arc);\r\n    }\r\n\r\n    /**\r\n     * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n     * A Curve3 is designed from a series of successive Vector3.\r\n     * Tuto : https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves#curve3-object\r\n     * @param points points which make up the curve\r\n     */\r\n    constructor(points: Vector3[]) {\r\n        this._points = points;\r\n        this._length = this._computeLength(points);\r\n    }\r\n\r\n    /**\r\n     * @returns the Curve3 stored array of successive Vector3\r\n     */\r\n    public getPoints() {\r\n        return this._points;\r\n    }\r\n\r\n    /**\r\n     * @returns the computed length (float) of the curve.\r\n     */\r\n    public length() {\r\n        return this._length;\r\n    }\r\n\r\n    /**\r\n     * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\r\n     * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\r\n     * curveA and curveB keep unchanged.\r\n     * @param curve the curve to continue from this curve\r\n     * @returns the newly constructed curve\r\n     */\r\n    public continue(curve: DeepImmutable<Curve3>): Curve3 {\r\n        const lastPoint = this._points[this._points.length - 1];\r\n        const continuedPoints = this._points.slice();\r\n        const curvePoints = curve.getPoints();\r\n        for (let i = 1; i < curvePoints.length; i++) {\r\n            continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));\r\n        }\r\n        const continuedCurve = new Curve3(continuedPoints);\r\n        return continuedCurve;\r\n    }\r\n\r\n    private _computeLength(path: DeepImmutable<Vector3[]>): number {\r\n        let l = 0;\r\n        for (let i = 1; i < path.length; i++) {\r\n            l += path[i].subtract(path[i - 1]).length();\r\n        }\r\n        return l;\r\n    }\r\n}\r\n", "import { Vector3, Vector2 } from \"./math.vector\";\r\n\r\n/**\r\n * Contains position and normal vectors for a vertex\r\n */\r\nexport class PositionNormalVertex {\r\n    /**\r\n     * Creates a PositionNormalVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     */\r\n    constructor(\r\n        /** [Vector3.Zero()] the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** [Vector3.Up()] the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up()\r\n    ) {}\r\n\r\n    /**\r\n     * Clones the PositionNormalVertex\r\n     * @returns the cloned PositionNormalVertex\r\n     */\r\n    public clone(): PositionNormalVertex {\r\n        return new PositionNormalVertex(this.position.clone(), this.normal.clone());\r\n    }\r\n}\r\n\r\n/**\r\n * Contains position, normal and uv vectors for a vertex\r\n */\r\nexport class PositionNormalTextureVertex {\r\n    /**\r\n     * Creates a PositionNormalTextureVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     * @param uv the uv of the vertex (default: 0,0)\r\n     */\r\n    constructor(\r\n        /** [Vector3.Zero()] the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** [Vector3.Up()] the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up(),\r\n        /** [Vector3.Zero()] the uv of the vertex (default: 0,0) */\r\n        public uv: Vector2 = Vector2.Zero()\r\n    ) {}\r\n    /**\r\n     * Clones the PositionNormalTextureVertex\r\n     * @returns the cloned PositionNormalTextureVertex\r\n     */\r\n    public clone(): PositionNormalTextureVertex {\r\n        return new PositionNormalTextureVertex(this.position.clone(), this.normal.clone(), this.uv.clone());\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport type { PostProcess } from \"./postProcess\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport type { RenderTargetWrapper } from \"../Engines/renderTargetWrapper\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * PostProcessManager is used to manage one or more post processes or post process pipelines\r\n * See https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses\r\n */\r\nexport class PostProcessManager {\r\n    private _scene: Scene;\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _vertexBuffers: { [key: string]: Nullable<VertexBuffer> } = {};\r\n\r\n    /**\r\n     * Creates a new instance PostProcess\r\n     * @param scene The scene that the post process is associated with.\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n    }\r\n\r\n    private _prepareBuffers(): void {\r\n        if (this._vertexBuffers[VertexBuffer.PositionKind]) {\r\n            return;\r\n        }\r\n\r\n        // VBO\r\n        const vertices = [];\r\n        vertices.push(1, 1);\r\n        vertices.push(-1, 1);\r\n        vertices.push(-1, -1);\r\n        vertices.push(1, -1);\r\n\r\n        this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(this._scene.getEngine(), vertices, VertexBuffer.PositionKind, false, false, 2);\r\n\r\n        this._buildIndexBuffer();\r\n    }\r\n\r\n    private _buildIndexBuffer(): void {\r\n        // Indices\r\n        const indices = [];\r\n        indices.push(0);\r\n        indices.push(1);\r\n        indices.push(2);\r\n\r\n        indices.push(0);\r\n        indices.push(2);\r\n        indices.push(3);\r\n\r\n        this._indexBuffer = this._scene.getEngine().createIndexBuffer(indices);\r\n    }\r\n\r\n    public onBeforeRenderObservable = new Observable<PostProcessManager>();\r\n\r\n    /**\r\n     * Rebuilds the vertex buffers of the manager.\r\n     * @internal\r\n     */\r\n    public _rebuild(): void {\r\n        const vb = this._vertexBuffers[VertexBuffer.PositionKind];\r\n\r\n        if (!vb) {\r\n            return;\r\n        }\r\n        vb._rebuild();\r\n        this._buildIndexBuffer();\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Prepares a frame to be run through a post process.\r\n     * @param sourceTexture The input texture to the post processes. (default: null)\r\n     * @param postProcesses An array of post processes to be run. (default: null)\r\n     * @returns True if the post processes were able to be run.\r\n     * @internal\r\n     */\r\n    public _prepareFrame(sourceTexture: Nullable<InternalTexture> = null, postProcesses: Nullable<PostProcess[]> = null): boolean {\r\n        const camera = this._scene.activeCamera;\r\n        if (!camera) {\r\n            return false;\r\n        }\r\n\r\n        postProcesses = postProcesses || <Nullable<PostProcess[]>>camera._postProcesses.filter((pp) => {\r\n                return pp != null;\r\n            });\r\n\r\n        if (!postProcesses || postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\r\n            return false;\r\n        }\r\n\r\n        postProcesses[0].activate(camera, sourceTexture, postProcesses !== null && postProcesses !== undefined);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Manually render a set of post processes to a texture.\r\n     * Please note, the frame buffer won't be unbound after the call in case you have more render to do.\r\n     * @param postProcesses An array of post processes to be run.\r\n     * @param targetTexture The render target wrapper to render to.\r\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight\r\n     * @param faceIndex defines the face to render to if a cubemap is defined as the target\r\n     * @param lodLevel defines which lod of the texture to render to\r\n     * @param doNotBindFrambuffer If set to true, assumes that the framebuffer has been bound previously\r\n     */\r\n    public directRender(\r\n        postProcesses: PostProcess[],\r\n        targetTexture: Nullable<RenderTargetWrapper> = null,\r\n        forceFullscreenViewport = false,\r\n        faceIndex = 0,\r\n        lodLevel = 0,\r\n        doNotBindFrambuffer = false\r\n    ): void {\r\n        const engine = this._scene.getEngine();\r\n\r\n        for (let index = 0; index < postProcesses.length; index++) {\r\n            if (index < postProcesses.length - 1) {\r\n                postProcesses[index + 1].activate(this._scene.activeCamera || this._scene, targetTexture?.texture);\r\n            } else {\r\n                if (targetTexture) {\r\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport, lodLevel);\r\n                } else if (!doNotBindFrambuffer) {\r\n                    engine.restoreDefaultFramebuffer();\r\n                }\r\n                engine._debugInsertMarker?.(`post process ${postProcesses[index].name} output`);\r\n            }\r\n\r\n            const pp = postProcesses[index];\r\n            const effect = pp.apply();\r\n\r\n            if (effect) {\r\n                pp.onBeforeRenderObservable.notifyObservers(effect);\r\n\r\n                // VBOs\r\n                this._prepareBuffers();\r\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\r\n\r\n                // Draw order\r\n                engine.drawElementsType(Constants.MATERIAL_TriangleFillMode, 0, 6);\r\n\r\n                pp.onAfterRenderObservable.notifyObservers(effect);\r\n            }\r\n        }\r\n\r\n        // Restore depth buffer\r\n        engine.setDepthBuffer(true);\r\n        engine.setDepthWrite(true);\r\n    }\r\n\r\n    /**\r\n     * Finalize the result of the output of the postprocesses.\r\n     * @param doNotPresent If true the result will not be displayed to the screen.\r\n     * @param targetTexture The render target wrapper to render to.\r\n     * @param faceIndex The index of the face to bind the target texture to.\r\n     * @param postProcesses The array of post processes to render.\r\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight (default: false)\r\n     * @internal\r\n     */\r\n    public _finalizeFrame(\r\n        doNotPresent?: boolean,\r\n        targetTexture?: RenderTargetWrapper,\r\n        faceIndex?: number,\r\n        postProcesses?: Array<PostProcess>,\r\n        forceFullscreenViewport = false\r\n    ): void {\r\n        const camera = this._scene.activeCamera;\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        this.onBeforeRenderObservable.notifyObservers(this);\r\n\r\n        postProcesses = postProcesses || <Array<PostProcess>>camera._postProcesses.filter((pp) => {\r\n                return pp != null;\r\n            });\r\n        if (postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\r\n            return;\r\n        }\r\n        const engine = this._scene.getEngine();\r\n\r\n        for (let index = 0, len = postProcesses.length; index < len; index++) {\r\n            const pp = postProcesses[index];\r\n\r\n            if (index < len - 1) {\r\n                pp._outputTexture = postProcesses[index + 1].activate(camera, targetTexture?.texture);\r\n            } else {\r\n                if (targetTexture) {\r\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport);\r\n                    pp._outputTexture = targetTexture;\r\n                } else {\r\n                    engine.restoreDefaultFramebuffer();\r\n                    pp._outputTexture = null;\r\n                }\r\n                engine._debugInsertMarker?.(`post process ${postProcesses[index].name} output`);\r\n            }\r\n\r\n            if (doNotPresent) {\r\n                break;\r\n            }\r\n\r\n            const effect = pp.apply();\r\n\r\n            if (effect) {\r\n                pp.onBeforeRenderObservable.notifyObservers(effect);\r\n\r\n                // VBOs\r\n                this._prepareBuffers();\r\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\r\n\r\n                // Draw order\r\n                engine.drawElementsType(Constants.MATERIAL_TriangleFillMode, 0, 6);\r\n\r\n                pp.onAfterRenderObservable.notifyObservers(effect);\r\n            }\r\n        }\r\n\r\n        // Restore states\r\n        engine.setDepthBuffer(true);\r\n        engine.setDepthWrite(true);\r\n        engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n    }\r\n\r\n    /**\r\n     * Disposes of the post process manager.\r\n     */\r\n    public dispose(): void {\r\n        const buffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (buffer) {\r\n            buffer.dispose();\r\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\r\n        }\r\n\r\n        if (this._indexBuffer) {\r\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\r\n            this._indexBuffer = null;\r\n        }\r\n    }\r\n}\r\n", "/**\r\n * Defines an array and its length.\r\n * It can be helpful to group result from both Arrays and smart arrays in one structure.\r\n */\r\nexport interface ISmartArrayLike<T> {\r\n    /**\r\n     * The data of the array.\r\n     */\r\n    data: Array<T>;\r\n    /**\r\n     * The active length of the array.\r\n     */\r\n    length: number;\r\n}\r\n\r\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n */\r\nexport class SmartArray<T> implements ISmartArrayLike<T> {\r\n    /**\r\n     * The full set of data from the array.\r\n     */\r\n    public data: Array<T>;\r\n\r\n    /**\r\n     * The active length of the array.\r\n     */\r\n    public length: number = 0;\r\n\r\n    protected _id: number;\r\n\r\n    /**\r\n     * Instantiates a Smart Array.\r\n     * @param capacity defines the default capacity of the array.\r\n     */\r\n    constructor(capacity: number) {\r\n        this.data = new Array(capacity);\r\n        this._id = SmartArray._GlobalId++;\r\n    }\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * @param value defines the object to push in the array.\r\n     */\r\n    public push(value: T): void {\r\n        this.data[this.length++] = value;\r\n\r\n        if (this.length > this.data.length) {\r\n            this.data.length *= 2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates over the active data and apply the lambda to them.\r\n     * @param func defines the action to apply on each value.\r\n     */\r\n    public forEach(func: (content: T) => void): void {\r\n        for (let index = 0; index < this.length; index++) {\r\n            func(this.data[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sorts the full sets of data.\r\n     * @param compareFn defines the comparison function to apply.\r\n     */\r\n    public sort(compareFn: (a: T, b: T) => number): void {\r\n        this.data.sort(compareFn);\r\n    }\r\n\r\n    /**\r\n     * Resets the active data to an empty array.\r\n     */\r\n    public reset(): void {\r\n        this.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Releases all the data from the array as well as the array.\r\n     */\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        if (this.data) {\r\n            this.data.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Concats the active data with a given array.\r\n     * @param array defines the data to concatenate with.\r\n     */\r\n    public concat(array: any): void {\r\n        if (array.length === 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (let index = 0; index < array.length; index++) {\r\n            this.data[this.length++] = (array.data || array)[index];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the position of a value in the active data.\r\n     * @param value defines the value to find the index for\r\n     * @returns the index if found in the active data otherwise -1\r\n     */\r\n    public indexOf(value: T): number {\r\n        const position = this.data.indexOf(value);\r\n\r\n        if (position >= this.length) {\r\n            return -1;\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    /**\r\n     * Returns whether an element is part of the active data.\r\n     * @param value defines the value to look for\r\n     * @returns true if found in the active data otherwise false\r\n     */\r\n    public contains(value: T): boolean {\r\n        return this.indexOf(value) !== -1;\r\n    }\r\n\r\n    // Statics\r\n    private static _GlobalId = 0;\r\n}\r\n\r\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n * The data in this array can only be present once\r\n */\r\nexport class SmartArrayNoDuplicate<T> extends SmartArray<T> {\r\n    private _duplicateId = 0;\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * THIS DOES NOT PREVENT DUPPLICATE DATA\r\n     * @param value defines the object to push in the array.\r\n     */\r\n    public override push(value: T): void {\r\n        super.push(value);\r\n\r\n        if (!(<any>value).__smartArrayFlags) {\r\n            (<any>value).__smartArrayFlags = {};\r\n        }\r\n\r\n        (<any>value).__smartArrayFlags[this._id] = this._duplicateId;\r\n    }\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * If the data is already present, it won t be added again\r\n     * @param value defines the object to push in the array.\r\n     * @returns true if added false if it was already present\r\n     */\r\n    public pushNoDuplicate(value: T): boolean {\r\n        if ((<any>value).__smartArrayFlags && (<any>value).__smartArrayFlags[this._id] === this._duplicateId) {\r\n            return false;\r\n        }\r\n        this.push(value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Resets the active data to an empty array.\r\n     */\r\n    public override reset(): void {\r\n        super.reset();\r\n        this._duplicateId++;\r\n    }\r\n\r\n    /**\r\n     * Concats the active data with a given array.\r\n     * This ensures no duplicate will be present in the result.\r\n     * @param array defines the data to concatenate with.\r\n     */\r\n    public concatWithNoDuplicate(array: any): void {\r\n        if (array.length === 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (let index = 0; index < array.length; index++) {\r\n            const item = (array.data || array)[index];\r\n            this.pushNoDuplicate(item);\r\n        }\r\n    }\r\n}\r\n", "import { SmartArray, SmartArrayNoDuplicate } from \"../Misc/smartArray\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Nullable, DeepImmutable } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport type { IEdgesRenderer } from \"./edgesRenderer\";\r\nimport type { ISpriteManager } from \"../Sprites/spriteManager\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\n\r\n/**\r\n * This represents the object necessary to create a rendering group.\r\n * This is exclusively used and created by the rendering manager.\r\n * To modify the behavior, you use the available helpers in your scene or meshes.\r\n * @internal\r\n */\r\nexport class RenderingGroup {\r\n    private static _ZeroVector: DeepImmutable<Vector3> = Vector3.Zero();\r\n    private _scene: Scene;\r\n    private _opaqueSubMeshes = new SmartArray<SubMesh>(256);\r\n    private _transparentSubMeshes = new SmartArray<SubMesh>(256);\r\n    private _alphaTestSubMeshes = new SmartArray<SubMesh>(256);\r\n    private _depthOnlySubMeshes = new SmartArray<SubMesh>(256);\r\n    private _particleSystems = new SmartArray<IParticleSystem>(256);\r\n    private _spriteManagers = new SmartArray<ISpriteManager>(256);\r\n\r\n    private _opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number>;\r\n    private _alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number>;\r\n    private _transparentSortCompareFn: (a: SubMesh, b: SubMesh) => number;\r\n\r\n    private _renderOpaque: (subMeshes: SmartArray<SubMesh>) => void;\r\n    private _renderAlphaTest: (subMeshes: SmartArray<SubMesh>) => void;\r\n    private _renderTransparent: (subMeshes: SmartArray<SubMesh>) => void;\r\n\r\n    /** @internal */\r\n    public _empty = true;\r\n\r\n    /** @internal */\r\n    public _edgesRenderers = new SmartArrayNoDuplicate<IEdgesRenderer>(16);\r\n\r\n    public onBeforeTransparentRendering: () => void;\r\n\r\n    /**\r\n     * Set the opaque sort comparison function.\r\n     * If null the sub meshes will be render in the order they were created\r\n     */\r\n    public set opaqueSortCompareFn(value: Nullable<(a: SubMesh, b: SubMesh) => number>) {\r\n        if (value) {\r\n            this._opaqueSortCompareFn = value;\r\n        } else {\r\n            this._opaqueSortCompareFn = RenderingGroup.PainterSortCompare;\r\n        }\r\n        this._renderOpaque = this._renderOpaqueSorted;\r\n    }\r\n\r\n    /**\r\n     * Set the alpha test sort comparison function.\r\n     * If null the sub meshes will be render in the order they were created\r\n     */\r\n    public set alphaTestSortCompareFn(value: Nullable<(a: SubMesh, b: SubMesh) => number>) {\r\n        if (value) {\r\n            this._alphaTestSortCompareFn = value;\r\n        } else {\r\n            this._alphaTestSortCompareFn = RenderingGroup.PainterSortCompare;\r\n        }\r\n        this._renderAlphaTest = this._renderAlphaTestSorted;\r\n    }\r\n\r\n    /**\r\n     * Set the transparent sort comparison function.\r\n     * If null the sub meshes will be render in the order they were created\r\n     */\r\n    public set transparentSortCompareFn(value: Nullable<(a: SubMesh, b: SubMesh) => number>) {\r\n        if (value) {\r\n            this._transparentSortCompareFn = value;\r\n        } else {\r\n            this._transparentSortCompareFn = RenderingGroup.defaultTransparentSortCompare;\r\n        }\r\n        this._renderTransparent = this._renderTransparentSorted;\r\n    }\r\n\r\n    /**\r\n     * Creates a new rendering group.\r\n     * @param index The rendering group index\r\n     * @param scene\r\n     * @param opaqueSortCompareFn The opaque sort comparison function. If null no order is applied\r\n     * @param alphaTestSortCompareFn The alpha test sort comparison function. If null no order is applied\r\n     * @param transparentSortCompareFn The transparent sort comparison function. If null back to front + alpha index sort is applied\r\n     */\r\n    constructor(\r\n        public index: number,\r\n        scene: Scene,\r\n        opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        transparentSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null\r\n    ) {\r\n        this._scene = scene;\r\n\r\n        this.opaqueSortCompareFn = opaqueSortCompareFn;\r\n        this.alphaTestSortCompareFn = alphaTestSortCompareFn;\r\n        this.transparentSortCompareFn = transparentSortCompareFn;\r\n    }\r\n\r\n    /**\r\n     * Render all the sub meshes contained in the group.\r\n     * @param customRenderFunction Used to override the default render behaviour of the group.\r\n     * @param renderSprites\r\n     * @param renderParticles\r\n     * @param activeMeshes\r\n     */\r\n    public render(\r\n        customRenderFunction: Nullable<\r\n            (\r\n                opaqueSubMeshes: SmartArray<SubMesh>,\r\n                transparentSubMeshes: SmartArray<SubMesh>,\r\n                alphaTestSubMeshes: SmartArray<SubMesh>,\r\n                depthOnlySubMeshes: SmartArray<SubMesh>\r\n            ) => void\r\n        >,\r\n        renderSprites: boolean,\r\n        renderParticles: boolean,\r\n        activeMeshes: Nullable<AbstractMesh[]>\r\n    ): void {\r\n        if (customRenderFunction) {\r\n            customRenderFunction(this._opaqueSubMeshes, this._alphaTestSubMeshes, this._transparentSubMeshes, this._depthOnlySubMeshes);\r\n            return;\r\n        }\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        // Depth only\r\n        if (this._depthOnlySubMeshes.length !== 0) {\r\n            engine.setColorWrite(false);\r\n            this._renderAlphaTest(this._depthOnlySubMeshes);\r\n            engine.setColorWrite(true);\r\n        }\r\n\r\n        // Opaque\r\n        if (this._opaqueSubMeshes.length !== 0) {\r\n            this._renderOpaque(this._opaqueSubMeshes);\r\n        }\r\n\r\n        // Alpha test\r\n        if (this._alphaTestSubMeshes.length !== 0) {\r\n            this._renderAlphaTest(this._alphaTestSubMeshes);\r\n        }\r\n\r\n        const stencilState = engine.getStencilBuffer();\r\n        engine.setStencilBuffer(false);\r\n\r\n        // Sprites\r\n        if (renderSprites) {\r\n            this._renderSprites();\r\n        }\r\n\r\n        // Particles\r\n        if (renderParticles) {\r\n            this._renderParticles(activeMeshes);\r\n        }\r\n\r\n        if (this.onBeforeTransparentRendering) {\r\n            this.onBeforeTransparentRendering();\r\n        }\r\n\r\n        // Transparent\r\n        if (this._transparentSubMeshes.length !== 0 || this._scene.useOrderIndependentTransparency) {\r\n            engine.setStencilBuffer(stencilState);\r\n            if (this._scene.useOrderIndependentTransparency) {\r\n                const excludedMeshes = this._scene.depthPeelingRenderer!.render(this._transparentSubMeshes);\r\n                if (excludedMeshes.length) {\r\n                    // Render leftover meshes that could not be processed by depth peeling\r\n                    this._renderTransparent(excludedMeshes);\r\n                }\r\n            } else {\r\n                this._renderTransparent(this._transparentSubMeshes);\r\n            }\r\n            engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n        }\r\n\r\n        // Set back stencil to false in case it changes before the edge renderer.\r\n        engine.setStencilBuffer(false);\r\n\r\n        // Edges\r\n        if (this._edgesRenderers.length) {\r\n            for (let edgesRendererIndex = 0; edgesRendererIndex < this._edgesRenderers.length; edgesRendererIndex++) {\r\n                this._edgesRenderers.data[edgesRendererIndex].render();\r\n            }\r\n\r\n            engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n        }\r\n\r\n        // Restore Stencil state.\r\n        engine.setStencilBuffer(stencilState);\r\n    }\r\n\r\n    /**\r\n     * Renders the opaque submeshes in the order from the opaqueSortCompareFn.\r\n     * @param subMeshes The submeshes to render\r\n     */\r\n    private _renderOpaqueSorted(subMeshes: SmartArray<SubMesh>): void {\r\n        RenderingGroup._RenderSorted(subMeshes, this._opaqueSortCompareFn, this._scene.activeCamera, false);\r\n    }\r\n\r\n    /**\r\n     * Renders the opaque submeshes in the order from the alphatestSortCompareFn.\r\n     * @param subMeshes The submeshes to render\r\n     */\r\n    private _renderAlphaTestSorted(subMeshes: SmartArray<SubMesh>): void {\r\n        RenderingGroup._RenderSorted(subMeshes, this._alphaTestSortCompareFn, this._scene.activeCamera, false);\r\n    }\r\n\r\n    /**\r\n     * Renders the opaque submeshes in the order from the transparentSortCompareFn.\r\n     * @param subMeshes The submeshes to render\r\n     */\r\n    private _renderTransparentSorted(subMeshes: SmartArray<SubMesh>): void {\r\n        RenderingGroup._RenderSorted(subMeshes, this._transparentSortCompareFn, this._scene.activeCamera, true);\r\n    }\r\n\r\n    /**\r\n     * Renders the submeshes in a specified order.\r\n     * @param subMeshes The submeshes to sort before render\r\n     * @param sortCompareFn The comparison function use to sort\r\n     * @param camera The camera position use to preprocess the submeshes to help sorting\r\n     * @param transparent Specifies to activate blending if true\r\n     */\r\n    private static _RenderSorted(\r\n        subMeshes: SmartArray<SubMesh>,\r\n        sortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number>,\r\n        camera: Nullable<Camera>,\r\n        transparent: boolean\r\n    ): void {\r\n        let subIndex = 0;\r\n        let subMesh: SubMesh;\r\n        const cameraPosition = camera ? camera.globalPosition : RenderingGroup._ZeroVector;\r\n\r\n        if (transparent) {\r\n            for (; subIndex < subMeshes.length; subIndex++) {\r\n                subMesh = subMeshes.data[subIndex];\r\n                subMesh._alphaIndex = subMesh.getMesh().alphaIndex;\r\n                subMesh._distanceToCamera = Vector3.Distance(subMesh.getBoundingInfo().boundingSphere.centerWorld, cameraPosition);\r\n            }\r\n        }\r\n\r\n        const sortedArray = subMeshes.length === subMeshes.data.length ? subMeshes.data : subMeshes.data.slice(0, subMeshes.length);\r\n\r\n        if (sortCompareFn) {\r\n            sortedArray.sort(sortCompareFn);\r\n        }\r\n\r\n        const scene = sortedArray[0].getMesh().getScene();\r\n        for (subIndex = 0; subIndex < sortedArray.length; subIndex++) {\r\n            subMesh = sortedArray[subIndex];\r\n\r\n            if (scene._activeMeshesFrozenButKeepClipping && !subMesh.isInFrustum(scene._frustumPlanes)) {\r\n                continue;\r\n            }\r\n\r\n            if (transparent) {\r\n                const material = subMesh.getMaterial();\r\n\r\n                if (material && material.needDepthPrePass) {\r\n                    const engine = material.getScene().getEngine();\r\n                    engine.setColorWrite(false);\r\n                    engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n                    subMesh.render(false);\r\n                    engine.setColorWrite(true);\r\n                }\r\n            }\r\n\r\n            subMesh.render(transparent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\r\n     * are rendered back to front if in the same alpha index.\r\n     *\r\n     * @param a The first submesh\r\n     * @param b The second submesh\r\n     * @returns The result of the comparison\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static defaultTransparentSortCompare(a: SubMesh, b: SubMesh): number {\r\n        // Alpha index first\r\n        if (a._alphaIndex > b._alphaIndex) {\r\n            return 1;\r\n        }\r\n        if (a._alphaIndex < b._alphaIndex) {\r\n            return -1;\r\n        }\r\n\r\n        // Then distance to camera\r\n        return RenderingGroup.backToFrontSortCompare(a, b);\r\n    }\r\n\r\n    /**\r\n     * Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\r\n     * are rendered back to front.\r\n     *\r\n     * @param a The first submesh\r\n     * @param b The second submesh\r\n     * @returns The result of the comparison\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static backToFrontSortCompare(a: SubMesh, b: SubMesh): number {\r\n        // Then distance to camera\r\n        if (a._distanceToCamera < b._distanceToCamera) {\r\n            return 1;\r\n        }\r\n        if (a._distanceToCamera > b._distanceToCamera) {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\r\n     * are rendered front to back (prevent overdraw).\r\n     *\r\n     * @param a The first submesh\r\n     * @param b The second submesh\r\n     * @returns The result of the comparison\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static frontToBackSortCompare(a: SubMesh, b: SubMesh): number {\r\n        // Then distance to camera\r\n        if (a._distanceToCamera < b._distanceToCamera) {\r\n            return -1;\r\n        }\r\n        if (a._distanceToCamera > b._distanceToCamera) {\r\n            return 1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Build in function which can be applied to ensure meshes of a special queue (opaque, alpha test, transparent)\r\n     * are grouped by material then geometry.\r\n     *\r\n     * @param a The first submesh\r\n     * @param b The second submesh\r\n     * @returns The result of the comparison\r\n     */\r\n    public static PainterSortCompare(a: SubMesh, b: SubMesh): number {\r\n        const meshA = a.getMesh();\r\n        const meshB = b.getMesh();\r\n\r\n        if (meshA.material && meshB.material) {\r\n            return meshA.material.uniqueId - meshB.material.uniqueId;\r\n        }\r\n\r\n        return meshA.uniqueId - meshB.uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Resets the different lists of submeshes to prepare a new frame.\r\n     */\r\n    public prepare(): void {\r\n        this._opaqueSubMeshes.reset();\r\n        this._transparentSubMeshes.reset();\r\n        this._alphaTestSubMeshes.reset();\r\n        this._depthOnlySubMeshes.reset();\r\n        this._particleSystems.reset();\r\n        this.prepareSprites();\r\n        this._edgesRenderers.reset();\r\n        this._empty = true;\r\n    }\r\n\r\n    /**\r\n     * Resets the different lists of sprites to prepare a new frame.\r\n     */\r\n    public prepareSprites(): void {\r\n        this._spriteManagers.reset();\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._opaqueSubMeshes.dispose();\r\n        this._transparentSubMeshes.dispose();\r\n        this._alphaTestSubMeshes.dispose();\r\n        this._depthOnlySubMeshes.dispose();\r\n        this._particleSystems.dispose();\r\n        this._spriteManagers.dispose();\r\n        this._edgesRenderers.dispose();\r\n    }\r\n\r\n    /**\r\n     * Inserts the submesh in its correct queue depending on its material.\r\n     * @param subMesh The submesh to dispatch\r\n     * @param [mesh] Optional reference to the submeshes's mesh. Provide if you have an exiting reference to improve performance.\r\n     * @param [material] Optional reference to the submeshes's material. Provide if you have an exiting reference to improve performance.\r\n     */\r\n    public dispatch(subMesh: SubMesh, mesh?: AbstractMesh, material?: Nullable<Material>): void {\r\n        // Get mesh and materials if not provided\r\n        if (mesh === undefined) {\r\n            mesh = subMesh.getMesh();\r\n        }\r\n        if (material === undefined) {\r\n            material = subMesh.getMaterial();\r\n        }\r\n\r\n        if (material === null || material === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (material.needAlphaBlendingForMesh(mesh)) {\r\n            // Transparent\r\n            this._transparentSubMeshes.push(subMesh);\r\n        } else if (material.needAlphaTestingForMesh(mesh)) {\r\n            // Alpha test\r\n            if (material.needDepthPrePass) {\r\n                this._depthOnlySubMeshes.push(subMesh);\r\n            }\r\n\r\n            this._alphaTestSubMeshes.push(subMesh);\r\n        } else {\r\n            if (material.needDepthPrePass) {\r\n                this._depthOnlySubMeshes.push(subMesh);\r\n            }\r\n\r\n            this._opaqueSubMeshes.push(subMesh); // Opaque\r\n        }\r\n\r\n        mesh._renderingGroup = this;\r\n\r\n        if (mesh._edgesRenderer && mesh.isEnabled() && mesh.isVisible && mesh._edgesRenderer.isEnabled) {\r\n            this._edgesRenderers.pushNoDuplicate(mesh._edgesRenderer);\r\n        }\r\n\r\n        this._empty = false;\r\n    }\r\n\r\n    public dispatchSprites(spriteManager: ISpriteManager) {\r\n        this._spriteManagers.push(spriteManager);\r\n        this._empty = false;\r\n    }\r\n\r\n    public dispatchParticles(particleSystem: IParticleSystem) {\r\n        this._particleSystems.push(particleSystem);\r\n        this._empty = false;\r\n    }\r\n\r\n    private _renderParticles(activeMeshes: Nullable<AbstractMesh[]>): void {\r\n        if (this._particleSystems.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Particles\r\n        const activeCamera = this._scene.activeCamera;\r\n        this._scene.onBeforeParticlesRenderingObservable.notifyObservers(this._scene);\r\n        for (let particleIndex = 0; particleIndex < this._particleSystems.length; particleIndex++) {\r\n            const particleSystem = this._particleSystems.data[particleIndex];\r\n\r\n            if ((activeCamera && activeCamera.layerMask & particleSystem.layerMask) === 0) {\r\n                continue;\r\n            }\r\n\r\n            const emitter: any = particleSystem.emitter;\r\n            if (!emitter.position || !activeMeshes || activeMeshes.indexOf(emitter) !== -1) {\r\n                this._scene._activeParticles.addCount(particleSystem.render(), false);\r\n            }\r\n        }\r\n        this._scene.onAfterParticlesRenderingObservable.notifyObservers(this._scene);\r\n    }\r\n\r\n    private _renderSprites(): void {\r\n        if (!this._scene.spritesEnabled || this._spriteManagers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Sprites\r\n        const activeCamera = this._scene.activeCamera;\r\n        this._scene.onBeforeSpritesRenderingObservable.notifyObservers(this._scene);\r\n        for (let id = 0; id < this._spriteManagers.length; id++) {\r\n            const spriteManager = this._spriteManagers.data[id];\r\n\r\n            if ((activeCamera && activeCamera.layerMask & spriteManager.layerMask) !== 0) {\r\n                spriteManager.render();\r\n            }\r\n        }\r\n        this._scene.onAfterSpritesRenderingObservable.notifyObservers(this._scene);\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport type { ISpriteManager } from \"../Sprites/spriteManager\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport { RenderingGroup } from \"./renderingGroup\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * Interface describing the different options available in the rendering manager\r\n * regarding Auto Clear between groups.\r\n */\r\nexport interface IRenderingManagerAutoClearSetup {\r\n    /**\r\n     * Defines whether or not autoclear is enable.\r\n     */\r\n    autoClear: boolean;\r\n    /**\r\n     * Defines whether or not to autoclear the depth buffer.\r\n     */\r\n    depth: boolean;\r\n    /**\r\n     * Defines whether or not to autoclear the stencil buffer.\r\n     */\r\n    stencil: boolean;\r\n}\r\n\r\n/**\r\n * This class is used by the onRenderingGroupObservable\r\n */\r\nexport class RenderingGroupInfo {\r\n    /**\r\n     * The Scene that being rendered\r\n     */\r\n    scene: Scene;\r\n\r\n    /**\r\n     * The camera currently used for the rendering pass\r\n     */\r\n    camera: Nullable<Camera>;\r\n\r\n    /**\r\n     * The ID of the renderingGroup being processed\r\n     */\r\n    renderingGroupId: number;\r\n\r\n    /**\r\n     * The rendering manager\r\n     */\r\n    renderingManager: RenderingManager;\r\n}\r\n\r\n/**\r\n * This is the manager responsible of all the rendering for meshes sprites and particles.\r\n * It is enable to manage the different groups as well as the different necessary sort functions.\r\n * This should not be used directly aside of the few static configurations\r\n */\r\nexport class RenderingManager {\r\n    /**\r\n     * The max id used for rendering groups (not included)\r\n     */\r\n    public static MAX_RENDERINGGROUPS = 4;\r\n\r\n    /**\r\n     * The min id used for rendering groups (included)\r\n     */\r\n    public static MIN_RENDERINGGROUPS = 0;\r\n\r\n    /**\r\n     * Used to globally prevent autoclearing scenes.\r\n     */\r\n    public static AUTOCLEAR = true;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _useSceneAutoClearSetup = false;\r\n\r\n    private _scene: Scene;\r\n    private _renderingGroups = new Array<RenderingGroup>();\r\n    private _depthStencilBufferAlreadyCleaned: boolean;\r\n\r\n    private _autoClearDepthStencil: { [id: number]: IRenderingManagerAutoClearSetup } = {};\r\n    private _customOpaqueSortCompareFn: { [id: number]: Nullable<(a: SubMesh, b: SubMesh) => number> } = {};\r\n    private _customAlphaTestSortCompareFn: { [id: number]: Nullable<(a: SubMesh, b: SubMesh) => number> } = {};\r\n    private _customTransparentSortCompareFn: { [id: number]: Nullable<(a: SubMesh, b: SubMesh) => number> } = {};\r\n    private _renderingGroupInfo: Nullable<RenderingGroupInfo> = new RenderingGroupInfo();\r\n\r\n    private _maintainStateBetweenFrames = false;\r\n    /**\r\n     * Gets or sets a boolean indicating that the manager will not reset between frames.\r\n     * This means that if a mesh becomes invisible or transparent it will not be visible until this boolean is set to false again.\r\n     * By default, the rendering manager will dispatch all active meshes per frame (moving them to the transparent, opaque or alpha testing lists).\r\n     * By turning this property on, you will accelerate the rendering by keeping all these lists unchanged between frames.\r\n     */\r\n    public get maintainStateBetweenFrames() {\r\n        return this._maintainStateBetweenFrames;\r\n    }\r\n\r\n    public set maintainStateBetweenFrames(value: boolean) {\r\n        if (value === this._maintainStateBetweenFrames) {\r\n            return;\r\n        }\r\n\r\n        this._maintainStateBetweenFrames = value;\r\n        if (!this._maintainStateBetweenFrames) {\r\n            this.restoreDispachedFlags();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restore wasDispatched flags on the lists of elements to render.\r\n     */\r\n    public restoreDispachedFlags() {\r\n        for (const mesh of this._scene.meshes) {\r\n            if (mesh.subMeshes) {\r\n                for (const subMesh of mesh.subMeshes) {\r\n                    subMesh._wasDispatched = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._scene.spriteManagers) {\r\n            for (const spriteManager of this._scene.spriteManagers) {\r\n                spriteManager._wasDispatched = false;\r\n            }\r\n        }\r\n\r\n        for (const particleSystem of this._scene.particleSystems) {\r\n            particleSystem._wasDispatched = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new rendering group for a particular scene\r\n     * @param scene Defines the scene the groups belongs to\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n\r\n        for (let i = RenderingManager.MIN_RENDERINGGROUPS; i < RenderingManager.MAX_RENDERINGGROUPS; i++) {\r\n            this._autoClearDepthStencil[i] = { autoClear: true, depth: true, stencil: true };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns the rendering group with the specified id.\r\n     * @param id the id of the rendering group (0 by default)\r\n     */\r\n    public getRenderingGroup(id: number): RenderingGroup {\r\n        const renderingGroupId = id || 0;\r\n\r\n        this._prepareRenderingGroup(renderingGroupId);\r\n\r\n        return this._renderingGroups[renderingGroupId];\r\n    }\r\n\r\n    private _clearDepthStencilBuffer(depth = true, stencil = true): void {\r\n        if (this._depthStencilBufferAlreadyCleaned) {\r\n            return;\r\n        }\r\n\r\n        this._scene.getEngine().clear(null, false, depth, stencil);\r\n        this._depthStencilBufferAlreadyCleaned = true;\r\n    }\r\n\r\n    /**\r\n     * Renders the entire managed groups. This is used by the scene or the different render targets.\r\n     * @internal\r\n     */\r\n    public render(\r\n        customRenderFunction: Nullable<\r\n            (\r\n                opaqueSubMeshes: SmartArray<SubMesh>,\r\n                transparentSubMeshes: SmartArray<SubMesh>,\r\n                alphaTestSubMeshes: SmartArray<SubMesh>,\r\n                depthOnlySubMeshes: SmartArray<SubMesh>\r\n            ) => void\r\n        >,\r\n        activeMeshes: Nullable<AbstractMesh[]>,\r\n        renderParticles: boolean,\r\n        renderSprites: boolean\r\n    ): void {\r\n        // Update the observable context (not null as it only goes away on dispose)\r\n        const info = this._renderingGroupInfo!;\r\n        info.scene = this._scene;\r\n        info.camera = this._scene.activeCamera;\r\n        info.renderingManager = this;\r\n\r\n        // Dispatch sprites\r\n        if (this._scene.spriteManagers && renderSprites) {\r\n            for (let index = 0; index < this._scene.spriteManagers.length; index++) {\r\n                const manager = this._scene.spriteManagers[index];\r\n                this.dispatchSprites(manager);\r\n            }\r\n        }\r\n\r\n        // Render\r\n        for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\r\n            this._depthStencilBufferAlreadyCleaned = index === RenderingManager.MIN_RENDERINGGROUPS;\r\n            const renderingGroup = this._renderingGroups[index];\r\n            if (!renderingGroup || renderingGroup._empty) {\r\n                continue;\r\n            }\r\n\r\n            const renderingGroupMask = 1 << index;\r\n            info.renderingGroupId = index;\r\n\r\n            // Before Observable\r\n            this._scene.onBeforeRenderingGroupObservable.notifyObservers(info, renderingGroupMask);\r\n\r\n            // Clear depth/stencil if needed\r\n            if (RenderingManager.AUTOCLEAR) {\r\n                const autoClear = this._useSceneAutoClearSetup ? this._scene.getAutoClearDepthStencilSetup(index) : this._autoClearDepthStencil[index];\r\n\r\n                if (autoClear && autoClear.autoClear) {\r\n                    this._clearDepthStencilBuffer(autoClear.depth, autoClear.stencil);\r\n                }\r\n            }\r\n\r\n            // Render\r\n            for (const step of this._scene._beforeRenderingGroupDrawStage) {\r\n                step.action(index);\r\n            }\r\n            renderingGroup.render(customRenderFunction, renderSprites, renderParticles, activeMeshes);\r\n            for (const step of this._scene._afterRenderingGroupDrawStage) {\r\n                step.action(index);\r\n            }\r\n\r\n            // After Observable\r\n            this._scene.onAfterRenderingGroupObservable.notifyObservers(info, renderingGroupMask);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the different information of the group to prepare a new frame\r\n     * @internal\r\n     */\r\n    public reset(): void {\r\n        if (this.maintainStateBetweenFrames) {\r\n            return;\r\n        }\r\n\r\n        for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\r\n            const renderingGroup = this._renderingGroups[index];\r\n            if (renderingGroup) {\r\n                renderingGroup.prepare();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the sprites information of the group to prepare a new frame\r\n     * @internal\r\n     */\r\n    public resetSprites(): void {\r\n        if (this.maintainStateBetweenFrames) {\r\n            return;\r\n        }\r\n\r\n        for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\r\n            const renderingGroup = this._renderingGroups[index];\r\n            if (renderingGroup) {\r\n                renderingGroup.prepareSprites();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose and release the group and its associated resources.\r\n     * @internal\r\n     */\r\n    public dispose(): void {\r\n        this.freeRenderingGroups();\r\n        this._renderingGroups.length = 0;\r\n        this._renderingGroupInfo = null;\r\n    }\r\n\r\n    /**\r\n     * Clear the info related to rendering groups preventing retention points during dispose.\r\n     */\r\n    public freeRenderingGroups(): void {\r\n        for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\r\n            const renderingGroup = this._renderingGroups[index];\r\n            if (renderingGroup) {\r\n                renderingGroup.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _prepareRenderingGroup(renderingGroupId: number): void {\r\n        if (this._renderingGroups[renderingGroupId] === undefined) {\r\n            this._renderingGroups[renderingGroupId] = new RenderingGroup(\r\n                renderingGroupId,\r\n                this._scene,\r\n                this._customOpaqueSortCompareFn[renderingGroupId],\r\n                this._customAlphaTestSortCompareFn[renderingGroupId],\r\n                this._customTransparentSortCompareFn[renderingGroupId]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a sprite manager to the rendering manager in order to render it this frame.\r\n     * @param spriteManager Define the sprite manager to render\r\n     */\r\n    public dispatchSprites(spriteManager: ISpriteManager) {\r\n        if (this.maintainStateBetweenFrames && spriteManager._wasDispatched) {\r\n            return;\r\n        }\r\n        spriteManager._wasDispatched = true;\r\n        this.getRenderingGroup(spriteManager.renderingGroupId).dispatchSprites(spriteManager);\r\n    }\r\n\r\n    /**\r\n     * Add a particle system to the rendering manager in order to render it this frame.\r\n     * @param particleSystem Define the particle system to render\r\n     */\r\n    public dispatchParticles(particleSystem: IParticleSystem) {\r\n        if (this.maintainStateBetweenFrames && particleSystem._wasDispatched) {\r\n            return;\r\n        }\r\n        particleSystem._wasDispatched = true;\r\n        this.getRenderingGroup(particleSystem.renderingGroupId).dispatchParticles(particleSystem);\r\n    }\r\n\r\n    /**\r\n     * Add a submesh to the manager in order to render it this frame\r\n     * @param subMesh The submesh to dispatch\r\n     * @param mesh Optional reference to the submeshes's mesh. Provide if you have an exiting reference to improve performance.\r\n     * @param material Optional reference to the submeshes's material. Provide if you have an exiting reference to improve performance.\r\n     */\r\n    public dispatch(subMesh: SubMesh, mesh?: AbstractMesh, material?: Nullable<Material>): void {\r\n        if (mesh === undefined) {\r\n            mesh = subMesh.getMesh();\r\n        }\r\n        if (this.maintainStateBetweenFrames && subMesh._wasDispatched) {\r\n            return;\r\n        }\r\n        subMesh._wasDispatched = true;\r\n        this.getRenderingGroup(mesh.renderingGroupId).dispatch(subMesh, mesh, material);\r\n    }\r\n\r\n    /**\r\n     * Overrides the default sort function applied in the rendering group to prepare the meshes.\r\n     * This allowed control for front to back rendering or reversely depending of the special needs.\r\n     *\r\n     * @param renderingGroupId The rendering group id corresponding to its index\r\n     * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\r\n     * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\r\n     * @param transparentSortCompareFn The transparent queue comparison function use to sort.\r\n     */\r\n    public setRenderingOrder(\r\n        renderingGroupId: number,\r\n        opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        transparentSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null\r\n    ) {\r\n        this._customOpaqueSortCompareFn[renderingGroupId] = opaqueSortCompareFn;\r\n        this._customAlphaTestSortCompareFn[renderingGroupId] = alphaTestSortCompareFn;\r\n        this._customTransparentSortCompareFn[renderingGroupId] = transparentSortCompareFn;\r\n\r\n        if (this._renderingGroups[renderingGroupId]) {\r\n            const group = this._renderingGroups[renderingGroupId];\r\n            group.opaqueSortCompareFn = this._customOpaqueSortCompareFn[renderingGroupId];\r\n            group.alphaTestSortCompareFn = this._customAlphaTestSortCompareFn[renderingGroupId];\r\n            group.transparentSortCompareFn = this._customTransparentSortCompareFn[renderingGroupId];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\r\n     *\r\n     * @param renderingGroupId The rendering group id corresponding to its index\r\n     * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\r\n     * @param depth Automatically clears depth between groups if true and autoClear is true.\r\n     * @param stencil Automatically clears stencil between groups if true and autoClear is true.\r\n     */\r\n    public setRenderingAutoClearDepthStencil(renderingGroupId: number, autoClearDepthStencil: boolean, depth = true, stencil = true): void {\r\n        this._autoClearDepthStencil[renderingGroupId] = {\r\n            autoClear: autoClearDepthStencil,\r\n            depth: depth,\r\n            stencil: stencil,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the current auto clear configuration for one rendering group of the rendering\r\n     * manager.\r\n     * @param index the rendering group index to get the information for\r\n     * @returns The auto clear setup for the requested rendering group\r\n     */\r\n    public getAutoClearDepthStencilSetup(index: number): IRenderingManagerAutoClearSetup {\r\n        return this._autoClearDepthStencil[index];\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["Space", "Coordinate", "Orientation"]
}
