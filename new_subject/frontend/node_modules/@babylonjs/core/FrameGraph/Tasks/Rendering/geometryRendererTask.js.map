{"version":3,"file":"geometryRendererTask.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FrameGraph/Tasks/Rendering/geometryRendererTask.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\r\n    FrameGraphTextureHandle,\r\n    Scene,\r\n    Camera,\r\n    AbstractEngine,\r\n    FrameGraph,\r\n    GeometryRenderingTextureClearType,\r\n    FrameGraphObjectList,\r\n    AbstractMesh,\r\n    ObjectRendererOptions,\r\n    // eslint-disable-next-line import/no-internal-modules\r\n} from \"core/index\";\r\nimport { backbufferDepthStencilTextureHandle } from \"../../frameGraphTypes\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { MaterialHelperGeometryRendering } from \"core/Materials/materialHelper.geometryrendering\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { FrameGraphTask } from \"../../frameGraphTask\";\r\nimport { ObjectRenderer } from \"../../../Rendering/objectRenderer\";\r\n\r\n/**\r\n * Description of a texture used by the geometry renderer task.\r\n */\r\nexport interface IFrameGraphGeometryRendererTextureDescription {\r\n    /**\r\n     * The type of the texture.\r\n     * The value should be one of the Constants.PREPASS_XXX_TEXTURE_TYPE values.\r\n     */\r\n    type: number;\r\n\r\n    /**\r\n     * The type of the texture.\r\n     */\r\n    textureType: number;\r\n\r\n    /**\r\n     * The format of the texture.\r\n     */\r\n    textureFormat: number;\r\n}\r\n\r\nconst clearColors: Color4[] = [new Color4(0, 0, 0, 0), new Color4(1, 1, 1, 1), new Color4(1e8, 1e8, 1e8, 1e8)];\r\n\r\n/**\r\n * Task used to render geometry to a set of textures.\r\n */\r\nexport class FrameGraphGeometryRendererTask extends FrameGraphTask {\r\n    /**\r\n     * The depth texture attachment to use for rendering (optional).\r\n     */\r\n    public depthTexture?: FrameGraphTextureHandle;\r\n\r\n    private _camera: Camera;\r\n\r\n    /**\r\n     * Gets or sets the camera used for rendering.\r\n     */\r\n    public get camera() {\r\n        return this._camera;\r\n    }\r\n\r\n    public set camera(camera: Camera) {\r\n        this._camera = camera;\r\n        this._renderer.activeCamera = this.camera;\r\n    }\r\n\r\n    /**\r\n     * The object list used for rendering.\r\n     */\r\n    public objectList: FrameGraphObjectList;\r\n\r\n    /**\r\n     * Whether depth testing is enabled (default is true).\r\n     */\r\n    public depthTest = true;\r\n\r\n    /**\r\n     * Whether depth writing is enabled (default is true).\r\n     */\r\n    public depthWrite = true;\r\n\r\n    /**\r\n     * The size of the output textures (default is 100% of the back buffer texture size).\r\n     */\r\n    public size: { width: number; height: number } = { width: 100, height: 100 };\r\n\r\n    /**\r\n     * Whether the size is a percentage of the back buffer size (default is true).\r\n     */\r\n    public sizeIsPercentage = true;\r\n\r\n    /**\r\n     * The number of samples to use for the output textures (default is 1).\r\n     */\r\n    public samples = 1;\r\n\r\n    /**\r\n     * The list of texture descriptions used by the geometry renderer task.\r\n     */\r\n    public textureDescriptions: IFrameGraphGeometryRendererTextureDescription[] = [];\r\n\r\n    /**\r\n     * The output depth texture attachment texture.\r\n     * This texture will point to the same texture than the depthTexture property if it is set.\r\n     * Note, however, that the handle itself will be different!\r\n     */\r\n    public readonly outputDepthTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The depth (in view space) output texture. Will point to a valid texture only if that texture has been requested in textureDescriptions!\r\n     */\r\n    public readonly geometryViewDepthTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The depth (in screen space) output texture. Will point to a valid texture only if that texture has been requested in textureDescriptions!\r\n     */\r\n    public readonly geometryScreenDepthTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The normal (in view space) output texture. Will point to a valid texture only if that texture has been requested in textureDescriptions!\r\n     */\r\n    public readonly geometryViewNormalTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The normal (in world space) output texture. Will point to a valid texture only if that texture has been requested in textureDescriptions!\r\n     */\r\n    public readonly geometryWorldNormalTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The position (in local space) output texture. Will point to a valid texture only if that texture has been requested in textureDescriptions!\r\n     */\r\n    public readonly geometryLocalPositionTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The position (in world space) output texture. Will point to a valid texture only if that texture has been requested in textureDescriptions!\r\n     */\r\n    public readonly geometryWorldPositionTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The albedo output texture. Will point to a valid texture only if that texture has been requested in textureDescriptions!\r\n     */\r\n    public readonly geometryAlbedoTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The reflectivity output texture. Will point to a valid texture only if that texture has been requested in textureDescriptions!\r\n     */\r\n    public readonly geometryReflectivityTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The velocity output texture. Will point to a valid texture only if that texture has been requested in textureDescriptions!\r\n     */\r\n    public readonly geometryVelocityTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The linear velocity output texture. Will point to a valid texture only if that texture has been requested in textureDescriptions!\r\n     */\r\n    public readonly geometryLinearVelocityTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The object renderer used by the geometry renderer task.\r\n     */\r\n    public get objectRenderer() {\r\n        return this._renderer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the name of the task.\r\n     */\r\n    public override get name() {\r\n        return this._name;\r\n    }\r\n\r\n    public override set name(value: string) {\r\n        this._name = value;\r\n        if (this._renderer) {\r\n            this._renderer.name = value;\r\n        }\r\n    }\r\n\r\n    private readonly _engine: AbstractEngine;\r\n    private readonly _scene: Scene;\r\n    private readonly _renderer: ObjectRenderer;\r\n    private _textureWidth: number;\r\n    private _textureHeight: number;\r\n    private _clearAttachmentsLayout: Map<GeometryRenderingTextureClearType, number[]>;\r\n    private _allAttachmentsLayout: number[];\r\n\r\n    /**\r\n     * Constructs a new geometry renderer task.\r\n     * @param name The name of the task.\r\n     * @param frameGraph The frame graph the task belongs to.\r\n     * @param scene The scene the frame graph is associated with.\r\n     * @param options The options of the object renderer.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, scene: Scene, options?: ObjectRendererOptions) {\r\n        super(name, frameGraph);\r\n\r\n        this._scene = scene;\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._renderer = new ObjectRenderer(name, scene, options);\r\n        this._renderer.renderSprites = false;\r\n        this._renderer.renderParticles = false;\r\n\r\n        this._renderer.onBeforeRenderingManagerRenderObservable.add(() => {\r\n            if (!this._renderer.options.doNotChangeAspectRatio) {\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n        });\r\n\r\n        this.name = name;\r\n        this._clearAttachmentsLayout = new Map();\r\n        this._allAttachmentsLayout = [];\r\n\r\n        this.outputDepthTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.geometryViewDepthTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.geometryScreenDepthTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.geometryViewNormalTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.geometryWorldNormalTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.geometryLocalPositionTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.geometryWorldPositionTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.geometryAlbedoTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.geometryReflectivityTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.geometryVelocityTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.geometryLinearVelocityTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n    }\r\n\r\n    /**\r\n     * Gets the list of excluded meshes from the velocity texture.\r\n     */\r\n    public get excludedSkinnedMeshFromVelocityTexture(): AbstractMesh[] {\r\n        return MaterialHelperGeometryRendering.GetConfiguration(this._renderer.renderPassId).excludedSkinnedMesh;\r\n    }\r\n\r\n    public override isReady() {\r\n        return this._renderer.isReadyForRendering(this._textureWidth, this._textureHeight);\r\n    }\r\n\r\n    public record() {\r\n        if (this.textureDescriptions.length === 0 || this.objectList === undefined) {\r\n            throw new Error(`FrameGraphGeometryRendererTask ${this.name}: object list and at least one geometry texture description must be provided`);\r\n        }\r\n\r\n        // Make sure the renderList / particleSystemList are set when FrameGraphGeometryRendererTask.isReady() is called!\r\n        this._renderer.renderList = this.objectList.meshes;\r\n        this._renderer.particleSystemList = this.objectList.particleSystems;\r\n\r\n        const outputTextureHandle = this._createMultiRenderTargetTexture();\r\n\r\n        const depthEnabled = this._checkDepthTextureCompatibility();\r\n\r\n        this._buildClearAttachmentsLayout();\r\n\r\n        this._registerForRenderPassId(this._renderer.renderPassId);\r\n\r\n        const outputTextureDescription = this._frameGraph.textureManager.getTextureDescription(outputTextureHandle[0]);\r\n\r\n        this._textureWidth = outputTextureDescription.size.width;\r\n        this._textureHeight = outputTextureDescription.size.height;\r\n\r\n        // Create pass\r\n        MaterialHelperGeometryRendering.MarkAsDirty(this._renderer.renderPassId, this.objectList.meshes || this._scene.meshes);\r\n\r\n        const pass = this._frameGraph.addRenderPass(this.name);\r\n\r\n        pass.setRenderTarget(outputTextureHandle);\r\n\r\n        for (let i = 0; i < this.textureDescriptions.length; i++) {\r\n            const description = this.textureDescriptions[i];\r\n            const handle = outputTextureHandle[i];\r\n            const index = MaterialHelperGeometryRendering.GeometryTextureDescriptions.findIndex((f) => f.type === description.type);\r\n            const geometryDescription = MaterialHelperGeometryRendering.GeometryTextureDescriptions[index];\r\n\r\n            switch (geometryDescription.type) {\r\n                case Constants.PREPASS_DEPTH_TEXTURE_TYPE:\r\n                    this._frameGraph.textureManager.resolveDanglingHandle(this.geometryViewDepthTexture, handle);\r\n                    break;\r\n                case Constants.PREPASS_SCREENSPACE_DEPTH_TEXTURE_TYPE:\r\n                    this._frameGraph.textureManager.resolveDanglingHandle(this.geometryScreenDepthTexture, handle);\r\n                    break;\r\n                case Constants.PREPASS_NORMAL_TEXTURE_TYPE:\r\n                    this._frameGraph.textureManager.resolveDanglingHandle(this.geometryViewNormalTexture, handle);\r\n                    break;\r\n                case Constants.PREPASS_WORLD_NORMAL_TEXTURE_TYPE:\r\n                    this._frameGraph.textureManager.resolveDanglingHandle(this.geometryWorldNormalTexture, handle);\r\n                    break;\r\n                case Constants.PREPASS_LOCAL_POSITION_TEXTURE_TYPE:\r\n                    this._frameGraph.textureManager.resolveDanglingHandle(this.geometryLocalPositionTexture, handle);\r\n                    break;\r\n                case Constants.PREPASS_POSITION_TEXTURE_TYPE:\r\n                    this._frameGraph.textureManager.resolveDanglingHandle(this.geometryWorldPositionTexture, handle);\r\n                    break;\r\n                case Constants.PREPASS_ALBEDO_TEXTURE_TYPE:\r\n                    this._frameGraph.textureManager.resolveDanglingHandle(this.geometryAlbedoTexture, handle);\r\n                    break;\r\n                case Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE:\r\n                    this._frameGraph.textureManager.resolveDanglingHandle(this.geometryReflectivityTexture, handle);\r\n                    break;\r\n                case Constants.PREPASS_VELOCITY_TEXTURE_TYPE:\r\n                    this._frameGraph.textureManager.resolveDanglingHandle(this.geometryVelocityTexture, handle);\r\n                    break;\r\n                case Constants.PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE:\r\n                    this._frameGraph.textureManager.resolveDanglingHandle(this.geometryLinearVelocityTexture, handle);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        pass.setRenderTargetDepth(this.depthTexture);\r\n\r\n        pass.setExecuteFunc((context) => {\r\n            this._renderer.renderList = this.objectList.meshes;\r\n            this._renderer.particleSystemList = this.objectList.particleSystems;\r\n\r\n            context.setDepthStates(this.depthTest && depthEnabled, this.depthWrite && depthEnabled);\r\n\r\n            this._clearAttachmentsLayout.forEach((layout, clearType) => {\r\n                context.clearColorAttachments(clearColors[clearType], layout);\r\n            });\r\n\r\n            context.bindAttachments(this._allAttachmentsLayout);\r\n\r\n            context.render(this._renderer, this._textureWidth, this._textureHeight);\r\n        });\r\n    }\r\n\r\n    public override dispose(): void {\r\n        MaterialHelperGeometryRendering.DeleteConfiguration(this._renderer.renderPassId);\r\n        this._renderer.dispose();\r\n        super.dispose();\r\n    }\r\n\r\n    private _createMultiRenderTargetTexture(): FrameGraphTextureHandle[] {\r\n        const types: number[] = [];\r\n        const formats: number[] = [];\r\n        const labels: string[] = [];\r\n        const useSRGBBuffers: boolean[] = [];\r\n\r\n        for (let i = 0; i < this.textureDescriptions.length; i++) {\r\n            const description = this.textureDescriptions[i];\r\n            const index = MaterialHelperGeometryRendering.GeometryTextureDescriptions.findIndex((f) => f.type === description.type);\r\n\r\n            if (index === -1) {\r\n                throw new Error(`FrameGraphGeometryRendererTask ${this.name}: unknown texture type ${description.type}`);\r\n            }\r\n\r\n            types[i] = description.textureType;\r\n            formats[i] = description.textureFormat;\r\n            labels[i] = MaterialHelperGeometryRendering.GeometryTextureDescriptions[index].name;\r\n            useSRGBBuffers[i] = false;\r\n        }\r\n\r\n        const baseHandle = this._frameGraph.textureManager.createRenderTargetTexture(this.name, {\r\n            size: this.size,\r\n            sizeIsPercentage: this.sizeIsPercentage,\r\n            options: {\r\n                createMipMaps: false,\r\n                samples: this.samples,\r\n                types,\r\n                formats,\r\n                useSRGBBuffers,\r\n                labels,\r\n            },\r\n        });\r\n\r\n        const handles: FrameGraphTextureHandle[] = [];\r\n        for (let i = 0; i < this.textureDescriptions.length; i++) {\r\n            handles.push(baseHandle + i);\r\n        }\r\n\r\n        return handles;\r\n    }\r\n\r\n    private _checkDepthTextureCompatibility(): boolean {\r\n        let depthEnabled = false;\r\n\r\n        if (this.depthTexture !== undefined) {\r\n            if (this.depthTexture === backbufferDepthStencilTextureHandle) {\r\n                throw new Error(`FrameGraphGeometryRendererTask ${this.name}: the depth/stencil back buffer is not allowed as a depth texture`);\r\n            }\r\n\r\n            const depthTextureDescription = this._frameGraph.textureManager.getTextureDescription(this.depthTexture);\r\n            if (depthTextureDescription.options.samples !== this.samples) {\r\n                throw new Error(`FrameGraphGeometryRendererTask ${this.name}: the depth texture and the output texture must have the same number of samples`);\r\n            }\r\n\r\n            this._frameGraph.textureManager.resolveDanglingHandle(this.outputDepthTexture, this.depthTexture);\r\n\r\n            depthEnabled = true;\r\n        }\r\n\r\n        return depthEnabled;\r\n    }\r\n\r\n    private _buildClearAttachmentsLayout() {\r\n        const clearAttachmentsLayout = new Map<GeometryRenderingTextureClearType, boolean[]>();\r\n        const allAttachmentsLayout: boolean[] = [];\r\n\r\n        for (let i = 0; i < this.textureDescriptions.length; i++) {\r\n            const description = this.textureDescriptions[i];\r\n            const index = MaterialHelperGeometryRendering.GeometryTextureDescriptions.findIndex((f) => f.type === description.type);\r\n            const geometryDescription = MaterialHelperGeometryRendering.GeometryTextureDescriptions[index];\r\n\r\n            let layout = clearAttachmentsLayout.get(geometryDescription.clearType);\r\n            if (layout === undefined) {\r\n                layout = [];\r\n                clearAttachmentsLayout.set(geometryDescription.clearType, layout);\r\n                for (let j = 0; j < i; j++) {\r\n                    layout[j] = false;\r\n                }\r\n            }\r\n\r\n            clearAttachmentsLayout.forEach((layout, clearType) => {\r\n                layout.push(clearType === geometryDescription.clearType);\r\n            });\r\n\r\n            allAttachmentsLayout.push(true);\r\n        }\r\n\r\n        this._clearAttachmentsLayout = new Map();\r\n\r\n        clearAttachmentsLayout.forEach((layout, clearType) => {\r\n            this._clearAttachmentsLayout.set(clearType, this._engine.buildTextureLayout(layout));\r\n        });\r\n\r\n        this._allAttachmentsLayout = this._engine.buildTextureLayout(allAttachmentsLayout);\r\n    }\r\n\r\n    private _registerForRenderPassId(renderPassId: number) {\r\n        const configuration = MaterialHelperGeometryRendering.CreateConfiguration(renderPassId);\r\n\r\n        for (let i = 0; i < this.textureDescriptions.length; i++) {\r\n            const description = this.textureDescriptions[i];\r\n            const index = MaterialHelperGeometryRendering.GeometryTextureDescriptions.findIndex((f) => f.type === description.type);\r\n            const geometryDescription = MaterialHelperGeometryRendering.GeometryTextureDescriptions[index];\r\n\r\n            configuration.defines[geometryDescription.defineIndex] = i;\r\n        }\r\n    }\r\n}\r\n"]}