{"version":3,"file":"lensFlareSystemSceneComponent.js","sourceRoot":"","sources":["../../../../dev/core/src/LensFlares/lensFlareSystemSceneComponent.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Scene } from \"../scene\";\r\nimport type { ISceneSerializableComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\nimport { LensFlareSystem } from \"./lensFlareSystem\";\r\nimport { AddParser } from \"core/Loading/Plugins/babylonFileParser.function\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\n\r\n// Adds the parser to the scene parsers.\r\nAddParser(SceneComponentConstants.NAME_LENSFLARESYSTEM, (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => {\r\n    // Lens flares\r\n    if (parsedData.lensFlareSystems !== undefined && parsedData.lensFlareSystems !== null) {\r\n        if (!container.lensFlareSystems) {\r\n            container.lensFlareSystems = [] as LensFlareSystem[];\r\n        }\r\n\r\n        for (let index = 0, cache = parsedData.lensFlareSystems.length; index < cache; index++) {\r\n            const parsedLensFlareSystem = parsedData.lensFlareSystems[index];\r\n            const lf = LensFlareSystem.Parse(parsedLensFlareSystem, scene, rootUrl);\r\n            container.lensFlareSystems.push(lf);\r\n        }\r\n    }\r\n});\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * Removes the given lens flare system from this scene.\r\n         * @param toRemove The lens flare system to remove\r\n         * @returns The index of the removed lens flare system\r\n         */\r\n        removeLensFlareSystem(toRemove: LensFlareSystem): number;\r\n\r\n        /**\r\n         * Adds the given lens flare system to this scene\r\n         * @param newLensFlareSystem The lens flare system to add\r\n         */\r\n        addLensFlareSystem(newLensFlareSystem: LensFlareSystem): void;\r\n\r\n        /**\r\n         * Gets a lens flare system using its name\r\n         * @param name defines the name to look for\r\n         * @returns the lens flare system or null if not found\r\n         */\r\n        getLensFlareSystemByName(name: string): Nullable<LensFlareSystem>;\r\n\r\n        /**\r\n         * Gets a lens flare system using its Id\r\n         * @param id defines the Id to look for\r\n         * @returns the lens flare system or null if not found\r\n         * @deprecated Please use getLensFlareSystemById instead\r\n         */\r\n        getLensFlareSystemByID(id: string): Nullable<LensFlareSystem>;\r\n\r\n        /**\r\n         * Gets a lens flare system using its Id\r\n         * @param id defines the Id to look for\r\n         * @returns the lens flare system or null if not found\r\n         */\r\n        getLensFlareSystemById(id: string): Nullable<LensFlareSystem>;\r\n    }\r\n}\r\n\r\nScene.prototype.getLensFlareSystemByName = function (name: string): Nullable<LensFlareSystem> {\r\n    for (let index = 0; index < this.lensFlareSystems.length; index++) {\r\n        if (this.lensFlareSystems[index].name === name) {\r\n            return this.lensFlareSystems[index];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nScene.prototype.getLensFlareSystemById = function (id: string): Nullable<LensFlareSystem> {\r\n    for (let index = 0; index < this.lensFlareSystems.length; index++) {\r\n        if (this.lensFlareSystems[index].id === id) {\r\n            return this.lensFlareSystems[index];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nScene.prototype.getLensFlareSystemByID = function (id: string): Nullable<LensFlareSystem> {\r\n    return this.getLensFlareSystemById(id);\r\n};\r\n\r\nScene.prototype.removeLensFlareSystem = function (toRemove: LensFlareSystem): number {\r\n    const index = this.lensFlareSystems.indexOf(toRemove);\r\n    if (index !== -1) {\r\n        this.lensFlareSystems.splice(index, 1);\r\n    }\r\n    return index;\r\n};\r\n\r\nScene.prototype.addLensFlareSystem = function (newLensFlareSystem: LensFlareSystem): void {\r\n    this.lensFlareSystems.push(newLensFlareSystem);\r\n};\r\n\r\n/**\r\n * Defines the lens flare scene component responsible to manage any lens flares\r\n * in a given scene.\r\n */\r\nexport class LensFlareSystemSceneComponent implements ISceneSerializableComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_LENSFLARESYSTEM;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LENSFLARESYSTEM, this, this._draw);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        for (let index = 0; index < this.scene.lensFlareSystems.length; index++) {\r\n            this.scene.lensFlareSystems[index].rebuild();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    public addFromContainer(container: IAssetContainer): void {\r\n        if (!container.lensFlareSystems) {\r\n            return;\r\n        }\r\n        container.lensFlareSystems.forEach((o) => {\r\n            this.scene.addLensFlareSystem(o);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    public removeFromContainer(container: IAssetContainer, dispose?: boolean): void {\r\n        if (!container.lensFlareSystems) {\r\n            return;\r\n        }\r\n        container.lensFlareSystems.forEach((o) => {\r\n            this.scene.removeLensFlareSystem(o);\r\n            if (dispose) {\r\n                o.dispose();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        // Lens flares\r\n        serializationObject.lensFlareSystems = [];\r\n        const lensFlareSystems = this.scene.lensFlareSystems;\r\n        for (const lensFlareSystem of lensFlareSystems) {\r\n            serializationObject.lensFlareSystems.push(lensFlareSystem.serialize());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const lensFlareSystems = this.scene.lensFlareSystems;\r\n        while (lensFlareSystems.length) {\r\n            lensFlareSystems[0].dispose();\r\n        }\r\n    }\r\n\r\n    private _draw(camera: Camera): void {\r\n        // Lens flares\r\n        if (this.scene.lensFlaresEnabled) {\r\n            const lensFlareSystems = this.scene.lensFlareSystems;\r\n            Tools.StartPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\r\n            for (const lensFlareSystem of lensFlareSystems) {\r\n                if ((camera.layerMask & lensFlareSystem.layerMask) !== 0) {\r\n                    lensFlareSystem.render();\r\n                }\r\n            }\r\n            Tools.EndPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\r\n        }\r\n    }\r\n}\r\n\r\nLensFlareSystem._SceneComponentInitialization = (scene: Scene) => {\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_LENSFLARESYSTEM) as LensFlareSystemSceneComponent;\r\n    if (!component) {\r\n        component = new LensFlareSystemSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n"]}