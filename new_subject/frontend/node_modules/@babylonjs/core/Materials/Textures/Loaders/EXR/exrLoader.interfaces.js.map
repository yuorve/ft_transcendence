{"version":3,"file":"exrLoader.interfaces.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/Materials/Textures/Loaders/EXR/exrLoader.interfaces.ts"],"names":[],"mappings":"AAIA,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,CAAC;AAC5B,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,CAAC;AAC9B,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,CAAC;AAC3B,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,CAAC;AAC5B,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,CAAC;AAC5B,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAI,EAAE,CAAC;AACpC,MAAM,CAAC,MAAM,WAAW,GAAG,YAAY,IAAI,CAAC,CAAC;AAC7C,MAAM,CAAC,MAAM,WAAW,GAAG,EAAE,CAAC;AAC9B,MAAM,CAAC,MAAM,WAAW,GAAG,EAAE,CAAC;AAC9B,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC;AAClD,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAI,WAAW,CAAC;AAC5C,MAAM,CAAC,MAAM,WAAW,GAAG,WAAW,GAAG,CAAC,CAAC;AAC3C,MAAM,CAAC,MAAM,kBAAkB,GAAG,EAAE,CAAC;AACrC,MAAM,CAAC,MAAM,iBAAiB,GAAG,EAAE,CAAC;AACpC,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,GAAG,iBAAiB,GAAG,kBAAkB,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { DataCursor } from \"./exrLoader.core\";\r\n\r\nexport const INT32_SIZE = 4;\r\nexport const FLOAT32_SIZE = 4;\r\nexport const INT8_SIZE = 1;\r\nexport const INT16_SIZE = 2;\r\nexport const ULONG_SIZE = 8;\r\nexport const USHORT_RANGE = 1 << 16;\r\nexport const BITMAP_SIZE = USHORT_RANGE >> 3;\r\nexport const HUF_ENCBITS = 16;\r\nexport const HUF_DECBITS = 14;\r\nexport const HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1;\r\nexport const HUF_DECSIZE = 1 << HUF_DECBITS;\r\nexport const HUF_DECMASK = HUF_DECSIZE - 1;\r\nexport const SHORT_ZEROCODE_RUN = 59;\r\nexport const LONG_ZEROCODE_RUN = 63;\r\nexport const SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\r\n\r\nexport interface IEXRCHannel {\r\n    name: string;\r\n    pixelType: number;\r\n}\r\n\r\nexport interface IDecodeChannel {\r\n    [name: string]: number;\r\n}\r\n\r\n/**\r\n * Interface used to define the EXR header\r\n */\r\nexport interface IEXRHeader {\r\n    /** Version */\r\n    version: number;\r\n    /** Specifications */\r\n    spec: {\r\n        singleTile: boolean;\r\n        longName: boolean;\r\n        deepFormat: boolean;\r\n        multiPart: boolean;\r\n    };\r\n    /** Data window */\r\n    dataWindow: {\r\n        xMin: number;\r\n        xMax: number;\r\n        yMin: number;\r\n        yMax: number;\r\n    };\r\n    /** Channels */\r\n    channels: IEXRCHannel[];\r\n    /** Extra data */\r\n    [name: string]: any;\r\n}\r\n\r\nexport interface IEXRDecoder {\r\n    size: number;\r\n    viewer: DataView;\r\n    array: Uint8Array;\r\n    byteArray: Nullable<Float32Array | Uint16Array>;\r\n    offset: DataCursor;\r\n    width: number;\r\n    height: number;\r\n    channels: number;\r\n    channelLineOffsets: IDecodeChannel;\r\n    scanOrder: (value: number) => number;\r\n    bytesPerLine: number;\r\n    outLineWidth: number;\r\n    lines: number;\r\n    scanlineBlockSize: number;\r\n    inputSize: Nullable<number>;\r\n    type: number;\r\n    uncompress: Nullable<(decoder: IEXRDecoder) => DataView>;\r\n    getter: (dataView: DataView, offset: DataCursor) => number;\r\n    format: number;\r\n    outputChannels: number;\r\n    decodeChannels: IDecodeChannel;\r\n    blockCount: Nullable<number>;\r\n    linearSpace: boolean;\r\n    textureType: number;\r\n}\r\n"]}