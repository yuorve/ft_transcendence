{"version":3,"file":"textureCreationOptions.js","sourceRoot":"","sources":["../../../../../dev/core/src/Materials/Textures/textureCreationOptions.ts"],"names":[],"mappings":"AAqEA;;;;GAIG;AACH,MAAM,UAAU,mBAAmB,CAAC,IAAiB;IACjD,+CAA+C;IAC/C,OAAQ,IAA0B,CAAC,KAAK,KAAK,SAAS,CAAC;AAC3D,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,4BAA4B,CAAC,IAAiB;IAC1D,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;QAC5B,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;IACtD,CAAC;IACD,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;AACzC,CAAC","sourcesContent":["import type { InternalTexture } from \"./internalTexture\";\r\n\r\n/**\r\n * Define options used to create an internal texture\r\n */\r\nexport interface InternalTextureCreationOptions {\r\n    /** Specifies if mipmaps must be created. If undefined, the value from generateMipMaps is taken instead */\r\n    createMipMaps?: boolean;\r\n    /** Specifies if mipmaps must be generated */\r\n    generateMipMaps?: boolean;\r\n    /** Defines texture type (unsigned byte by default) */\r\n    type?: number;\r\n    /** Defines sampling mode (trilinear by default) */\r\n    samplingMode?: number;\r\n    /** Defines format (RGBA by default) */\r\n    format?: number;\r\n    /** Defines sample count (1 by default) */\r\n    samples?: number;\r\n    /** Texture creation flags */\r\n    creationFlags?: number;\r\n    /** Creates the RTT in sRGB space */\r\n    useSRGBBuffer?: boolean;\r\n    /** Label of the texture (used for debugging only) */\r\n    label?: string;\r\n    /** If the MSAA texture must be created right away (default: false) */\r\n    createMSAATexture?: boolean;\r\n    /** Comparison function. Used only for depth textures (default: 0) */\r\n    comparisonFunction?: number;\r\n}\r\n\r\n/**\r\n * Define options used to create a render target texture\r\n */\r\nexport interface RenderTargetCreationOptions extends InternalTextureCreationOptions {\r\n    /** Specifies whether or not a depth should be allocated in the texture (true by default) */\r\n    generateDepthBuffer?: boolean;\r\n    /** Specifies whether or not a stencil should be allocated in the texture (false by default)*/\r\n    generateStencilBuffer?: boolean;\r\n    /** Specifies that no color target should be bound to the render target (useful if you only want to write to the depth buffer, for eg) */\r\n    noColorAttachment?: boolean;\r\n    /** Specifies the internal texture to use directly instead of creating one (ignores `noColorAttachment` flag when set) **/\r\n    colorAttachment?: InternalTexture;\r\n}\r\n\r\n/**\r\n * Define options used to create a depth texture\r\n */\r\nexport interface DepthTextureCreationOptions {\r\n    /** Specifies whether or not a stencil should be allocated in the texture. Not used if depthTextureFormat is supplied, in which case stencil creation will depend on this value. */\r\n    generateStencil?: boolean;\r\n    /** Specifies whether or not bilinear filtering is enable on the texture */\r\n    bilinearFiltering?: boolean;\r\n    /** Specifies the comparison function to set on the texture. If 0 or undefined, the texture is not in comparison mode */\r\n    comparisonFunction?: number;\r\n    /** Specifies if the created texture is a cube texture */\r\n    isCube?: boolean;\r\n    /** Specifies the sample count of the depth/stencil texture texture */\r\n    samples?: number;\r\n    /** Specifies the depth texture format to use */\r\n    depthTextureFormat?: number;\r\n    /** Label of the texture (used for debugging only) */\r\n    label?: string;\r\n}\r\n\r\n/**\r\n * Type used to define a texture size (either with a number or with a rect width and height)\r\n */\r\nexport type TextureSize = number | { width: number; height: number; depth?: number; layers?: number };\r\n\r\n/**\r\n * Check if a TextureSize is an object\r\n * @param size The TextureSize to check\r\n * @returns True if the TextureSize is an object\r\n */\r\nexport function textureSizeIsObject(size: TextureSize): size is { width: number; height: number } {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    return (size as { width: number }).width !== undefined;\r\n}\r\n\r\n/**\r\n * Get the width/height dimensions from a TextureSize\r\n * @param size The TextureSize to get the dimensions from\r\n * @returns The width and height as an object\r\n */\r\nexport function getDimensionsFromTextureSize(size: TextureSize): { width: number; height: number } {\r\n    if (textureSizeIsObject(size)) {\r\n        return { width: size.width, height: size.height };\r\n    }\r\n    return { width: size, height: size };\r\n}\r\n"]}