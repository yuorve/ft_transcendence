(function (exports, shared, firestore, vue) {
  'use strict';

  function getData(docRef) {
    const data = docRef.data();
    if (data) {
      Object.defineProperty(data, "id", {
        value: docRef.id.toString(),
        writable: false
      });
    }
    return data;
  }
  function isDocumentReference(docRef) {
    var _a;
    return (((_a = docRef.path) == null ? void 0 : _a.match(/\//g)) || []).length % 2 !== 0;
  }
  function useFirestore(maybeDocRef, initialValue = void 0, options = {}) {
    const {
      errorHandler = (err) => console.error(err),
      autoDispose = true
    } = options;
    const refOfDocRef = vue.isRef(maybeDocRef) ? maybeDocRef : vue.computed(() => maybeDocRef);
    let close = () => {
    };
    const data = vue.ref(initialValue);
    vue.watch(refOfDocRef, (docRef) => {
      close();
      if (!refOfDocRef.value) {
        data.value = initialValue;
      } else if (isDocumentReference(refOfDocRef.value)) {
        close = firestore.onSnapshot(docRef, (snapshot) => {
          data.value = getData(snapshot) || null;
        }, errorHandler);
      } else {
        close = firestore.onSnapshot(docRef, (snapshot) => {
          data.value = snapshot.docs.map(getData).filter(shared.isDef);
        }, errorHandler);
      }
    }, { immediate: true });
    if (autoDispose === true) {
      shared.tryOnScopeDispose(() => {
        close();
      });
    } else if (typeof autoDispose === "number") {
      shared.tryOnScopeDispose(() => {
        shared.useTimeoutFn(() => {
          close();
        }, autoDispose);
      });
    }
    return data;
  }

  exports.useFirestore = useFirestore;

})(this.VueUse = this.VueUse || {}, VueUse, firebase, Vue);
