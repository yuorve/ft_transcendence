{
  "version": 3,
  "sources": ["../../../dev/core/src/Shaders/ShadersInclude/boundingBoxRendererVertexDeclaration.ts", "../../../dev/core/src/Shaders/boundingBoxRenderer.vertex.ts"],
  "sourcesContent": ["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"boundingBoxRendererVertexDeclaration\";\nconst shader = `uniform mat4 world;uniform mat4 viewProjection;\n#ifdef MULTIVIEW\nuniform mat4 viewProjectionR;\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @internal */\nexport const boundingBoxRendererVertexDeclaration = { name, shader };\n", "// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/boundingBoxRendererVertexDeclaration\";\nimport \"./ShadersInclude/boundingBoxRendererUboDeclaration\";\n\nconst name = \"boundingBoxRendererVertexShader\";\nconst shader = `attribute vec3 position;\n#include<__decl__boundingBoxRendererVertex>\n#ifdef INSTANCES\nattribute vec4 world0;attribute vec4 world1;attribute vec4 world2;attribute vec4 world3;\n#endif\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_VERTEX_MAIN_BEGIN\n#ifdef INSTANCES\nmat4 finalWorld=mat4(world0,world1,world2,world3);vec4 worldPos=finalWorld*vec4(position,1.0);\n#else\nvec4 worldPos=world*vec4(position,1.0);\n#endif\n#ifdef MULTIVIEW\nif (gl_ViewID_OVR==0u) {gl_Position=viewProjection*worldPos;} else {gl_Position=viewProjectionR*worldPos;}\n#else\ngl_Position=viewProjection*worldPos;\n#endif\n#define CUSTOM_VERTEX_MAIN_END\n}\n`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @internal */\nexport const boundingBoxRendererVertexShader = { name, shader };\n"],
  "mappings": ";;;;;AAGA,IAAM,OAAO;AACb,IAAM,SAAS;;;;;AAMf,YAAY,qBAAqB,IAAI,IAAI;;;ACLzC,IAAMA,QAAO;AACb,IAAMC,UAAS;;;;;;;;;;;;;;;;;;;;;AAsBf,YAAY,aAAaD,KAAI,IAAIC;AAE1B,IAAM,kCAAkC,EAAE,MAAAD,OAAM,QAAAC,QAAM;",
  "names": ["name", "shader"]
}
