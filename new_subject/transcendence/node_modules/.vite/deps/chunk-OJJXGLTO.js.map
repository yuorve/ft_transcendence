{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/logger.ts"],
  "sourcesContent": ["/* eslint-disable no-console */\r\n/**\r\n * Logger used throughout the application to allow configuration of\r\n * the log level required for the messages.\r\n */\r\nexport class Logger {\r\n    /**\r\n     * No log\r\n     */\r\n    public static readonly NoneLogLevel = 0;\r\n    /**\r\n     * Only message logs\r\n     */\r\n    public static readonly MessageLogLevel = 1;\r\n    /**\r\n     * Only warning logs\r\n     */\r\n    public static readonly WarningLogLevel = 2;\r\n    /**\r\n     * Only error logs\r\n     */\r\n    public static readonly ErrorLogLevel = 4;\r\n    /**\r\n     * All logs\r\n     */\r\n    public static readonly AllLogLevel = 7;\r\n\r\n    /**\r\n     * Message to display when a message has been logged too many times\r\n     */\r\n    public static MessageLimitReached = \"Too many %TYPE%s (%LIMIT%), no more %TYPE%s will be reported for this message.\";\r\n\r\n    private static _LogCache = \"\";\r\n    private static _LogLimitOutputs: { [message: string]: { limit: number; current: number } } = {};\r\n    // levels according to the (binary) numbering.\r\n    private static _Levels = [\r\n        {},\r\n        { color: \"white\", logFunc: console.log, name: \"Log\" },\r\n        { color: \"orange\", logFunc: console.warn, name: \"Warn\" },\r\n        {},\r\n        { color: \"red\", logFunc: console.error, name: \"Error\" },\r\n    ];\r\n\r\n    /**\r\n     * Gets a value indicating the number of loading errors\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static errorsCount = 0;\r\n\r\n    /**\r\n     * Callback called when a new log is added\r\n     */\r\n    public static OnNewCacheEntry: (entry: string) => void;\r\n\r\n    private static _CheckLimit(message: string, limit: number): boolean {\r\n        let entry = Logger._LogLimitOutputs[message];\r\n        if (!entry) {\r\n            entry = { limit, current: 1 };\r\n            Logger._LogLimitOutputs[message] = entry;\r\n        } else {\r\n            entry.current++;\r\n        }\r\n        return entry.current <= entry.limit;\r\n    }\r\n\r\n    private static _GenerateLimitMessage(message: string, level: number = 1): void {\r\n        const entry = Logger._LogLimitOutputs[message];\r\n        if (!entry || !Logger.MessageLimitReached) {\r\n            return;\r\n        }\r\n        const type = this._Levels[level];\r\n        if (entry.current === entry.limit) {\r\n            Logger[type.name as \"Log\" | \"Warn\" | \"Error\"](Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, type.name ?? \"\"));\r\n        }\r\n    }\r\n\r\n    private static _AddLogEntry(entry: string) {\r\n        Logger._LogCache = entry + Logger._LogCache;\r\n\r\n        if (Logger.OnNewCacheEntry) {\r\n            Logger.OnNewCacheEntry(entry);\r\n        }\r\n    }\r\n\r\n    private static _FormatMessage(message: string): string {\r\n        const padStr = (i: number) => (i < 10 ? \"0\" + i : \"\" + i);\r\n\r\n        const date = new Date();\r\n        return \"[\" + padStr(date.getHours()) + \":\" + padStr(date.getMinutes()) + \":\" + padStr(date.getSeconds()) + \"]: \" + message;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private static _LogDisabled(message: string | any[], limit?: number): void {\r\n        // nothing to do\r\n    }\r\n    private static _LogEnabled(level: number = 1, message: string | any[], limit?: number): void {\r\n        // take first message if array\r\n        const msg = Array.isArray(message) ? message[0] : message;\r\n        if (limit !== undefined && !Logger._CheckLimit(msg, limit)) {\r\n            return;\r\n        }\r\n\r\n        const formattedMessage = Logger._FormatMessage(msg);\r\n        const type = this._Levels[level];\r\n        const optionals = Array.isArray(message) ? message.slice(1) : [];\r\n        type.logFunc && type.logFunc(\"BJS - \" + formattedMessage, ...optionals);\r\n\r\n        const entry = `<div style='color:${type.color}'>${formattedMessage}</div><br>`;\r\n        Logger._AddLogEntry(entry);\r\n        Logger._GenerateLimitMessage(msg, level);\r\n    }\r\n\r\n    /**\r\n     * Log a message to the console\r\n     */\r\n    public static Log: (message: string | any[], limit?: number) => void = Logger._LogEnabled.bind(Logger, Logger.MessageLogLevel);\r\n\r\n    /**\r\n     * Write a warning message to the console\r\n     */\r\n    public static Warn: (message: string | any[], limit?: number) => void = Logger._LogEnabled.bind(Logger, Logger.WarningLogLevel);\r\n\r\n    /**\r\n     * Write an error message to the console\r\n     */\r\n    public static Error: (message: string | any[], limit?: number) => void = Logger._LogEnabled.bind(Logger, Logger.ErrorLogLevel);\r\n\r\n    /**\r\n     * Gets current log cache (list of logs)\r\n     */\r\n    public static get LogCache(): string {\r\n        return Logger._LogCache;\r\n    }\r\n\r\n    /**\r\n     * Clears the log cache\r\n     */\r\n    public static ClearLogCache(): void {\r\n        Logger._LogCache = \"\";\r\n        Logger._LogLimitOutputs = {};\r\n        Logger.errorsCount = 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the current log level. This property is a bit field, allowing you to combine different levels (MessageLogLevel / WarningLogLevel / ErrorLogLevel).\r\n     * Use NoneLogLevel to disable logging and AllLogLevel for a quick way to enable all levels.\r\n     */\r\n    public static set LogLevels(level: number) {\r\n        Logger.Log = Logger._LogDisabled;\r\n        Logger.Warn = Logger._LogDisabled;\r\n        Logger.Error = Logger._LogDisabled;\r\n        [Logger.MessageLogLevel, Logger.WarningLogLevel, Logger.ErrorLogLevel].forEach((l) => {\r\n            if ((level & l) === l) {\r\n                const type = this._Levels[l];\r\n                Logger[type.name as \"Log\" | \"Warn\" | \"Error\"] = Logger._LogEnabled.bind(Logger, l);\r\n            }\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
