{"version":3,"file":"nodeRenderGraphTypes.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FrameGraph/Node/Types/nodeRenderGraphTypes.ts"],"names":[],"mappings":"AAgCA;;GAEG;AACH,MAAM,CAAN,IAAY,wCA8DX;AA9DD,WAAY,wCAAwC;IAChD,8BAA8B;IAC9B,6GAAoB,CAAA;IACpB,gCAAgC;IAChC,iIAA8B,CAAA;IAC9B,2CAA2C;IAC3C,6KAAoD,CAAA;IACpD,+BAA+B;IAC/B,yJAA0C,CAAA;IAC1C,6CAA6C;IAC7C,gIAA6B,CAAA;IAC7B,8CAA8C;IAC9C,kIAA8B,CAAA;IAC9B,8BAA8B;IAC9B,0HAA0B,CAAA;IAC1B,oCAAoC;IACpC,uIAAgC,CAAA;IAChC,iDAAiD;IACjD,yIAAiC,CAAA;IACjC,gCAAgC;IAChC,+HAA4B,CAAA;IAC5B,kCAAkC;IAClC,oIAA8B,CAAA;IAC9B,qCAAqC;IACrC,oIAA8B,CAAA;IAC9B,+CAA+C;IAC/C,sIAA+B,CAAA;IAC/B,+CAA+C;IAC/C,sIAA+B,CAAA;IAC/B,iDAAiD;IACjD,2IAAiC,CAAA;IACjC,uCAAuC;IACvC,6IAAkC,CAAA;IAElC,+DAA+D;IAC/D,2KAAgD,CAAA;IAChD,yEAAyE;IACzE,mJAAoC,CAAA;IACpC,iCAAiC;IACjC,yHAAuB,CAAA;IAEvB,yBAAyB;IACzB,uIAA8B,CAAA;IAC9B,uBAAuB;IACvB,mIAA4B,CAAA;IAC5B,YAAY;IACZ,2HAAwB,CAAA;IACxB,aAAa;IACb,kHAAmB,CAAA;IACnB,0DAA0D;IAC1D,0HAAuB,CAAA;IAEvB,sCAAsC;IACtC,2HAAuB,CAAA;IACvB,qDAAqD;IACrD,+HAAyB,CAAA;IACzB,gBAAgB;IAChB,0HAAsB,CAAA;IACtB,oBAAoB;IACpB,oHAAmB,CAAA;IACnB,2BAA2B;IAC3B,8GAAgB,CAAA;AACpB,CAAC,EA9DW,wCAAwC,KAAxC,wCAAwC,QA8DnD;AAED;;GAEG;AACH,MAAM,CAAN,IAAkB,iDAOjB;AAPD,WAAkB,iDAAiD;IAC/D,6BAA6B;IAC7B,qIAAU,CAAA;IACV,qDAAqD;IACrD,iJAAgB,CAAA;IAChB,sEAAsE;IACtE,6IAAc,CAAA;AAClB,CAAC,EAPiB,iDAAiD,KAAjD,iDAAiD,QAOlE;AAED;;GAEG;AACH,MAAM,CAAN,IAAkB,uCAKjB;AALD,WAAkB,uCAAuC;IACrD,YAAY;IACZ,uGAAK,CAAA;IACL,aAAa;IACb,yGAAM,CAAA;AACV,CAAC,EALiB,uCAAuC,KAAvC,uCAAuC,QAKxD","sourcesContent":["// eslint-disable-next-line import/no-internal-modules\r\nimport type { Color4, Scene, FrameGraphTextureHandle, Camera, FrameGraphObjectList, IShadowLight, FrameGraphShadowGeneratorTask, FrameGraphObjectRendererTask } from \"core/index\";\r\n\r\n/**\r\n * Interface used to configure the node render graph editor\r\n */\r\nexport interface INodeRenderGraphEditorOptions {\r\n    /** Define the URL to load node editor script from */\r\n    editorURL?: string;\r\n    /** Additional configuration for the FGE */\r\n    nodeRenderGraphEditorConfig?: {\r\n        backgroundColor?: Color4;\r\n        hostScene?: Scene;\r\n    };\r\n}\r\n\r\n/**\r\n * Options that can be passed to the node render graph build method\r\n */\r\nexport interface INodeRenderGraphCreateOptions {\r\n    /** If true, textures created by the node render graph will be visible in the inspector, for easier debugging (default: false) */\r\n    debugTextures?: boolean;\r\n    /** Rebuild the node render graph when the screen is resized (default: true) */\r\n    rebuildGraphOnEngineResize?: boolean;\r\n    /** Defines if the build should log activity (default: false) */\r\n    verbose?: boolean;\r\n    /** Defines if the autoConfigure method should be called when initializing blocks (default: false) */\r\n    autoConfigure?: boolean;\r\n    /** If true, external inputs like object lists and cameras will be filled with default values, taken from the scene. Note that external textures are not concerned (default: true). */\r\n    autoFillExternalInputs?: boolean;\r\n}\r\n\r\n/**\r\n * Defines the kind of connection point for node render graph nodes\r\n */\r\nexport enum NodeRenderGraphBlockConnectionPointTypes {\r\n    /** General purpose texture */\r\n    Texture = 0x00000001,\r\n    /** Back buffer color texture */\r\n    TextureBackBuffer = 0x00000002,\r\n    /** Back buffer depth/stencil attachment */\r\n    TextureBackBufferDepthStencilAttachment = 0x00000004,\r\n    /** Depth/stencil attachment */\r\n    TextureDepthStencilAttachment = 0x00000008,\r\n    /** Depth (in view space) geometry texture */\r\n    TextureViewDepth = 0x00000010,\r\n    /** Normal (in view space) geometry texture */\r\n    TextureViewNormal = 0x00000020,\r\n    /** Albedo geometry texture */\r\n    TextureAlbedo = 0x00000040,\r\n    /** Reflectivity geometry texture */\r\n    TextureReflectivity = 0x00000080,\r\n    /** Position (in world space) geometry texture */\r\n    TextureWorldPosition = 0x00000100,\r\n    /** Velocity geometry texture */\r\n    TextureVelocity = 0x00000200,\r\n    /** Irradiance geometry texture */\r\n    TextureIrradiance = 0x00000400,\r\n    /** Albedo (sqrt) geometry texture */\r\n    TextureAlbedoSqrt = 0x00000800,\r\n    /** Depth (in screen space) geometry texture */\r\n    TextureScreenDepth = 0x00001000,\r\n    /** Normal (in world space) geometry texture */\r\n    TextureWorldNormal = 0x00002000,\r\n    /** Position (in local space) geometry texture */\r\n    TextureLocalPosition = 0x00004000,\r\n    /** Linear velocity geometry texture */\r\n    TextureLinearVelocity = 0x00008000,\r\n\r\n    /** Bit field for all textures but back buffer depth/stencil */\r\n    TextureAllButBackBufferDepthStencil = 0x000ffffb,\r\n    /** Bit field for all textures but back buffer color and depth/stencil */\r\n    TextureAllButBackBuffer = 0x000ffff9,\r\n    /** Bit field for all textures */\r\n    TextureAll = 0x000fffff,\r\n\r\n    /** Resource container */\r\n    ResourceContainer = 0x00100000,\r\n    /** Shadow generator */\r\n    ShadowGenerator = 0x00200000,\r\n    /** Light */\r\n    ShadowLight = 0x00400000,\r\n    /** Camera */\r\n    Camera = 0x01000000,\r\n    /** List of objects (meshes, particle systems, sprites) */\r\n    ObjectList = 0x02000000,\r\n\r\n    /** Detect type based on connection */\r\n    AutoDetect = 0x10000000,\r\n    /** Output type that will be defined by input type */\r\n    BasedOnInput = 0x20000000,\r\n    /** Undefined */\r\n    Undefined = 0x40000000,\r\n    /** Custom object */\r\n    Object = 0x80000000,\r\n    /** Bitmask of all types */\r\n    All = 0xffffffff,\r\n}\r\n\r\n/**\r\n * Enum used to define the compatibility state between two connection points\r\n */\r\nexport const enum NodeRenderGraphConnectionPointCompatibilityStates {\r\n    /** Points are compatibles */\r\n    Compatible,\r\n    /** Points are incompatible because of their types */\r\n    TypeIncompatible,\r\n    /** Points are incompatible because they are in the same hierarchy **/\r\n    HierarchyIssue,\r\n}\r\n\r\n/**\r\n * Defines the direction of a connection point\r\n */\r\nexport const enum NodeRenderGraphConnectionPointDirection {\r\n    /** Input */\r\n    Input,\r\n    /** Output */\r\n    Output,\r\n}\r\n\r\n/**\r\n * Defines the type of a connection point value\r\n */\r\nexport type NodeRenderGraphBlockConnectionPointValueType =\r\n    | FrameGraphTextureHandle\r\n    | Camera\r\n    | FrameGraphObjectList\r\n    | IShadowLight\r\n    | FrameGraphShadowGeneratorTask\r\n    | FrameGraphObjectRendererTask;\r\n"]}