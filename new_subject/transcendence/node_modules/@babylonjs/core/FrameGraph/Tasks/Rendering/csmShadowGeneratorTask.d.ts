import { CascadedShadowGenerator } from "../../../Lights/Shadows/cascadedShadowGenerator";
import { FrameGraphShadowGeneratorTask } from "./shadowGeneratorTask";
/**
 * Task used to generate a cascaded shadow map from a list of objects.
 */
export declare class FrameGraphCascadedShadowGeneratorTask extends FrameGraphShadowGeneratorTask {
    protected _shadowGenerator: CascadedShadowGenerator | undefined;
    /**
     * Checks if a shadow generator task is a cascaded shadow generator task.
     * @param task The task to check.
     * @returns True if the task is a cascaded shadow generator task, else false.
     */
    static IsCascadedShadowGenerator(task: FrameGraphShadowGeneratorTask): task is FrameGraphCascadedShadowGeneratorTask;
    private _numCascades;
    /**
     * The number of cascades.
     */
    get numCascades(): number;
    set numCascades(value: number);
    private _debug;
    /**
     * Gets or sets a value indicating whether the shadow generator should display the cascades.
     */
    get debug(): boolean;
    set debug(value: boolean);
    private _stabilizeCascades;
    /**
     * Gets or sets a value indicating whether the shadow generator should stabilize the cascades.
     */
    get stabilizeCascades(): boolean;
    set stabilizeCascades(value: boolean);
    private _lambda;
    /**
     * Gets or sets the lambda parameter of the shadow generator.
     */
    get lambda(): number;
    set lambda(value: number);
    private _cascadeBlendPercentage;
    /**
     * Gets or sets the cascade blend percentage.
     */
    get cascadeBlendPercentage(): number;
    set cascadeBlendPercentage(value: number);
    private _depthClamp;
    /**
     * Gets or sets a value indicating whether the shadow generator should use depth clamping.
     */
    get depthClamp(): boolean;
    set depthClamp(value: boolean);
    private _autoCalcDepthBounds;
    /**
     * Gets or sets a value indicating whether the shadow generator should automatically calculate the depth bounds.
     */
    get autoCalcDepthBounds(): boolean;
    set autoCalcDepthBounds(value: boolean);
    private _shadowMaxZ;
    /**
     * Gets or sets the maximum shadow Z value.
     */
    get shadowMaxZ(): number;
    set shadowMaxZ(value: number);
    protected _createShadowGenerator(): void;
    protected _setupShadowGenerator(): void;
}
