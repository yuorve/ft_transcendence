{"version":3,"file":"csmShadowGeneratorTask.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FrameGraph/Tasks/Rendering/csmShadowGeneratorTask.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,MAAM,iDAAiD,CAAC;AAC1F,OAAO,EAAE,6BAA6B,EAAE,MAAM,uBAAuB,CAAC;AACtE,OAAO,EAAE,gBAAgB,EAAE,MAAM,kCAAkC,CAAC;AAEpE;;GAEG;AACH,MAAM,OAAO,qCAAsC,SAAQ,6BAA6B;IAAxF;;QAYY,iBAAY,GAAG,uBAAuB,CAAC,sBAAsB,CAAC;QAiB9D,WAAM,GAAG,KAAK,CAAC;QAmBf,uBAAkB,GAAG,KAAK,CAAC;QAmB3B,YAAO,GAAG,GAAG,CAAC;QAmBd,4BAAuB,GAAG,GAAG,CAAC;QAmB9B,gBAAW,GAAG,IAAI,CAAC;QAmBnB,yBAAoB,GAAG,KAAK,CAAC;QAmB7B,gBAAW,GAAG,KAAK,CAAC;IA2ChC,CAAC;IAvLG;;;;OAIG;IACI,MAAM,CAAC,yBAAyB,CAAC,IAAmC;QACvE,OAAQ,IAA8C,CAAC,WAAW,KAAK,SAAS,CAAC;IACrF,CAAC;IAGD;;OAEG;IACH,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,IAAW,WAAW,CAAC,KAAa;QAChC,IAAI,KAAK,KAAK,IAAI,CAAC,YAAY,EAAE,CAAC;YAC9B,OAAO;QACX,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,qBAAqB,EAAE,CAAC;IACjC,CAAC;IAGD;;OAEG;IACH,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,IAAW,KAAK,CAAC,KAAc;QAC3B,IAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC;YACxB,OAAO;QACX,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,KAAK,CAAC;QACxC,CAAC;IACL,CAAC;IAGD;;OAEG;IACH,IAAW,iBAAiB;QACxB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACnC,CAAC;IAED,IAAW,iBAAiB,CAAC,KAAc;QACvC,IAAI,KAAK,KAAK,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACpC,OAAO;QACX,CAAC;QAED,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,GAAG,KAAK,CAAC;QACpD,CAAC;IACL,CAAC;IAGD;;OAEG;IACH,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,IAAW,MAAM,CAAC,KAAa;QAC3B,IAAI,KAAK,KAAK,IAAI,CAAC,OAAO,EAAE,CAAC;YACzB,OAAO;QACX,CAAC;QAED,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,KAAK,CAAC;QACzC,CAAC;IACL,CAAC;IAGD;;OAEG;IACH,IAAW,sBAAsB;QAC7B,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACxC,CAAC;IAED,IAAW,sBAAsB,CAAC,KAAa;QAC3C,IAAI,KAAK,KAAK,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACzC,OAAO;QACX,CAAC;QAED,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;QACrC,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,GAAG,KAAK,CAAC;QACzD,CAAC;IACL,CAAC;IAGD;;OAEG;IACH,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,IAAW,UAAU,CAAC,KAAc;QAChC,IAAI,KAAK,KAAK,IAAI,CAAC,WAAW,EAAE,CAAC;YAC7B,OAAO;QACX,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,UAAU,GAAG,KAAK,CAAC;QAC7C,CAAC;IACL,CAAC;IAGD;;OAEG;IACH,IAAW,mBAAmB;QAC1B,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAED,IAAW,mBAAmB,CAAC,KAAc;QACzC,IAAI,KAAK,KAAK,IAAI,CAAC,oBAAoB,EAAE,CAAC;YACtC,OAAO;QACX,CAAC;QAED,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;QAClC,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACtD,CAAC;IACL,CAAC;IAGD;;OAEG;IACH,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,IAAW,UAAU,CAAC,KAAa;QAC/B,IAAI,KAAK,KAAK,IAAI,CAAC,WAAW,EAAE,CAAC;YAC7B,OAAO;QACX,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,UAAU,GAAG,KAAK,CAAC;QAC7C,CAAC;IACL,CAAC;IAEkB,sBAAsB;QACrC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,YAAY,gBAAgB,CAAC,EAAE,CAAC;YAC5C,MAAM,IAAI,KAAK,CAAC,yCAAyC,IAAI,CAAC,IAAI,8DAA8D,CAAC,CAAC;QACtI,CAAC;QACD,IAAI,CAAC,gBAAgB,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACjJ,IAAI,CAAC,gBAAgB,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;IAC1D,CAAC;IAEkB,qBAAqB;QACpC,KAAK,CAAC,qBAAqB,EAAE,CAAC;QAE9B,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAuD,CAAC;QACrF,IAAI,eAAe,KAAK,SAAS,EAAE,CAAC;YAChC,OAAO;QACX,CAAC;QAED,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACpC,eAAe,CAAC,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QAC5D,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QACtC,eAAe,CAAC,sBAAsB,GAAG,IAAI,CAAC,uBAAuB,CAAC;QACtE,eAAe,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QAC9C,eAAe,CAAC,mBAAmB,GAAG,IAAI,CAAC,oBAAoB,CAAC;QAChE,eAAe,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;IAClD,CAAC;CACJ","sourcesContent":["import { CascadedShadowGenerator } from \"../../../Lights/Shadows/cascadedShadowGenerator\";\r\nimport { FrameGraphShadowGeneratorTask } from \"./shadowGeneratorTask\";\r\nimport { DirectionalLight } from \"../../../Lights/directionalLight\";\r\n\r\n/**\r\n * Task used to generate a cascaded shadow map from a list of objects.\r\n */\r\nexport class FrameGraphCascadedShadowGeneratorTask extends FrameGraphShadowGeneratorTask {\r\n    protected override _shadowGenerator: CascadedShadowGenerator | undefined;\r\n\r\n    /**\r\n     * Checks if a shadow generator task is a cascaded shadow generator task.\r\n     * @param task The task to check.\r\n     * @returns True if the task is a cascaded shadow generator task, else false.\r\n     */\r\n    public static IsCascadedShadowGenerator(task: FrameGraphShadowGeneratorTask): task is FrameGraphCascadedShadowGeneratorTask {\r\n        return (task as FrameGraphCascadedShadowGeneratorTask).numCascades !== undefined;\r\n    }\r\n\r\n    private _numCascades = CascadedShadowGenerator.DEFAULT_CASCADES_COUNT;\r\n    /**\r\n     * The number of cascades.\r\n     */\r\n    public get numCascades() {\r\n        return this._numCascades;\r\n    }\r\n\r\n    public set numCascades(value: number) {\r\n        if (value === this._numCascades) {\r\n            return;\r\n        }\r\n\r\n        this._numCascades = value;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _debug = false;\r\n    /**\r\n     * Gets or sets a value indicating whether the shadow generator should display the cascades.\r\n     */\r\n    public get debug() {\r\n        return this._debug;\r\n    }\r\n\r\n    public set debug(value: boolean) {\r\n        if (value === this._debug) {\r\n            return;\r\n        }\r\n\r\n        this._debug = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.debug = value;\r\n        }\r\n    }\r\n\r\n    private _stabilizeCascades = false;\r\n    /**\r\n     * Gets or sets a value indicating whether the shadow generator should stabilize the cascades.\r\n     */\r\n    public get stabilizeCascades() {\r\n        return this._stabilizeCascades;\r\n    }\r\n\r\n    public set stabilizeCascades(value: boolean) {\r\n        if (value === this._stabilizeCascades) {\r\n            return;\r\n        }\r\n\r\n        this._stabilizeCascades = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.stabilizeCascades = value;\r\n        }\r\n    }\r\n\r\n    private _lambda = 0.5;\r\n    /**\r\n     * Gets or sets the lambda parameter of the shadow generator.\r\n     */\r\n    public get lambda() {\r\n        return this._lambda;\r\n    }\r\n\r\n    public set lambda(value: number) {\r\n        if (value === this._lambda) {\r\n            return;\r\n        }\r\n\r\n        this._lambda = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.lambda = value;\r\n        }\r\n    }\r\n\r\n    private _cascadeBlendPercentage = 0.1;\r\n    /**\r\n     * Gets or sets the cascade blend percentage.\r\n     */\r\n    public get cascadeBlendPercentage() {\r\n        return this._cascadeBlendPercentage;\r\n    }\r\n\r\n    public set cascadeBlendPercentage(value: number) {\r\n        if (value === this._cascadeBlendPercentage) {\r\n            return;\r\n        }\r\n\r\n        this._cascadeBlendPercentage = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.cascadeBlendPercentage = value;\r\n        }\r\n    }\r\n\r\n    private _depthClamp = true;\r\n    /**\r\n     * Gets or sets a value indicating whether the shadow generator should use depth clamping.\r\n     */\r\n    public get depthClamp() {\r\n        return this._depthClamp;\r\n    }\r\n\r\n    public set depthClamp(value: boolean) {\r\n        if (value === this._depthClamp) {\r\n            return;\r\n        }\r\n\r\n        this._depthClamp = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.depthClamp = value;\r\n        }\r\n    }\r\n\r\n    private _autoCalcDepthBounds = false;\r\n    /**\r\n     * Gets or sets a value indicating whether the shadow generator should automatically calculate the depth bounds.\r\n     */\r\n    public get autoCalcDepthBounds() {\r\n        return this._autoCalcDepthBounds;\r\n    }\r\n\r\n    public set autoCalcDepthBounds(value: boolean) {\r\n        if (value === this._autoCalcDepthBounds) {\r\n            return;\r\n        }\r\n\r\n        this._autoCalcDepthBounds = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.autoCalcDepthBounds = value;\r\n        }\r\n    }\r\n\r\n    private _shadowMaxZ = 10000;\r\n    /**\r\n     * Gets or sets the maximum shadow Z value.\r\n     */\r\n    public get shadowMaxZ() {\r\n        return this._shadowMaxZ;\r\n    }\r\n\r\n    public set shadowMaxZ(value: number) {\r\n        if (value === this._shadowMaxZ) {\r\n            return;\r\n        }\r\n\r\n        this._shadowMaxZ = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.shadowMaxZ = value;\r\n        }\r\n    }\r\n\r\n    protected override _createShadowGenerator() {\r\n        if (!(this.light instanceof DirectionalLight)) {\r\n            throw new Error(`FrameGraphCascadedShadowGeneratorTask ${this.name}: the CSM shadow generator only supports directional lights.`);\r\n        }\r\n        this._shadowGenerator = new CascadedShadowGenerator(this.mapSize, this.light, this.useFloat32TextureType, this.camera, this.useRedTextureFormat);\r\n        this._shadowGenerator.numCascades = this._numCascades;\r\n    }\r\n\r\n    protected override _setupShadowGenerator() {\r\n        super._setupShadowGenerator();\r\n\r\n        const shadowGenerator = this._shadowGenerator as CascadedShadowGenerator | undefined;\r\n        if (shadowGenerator === undefined) {\r\n            return;\r\n        }\r\n\r\n        shadowGenerator.debug = this._debug;\r\n        shadowGenerator.stabilizeCascades = this._stabilizeCascades;\r\n        shadowGenerator.lambda = this._lambda;\r\n        shadowGenerator.cascadeBlendPercentage = this._cascadeBlendPercentage;\r\n        shadowGenerator.depthClamp = this._depthClamp;\r\n        shadowGenerator.autoCalcDepthBounds = this._autoCalcDepthBounds;\r\n        shadowGenerator.shadowMaxZ = this._shadowMaxZ;\r\n    }\r\n}\r\n"]}