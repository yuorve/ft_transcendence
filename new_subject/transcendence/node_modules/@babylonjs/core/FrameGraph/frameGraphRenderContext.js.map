{"version":3,"file":"frameGraphRenderContext.js","sourceRoot":"","sources":["../../../../dev/core/src/FrameGraph/frameGraphRenderContext.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\r\n    Nullable,\r\n    AbstractEngine,\r\n    DrawWrapper,\r\n    IColor4Like,\r\n    Layer,\r\n    FrameGraphTextureHandle,\r\n    Effect,\r\n    FrameGraphTextureManager,\r\n    ObjectRenderer,\r\n    Scene,\r\n    FrameGraphRenderTarget,\r\n    InternalTexture,\r\n    // eslint-disable-next-line import/no-internal-modules\r\n} from \"core/index\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { EffectRenderer } from \"../Materials/effectRenderer\";\r\nimport { CopyTextureToTexture } from \"../Misc/copyTextureToTexture\";\r\nimport { FrameGraphContext } from \"./frameGraphContext\";\r\n\r\n/**\r\n * Frame graph context used render passes.\r\n * @experimental\r\n */\r\nexport class FrameGraphRenderContext extends FrameGraphContext {\r\n    private readonly _effectRenderer: EffectRenderer;\r\n    private _currentRenderTarget: FrameGraphRenderTarget | undefined;\r\n    private _debugMessageWhenTargetBound: string | undefined;\r\n    private _debugMessageHasBeenPushed = false;\r\n    private _renderTargetIsBound = true;\r\n    private readonly _copyTexture: CopyTextureToTexture;\r\n    private _depthTest: boolean;\r\n    private _depthWrite: boolean;\r\n\r\n    private static _IsObjectRenderer(value: Layer | ObjectRenderer): value is ObjectRenderer {\r\n        return (value as ObjectRenderer).initRender !== undefined;\r\n    }\r\n\r\n    /** @internal */\r\n    constructor(\r\n        private readonly _engine: AbstractEngine,\r\n        private readonly _textureManager: FrameGraphTextureManager,\r\n        private readonly _scene: Scene\r\n    ) {\r\n        super();\r\n        this._effectRenderer = new EffectRenderer(this._engine);\r\n        this._copyTexture = new CopyTextureToTexture(this._engine);\r\n    }\r\n\r\n    /**\r\n     * Checks whether a texture handle points to the backbuffer's color or depth texture\r\n     * @param handle The handle to check\r\n     * @returns True if the handle points to the backbuffer's color or depth texture, otherwise false\r\n     */\r\n    public isBackbuffer(handle: FrameGraphTextureHandle): boolean {\r\n        return this._textureManager.isBackbuffer(handle);\r\n    }\r\n\r\n    /**\r\n     * Checks whether a texture handle points to the backbuffer's color texture\r\n     * @param handle The handle to check\r\n     * @returns True if the handle points to the backbuffer's color texture, otherwise false\r\n     */\r\n    public isBackbufferColor(handle: FrameGraphTextureHandle): boolean {\r\n        return this._textureManager.isBackbufferColor(handle);\r\n    }\r\n\r\n    /**\r\n     * Checks whether a texture handle points to the backbuffer's depth texture\r\n     * @param handle The handle to check\r\n     * @returns True if the handle points to the backbuffer's depth texture, otherwise false\r\n     */\r\n    public isBackbufferDepthStencil(handle: FrameGraphTextureHandle): boolean {\r\n        return this._textureManager.isBackbufferDepthStencil(handle);\r\n    }\r\n\r\n    /**\r\n     * Creates a (frame graph) render target wrapper\r\n     * Note that renderTargets or renderTargetDepth can be undefined, but not both at the same time!\r\n     * @param name Name of the render target wrapper\r\n     * @param renderTargets Render target handles (textures) to use\r\n     * @param renderTargetDepth Render target depth handle (texture) to use\r\n     * @returns The created render target wrapper\r\n     */\r\n    public createRenderTarget(\r\n        name: string,\r\n        renderTargets?: FrameGraphTextureHandle | FrameGraphTextureHandle[],\r\n        renderTargetDepth?: FrameGraphTextureHandle\r\n    ): FrameGraphRenderTarget {\r\n        return this._textureManager.createRenderTarget(name, renderTargets, renderTargetDepth);\r\n    }\r\n\r\n    /**\r\n     * Clears the current render buffer or the current render target (if any is set up)\r\n     * @param color Defines the color to use\r\n     * @param backBuffer Defines if the back buffer must be cleared\r\n     * @param depth Defines if the depth buffer must be cleared\r\n     * @param stencil Defines if the stencil buffer must be cleared\r\n     */\r\n    public clear(color: Nullable<IColor4Like>, backBuffer: boolean, depth: boolean, stencil?: boolean): void {\r\n        this._applyRenderTarget();\r\n        this._engine.clear(color, backBuffer, depth, stencil);\r\n    }\r\n\r\n    /**\r\n     * Clears the color attachments of the current render target\r\n     * @param color Defines the color to use\r\n     * @param attachments The attachments to clear\r\n     */\r\n    public clearColorAttachments(color: Nullable<IColor4Like>, attachments: number[]): void {\r\n        this._applyRenderTarget();\r\n        this._engine.bindAttachments(attachments);\r\n        this._engine.clear(color, true, false, false);\r\n    }\r\n\r\n    /**\r\n     * Binds the attachments to the current render target\r\n     * @param attachments The attachments to bind\r\n     */\r\n    public bindAttachments(attachments: number[]): void {\r\n        this._applyRenderTarget();\r\n        this._engine.bindAttachments(attachments);\r\n    }\r\n\r\n    /**\r\n     * Generates mipmaps for the current render target\r\n     */\r\n    public generateMipMaps(): void {\r\n        if (this._currentRenderTarget?.renderTargetWrapper === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (this._renderTargetIsBound && this._engine._currentRenderTarget) {\r\n            // we can't generate the mipmaps if the render target is bound\r\n            this._flushDebugMessages();\r\n            this._engine.unBindFramebuffer(this._engine._currentRenderTarget);\r\n            this._renderTargetIsBound = false;\r\n        }\r\n\r\n        const textures = this._currentRenderTarget.renderTargetWrapper.textures;\r\n        if (textures) {\r\n            for (const texture of textures) {\r\n                this._engine.generateMipmaps(texture);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the texture sampling mode for a given texture handle\r\n     * @param handle Handle of the texture to set the sampling mode for\r\n     * @param samplingMode Sampling mode to set\r\n     */\r\n    public setTextureSamplingMode(handle: FrameGraphTextureHandle, samplingMode: number): void {\r\n        const internalTexture = this._textureManager.getTextureFromHandle(handle);\r\n        if (internalTexture && internalTexture.samplingMode !== samplingMode) {\r\n            this._engine.updateTextureSamplingMode(samplingMode, internalTexture);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds a texture handle to a given effect (resolves the handle to a texture and binds it to the effect)\r\n     * @param effect The effect to bind the texture to\r\n     * @param name The name of the texture in the effect\r\n     * @param handle The handle of the texture to bind\r\n     */\r\n    public bindTextureHandle(effect: Effect, name: string, handle: FrameGraphTextureHandle): void {\r\n        let texture: Nullable<InternalTexture>;\r\n\r\n        const historyEntry = this._textureManager._historyTextures.get(handle);\r\n        if (historyEntry) {\r\n            texture = historyEntry.textures[historyEntry.index]; // texture we write to in this frame\r\n            if (\r\n                this._currentRenderTarget !== undefined &&\r\n                this._currentRenderTarget.renderTargetWrapper !== undefined &&\r\n                this._currentRenderTarget.renderTargetWrapper.textures!.includes(texture!)\r\n            ) {\r\n                // If the current render target renders to the history write texture, we bind the read texture instead\r\n                texture = historyEntry.textures[historyEntry.index ^ 1];\r\n            }\r\n        } else {\r\n            texture = this._textureManager._textures.get(handle)!.texture;\r\n        }\r\n\r\n        effect._bindTexture(name, texture);\r\n    }\r\n\r\n    /**\r\n     * Saves the current depth states (depth testing and depth writing)\r\n     */\r\n    public saveDepthStates(): void {\r\n        this._depthTest = this._engine.getDepthBuffer();\r\n        this._depthWrite = this._engine.getDepthWrite();\r\n    }\r\n\r\n    /**\r\n     * Restores the depth states saved by saveDepthStates\r\n     */\r\n    public restoreDepthStates(): void {\r\n        this._engine.setDepthBuffer(this._depthTest);\r\n        this._engine.setDepthWrite(this._depthWrite);\r\n    }\r\n\r\n    /**\r\n     * Sets the depth states for the current render target\r\n     * @param depthTest If true, depth testing is enabled\r\n     * @param depthWrite If true, depth writing is enabled\r\n     */\r\n    public setDepthStates(depthTest: boolean, depthWrite: boolean): void {\r\n        this._engine.setDepthBuffer(depthTest);\r\n        this._engine.setDepthWrite(depthWrite);\r\n    }\r\n\r\n    /**\r\n     * Applies a full-screen effect to the current render target\r\n     * @param drawWrapper The draw wrapper containing the effect to apply\r\n     * @param customBindings The custom bindings to use when applying the effect (optional)\r\n     * @returns True if the effect was applied, otherwise false (effect not ready)\r\n     */\r\n    public applyFullScreenEffect(drawWrapper: DrawWrapper, customBindings?: () => void): boolean {\r\n        if (!drawWrapper.effect?.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        this._applyRenderTarget();\r\n\r\n        const engineDepthMask = this._engine.getDepthWrite(); // for some reasons, depthWrite is not restored by EffectRenderer.restoreStates\r\n\r\n        this._effectRenderer.saveStates();\r\n        this._effectRenderer.setViewport();\r\n\r\n        this._engine.enableEffect(drawWrapper);\r\n        this._engine.setState(false);\r\n        this._engine.setDepthBuffer(false);\r\n        this._engine.setDepthWrite(false);\r\n\r\n        this._effectRenderer.bindBuffers(drawWrapper.effect);\r\n        customBindings?.();\r\n        this._effectRenderer.draw();\r\n        this._effectRenderer.restoreStates();\r\n        this._engine.setDepthWrite(engineDepthMask);\r\n        this._engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Copies a texture to the current render target\r\n     * @param sourceTexture The source texture to copy from\r\n     * @param forceCopyToBackbuffer If true, the copy will be done to the back buffer regardless of the current render target\r\n     */\r\n    public copyTexture(sourceTexture: FrameGraphTextureHandle, forceCopyToBackbuffer = false): void {\r\n        if (forceCopyToBackbuffer) {\r\n            this.bindRenderTarget();\r\n        }\r\n        this._applyRenderTarget();\r\n        this._copyTexture.copy(this._textureManager.getTextureFromHandle(sourceTexture)!);\r\n    }\r\n\r\n    /**\r\n     * Renders a RenderTargetTexture or a layer\r\n     * @param object The RenderTargetTexture/Layer to render\r\n     * @param viewportWidth The width of the viewport (optional for Layer, but mandatory for ObjectRenderer)\r\n     * @param viewportHeight The height of the viewport (optional for Layer, but mandatory for ObjectRenderer)\r\n     */\r\n    public render(object: Layer | ObjectRenderer, viewportWidth?: number, viewportHeight?: number): void {\r\n        if (FrameGraphRenderContext._IsObjectRenderer(object)) {\r\n            if (object.shouldRender()) {\r\n                this._scene.incrementRenderId();\r\n                this._scene.resetCachedMaterial();\r\n\r\n                this._applyRenderTarget();\r\n\r\n                object.prepareRenderList();\r\n\r\n                object.initRender(viewportWidth!, viewportHeight!);\r\n\r\n                object.render();\r\n\r\n                object.finishRender();\r\n            }\r\n        } else {\r\n            this._applyRenderTarget();\r\n            object.render();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds a render target texture so that upcoming draw calls will render to it\r\n     * Note: it is a lazy operation, so the render target will only be bound when needed. This way, it is possible to call\r\n     *   this method several times with different render targets without incurring the cost of binding if no draw calls are made\r\n     * @param renderTarget The handle of the render target texture to bind (default: undefined, meaning \"back buffer\"). Pass an array for MRT rendering.\r\n     * @param debugMessage Optional debug message to display when the render target is bound (visible in PIX, for example)\r\n     */\r\n    public bindRenderTarget(renderTarget?: FrameGraphRenderTarget, debugMessage?: string) {\r\n        if (\r\n            (renderTarget?.renderTargetWrapper === undefined && this._currentRenderTarget === undefined) ||\r\n            (renderTarget && this._currentRenderTarget && renderTarget.equals(this._currentRenderTarget))\r\n        ) {\r\n            this._flushDebugMessages();\r\n            if (debugMessage !== undefined) {\r\n                this._engine._debugPushGroup?.(debugMessage, 2);\r\n                this._debugMessageWhenTargetBound = undefined;\r\n                this._debugMessageHasBeenPushed = true;\r\n            }\r\n            return;\r\n        }\r\n        this._currentRenderTarget = renderTarget?.renderTargetWrapper === undefined ? undefined : renderTarget;\r\n        this._debugMessageWhenTargetBound = debugMessage;\r\n        this._renderTargetIsBound = false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _flushDebugMessages() {\r\n        if (this._debugMessageHasBeenPushed) {\r\n            this._engine._debugPopGroup?.(2);\r\n            this._debugMessageHasBeenPushed = false;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _applyRenderTarget() {\r\n        if (this._renderTargetIsBound) {\r\n            return;\r\n        }\r\n\r\n        this._flushDebugMessages();\r\n\r\n        const renderTargetWrapper = this._currentRenderTarget?.renderTargetWrapper;\r\n\r\n        if (renderTargetWrapper === undefined) {\r\n            this._engine.restoreDefaultFramebuffer();\r\n        } else {\r\n            if (this._engine._currentRenderTarget) {\r\n                this._engine.unBindFramebuffer(this._engine._currentRenderTarget);\r\n            }\r\n            this._engine.bindFramebuffer(renderTargetWrapper);\r\n        }\r\n\r\n        if (this._debugMessageWhenTargetBound !== undefined) {\r\n            this._engine._debugPushGroup?.(this._debugMessageWhenTargetBound, 2);\r\n            this._debugMessageWhenTargetBound = undefined;\r\n            this._debugMessageHasBeenPushed = true;\r\n        }\r\n\r\n        this._renderTargetIsBound = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _isReady(): boolean {\r\n        return this._copyTexture.isReady();\r\n    }\r\n\r\n    /** @internal */\r\n    public _dispose() {\r\n        this._effectRenderer.dispose();\r\n        this._copyTexture.dispose();\r\n    }\r\n}\r\n"]}