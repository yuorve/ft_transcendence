{"version":3,"file":"areaLight.js","sourceRoot":"","sources":["../../../../dev/core/src/Lights/areaLight.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Vector3 } from \"core/Maths/math.vector\";\r\nimport { RawTexture } from \"core/Materials/Textures/rawTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport type { Effect } from \"core/Materials/effect\";\r\nimport type { ILTCTextures } from \"core/Lights/LTC/ltcTextureTool\";\r\nimport { DecodeLTCTextureDataAsync } from \"core/Lights/LTC/ltcTextureTool\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * @internal\r\n         */\r\n        _ltcTextures?: ILTCTextures;\r\n    }\r\n}\r\n\r\nfunction CreateSceneLTCTextures(scene: Scene): void {\r\n    const useDelayedTextureLoading = scene.useDelayedTextureLoading;\r\n    scene.useDelayedTextureLoading = false;\r\n\r\n    const previousState = scene._blockEntityCollection;\r\n    scene._blockEntityCollection = false;\r\n\r\n    scene._ltcTextures = {\r\n        LTC1: RawTexture.CreateRGBATexture(null, 64, 64, scene.getEngine(), false, false, Constants.TEXTURE_LINEAR_LINEAR, Constants.TEXTURETYPE_HALF_FLOAT, 0, false, true),\r\n        LTC2: RawTexture.CreateRGBATexture(null, 64, 64, scene.getEngine(), false, false, Constants.TEXTURE_LINEAR_LINEAR, Constants.TEXTURETYPE_HALF_FLOAT, 0, false, true),\r\n    };\r\n\r\n    scene._blockEntityCollection = previousState;\r\n\r\n    scene._ltcTextures.LTC1.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n    scene._ltcTextures.LTC1.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n\r\n    scene._ltcTextures.LTC2.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n    scene._ltcTextures.LTC2.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n\r\n    scene.useDelayedTextureLoading = useDelayedTextureLoading;\r\n\r\n    DecodeLTCTextureDataAsync()\r\n        .then((textureData) => {\r\n            if (scene._ltcTextures) {\r\n                const ltc1 = scene._ltcTextures?.LTC1 as RawTexture;\r\n                ltc1.update(textureData[0]);\r\n\r\n                const ltc2 = scene._ltcTextures?.LTC2 as RawTexture;\r\n                ltc2.update(textureData[1]);\r\n\r\n                scene.onDisposeObservable.addOnce(() => {\r\n                    scene._ltcTextures?.LTC1.dispose();\r\n                    scene._ltcTextures?.LTC2.dispose();\r\n                });\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            Logger.Error(`Area Light fail to get LTC textures data. Error: ${error}`);\r\n        });\r\n}\r\n\r\n/**\r\n * Abstract Area Light class that servers as parent for all Area Lights implementations.\r\n * The light is emitted from the area in the -Z direction.\r\n */\r\nexport abstract class AreaLight extends Light {\r\n    /**\r\n     * Area Light position.\r\n     */\r\n    public position: Vector3;\r\n\r\n    /**\r\n     * Creates a area light object.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param position The position of the area light.\r\n     * @param scene The scene the light belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.position = position;\r\n\r\n        if (!this._scene._ltcTextures) {\r\n            CreateSceneLTCTextures(this._scene);\r\n        }\r\n    }\r\n\r\n    public override transferTexturesToEffect(effect: Effect): Light {\r\n        if (this._scene._ltcTextures) {\r\n            effect.setTexture(\"areaLightsLTC1Sampler\", this._scene._ltcTextures.LTC1);\r\n            effect.setTexture(\"areaLightsLTC2Sampler\", this._scene._ltcTextures.LTC2);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"AREALIGHT\" + lightIndex] = true;\r\n        defines[\"AREALIGHTUSED\"] = true;\r\n    }\r\n\r\n    public override _isReady(): boolean {\r\n        if (this._scene._ltcTextures) {\r\n            return this._scene._ltcTextures.LTC1.isReady() && this._scene._ltcTextures.LTC2.isReady();\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]}