{"version":3,"file":"bitArray.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/bitArray.ts"],"names":[],"mappings":"AAAA,SAAS,YAAY,CAAC,QAAgB;IAClC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;AACpC,CAAC;AAED,SAAS,UAAU,CAAC,QAAgB;IAChC,OAAO,CAAC,IAAI,QAAQ,GAAG,CAAC,CAAC;AAC7B,CAAC;AAED;;;;GAIG;AACH,MAAM,OAAO,QAAQ;IAGjB;;;OAGG;IACH,YAAmC,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QAC3C,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;;OAIG;IACI,GAAG,CAAC,QAAgB;QACvB,IAAI,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACxB,MAAM,IAAI,UAAU,CAAC,wBAAwB,CAAC,CAAC;QACnD,CAAC;QACD,MAAM,SAAS,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;QACrC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACI,GAAG,CAAC,QAAgB,EAAE,KAAc;QACvC,IAAI,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACxB,MAAM,IAAI,UAAU,CAAC,wBAAwB,CAAC,CAAC;QACnD,CAAC;QACD,MAAM,SAAS,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;QACrC,IAAI,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC;QAC1C,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;QAC3C,CAAC;IACL,CAAC;CACJ","sourcesContent":["function getByteIndex(bitIndex: number): number {\r\n    return Math.floor(bitIndex / 8);\r\n}\r\n\r\nfunction getBitMask(bitIndex: number): number {\r\n    return 1 << bitIndex % 8;\r\n}\r\n\r\n/**\r\n * An fixed size array that effectively stores boolean values where each value is a single bit of backing data.\r\n * @remarks\r\n * All bits are initialized to false.\r\n */\r\nexport class BitArray {\r\n    private readonly _byteArray: Uint8Array;\r\n\r\n    /**\r\n     * Creates a new bit array with a fixed size.\r\n     * @param size The number of bits to store.\r\n     */\r\n    public constructor(public readonly size: number) {\r\n        this._byteArray = new Uint8Array(Math.ceil(this.size / 8));\r\n    }\r\n\r\n    /**\r\n     * Gets the current value at the specified index.\r\n     * @param bitIndex The index to get the value from.\r\n     * @returns The value at the specified index.\r\n     */\r\n    public get(bitIndex: number): boolean {\r\n        if (bitIndex >= this.size) {\r\n            throw new RangeError(\"Bit index out of range\");\r\n        }\r\n        const byteIndex = getByteIndex(bitIndex);\r\n        const bitMask = getBitMask(bitIndex);\r\n        return (this._byteArray[byteIndex] & bitMask) !== 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the value at the specified index.\r\n     * @param bitIndex The index to set the value at.\r\n     * @param value The value to set.\r\n     */\r\n    public set(bitIndex: number, value: boolean): void {\r\n        if (bitIndex >= this.size) {\r\n            throw new RangeError(\"Bit index out of range\");\r\n        }\r\n        const byteIndex = getByteIndex(bitIndex);\r\n        const bitMask = getBitMask(bitIndex);\r\n        if (value) {\r\n            this._byteArray[byteIndex] |= bitMask;\r\n        } else {\r\n            this._byteArray[byteIndex] &= ~bitMask;\r\n        }\r\n    }\r\n}\r\n"]}