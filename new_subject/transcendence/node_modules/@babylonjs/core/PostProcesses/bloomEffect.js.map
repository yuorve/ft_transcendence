{"version":3,"file":"bloomEffect.js","sourceRoot":"","sources":["../../../../dev/core/src/PostProcesses/bloomEffect.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostProcessRenderEffect } from \"../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport type { PostProcess } from \"./postProcess\";\r\nimport { ExtractHighlightsPostProcess } from \"./extractHighlightsPostProcess\";\r\nimport { BlurPostProcess } from \"./blurPostProcess\";\r\nimport { BloomMergePostProcess } from \"./bloomMergePostProcess\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { ThinBloomEffect } from \"./thinBloomEffect\";\r\n\r\n/**\r\n * The bloom effect spreads bright areas of an image to simulate artifacts seen in cameras\r\n */\r\nexport class BloomEffect extends PostProcessRenderEffect {\r\n    /**\r\n     * @internal Internal\r\n     */\r\n    public _effects: Array<PostProcess> = [];\r\n\r\n    /**\r\n     * @internal Internal\r\n     */\r\n    public _downscale: ExtractHighlightsPostProcess;\r\n    private _blurX: BlurPostProcess;\r\n    private _blurY: BlurPostProcess;\r\n    private _merge: BloomMergePostProcess;\r\n\r\n    /**\r\n     * The luminance threshold to find bright areas of the image to bloom.\r\n     */\r\n    public get threshold(): number {\r\n        return this._thinBloomEffect.threshold;\r\n    }\r\n    public set threshold(value: number) {\r\n        this._thinBloomEffect.threshold = value;\r\n    }\r\n\r\n    /**\r\n     * The strength of the bloom.\r\n     */\r\n    public get weight(): number {\r\n        return this._thinBloomEffect.weight;\r\n    }\r\n    public set weight(value: number) {\r\n        this._thinBloomEffect.weight = value;\r\n    }\r\n\r\n    /**\r\n     * Specifies the size of the bloom blur kernel, relative to the final output size\r\n     */\r\n    public get kernel(): number {\r\n        return this._thinBloomEffect.kernel;\r\n    }\r\n    public set kernel(value: number) {\r\n        this._thinBloomEffect.kernel = value;\r\n    }\r\n\r\n    public get bloomScale() {\r\n        return this._thinBloomEffect.scale;\r\n    }\r\n\r\n    private _thinBloomEffect: ThinBloomEffect;\r\n\r\n    /**\r\n     * Creates a new instance of @see BloomEffect\r\n     * @param sceneOrEngine The scene or engine the effect belongs to.\r\n     * @param bloomScale The ratio of the blur texture to the input texture that should be used to compute the bloom.\r\n     * @param bloomWeight The strength of bloom.\r\n     * @param bloomKernel The size of the kernel to be used when applying the blur.\r\n     * @param pipelineTextureType The type of texture to be used when performing the post processing.\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(sceneOrEngine: Scene | AbstractEngine, bloomScale: number, bloomWeight: number, bloomKernel: number, pipelineTextureType = 0, blockCompilation = false) {\r\n        const engine = (sceneOrEngine as Scene)._renderForCamera ? (sceneOrEngine as Scene).getEngine() : (sceneOrEngine as AbstractEngine);\r\n        super(\r\n            engine,\r\n            \"bloom\",\r\n            () => {\r\n                return this._effects;\r\n            },\r\n            true\r\n        );\r\n\r\n        this._thinBloomEffect = new ThinBloomEffect(\"bloom\", engine, bloomScale, blockCompilation);\r\n\r\n        this._downscale = new ExtractHighlightsPostProcess(\"highlights\", {\r\n            size: 1.0,\r\n            samplingMode: Texture.BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            textureType: pipelineTextureType,\r\n            blockCompilation,\r\n            effectWrapper: this._thinBloomEffect._downscale,\r\n        });\r\n\r\n        this._blurX = new BlurPostProcess(\"horizontal blur\", this._thinBloomEffect._blurX.direction, this._thinBloomEffect._blurX.kernel, {\r\n            size: bloomScale,\r\n            samplingMode: Texture.BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            textureType: pipelineTextureType,\r\n            blockCompilation,\r\n            effectWrapper: this._thinBloomEffect._blurX,\r\n        });\r\n        this._blurX.alwaysForcePOT = true;\r\n        this._blurX.autoClear = false;\r\n\r\n        this._blurY = new BlurPostProcess(\"vertical blur\", this._thinBloomEffect._blurY.direction, this._thinBloomEffect._blurY.kernel, {\r\n            size: bloomScale,\r\n            samplingMode: Texture.BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            textureType: pipelineTextureType,\r\n            blockCompilation,\r\n            effectWrapper: this._thinBloomEffect._blurY,\r\n        });\r\n        this._blurY.alwaysForcePOT = true;\r\n        this._blurY.autoClear = false;\r\n\r\n        this.kernel = bloomKernel;\r\n\r\n        this._effects = [this._downscale, this._blurX, this._blurY];\r\n\r\n        this._merge = new BloomMergePostProcess(\"bloomMerge\", this._downscale, this._blurY, bloomWeight, {\r\n            size: bloomScale,\r\n            samplingMode: Texture.BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            textureType: pipelineTextureType,\r\n            blockCompilation,\r\n            effectWrapper: this._thinBloomEffect._merge,\r\n        });\r\n        this._merge.autoClear = false;\r\n        this._effects.push(this._merge);\r\n    }\r\n\r\n    /**\r\n     * Disposes each of the internal effects for a given camera.\r\n     * @param camera The camera to dispose the effect on.\r\n     */\r\n    public disposeEffects(camera?: Camera) {\r\n        for (let effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\r\n            this._effects[effectIndex].dispose(camera);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal Internal\r\n     */\r\n    public _updateEffects() {\r\n        for (let effectIndex = 0; effectIndex < this._effects.length; effectIndex++) {\r\n            this._effects[effectIndex].updateEffect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal\r\n     * @returns if all the contained post processes are ready.\r\n     * @internal\r\n     */\r\n    public _isReady() {\r\n        return this._thinBloomEffect.isReady();\r\n    }\r\n}\r\n"]}