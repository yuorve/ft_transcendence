{"version":3,"file":"thinBloomEffect.js","sourceRoot":"","sources":["../../../../dev/core/src/PostProcesses/thinBloomEffect.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,yBAAyB,EAAE,MAAM,6BAA6B,CAAC;AACxE,OAAO,EAAE,OAAO,EAAE,gCAA+B;AACjD,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,gCAAgC,EAAE,MAAM,oCAAoC,CAAC;AAEtF;;GAEG;AACH,MAAM,OAAO,eAAe;IAUxB;;OAEG;IACH,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;IACrC,CAAC;IACD,IAAW,SAAS,CAAC,KAAa;QAC9B,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,KAAK,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC9B,CAAC;IACD,IAAW,MAAM,CAAC,KAAa;QAC3B,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;IAC3C,CAAC;IACD,IAAW,MAAM,CAAC,KAAa;QAC3B,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC5C,CAAC;IAOD;;;;;;OAMG;IACH,YAAY,IAAY,EAAE,MAAgC,EAAE,KAAa,EAAE,gBAAgB,GAAG,KAAK;QAC/F,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,IAAI,gCAAgC,CAAC,IAAI,GAAG,YAAY,EAAE,MAAM,EAAE,EAAE,gBAAgB,EAAE,CAAC,CAAC;QAC1G,IAAI,CAAC,MAAM,GAAG,IAAI,mBAAmB,CAAC,IAAI,GAAG,QAAQ,EAAE,MAAM,EAAE,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,gBAAgB,EAAE,CAAC,CAAC;QAC5G,IAAI,CAAC,MAAM,GAAG,IAAI,mBAAmB,CAAC,IAAI,GAAG,QAAQ,EAAE,MAAM,EAAE,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,gBAAgB,EAAE,CAAC,CAAC;QAC5G,IAAI,CAAC,MAAM,GAAG,IAAI,yBAAyB,CAAC,IAAI,GAAG,QAAQ,EAAE,MAAM,EAAE,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAC/F,CAAC;IAED;;;OAGG;IACI,OAAO;QACV,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IAChH,CAAC;CACJ","sourcesContent":["// eslint-disable-next-line import/no-internal-modules\r\nimport type { Nullable, AbstractEngine } from \"core/index\";\r\nimport { ThinBloomMergePostProcess } from \"./thinBloomMergePostProcess\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { ThinBlurPostProcess } from \"./thinBlurPostProcess\";\r\nimport { ThinExtractHighlightsPostProcess } from \"./thinExtractHighlightsPostProcess\";\r\n\r\n/**\r\n * The bloom effect spreads bright areas of an image to simulate artifacts seen in cameras\r\n */\r\nexport class ThinBloomEffect {\r\n    /** @internal */\r\n    public _downscale: ThinExtractHighlightsPostProcess;\r\n    /** @internal */\r\n    public _blurX: ThinBlurPostProcess;\r\n    /** @internal */\r\n    public _blurY: ThinBlurPostProcess;\r\n    /** @internal */\r\n    public _merge: ThinBloomMergePostProcess;\r\n\r\n    /**\r\n     * The luminance threshold to find bright areas of the image to bloom.\r\n     */\r\n    public get threshold(): number {\r\n        return this._downscale.threshold;\r\n    }\r\n    public set threshold(value: number) {\r\n        this._downscale.threshold = value;\r\n    }\r\n\r\n    /**\r\n     * The strength of the bloom.\r\n     */\r\n    public get weight(): number {\r\n        return this._merge.weight;\r\n    }\r\n    public set weight(value: number) {\r\n        this._merge.weight = value;\r\n    }\r\n\r\n    /**\r\n     * Specifies the size of the bloom blur kernel, relative to the final output size\r\n     */\r\n    public get kernel(): number {\r\n        return this._blurX.kernel / this.scale;\r\n    }\r\n    public set kernel(value: number) {\r\n        this._blurX.kernel = value * this.scale;\r\n        this._blurY.kernel = value * this.scale;\r\n    }\r\n\r\n    /**\r\n     * The ratio of the blur texture to the input texture that should be used to compute the bloom.\r\n     */\r\n    public readonly scale: number;\r\n\r\n    /**\r\n     * Creates a new instance of @see ThinBloomEffect\r\n     * @param name The name of the bloom render effect\r\n     * @param engine The engine which the render effect will be applied. (default: current engine)\r\n     * @param scale The ratio of the blur texture to the input texture that should be used to compute the bloom.\r\n     * @param blockCompilation If shaders should not be compiled when the effect is created (default: false)\r\n     */\r\n    constructor(name: string, engine: Nullable<AbstractEngine>, scale: number, blockCompilation = false) {\r\n        this.scale = scale;\r\n        this._downscale = new ThinExtractHighlightsPostProcess(name + \"_downscale\", engine, { blockCompilation });\r\n        this._blurX = new ThinBlurPostProcess(name + \"_blurX\", engine, new Vector2(1, 0), 10, { blockCompilation });\r\n        this._blurY = new ThinBlurPostProcess(name + \"_blurY\", engine, new Vector2(0, 1), 10, { blockCompilation });\r\n        this._merge = new ThinBloomMergePostProcess(name + \"_merge\", engine, { blockCompilation });\r\n    }\r\n\r\n    /**\r\n     * Checks if the effect is ready to be used\r\n     * @returns if the effect is ready\r\n     */\r\n    public isReady() {\r\n        return this._downscale.isReady() && this._blurX.isReady() && this._blurY.isReady() && this._merge.isReady();\r\n    }\r\n}\r\n"]}