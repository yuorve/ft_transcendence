http {
    upstream frontend_app {
        server frontend:5173;
    }

    upstream backend_app {
        server backend:4000;
    }

    upstream websocket_app {
        server websocket:3000;
    }

    # -------- Servidor HTTP (Puerto 80) --------
    server {
        listen 80;
        listen [::]:80;

        server_name localhost;

        # Redirección permanente de todo el resto del tráfico a HTTPS
        location / {
           return 301 https://$host$request_uri;
        }
    }

    # -------- Servidor HTTPS (Puerto 443) --------
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name localhost;

        # Rutas a los certificados SSL 
        ssl_certificate /etc/ssl/certs/localhost+2.pem;
        ssl_certificate_key /etc/ssl/certs/localhost+2-key.pem;

        # Opciones de SSL (robustas)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;        

        location /api/ { # Ruta para el Backend
            proxy_pass http://backend:4000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Configuración de CORS
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range, Authorization';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range, Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

    location /socket/ { # Ruta para el WebSocket
            proxy_pass http://websocket:3000/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location / { # Ruta para el Frontend
            proxy_pass http://frontend:5173/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}

events {
    worker_connections 1024; # Un valor común
}