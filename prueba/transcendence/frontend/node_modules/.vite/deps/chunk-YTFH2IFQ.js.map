{
  "version": 3,
  "sources": ["../../../dev/core/src/Engines/AbstractEngine/abstractEngine.cubeTexture.ts", "../../../dev/core/src/Misc/dds.ts"],
  "sourcesContent": ["import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { LoadImage } from \"../../Misc/fileTools\";\r\nimport { RandomGUID } from \"../../Misc/guid\";\r\nimport type { IWebRequest } from \"../../Misc/interfaces/iWebRequest\";\r\nimport { AbstractEngine } from \"../abstractEngine\";\r\nimport { _GetCompatibleTextureLoader } from \"core/Materials/Textures/Loaders/textureLoaderManager\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /** @internal */\r\n        createCubeTextureBase(\r\n            rootUrl: string,\r\n            scene: Nullable<Scene>,\r\n            files: Nullable<string[]>,\r\n            noMipmap: boolean,\r\n            onLoad: Nullable<(data?: any) => void>,\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            format: number | undefined,\r\n            forcedExtension: any,\r\n            createPolynomials: boolean,\r\n            lodScale: number,\r\n            lodOffset: number,\r\n            fallback: Nullable<InternalTexture>,\r\n            beforeLoadCubeDataCallback: Nullable<(texture: InternalTexture, data: ArrayBufferView | ArrayBufferView[]) => void>,\r\n            imageHandler: Nullable<(texture: InternalTexture, imgs: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n            useSRGBBuffer: boolean,\r\n            buffer: Nullable<ArrayBufferView>\r\n        ): InternalTexture;\r\n\r\n        /** @internal */\r\n        _partialLoadFile(\r\n            url: string,\r\n            index: number,\r\n            loadedFiles: ArrayBuffer[],\r\n            onfinish: (files: ArrayBuffer[]) => void,\r\n            onErrorCallBack: Nullable<(message?: string, exception?: any) => void>\r\n        ): void;\r\n\r\n        /** @internal */\r\n        _cascadeLoadFiles(scene: Nullable<Scene>, onfinish: (images: ArrayBuffer[]) => void, files: string[], onError: Nullable<(message?: string, exception?: any) => void>): void;\r\n\r\n        /** @internal */\r\n        _cascadeLoadImgs(\r\n            scene: Nullable<Scene>,\r\n            texture: InternalTexture,\r\n            onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n            files: string[],\r\n            onError: Nullable<(message?: string, exception?: any) => void>,\r\n            mimeType?: string\r\n        ): void;\r\n\r\n        /** @internal */\r\n        _partialLoadImg(\r\n            url: string,\r\n            index: number,\r\n            loadedImages: HTMLImageElement[] | ImageBitmap[],\r\n            scene: Nullable<Scene>,\r\n            texture: InternalTexture,\r\n            onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n            onErrorCallBack: Nullable<(message?: string, exception?: any) => void>,\r\n            mimeType?: string\r\n        ): void;\r\n    }\r\n}\r\n\r\nAbstractEngine.prototype._partialLoadFile = function (\r\n    url: string,\r\n    index: number,\r\n    loadedFiles: ArrayBuffer[],\r\n    onfinish: (files: ArrayBuffer[]) => void,\r\n    onErrorCallBack: Nullable<(message?: string, exception?: any) => void> = null\r\n): void {\r\n    const onload = (data: ArrayBuffer) => {\r\n        loadedFiles[index] = data;\r\n        (<any>loadedFiles)._internalCount++;\r\n\r\n        if ((<any>loadedFiles)._internalCount === 6) {\r\n            onfinish(loadedFiles);\r\n        }\r\n    };\r\n\r\n    const onerror = (request?: IWebRequest, exception?: any) => {\r\n        if (onErrorCallBack && request) {\r\n            onErrorCallBack(request.status + \" \" + request.statusText, exception);\r\n        }\r\n    };\r\n\r\n    this._loadFile(url, onload as (data: string | ArrayBuffer) => void, undefined, undefined, true, onerror);\r\n};\r\n\r\nAbstractEngine.prototype._cascadeLoadFiles = function (\r\n    scene: Nullable<Scene>,\r\n    onfinish: (images: ArrayBuffer[]) => void,\r\n    files: string[],\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null\r\n): void {\r\n    const loadedFiles: ArrayBuffer[] = [];\r\n    (<any>loadedFiles)._internalCount = 0;\r\n\r\n    for (let index = 0; index < 6; index++) {\r\n        this._partialLoadFile(files[index], index, loadedFiles, onfinish, onError);\r\n    }\r\n};\r\n\r\nAbstractEngine.prototype._cascadeLoadImgs = function (\r\n    scene: Nullable<Scene>,\r\n    texture: InternalTexture,\r\n    onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n    files: string[],\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n    mimeType?: string\r\n) {\r\n    const loadedImages: HTMLImageElement[] | ImageBitmap[] = [];\r\n    (<any>loadedImages)._internalCount = 0;\r\n\r\n    for (let index = 0; index < 6; index++) {\r\n        this._partialLoadImg(files[index], index, loadedImages, scene, texture, onfinish, onError, mimeType);\r\n    }\r\n};\r\n\r\nAbstractEngine.prototype._partialLoadImg = function (\r\n    url: string,\r\n    index: number,\r\n    loadedImages: HTMLImageElement[] | ImageBitmap[],\r\n    scene: Nullable<Scene>,\r\n    texture: InternalTexture,\r\n    onfinish: Nullable<(texture: InternalTexture, images: HTMLImageElement[] | ImageBitmap[]) => void>,\r\n    onErrorCallBack: Nullable<(message?: string, exception?: any) => void> = null,\r\n    mimeType?: string\r\n) {\r\n    const tokenPendingData = RandomGUID();\r\n\r\n    const onload = (img: HTMLImageElement | ImageBitmap) => {\r\n        loadedImages[index] = img;\r\n        (<any>loadedImages)._internalCount++;\r\n\r\n        if (scene) {\r\n            scene.removePendingData(tokenPendingData);\r\n        }\r\n\r\n        if ((<any>loadedImages)._internalCount === 6 && onfinish) {\r\n            onfinish(texture, loadedImages);\r\n        }\r\n    };\r\n\r\n    const onerror = (message?: string, exception?: any) => {\r\n        if (scene) {\r\n            scene.removePendingData(tokenPendingData);\r\n        }\r\n\r\n        if (onErrorCallBack) {\r\n            onErrorCallBack(message, exception);\r\n        }\r\n    };\r\n\r\n    LoadImage(url, onload, onerror, scene ? scene.offlineProvider : null, mimeType);\r\n    if (scene) {\r\n        scene.addPendingData(tokenPendingData);\r\n    }\r\n};\r\n\r\nAbstractEngine.prototype.createCubeTextureBase = function (\r\n    rootUrl: string,\r\n    scene: Nullable<Scene>,\r\n    files: Nullable<string[]>,\r\n    noMipmap?: boolean,\r\n    onLoad: Nullable<(data?: any) => void> = null,\r\n    onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n    format?: number,\r\n    forcedExtension: any = null,\r\n    createPolynomials: boolean = false,\r\n    lodScale: number = 0,\r\n    lodOffset: number = 0,\r\n    fallback: Nullable<InternalTexture> = null,\r\n    beforeLoadCubeDataCallback: Nullable<(texture: InternalTexture, data: ArrayBufferView | ArrayBufferView[]) => void> = null,\r\n    imageHandler: Nullable<(texture: InternalTexture, imgs: HTMLImageElement[] | ImageBitmap[]) => void> = null,\r\n    useSRGBBuffer = false,\r\n    buffer: Nullable<ArrayBufferView> = null\r\n): InternalTexture {\r\n    const texture = fallback ? fallback : new InternalTexture(this, InternalTextureSource.Cube);\r\n    texture.isCube = true;\r\n    texture.url = rootUrl;\r\n    texture.generateMipMaps = !noMipmap;\r\n    texture._lodGenerationScale = lodScale;\r\n    texture._lodGenerationOffset = lodOffset;\r\n    texture._useSRGBBuffer = !!useSRGBBuffer && this._caps.supportSRGBBuffers && (this.version > 1 || this.isWebGPU || !!noMipmap);\r\n    if (texture !== fallback) {\r\n        texture.label = rootUrl.substring(0, 60); // default label, can be overriden by the caller\r\n    }\r\n\r\n    if (!this._doNotHandleContextLost) {\r\n        texture._extension = forcedExtension;\r\n        texture._files = files;\r\n        texture._buffer = buffer;\r\n    }\r\n\r\n    const originalRootUrl = rootUrl;\r\n    if (this._transformTextureUrl && !fallback) {\r\n        rootUrl = this._transformTextureUrl(rootUrl);\r\n    }\r\n\r\n    const rootUrlWithoutUriParams = rootUrl.split(\"?\")[0];\r\n    const lastDot = rootUrlWithoutUriParams.lastIndexOf(\".\");\r\n    const extension = forcedExtension ? forcedExtension : lastDot > -1 ? rootUrlWithoutUriParams.substring(lastDot).toLowerCase() : \"\";\r\n\r\n    const loaderPromise = _GetCompatibleTextureLoader(extension);\r\n\r\n    const onInternalError = (request?: IWebRequest, exception?: any) => {\r\n        if (rootUrl === originalRootUrl) {\r\n            if (onError && request) {\r\n                onError(request.status + \" \" + request.statusText, exception);\r\n            }\r\n        } else {\r\n            // fall back to the original url if the transformed url fails to load\r\n            Logger.Warn(`Failed to load ${rootUrl}, falling back to the ${originalRootUrl}`);\r\n            this.createCubeTextureBase(\r\n                originalRootUrl,\r\n                scene,\r\n                files,\r\n                !!noMipmap,\r\n                onLoad,\r\n                onError,\r\n                format,\r\n                forcedExtension,\r\n                createPolynomials,\r\n                lodScale,\r\n                lodOffset,\r\n                texture,\r\n                beforeLoadCubeDataCallback,\r\n                imageHandler,\r\n                useSRGBBuffer,\r\n                buffer\r\n            );\r\n        }\r\n    };\r\n\r\n    if (loaderPromise) {\r\n        loaderPromise.then((loader) => {\r\n            const onloaddata = (data: ArrayBufferView | ArrayBufferView[]) => {\r\n                if (beforeLoadCubeDataCallback) {\r\n                    beforeLoadCubeDataCallback(texture, data);\r\n                }\r\n                loader.loadCubeData(data, texture, createPolynomials, onLoad, onError);\r\n            };\r\n            if (buffer) {\r\n                onloaddata(buffer);\r\n            } else if (files && files.length === 6) {\r\n                if (loader.supportCascades) {\r\n                    this._cascadeLoadFiles(scene, (images) => onloaddata(images.map((image) => new Uint8Array(image))), files, onError);\r\n                } else {\r\n                    if (onError) {\r\n                        onError(\"Textures type does not support cascades.\");\r\n                    } else {\r\n                        Logger.Warn(\"Texture loader does not support cascades.\");\r\n                    }\r\n                }\r\n            } else {\r\n                this._loadFile(rootUrl, (data) => onloaddata(new Uint8Array(data as ArrayBuffer)), undefined, undefined, true, onInternalError);\r\n            }\r\n        });\r\n    } else {\r\n        if (!files || files.length === 0) {\r\n            throw new Error(\"Cannot load cubemap because files were not defined, or the correct loader was not found.\");\r\n        }\r\n\r\n        this._cascadeLoadImgs(\r\n            scene,\r\n            texture,\r\n            (texture: InternalTexture, imgs: HTMLImageElement[] | ImageBitmap[]) => {\r\n                if (imageHandler) {\r\n                    imageHandler(texture, imgs);\r\n                }\r\n            },\r\n            files,\r\n            onError\r\n        );\r\n    }\r\n\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    return texture;\r\n};\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Clamp } from \"../Maths/math.scalar.functions\";\r\nimport type { SphericalPolynomial } from \"../Maths/sphericalPolynomial\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { CubeMapToSphericalPolynomialTools } from \"../Misc/HighDynamicRange/cubemapToSphericalPolynomial\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { FromHalfFloat, ToHalfFloat } from \"./textureTools\";\r\n\r\nimport \"../Engines/AbstractEngine/abstractEngine.cubeTexture\";\r\n\r\n// Based on demo done by Brandon Jones - http://media.tojicode.com/webgl-samples/dds.html\r\n// All values and structures referenced from:\r\n// http://msdn.microsoft.com/en-us/library/bb943991.aspx/\r\nconst DDS_MAGIC = 0x20534444;\r\n\r\nconst //DDSD_CAPS = 0x1,\r\n    //DDSD_HEIGHT = 0x2,\r\n    //DDSD_WIDTH = 0x4,\r\n    //DDSD_PITCH = 0x8,\r\n    //DDSD_PIXELFORMAT = 0x1000,\r\n    DDSD_MIPMAPCOUNT = 0x20000;\r\n//DDSD_LINEARSIZE = 0x80000,\r\n//DDSD_DEPTH = 0x800000;\r\n\r\n// var DDSCAPS_COMPLEX = 0x8,\r\n//     DDSCAPS_MIPMAP = 0x400000,\r\n//     DDSCAPS_TEXTURE = 0x1000;\r\n\r\nconst DDSCAPS2_CUBEMAP = 0x200;\r\n// DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\r\n// DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\r\n// DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\r\n// DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\r\n// DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\r\n// DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\r\n// DDSCAPS2_VOLUME = 0x200000;\r\n\r\nconst //DDPF_ALPHAPIXELS = 0x1,\r\n    //DDPF_ALPHA = 0x2,\r\n    DDPF_FOURCC = 0x4,\r\n    DDPF_RGB = 0x40,\r\n    //DDPF_YUV = 0x200,\r\n    DDPF_LUMINANCE = 0x20000;\r\n\r\nfunction FourCCToInt32(value: string) {\r\n    return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\r\n}\r\n\r\nfunction Int32ToFourCC(value: number) {\r\n    return String.fromCharCode(value & 0xff, (value >> 8) & 0xff, (value >> 16) & 0xff, (value >> 24) & 0xff);\r\n}\r\n\r\nconst FOURCC_DXT1 = FourCCToInt32(\"DXT1\");\r\nconst FOURCC_DXT3 = FourCCToInt32(\"DXT3\");\r\nconst FOURCC_DXT5 = FourCCToInt32(\"DXT5\");\r\nconst FOURCC_DX10 = FourCCToInt32(\"DX10\");\r\nconst FOURCC_D3DFMT_R16G16B16A16F = 113;\r\nconst FOURCC_D3DFMT_R32G32B32A32F = 116;\r\n\r\nconst DXGI_FORMAT_R32G32B32A32_FLOAT = 2;\r\nconst DXGI_FORMAT_R16G16B16A16_FLOAT = 10;\r\nconst DXGI_FORMAT_B8G8R8X8_UNORM = 88;\r\n\r\nconst headerLengthInt = 31; // The header length in 32 bit ints\r\n\r\n// Offsets into the header array\r\nconst off_magic = 0;\r\n\r\nconst off_size = 1;\r\nconst off_flags = 2;\r\nconst off_height = 3;\r\nconst off_width = 4;\r\n\r\nconst off_mipmapCount = 7;\r\n\r\nconst off_pfFlags = 20;\r\nconst off_pfFourCC = 21;\r\nconst off_RGBbpp = 22;\r\nconst off_RMask = 23;\r\nconst off_GMask = 24;\r\nconst off_BMask = 25;\r\nconst off_AMask = 26;\r\n// var off_caps1 = 27;\r\nconst off_caps2 = 28;\r\n// var off_caps3 = 29;\r\n// var off_caps4 = 30;\r\nconst off_dxgiFormat = 32;\r\n\r\n/**\r\n * Direct draw surface info\r\n * @see https://docs.microsoft.com/en-us/windows/desktop/direct3ddds/dx-graphics-dds-pguide\r\n */\r\nexport interface DDSInfo {\r\n    /**\r\n     * Width of the texture\r\n     */\r\n    width: number;\r\n    /**\r\n     * Width of the texture\r\n     */\r\n    height: number;\r\n    /**\r\n     * Number of Mipmaps for the texture\r\n     * @see https://en.wikipedia.org/wiki/Mipmap\r\n     */\r\n    mipmapCount: number;\r\n    /**\r\n     * If the textures format is a known fourCC format\r\n     * @see https://www.fourcc.org/\r\n     */\r\n    isFourCC: boolean;\r\n    /**\r\n     * If the texture is an RGB format eg. DXGI_FORMAT_B8G8R8X8_UNORM format\r\n     */\r\n    isRGB: boolean;\r\n    /**\r\n     * If the texture is a lumincance format\r\n     */\r\n    isLuminance: boolean;\r\n    /**\r\n     * If this is a cube texture\r\n     * @see https://docs.microsoft.com/en-us/windows/desktop/direct3ddds/dds-file-layout-for-cubic-environment-maps\r\n     */\r\n    isCube: boolean;\r\n    /**\r\n     * If the texture is a compressed format eg. FOURCC_DXT1\r\n     */\r\n    isCompressed: boolean;\r\n    /**\r\n     * The dxgiFormat of the texture\r\n     * @see https://docs.microsoft.com/en-us/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format\r\n     */\r\n    dxgiFormat: number;\r\n    /**\r\n     * Texture type eg. Engine.TEXTURETYPE_UNSIGNED_BYTE, Engine.TEXTURETYPE_FLOAT\r\n     */\r\n    textureType: number;\r\n    /**\r\n     * Sphericle polynomial created for the dds texture\r\n     */\r\n    sphericalPolynomial?: SphericalPolynomial;\r\n}\r\n\r\n/**\r\n * Class used to provide DDS decompression tools\r\n */\r\nexport class DDSTools {\r\n    /**\r\n     * Gets or sets a boolean indicating that LOD info is stored in alpha channel (false by default)\r\n     */\r\n    public static StoreLODInAlphaChannel = false;\r\n\r\n    /**\r\n     * Gets DDS information from an array buffer\r\n     * @param data defines the array buffer view to read data from\r\n     * @returns the DDS information\r\n     */\r\n    public static GetDDSInfo(data: ArrayBufferView): DDSInfo {\r\n        const header = new Int32Array(data.buffer, data.byteOffset, headerLengthInt);\r\n        const extendedHeader = new Int32Array(data.buffer, data.byteOffset, headerLengthInt + 4);\r\n\r\n        let mipmapCount = 1;\r\n        if (header[off_flags] & DDSD_MIPMAPCOUNT) {\r\n            mipmapCount = Math.max(1, header[off_mipmapCount]);\r\n        }\r\n\r\n        const fourCC = header[off_pfFourCC];\r\n        const dxgiFormat = fourCC === FOURCC_DX10 ? extendedHeader[off_dxgiFormat] : 0;\r\n        let textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n\r\n        switch (fourCC) {\r\n            case FOURCC_D3DFMT_R16G16B16A16F:\r\n                textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n                break;\r\n            case FOURCC_D3DFMT_R32G32B32A32F:\r\n                textureType = Constants.TEXTURETYPE_FLOAT;\r\n                break;\r\n            case FOURCC_DX10:\r\n                if (dxgiFormat === DXGI_FORMAT_R16G16B16A16_FLOAT) {\r\n                    textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n                    break;\r\n                }\r\n                if (dxgiFormat === DXGI_FORMAT_R32G32B32A32_FLOAT) {\r\n                    textureType = Constants.TEXTURETYPE_FLOAT;\r\n                    break;\r\n                }\r\n        }\r\n\r\n        return {\r\n            width: header[off_width],\r\n            height: header[off_height],\r\n            mipmapCount: mipmapCount,\r\n            isFourCC: (header[off_pfFlags] & DDPF_FOURCC) === DDPF_FOURCC,\r\n            isRGB: (header[off_pfFlags] & DDPF_RGB) === DDPF_RGB,\r\n            isLuminance: (header[off_pfFlags] & DDPF_LUMINANCE) === DDPF_LUMINANCE,\r\n            isCube: (header[off_caps2] & DDSCAPS2_CUBEMAP) === DDSCAPS2_CUBEMAP,\r\n            isCompressed: fourCC === FOURCC_DXT1 || fourCC === FOURCC_DXT3 || fourCC === FOURCC_DXT5,\r\n            dxgiFormat: dxgiFormat,\r\n            textureType: textureType,\r\n        };\r\n    }\r\n\r\n    private static _GetHalfFloatAsFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Float32Array {\r\n        const destArray = new Float32Array(dataLength);\r\n        const srcData = new Uint16Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n                destArray[index] = FromHalfFloat(srcData[srcPos]);\r\n                destArray[index + 1] = FromHalfFloat(srcData[srcPos + 1]);\r\n                destArray[index + 2] = FromHalfFloat(srcData[srcPos + 2]);\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = lod;\r\n                } else {\r\n                    destArray[index + 3] = FromHalfFloat(srcData[srcPos + 3]);\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetHalfFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint16Array {\r\n        if (DDSTools.StoreLODInAlphaChannel) {\r\n            const destArray = new Uint16Array(dataLength);\r\n            const srcData = new Uint16Array(arrayBuffer, dataOffset);\r\n            let index = 0;\r\n            for (let y = 0; y < height; y++) {\r\n                for (let x = 0; x < width; x++) {\r\n                    const srcPos = (x + y * width) * 4;\r\n                    destArray[index] = srcData[srcPos];\r\n                    destArray[index + 1] = srcData[srcPos + 1];\r\n                    destArray[index + 2] = srcData[srcPos + 2];\r\n                    destArray[index + 3] = ToHalfFloat(lod);\r\n                    index += 4;\r\n                }\r\n            }\r\n\r\n            return destArray;\r\n        }\r\n\r\n        return new Uint16Array(arrayBuffer, dataOffset, dataLength);\r\n    }\r\n\r\n    private static _GetFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Float32Array {\r\n        if (DDSTools.StoreLODInAlphaChannel) {\r\n            const destArray = new Float32Array(dataLength);\r\n            const srcData = new Float32Array(arrayBuffer, dataOffset);\r\n            let index = 0;\r\n            for (let y = 0; y < height; y++) {\r\n                for (let x = 0; x < width; x++) {\r\n                    const srcPos = (x + y * width) * 4;\r\n                    destArray[index] = srcData[srcPos];\r\n                    destArray[index + 1] = srcData[srcPos + 1];\r\n                    destArray[index + 2] = srcData[srcPos + 2];\r\n                    destArray[index + 3] = lod;\r\n                    index += 4;\r\n                }\r\n            }\r\n\r\n            return destArray;\r\n        }\r\n        return new Float32Array(arrayBuffer, dataOffset, dataLength);\r\n    }\r\n\r\n    private static _GetFloatAsHalfFloatRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint16Array {\r\n        const destArray = new Uint16Array(dataLength);\r\n        const srcData = new Float32Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                destArray[index] = ToHalfFloat(srcData[index]);\r\n                destArray[index + 1] = ToHalfFloat(srcData[index + 1]);\r\n                destArray[index + 2] = ToHalfFloat(srcData[index + 2]);\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = ToHalfFloat(lod);\r\n                } else {\r\n                    destArray[index + 3] = ToHalfFloat(srcData[index + 3]);\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetFloatAsUIntRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint8Array {\r\n        const destArray = new Uint8Array(dataLength);\r\n        const srcData = new Float32Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n                destArray[index] = Clamp(srcData[srcPos]) * 255;\r\n                destArray[index + 1] = Clamp(srcData[srcPos + 1]) * 255;\r\n                destArray[index + 2] = Clamp(srcData[srcPos + 2]) * 255;\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = lod;\r\n                } else {\r\n                    destArray[index + 3] = Clamp(srcData[srcPos + 3]) * 255;\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetHalfFloatAsUIntRGBAArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number): Uint8Array {\r\n        const destArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint16Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n                destArray[index] = Clamp(FromHalfFloat(srcData[srcPos])) * 255;\r\n                destArray[index + 1] = Clamp(FromHalfFloat(srcData[srcPos + 1])) * 255;\r\n                destArray[index + 2] = Clamp(FromHalfFloat(srcData[srcPos + 2])) * 255;\r\n                if (DDSTools.StoreLODInAlphaChannel) {\r\n                    destArray[index + 3] = lod;\r\n                } else {\r\n                    destArray[index + 3] = Clamp(FromHalfFloat(srcData[srcPos + 3])) * 255;\r\n                }\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return destArray;\r\n    }\r\n\r\n    private static _GetRGBAArrayBuffer(\r\n        width: number,\r\n        height: number,\r\n        dataOffset: number,\r\n        dataLength: number,\r\n        arrayBuffer: ArrayBuffer,\r\n        rOffset: number,\r\n        gOffset: number,\r\n        bOffset: number,\r\n        aOffset: number\r\n    ): Uint8Array {\r\n        const byteArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint8Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 4;\r\n\r\n                byteArray[index] = srcData[srcPos + rOffset];\r\n                byteArray[index + 1] = srcData[srcPos + gOffset];\r\n                byteArray[index + 2] = srcData[srcPos + bOffset];\r\n                byteArray[index + 3] = srcData[srcPos + aOffset];\r\n                index += 4;\r\n            }\r\n        }\r\n\r\n        return byteArray;\r\n    }\r\n\r\n    private static _ExtractLongWordOrder(value: number): number {\r\n        if (value === 0 || value === 255 || value === -16777216) {\r\n            return 0;\r\n        }\r\n\r\n        return 1 + DDSTools._ExtractLongWordOrder(value >> 8);\r\n    }\r\n\r\n    private static _GetRGBArrayBuffer(\r\n        width: number,\r\n        height: number,\r\n        dataOffset: number,\r\n        dataLength: number,\r\n        arrayBuffer: ArrayBuffer,\r\n        rOffset: number,\r\n        gOffset: number,\r\n        bOffset: number\r\n    ): Uint8Array {\r\n        const byteArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint8Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = (x + y * width) * 3;\r\n\r\n                byteArray[index] = srcData[srcPos + rOffset];\r\n                byteArray[index + 1] = srcData[srcPos + gOffset];\r\n                byteArray[index + 2] = srcData[srcPos + bOffset];\r\n                index += 3;\r\n            }\r\n        }\r\n\r\n        return byteArray;\r\n    }\r\n\r\n    private static _GetLuminanceArrayBuffer(width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer): Uint8Array {\r\n        const byteArray = new Uint8Array(dataLength);\r\n        const srcData = new Uint8Array(arrayBuffer, dataOffset);\r\n        let index = 0;\r\n        for (let y = 0; y < height; y++) {\r\n            for (let x = 0; x < width; x++) {\r\n                const srcPos = x + y * width;\r\n                byteArray[index] = srcData[srcPos];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return byteArray;\r\n    }\r\n\r\n    /**\r\n     * Uploads DDS Levels to a Babylon Texture\r\n     * @internal\r\n     */\r\n    public static UploadDDSLevels(\r\n        engine: AbstractEngine,\r\n        texture: InternalTexture,\r\n        data: ArrayBufferView,\r\n        info: DDSInfo,\r\n        loadMipmaps: boolean,\r\n        faces: number,\r\n        lodIndex = -1,\r\n        currentFace?: number,\r\n        destTypeMustBeFilterable = true\r\n    ) {\r\n        let sphericalPolynomialFaces: Nullable<Array<ArrayBufferView>> = null;\r\n        if (info.sphericalPolynomial) {\r\n            sphericalPolynomialFaces = [] as ArrayBufferView[];\r\n        }\r\n        const ext = !!engine.getCaps().s3tc;\r\n\r\n        // TODO WEBGPU Once generateMipMaps is split into generateMipMaps + hasMipMaps in InternalTexture this line can be removed\r\n        texture.generateMipMaps = loadMipmaps;\r\n\r\n        const header = new Int32Array(data.buffer, data.byteOffset, headerLengthInt);\r\n        let fourCC: number,\r\n            width: number,\r\n            height: number,\r\n            dataLength: number = 0,\r\n            dataOffset: number;\r\n        let byteArray: Uint8Array, mipmapCount: number, mip: number;\r\n        let internalCompressedFormat = 0;\r\n        let blockBytes = 1;\r\n\r\n        if (header[off_magic] !== DDS_MAGIC) {\r\n            Logger.Error(\"Invalid magic number in DDS header\");\r\n            return;\r\n        }\r\n\r\n        if (!info.isFourCC && !info.isRGB && !info.isLuminance) {\r\n            Logger.Error(\"Unsupported format, must contain a FourCC, RGB or LUMINANCE code\");\r\n            return;\r\n        }\r\n\r\n        if (info.isCompressed && !ext) {\r\n            Logger.Error(\"Compressed textures are not supported on this platform.\");\r\n            return;\r\n        }\r\n\r\n        let bpp = header[off_RGBbpp];\r\n        dataOffset = header[off_size] + 4;\r\n\r\n        let computeFormats = false;\r\n\r\n        if (info.isFourCC) {\r\n            fourCC = header[off_pfFourCC];\r\n            switch (fourCC) {\r\n                case FOURCC_DXT1:\r\n                    blockBytes = 8;\r\n                    internalCompressedFormat = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT1;\r\n                    break;\r\n                case FOURCC_DXT3:\r\n                    blockBytes = 16;\r\n                    internalCompressedFormat = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3;\r\n                    break;\r\n                case FOURCC_DXT5:\r\n                    blockBytes = 16;\r\n                    internalCompressedFormat = Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5;\r\n                    break;\r\n                case FOURCC_D3DFMT_R16G16B16A16F:\r\n                    computeFormats = true;\r\n                    bpp = 64;\r\n                    break;\r\n                case FOURCC_D3DFMT_R32G32B32A32F:\r\n                    computeFormats = true;\r\n                    bpp = 128;\r\n                    break;\r\n                case FOURCC_DX10: {\r\n                    // There is an additionnal header so dataOffset need to be changed\r\n                    dataOffset += 5 * 4; // 5 uints\r\n\r\n                    let supported = false;\r\n                    switch (info.dxgiFormat) {\r\n                        case DXGI_FORMAT_R16G16B16A16_FLOAT:\r\n                            computeFormats = true;\r\n                            bpp = 64;\r\n                            supported = true;\r\n                            break;\r\n                        case DXGI_FORMAT_R32G32B32A32_FLOAT:\r\n                            computeFormats = true;\r\n                            bpp = 128;\r\n                            supported = true;\r\n                            break;\r\n                        case DXGI_FORMAT_B8G8R8X8_UNORM:\r\n                            info.isRGB = true;\r\n                            info.isFourCC = false;\r\n                            bpp = 32;\r\n                            supported = true;\r\n                            break;\r\n                    }\r\n\r\n                    if (supported) {\r\n                        break;\r\n                    }\r\n                }\r\n                // eslint-disable-next-line no-fallthrough\r\n                default:\r\n                    Logger.Error([\"Unsupported FourCC code:\", Int32ToFourCC(fourCC)]);\r\n                    return;\r\n            }\r\n        }\r\n\r\n        const rOffset = DDSTools._ExtractLongWordOrder(header[off_RMask]);\r\n        const gOffset = DDSTools._ExtractLongWordOrder(header[off_GMask]);\r\n        const bOffset = DDSTools._ExtractLongWordOrder(header[off_BMask]);\r\n        const aOffset = DDSTools._ExtractLongWordOrder(header[off_AMask]);\r\n\r\n        if (computeFormats) {\r\n            internalCompressedFormat = engine._getRGBABufferInternalSizedFormat(info.textureType);\r\n        }\r\n\r\n        mipmapCount = 1;\r\n        if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\r\n            mipmapCount = Math.max(1, header[off_mipmapCount]);\r\n        }\r\n\r\n        const startFace = currentFace || 0;\r\n        const caps = engine.getCaps();\r\n        for (let face = startFace; face < faces; face++) {\r\n            width = header[off_width];\r\n            height = header[off_height];\r\n\r\n            for (mip = 0; mip < mipmapCount; ++mip) {\r\n                if (lodIndex === -1 || lodIndex === mip) {\r\n                    // In case of fixed LOD, if the lod has just been uploaded, early exit.\r\n                    const i = lodIndex === -1 ? mip : 0;\r\n\r\n                    if (!info.isCompressed && info.isFourCC) {\r\n                        texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n                        dataLength = width * height * 4;\r\n                        let floatArray: Nullable<ArrayBufferView> = null;\r\n\r\n                        if (engine._badOS || engine._badDesktopOS || (!caps.textureHalfFloat && !caps.textureFloat)) {\r\n                            // Required because iOS has many issues with float and half float generation\r\n                            if (bpp === 128) {\r\n                                floatArray = DDSTools._GetFloatAsUIntRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i);\r\n                                if (sphericalPolynomialFaces && i == 0) {\r\n                                    sphericalPolynomialFaces.push(DDSTools._GetFloatRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i));\r\n                                }\r\n                            } else if (bpp === 64) {\r\n                                floatArray = DDSTools._GetHalfFloatAsUIntRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i);\r\n                                if (sphericalPolynomialFaces && i == 0) {\r\n                                    sphericalPolynomialFaces.push(\r\n                                        DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i)\r\n                                    );\r\n                                }\r\n                            }\r\n\r\n                            texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                        } else {\r\n                            const floatAvailable = caps.textureFloat && ((destTypeMustBeFilterable && caps.textureFloatLinearFiltering) || !destTypeMustBeFilterable);\r\n                            const halfFloatAvailable = caps.textureHalfFloat && ((destTypeMustBeFilterable && caps.textureHalfFloatLinearFiltering) || !destTypeMustBeFilterable);\r\n\r\n                            const destType =\r\n                                (bpp === 128 || (bpp === 64 && !halfFloatAvailable)) && floatAvailable\r\n                                    ? Constants.TEXTURETYPE_FLOAT\r\n                                    : (bpp === 64 || (bpp === 128 && !floatAvailable)) && halfFloatAvailable\r\n                                      ? Constants.TEXTURETYPE_HALF_FLOAT\r\n                                      : Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n\r\n                            let dataGetter: (width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number) => ArrayBufferView;\r\n                            let dataGetterPolynomial: Nullable<\r\n                                (width: number, height: number, dataOffset: number, dataLength: number, arrayBuffer: ArrayBuffer, lod: number) => ArrayBufferView\r\n                            > = null;\r\n\r\n                            switch (bpp) {\r\n                                case 128: {\r\n                                    switch (destType) {\r\n                                        case Constants.TEXTURETYPE_FLOAT:\r\n                                            dataGetter = DDSTools._GetFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = null;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_HALF_FLOAT:\r\n                                            dataGetter = DDSTools._GetFloatAsHalfFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                                            dataGetter = DDSTools._GetFloatAsUIntRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                    }\r\n                                    break;\r\n                                }\r\n                                default: {\r\n                                    // 64 bpp\r\n                                    switch (destType) {\r\n                                        case Constants.TEXTURETYPE_FLOAT:\r\n                                            dataGetter = DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = null;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_HALF_FLOAT:\r\n                                            dataGetter = DDSTools._GetHalfFloatRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                        case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                                            dataGetter = DDSTools._GetHalfFloatAsUIntRGBAArrayBuffer;\r\n                                            dataGetterPolynomial = DDSTools._GetHalfFloatAsFloatRGBAArrayBuffer;\r\n                                            break;\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            texture.type = destType;\r\n\r\n                            floatArray = dataGetter(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i);\r\n\r\n                            if (sphericalPolynomialFaces && i == 0) {\r\n                                sphericalPolynomialFaces.push(\r\n                                    dataGetterPolynomial ? dataGetterPolynomial(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, i) : floatArray\r\n                                );\r\n                            }\r\n                        }\r\n\r\n                        if (floatArray) {\r\n                            engine._uploadDataToTextureDirectly(texture, floatArray, face, i);\r\n                        }\r\n                    } else if (info.isRGB) {\r\n                        texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                        if (bpp === 24) {\r\n                            texture.format = Constants.TEXTUREFORMAT_RGB;\r\n                            dataLength = width * height * 3;\r\n                            byteArray = DDSTools._GetRGBArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, rOffset, gOffset, bOffset);\r\n                            engine._uploadDataToTextureDirectly(texture, byteArray, face, i);\r\n                        } else {\r\n                            // 32\r\n                            texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n                            dataLength = width * height * 4;\r\n                            byteArray = DDSTools._GetRGBAArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer, rOffset, gOffset, bOffset, aOffset);\r\n                            engine._uploadDataToTextureDirectly(texture, byteArray, face, i);\r\n                        }\r\n                    } else if (info.isLuminance) {\r\n                        const unpackAlignment = engine._getUnpackAlignement();\r\n                        const unpaddedRowSize = width;\r\n                        const paddedRowSize = Math.floor((width + unpackAlignment - 1) / unpackAlignment) * unpackAlignment;\r\n                        dataLength = paddedRowSize * (height - 1) + unpaddedRowSize;\r\n\r\n                        byteArray = DDSTools._GetLuminanceArrayBuffer(width, height, data.byteOffset + dataOffset, dataLength, data.buffer);\r\n                        texture.format = Constants.TEXTUREFORMAT_LUMINANCE;\r\n                        texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n\r\n                        engine._uploadDataToTextureDirectly(texture, byteArray, face, i);\r\n                    } else {\r\n                        dataLength = (((Math.max(4, width) / 4) * Math.max(4, height)) / 4) * blockBytes;\r\n                        byteArray = new Uint8Array(data.buffer, data.byteOffset + dataOffset, dataLength);\r\n\r\n                        texture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n                        engine._uploadCompressedDataToTextureDirectly(texture, internalCompressedFormat, width, height, byteArray, face, i);\r\n                    }\r\n                }\r\n                dataOffset += bpp ? width * height * (bpp / 8) : dataLength;\r\n                width *= 0.5;\r\n                height *= 0.5;\r\n\r\n                width = Math.max(1.0, width);\r\n                height = Math.max(1.0, height);\r\n            }\r\n\r\n            if (currentFace !== undefined) {\r\n                // Loading a single face\r\n                break;\r\n            }\r\n        }\r\n        if (sphericalPolynomialFaces && sphericalPolynomialFaces.length > 0) {\r\n            info.sphericalPolynomial = CubeMapToSphericalPolynomialTools.ConvertCubeMapToSphericalPolynomial({\r\n                size: header[off_width],\r\n                right: sphericalPolynomialFaces[0],\r\n                left: sphericalPolynomialFaces[1],\r\n                up: sphericalPolynomialFaces[2],\r\n                down: sphericalPolynomialFaces[3],\r\n                front: sphericalPolynomialFaces[4],\r\n                back: sphericalPolynomialFaces[5],\r\n                format: Constants.TEXTUREFORMAT_RGBA,\r\n                type: Constants.TEXTURETYPE_FLOAT,\r\n                gammaSpace: false,\r\n            });\r\n        } else {\r\n            info.sphericalPolynomial = undefined;\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["texture"]
}
