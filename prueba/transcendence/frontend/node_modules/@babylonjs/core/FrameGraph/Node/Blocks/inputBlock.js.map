{"version":3,"file":"inputBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FrameGraph/Node/Blocks/inputBlock.ts"],"names":[],"mappings":";AAcA,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,wCAAwC,EAAE,MAAM,+BAA+B,CAAC;AACzF,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACxD,OAAO,EAAE,sBAAsB,EAA0B,MAAM,mCAAmC,CAAC;AACnG,OAAO,EAAE,4BAA4B,EAAE,mCAAmC,EAAE,MAAM,qCAAqC,CAAC;AACxH,OAAO,EAAE,SAAS,EAAE,MAAM,4BAA4B,CAAC;AAMvD;;GAEG;AACH,MAAM,OAAO,yBAA0B,SAAQ,oBAAoB;IAc/D;;OAEG;IACH,IAAW,IAAI;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED;;;;;;OAMG;IACH,YAAmB,IAAY,EAAE,UAAsB,EAAE,KAAY,EAAE,OAAiD,wCAAwC,CAAC,SAAS;QACtK,KAAK,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QA5B3B,iBAAY,GAAuC,IAAI,CAAC;QACxD,UAAK,GAA6C,wCAAwC,CAAC,SAAS,CAAC;QAE7G,0DAA0D;QACnD,6BAAwB,GAAG,IAAI,UAAU,EAA6B,CAAC;QAE9E,qDAAqD;QAE9C,eAAU,GAAG,KAAK,CAAC;QAsBtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACI,eAAe;QAClB,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;YAChB,KAAK,wCAAwC,CAAC,OAAO,CAAC;YACtD,KAAK,wCAAwC,CAAC,gBAAgB,CAAC;YAC/D,KAAK,wCAAwC,CAAC,kBAAkB,CAAC;YACjE,KAAK,wCAAwC,CAAC,iBAAiB,CAAC;YAChE,KAAK,wCAAwC,CAAC,kBAAkB,CAAC;YACjE,KAAK,wCAAwC,CAAC,aAAa,CAAC;YAC5D,KAAK,wCAAwC,CAAC,mBAAmB,CAAC;YAClE,KAAK,wCAAwC,CAAC,oBAAoB,CAAC;YACnE,KAAK,wCAAwC,CAAC,oBAAoB,CAAC;YACnE,KAAK,wCAAwC,CAAC,eAAe,CAAC;YAC9D,KAAK,wCAAwC,CAAC,qBAAqB,CAAC;YACpE,KAAK,wCAAwC,CAAC,iBAAiB,CAAC;YAChE,KAAK,wCAAwC,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC9D,MAAM,OAAO,GAAqC;oBAC9C,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;oBACjC,OAAO,EAAE;wBACL,aAAa,EAAE,KAAK;wBACpB,KAAK,EAAE,CAAC,SAAS,CAAC,yBAAyB,CAAC;wBAC5C,OAAO,EAAE,CAAC,SAAS,CAAC,kBAAkB,CAAC;wBACvC,OAAO,EAAE,CAAC;wBACV,cAAc,EAAE,CAAC,KAAK,CAAC;qBAC1B;oBACD,gBAAgB,EAAE,IAAI;iBACzB,CAAC;gBACF,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;gBAC/B,MAAM;YACV,CAAC;YACD,KAAK,wCAAwC,CAAC,6BAA6B,CAAC,CAAC,CAAC;gBAC1E,MAAM,OAAO,GAAqC;oBAC9C,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;oBACjC,OAAO,EAAE;wBACL,aAAa,EAAE,KAAK;wBACpB,KAAK,EAAE,CAAC,SAAS,CAAC,yBAAyB,CAAC;wBAC5C,OAAO,EAAE,CAAC,SAAS,CAAC,8BAA8B,CAAC;wBACnD,cAAc,EAAE,CAAC,KAAK,CAAC;wBACvB,MAAM,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;wBACnB,OAAO,EAAE,CAAC;qBACb;oBACD,gBAAgB,EAAE,IAAI;iBACzB,CAAC;gBACF,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;gBAC/B,MAAM;YACV,CAAC;YACD,KAAK,wCAAwC,CAAC,UAAU;gBACpD,IAAI,CAAC,KAAK,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,CAAC;gBACjD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,MAAM;YACV,KAAK,wCAAwC,CAAC,MAAM;gBAChD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,MAAM;YACV;gBACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAC/B,CAAC;IACL,CAAC;IAED;;OAEG;IACH,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,IAAW,KAAK,CAAC,KAAyC;QACtD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;QAC9B,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;IAED;;;OAGG;IACI,aAAa;QAChB,OAAO,IAAI,CAAC,YAAiB,CAAC;IAClC,CAAC;IAED;;;OAGG;IACI,2BAA2B;QAC9B,IAAK,IAAI,CAAC,YAAgC,CAAC,WAAW,EAAE,CAAC;YACrD,OAAO,IAAI,CAAC,YAA+B,CAAC;QAChD,CAAC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACa,YAAY;QACxB,OAAO,2BAA2B,CAAC;IACvC,CAAC;IAED;;OAEG;IACH,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACI,YAAY;QACf,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,wCAAwC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACnF,CAAC;IAED;;;OAGG;IACI,YAAY;QACf,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,wCAAwC,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAC1F,CAAC;IAED;;;OAGG;IACI,kCAAkC;QACrC,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,wCAAwC,CAAC,uCAAuC,CAAC,KAAK,CAAC,CAAC;IAChH,CAAC;IAED;;;OAGG;IACI,QAAQ;QACX,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,wCAAwC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/E,CAAC;IAED;;;OAGG;IACI,YAAY;QACf,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,wCAAwC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACnF,CAAC;IAED;;;OAGG;IACI,aAAa;QAChB,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,wCAAwC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACpF,CAAC;IAEkB,WAAW,CAAC,KAAgC;QAC3D,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEzB,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC;gBACtB,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,4BAA4B,CAAC;YACrD,CAAC;iBAAM,IAAI,IAAI,CAAC,kCAAkC,EAAE,EAAE,CAAC;gBACnD,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,mCAAmC,CAAC;YAC5D,CAAC;iBAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,EAAU,CAAC;YACrD,CAAC;iBAAM,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC;gBAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,EAAwB,CAAC;YACnE,CAAC;iBAAM,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;gBAC9B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,EAAgB,CAAC;YAC3D,CAAC;iBAAM,CAAC;gBACJ,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE,CAAC;oBAChE,MAAM,IAAI,KAAK,CAAC,8CAA8C,IAAI,CAAC,IAAI,cAAc,CAAC,CAAC;gBAC3F,CAAC;gBACD,MAAM,OAAO,GAAG,IAAI,CAAC,2BAA2B,EAAE,CAAC;gBACnD,IAAI,OAAO,EAAE,CAAC;oBACV,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,KAAgC,CAAC,CAAC;gBACxI,CAAC;YACL,CAAC;YACD,OAAO;QACX,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,wCAAwC,CAAC,uBAAuB,CAAC,KAAK,CAAC,EAAE,CAAC;YACvF,MAAM,oBAAoB,GAAG,IAAI,CAAC,eAAmD,CAAC;YAEtF,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBACxB,MAAM,IAAI,KAAK,CAAC,wEAAwE,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YAC1G,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;QACnH,CAAC;IACL,CAAC;IAEe,OAAO;QACnB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC;QACtC,KAAK,CAAC,OAAO,EAAE,CAAC;IACpB,CAAC;IAEkB,mBAAmB;QAClC,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,iBAAiB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACzE,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;gBACnB,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,sBAAsB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YACvG,CAAC;iBAAM,CAAC;gBACJ,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,8DAA8D,CAAC,CAAC;YACxG,CAAC;QACL,CAAC;aAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;YACzB,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,4DAA4D,CAAC,CAAC;QACtG,CAAC;aAAM,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC;YAC7B,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,sEAAsE,CAAC,CAAC;QAChH,CAAC;aAAM,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;YAC9B,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,iBAAiB,wEAAwE,CAAC,CAAC;QAClH,CAAC;QACD,OAAO,KAAK,CAAC,mBAAmB,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAC;IAEe,SAAS;QACrB,MAAM,mBAAmB,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAC9C,mBAAmB,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrC,mBAAmB,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACjD,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,mBAAmB,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAC/D,CAAC;QACD,OAAO,mBAAmB,CAAC;IAC/B,CAAC;IAEe,YAAY,CAAC,mBAAwB;QACjD,KAAK,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;QACxC,IAAI,CAAC,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,mBAAmB,CAAC,UAAU,CAAC;QACjD,IAAI,mBAAmB,CAAC,eAAe,EAAE,CAAC;YACtC,IAAI,mBAAmB,CAAC,eAAe,CAAC,OAAO,CAAC,kBAAkB,KAAK,SAAS,EAAE,CAAC;gBAC/E,0DAA0D;gBAC1D,mBAAmB,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,GAAG,CAAC,mBAAmB,CAAC,eAAe,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YAC3H,CAAC;YACD,IAAI,CAAC,eAAe,GAAG,mBAAmB,CAAC,eAAe,CAAC;QAC/D,CAAC;IACL,CAAC;CACJ;AA7QU;IADN,sBAAsB,CAAC,aAAa,0CAAkC,YAAY,CAAC;6DAC1D;AA+Q9B,aAAa,CAAC,mCAAmC,EAAE,yBAAyB,CAAC,CAAC","sourcesContent":["/* eslint-disable import/no-internal-modules */\r\nimport type {\r\n    NodeRenderGraphConnectionPoint,\r\n    Scene,\r\n    FrameGraph,\r\n    NodeRenderGraphBuildState,\r\n    Camera,\r\n    InternalTexture,\r\n    Nullable,\r\n    FrameGraphTextureCreationOptions,\r\n    FrameGraphTextureHandle,\r\n    FrameGraphObjectList,\r\n    IShadowLight,\r\n} from \"core/index\";\r\nimport { Observable } from \"../../../Misc/observable\";\r\nimport { NodeRenderGraphBlockConnectionPointTypes } from \"../Types/nodeRenderGraphTypes\";\r\nimport { NodeRenderGraphBlock } from \"../nodeRenderGraphBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../../Decorators/nodeDecorator\";\r\nimport { backbufferColorTextureHandle, backbufferDepthStencilTextureHandle } from \"../../../FrameGraph/frameGraphTypes\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\n\r\nexport type NodeRenderGraphValueType = InternalTexture | Camera | FrameGraphObjectList | IShadowLight;\r\n\r\nexport type NodeRenderGraphInputCreationOptions = FrameGraphTextureCreationOptions;\r\n\r\n/**\r\n * Block used to expose an input value\r\n */\r\nexport class NodeRenderGraphInputBlock extends NodeRenderGraphBlock {\r\n    private _storedValue: Nullable<NodeRenderGraphValueType> = null;\r\n    private _type: NodeRenderGraphBlockConnectionPointTypes = NodeRenderGraphBlockConnectionPointTypes.Undefined;\r\n\r\n    /** Gets an observable raised when the value is changed */\r\n    public onValueChangedObservable = new Observable<NodeRenderGraphInputBlock>();\r\n\r\n    /** Indicates that the input is externally managed */\r\n    @editableInPropertyPage(\"Is external\", PropertyTypeForEdition.Boolean, \"PROPERTIES\")\r\n    public isExternal = false;\r\n\r\n    /** Gets or sets the options to create the input value */\r\n    public creationOptions: NodeRenderGraphInputCreationOptions;\r\n\r\n    /**\r\n     * Gets or sets the connection point type (default is Undefined)\r\n     */\r\n    public get type(): NodeRenderGraphBlockConnectionPointTypes {\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Creates a new NodeRenderGraphInputBlock\r\n     * @param name defines the block name\r\n     * @param frameGraph defines the hosting frame graph\r\n     * @param scene defines the hosting scene\r\n     * @param type defines the type of the input (can be set to NodeRenderGraphBlockConnectionPointTypes.Undefined)\r\n     */\r\n    public constructor(name: string, frameGraph: FrameGraph, scene: Scene, type: NodeRenderGraphBlockConnectionPointTypes = NodeRenderGraphBlockConnectionPointTypes.Undefined) {\r\n        super(name, frameGraph, scene);\r\n\r\n        this._type = type;\r\n        this._isInput = true;\r\n        this.registerOutput(\"output\", type);\r\n        this.setDefaultValue();\r\n    }\r\n\r\n    /**\r\n     * Set the input block to its default value (based on its type)\r\n     */\r\n    public setDefaultValue() {\r\n        switch (this.type) {\r\n            case NodeRenderGraphBlockConnectionPointTypes.Texture:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureViewDepth:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureScreenDepth:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureViewNormal:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureWorldNormal:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureAlbedo:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureReflectivity:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureLocalPosition:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureWorldPosition:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureVelocity:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureLinearVelocity:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureIrradiance:\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureAlbedoSqrt: {\r\n                const options: FrameGraphTextureCreationOptions = {\r\n                    size: { width: 100, height: 100 },\r\n                    options: {\r\n                        createMipMaps: false,\r\n                        types: [Constants.TEXTURETYPE_UNSIGNED_BYTE],\r\n                        formats: [Constants.TEXTUREFORMAT_RGBA],\r\n                        samples: 1,\r\n                        useSRGBBuffers: [false],\r\n                    },\r\n                    sizeIsPercentage: true,\r\n                };\r\n                this.creationOptions = options;\r\n                break;\r\n            }\r\n            case NodeRenderGraphBlockConnectionPointTypes.TextureDepthStencilAttachment: {\r\n                const options: FrameGraphTextureCreationOptions = {\r\n                    size: { width: 100, height: 100 },\r\n                    options: {\r\n                        createMipMaps: false,\r\n                        types: [Constants.TEXTURETYPE_UNSIGNED_BYTE],\r\n                        formats: [Constants.TEXTUREFORMAT_DEPTH24_STENCIL8],\r\n                        useSRGBBuffers: [false],\r\n                        labels: [this.name],\r\n                        samples: 1,\r\n                    },\r\n                    sizeIsPercentage: true,\r\n                };\r\n                this.creationOptions = options;\r\n                break;\r\n            }\r\n            case NodeRenderGraphBlockConnectionPointTypes.ObjectList:\r\n                this.value = { meshes: [], particleSystems: [] };\r\n                this.isExternal = true;\r\n                break;\r\n            case NodeRenderGraphBlockConnectionPointTypes.Camera:\r\n                this.value = this._scene.cameras[0];\r\n                this.isExternal = true;\r\n                break;\r\n            default:\r\n                this.isExternal = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the value of that point.\r\n     */\r\n    public get value(): Nullable<NodeRenderGraphValueType> {\r\n        return this._storedValue;\r\n    }\r\n\r\n    public set value(value: Nullable<NodeRenderGraphValueType>) {\r\n        this._storedValue = value;\r\n        this.output.value = undefined;\r\n        this.onValueChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets the value as a specific type\r\n     * @returns the value as a specific type\r\n     */\r\n    public getTypedValue<T extends NodeRenderGraphValueType>(): T {\r\n        return this._storedValue as T;\r\n    }\r\n\r\n    /**\r\n     * Gets the value as an internal texture\r\n     * @returns The internal texture stored in value if value is an internal texture, otherwise null\r\n     */\r\n    public getInternalTextureFromValue(): Nullable<InternalTexture> {\r\n        if ((this._storedValue as InternalTexture)._swapAndDie) {\r\n            return this._storedValue as InternalTexture;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public override getClassName() {\r\n        return \"NodeRenderGraphInputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeRenderGraphConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Check if the block is a texture of any type\r\n     * @returns true if the block is a texture\r\n     */\r\n    public isAnyTexture(): boolean {\r\n        return (this.type & NodeRenderGraphBlockConnectionPointTypes.TextureAll) !== 0;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the connection point is the back buffer texture\r\n     * @returns true if the connection point is the back buffer texture\r\n     */\r\n    public isBackBuffer() {\r\n        return (this.type & NodeRenderGraphBlockConnectionPointTypes.TextureBackBuffer) !== 0;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the connection point is a depth/stencil attachment texture\r\n     * @returns true if the connection point is a depth/stencil attachment texture\r\n     */\r\n    public isBackBufferDepthStencilAttachment() {\r\n        return (this.type & NodeRenderGraphBlockConnectionPointTypes.TextureBackBufferDepthStencilAttachment) !== 0;\r\n    }\r\n\r\n    /**\r\n     * Check if the block is a camera\r\n     * @returns true if the block is a camera\r\n     */\r\n    public isCamera(): boolean {\r\n        return (this.type & NodeRenderGraphBlockConnectionPointTypes.Camera) !== 0;\r\n    }\r\n\r\n    /**\r\n     * Check if the block is an object list\r\n     * @returns true if the block is an object list\r\n     */\r\n    public isObjectList(): boolean {\r\n        return (this.type & NodeRenderGraphBlockConnectionPointTypes.ObjectList) !== 0;\r\n    }\r\n\r\n    /**\r\n     * Check if the block is a shadow light\r\n     * @returns true if the block is a shadow light\r\n     */\r\n    public isShadowLight(): boolean {\r\n        return (this.type & NodeRenderGraphBlockConnectionPointTypes.ShadowLight) !== 0;\r\n    }\r\n\r\n    protected override _buildBlock(state: NodeRenderGraphBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (this.isExternal) {\r\n            if (this.isBackBuffer()) {\r\n                this.output.value = backbufferColorTextureHandle;\r\n            } else if (this.isBackBufferDepthStencilAttachment()) {\r\n                this.output.value = backbufferDepthStencilTextureHandle;\r\n            } else if (this.isCamera()) {\r\n                this.output.value = this.getTypedValue<Camera>();\r\n            } else if (this.isObjectList()) {\r\n                this.output.value = this.getTypedValue<FrameGraphObjectList>();\r\n            } else if (this.isShadowLight()) {\r\n                this.output.value = this.getTypedValue<IShadowLight>();\r\n            } else {\r\n                if (this._storedValue === undefined || this._storedValue === null) {\r\n                    throw new Error(`NodeRenderGraphInputBlock: External input \"${this.name}\" is not set`);\r\n                }\r\n                const texture = this.getInternalTextureFromValue();\r\n                if (texture) {\r\n                    this.output.value = this._frameGraph.textureManager.importTexture(this.name, texture, this.output.value as FrameGraphTextureHandle);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        if ((this.type & NodeRenderGraphBlockConnectionPointTypes.TextureAllButBackBuffer) !== 0) {\r\n            const textureCreateOptions = this.creationOptions as FrameGraphTextureCreationOptions;\r\n\r\n            if (!textureCreateOptions) {\r\n                throw new Error(`NodeRenderGraphInputBlock: Creation options are missing for texture \"${this.name}\"`);\r\n            }\r\n\r\n            this.output.value = this._frameGraph.textureManager.createRenderTargetTexture(this.name, textureCreateOptions);\r\n        }\r\n    }\r\n\r\n    public override dispose() {\r\n        this._storedValue = null;\r\n        this.onValueChangedObservable.clear();\r\n        super.dispose();\r\n    }\r\n\r\n    protected override _dumpPropertiesCode() {\r\n        const codes: string[] = [];\r\n        codes.push(`${this._codeVariableName}.isExternal = ${this.isExternal};`);\r\n        if (this.isAnyTexture()) {\r\n            if (!this.isExternal) {\r\n                codes.push(`${this._codeVariableName}.creationOptions = ${JSON.stringify(this.creationOptions)};`);\r\n            } else {\r\n                codes.push(`${this._codeVariableName}.value = EXTERNAL_TEXTURE; // TODO: set the external texture`);\r\n            }\r\n        } else if (this.isCamera()) {\r\n            codes.push(`${this._codeVariableName}.value = EXTERNAL_CAMERA; // TODO: set the external camera`);\r\n        } else if (this.isObjectList()) {\r\n            codes.push(`${this._codeVariableName}.value = EXTERNAL_OBJECT_LIST; // TODO: set the external object list`);\r\n        } else if (this.isShadowLight()) {\r\n            codes.push(`${this._codeVariableName}.value = EXTERNAL_SHADOW_LIGHT; // TODO: set the external shadow light`);\r\n        }\r\n        return super._dumpPropertiesCode() + codes.join(\"\\n\");\r\n    }\r\n\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.type = this.type;\r\n        serializationObject.isExternal = this.isExternal;\r\n        if (this.creationOptions) {\r\n            serializationObject.creationOptions = this.creationOptions;\r\n        }\r\n        return serializationObject;\r\n    }\r\n\r\n    public override _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n        this._type = serializationObject.type;\r\n        this.output.type = this._type;\r\n        this.isExternal = serializationObject.isExternal;\r\n        if (serializationObject.creationOptions) {\r\n            if (serializationObject.creationOptions.options.depthTextureFormat !== undefined) {\r\n                // Backward compatibility - remove this code in the future\r\n                serializationObject.creationOptions.options.formats = [serializationObject.creationOptions.options.depthTextureFormat];\r\n            }\r\n            this.creationOptions = serializationObject.creationOptions;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.NodeRenderGraphInputBlock\", NodeRenderGraphInputBlock);\r\n"]}