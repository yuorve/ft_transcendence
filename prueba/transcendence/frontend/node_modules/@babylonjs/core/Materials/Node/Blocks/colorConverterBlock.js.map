{"version":3,"file":"colorConverterBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Materials/Node/Blocks/colorConverterBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\r\n\r\n/**\r\n * Block used to apply rgb/hsl convertions\r\n */\r\nexport class ColorConverterBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ColorConverterBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"rgb \", NodeMaterialBlockConnectionPointTypes.Color3, true);\r\n        this.registerInput(\"hsl \", NodeMaterialBlockConnectionPointTypes.Color3, true);\r\n\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3);\r\n        this.registerOutput(\"hsl\", NodeMaterialBlockConnectionPointTypes.Color3);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public override getClassName() {\r\n        return \"ColorConverterBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb value (input)\r\n     */\r\n    public get rgbIn(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the hsl value (input)\r\n     */\r\n    public get hslIn(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb value (output)\r\n     */\r\n    public get rgbOut(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the hsl value (output)\r\n     */\r\n    public get hslOut(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    protected override _inputRename(name: string) {\r\n        if (name === \"rgb \") {\r\n            return \"rgbIn\";\r\n        }\r\n        if (name === \"hsl \") {\r\n            return \"hslIn\";\r\n        }\r\n        return name;\r\n    }\r\n\r\n    protected override _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const rgbInput = this.rgbIn;\r\n        const hslInput = this.hslIn;\r\n\r\n        const rbgOutput = this._outputs[0];\r\n        const hslOutput = this._outputs[1];\r\n\r\n        const vec3 = state._getShaderType(NodeMaterialBlockConnectionPointTypes.Vector3);\r\n\r\n        let rgb2hsl = `\r\n            vec3 rgb2hsl(vec3 color) {\r\n                float r = color.r;\r\n                float g = color.g;\r\n                float b = color.b;\r\n\r\n                float maxc = max(r, max(g, b));\r\n                float minc = min(r, min(g, b));\r\n                float h = 0.0;\r\n                float s = 0.0;\r\n                float l = (maxc + minc) / 2.0;\r\n\r\n                if (maxc != minc) {\r\n                    float d = maxc - minc;\r\n                    if (l > 0.5) {\r\n                        s = d / (2.0 - maxc - minc);\r\n                    } else {\r\n                        s = d / (maxc + minc);\r\n                    }\r\n\r\n                    if (maxc == r) {\r\n                        float add = 0.0;\r\n                        if (g < b) {\r\n                            add = 6.0;\r\n                        }\r\n                        h = (g - b) / d + add;\r\n                    } else if (maxc == g) {\r\n                        h = (b - r) / d + 2.0;\r\n                    } else if (maxc == b) {\r\n                        h = (r - g) / d + 4.0;\r\n                    }\r\n                    h /= 6.0;\r\n                }\r\n\r\n                return vec3(h, s, l);\r\n            }`;\r\n\r\n        let hue2rgb = `\r\n            float hue2rgb(float p, float q, float tt) {\r\n                float t = tt;\r\n                if (t < 0.0) {\r\n                    t += 1.0;\r\n                }\r\n                if (t > 1.0) {\r\n                    t -= 1.0;\r\n                }\r\n                if (t < 1.0/6.0) {\r\n                    return p + (q - p) * 6.0 * t;\r\n                }\r\n                if (t < 1.0/2.0) {\r\n                    return q;\r\n                }\r\n                if (t < 2.0/3.0) {\r\n                    return p + (q - p) * (2.0/3.0 - t) * 6.0;\r\n                }\r\n                return p;\r\n            }`;\r\n\r\n        let hsl2rgb = `\r\n            vec3 hsl2rgb(vec3 hsl) {\r\n                float h = hsl.x;\r\n                float s = hsl.y;\r\n                float l = hsl.z;\r\n\r\n                float r;\r\n                float g;\r\n                float b;\r\n\r\n                if (s == 0.0) {\r\n                    // Achromatic (grey)\r\n                    r = l;\r\n                    g = l;\r\n                    b = l; \r\n                } else {\r\n                    float q;\r\n                \r\n                    if (l < 0.5) {\r\n                        q = l * (1.0 + s);\r\n                    } else {\r\n                        q = (l + s - l * s);\r\n                    }\r\n\r\n                    float p = 2.0 * l - q;\r\n\r\n                    r = hue2rgb(p, q, h + 1.0/3.0);\r\n                    g = hue2rgb(p, q, h);\r\n                    b = hue2rgb(p, q, h - 1.0/3.0);\r\n                }\r\n\r\n                return vec3(r, g, b);\r\n            }`;\r\n\r\n        if (state.shaderLanguage === ShaderLanguage.WGSL) {\r\n            rgb2hsl = state._babylonSLtoWGSL(rgb2hsl);\r\n            hue2rgb = state._babylonSLtoWGSL(hue2rgb);\r\n            hsl2rgb = state._babylonSLtoWGSL(hsl2rgb);\r\n        }\r\n\r\n        state._emitFunction(\"rgb2hsl\", rgb2hsl, \"\");\r\n        state._emitFunction(\"hue2rgb\", hue2rgb, \"\");\r\n        state._emitFunction(\"hsl2rgb\", hsl2rgb, \"\");\r\n\r\n        if (rgbInput.isConnected) {\r\n            if (rbgOutput.hasEndpoints) {\r\n                state.compilationString += state._declareOutput(rbgOutput) + ` = ${rgbInput.associatedVariableName};\\n`;\r\n            }\r\n\r\n            if (hslOutput.hasEndpoints) {\r\n                state.compilationString += state._declareOutput(hslOutput) + ` = rgb2hsl(${rgbInput.associatedVariableName});\\n`;\r\n            }\r\n        } else if (hslInput.isConnected) {\r\n            if (rbgOutput.hasEndpoints) {\r\n                state.compilationString += state._declareOutput(rbgOutput) + ` = hsl2rgb(${hslInput.associatedVariableName});\\n`;\r\n            }\r\n            if (hslOutput.hasEndpoints) {\r\n                state.compilationString += state._declareOutput(hslOutput) + ` = ${hslInput.associatedVariableName};\\n`;\r\n            }\r\n        } else {\r\n            if (rbgOutput.hasEndpoints) {\r\n                state.compilationString += state._declareOutput(rbgOutput) + ` =  ${vec3}(0.);\\n`;\r\n            }\r\n\r\n            if (hslOutput.hasEndpoints) {\r\n                state.compilationString += state._declareOutput(hslOutput) + ` =  ${vec3}(0.);\\n`;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ColorConverterBlock\", ColorConverterBlock);\r\n"]}