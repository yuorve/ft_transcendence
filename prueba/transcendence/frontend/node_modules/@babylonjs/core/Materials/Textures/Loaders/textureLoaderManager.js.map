{"version":3,"file":"textureLoaderManager.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Materials/Textures/Loaders/textureLoaderManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IInternalTextureLoader } from \"./internalTextureLoader\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\nconst _registeredTextureLoaders = new Map<string, (mimeType?: string) => IInternalTextureLoader | Promise<IInternalTextureLoader>>();\r\n\r\n/**\r\n * Registers a texture loader.\r\n * If a loader for the extension exists in the registry, it will be replaced.\r\n * @param extension The name of the loader extension.\r\n * @param loaderFactory The factory function that creates the loader extension.\r\n */\r\nexport function registerTextureLoader(extension: string, loaderFactory: (mimeType?: string) => IInternalTextureLoader | Promise<IInternalTextureLoader>): void {\r\n    if (unregisterTextureLoader(extension)) {\r\n        Logger.Warn(`Extension with the name '${name}' already exists`);\r\n    }\r\n    _registeredTextureLoaders.set(extension, loaderFactory);\r\n}\r\n\r\n/**\r\n * Unregisters a texture loader.\r\n * @param extension The name of the loader extension.\r\n * @returns A boolean indicating whether the extension has been unregistered\r\n */\r\nexport function unregisterTextureLoader(extension: string): boolean {\r\n    return _registeredTextureLoaders.delete(extension);\r\n}\r\n\r\n/**\r\n * Function used to get the correct texture loader for a specific extension.\r\n * @param extension defines the file extension of the file being loaded\r\n * @param mimeType defines the optional mime type of the file being loaded\r\n * @returns the IInternalTextureLoader or null if it wasn't found\r\n */\r\nexport function _GetCompatibleTextureLoader(extension: string, mimeType?: string): Nullable<Promise<IInternalTextureLoader>> {\r\n    if (mimeType === \"image/ktx\" || mimeType === \"image/ktx2\") {\r\n        extension = \".ktx\";\r\n    }\r\n    if (!_registeredTextureLoaders.has(extension)) {\r\n        if (extension.endsWith(\".ies\")) {\r\n            registerTextureLoader(\".ies\", () => import(\"./iesTextureLoader\").then((module) => new module._IESTextureLoader()));\r\n        }\r\n        if (extension.endsWith(\".dds\")) {\r\n            registerTextureLoader(\".dds\", () => import(\"./ddsTextureLoader\").then((module) => new module._DDSTextureLoader()));\r\n        }\r\n        if (extension.endsWith(\".basis\")) {\r\n            registerTextureLoader(\".basis\", () => import(\"./basisTextureLoader\").then((module) => new module._BasisTextureLoader()));\r\n        }\r\n        if (extension.endsWith(\".env\")) {\r\n            registerTextureLoader(\".env\", () => import(\"./envTextureLoader\").then((module) => new module._ENVTextureLoader()));\r\n        }\r\n        if (extension.endsWith(\".hdr\")) {\r\n            registerTextureLoader(\".hdr\", () => import(\"./hdrTextureLoader\").then((module) => new module._HDRTextureLoader()));\r\n        }\r\n        // The \".ktx2\" file extension is still up for debate: https://github.com/KhronosGroup/KTX-Specification/issues/18\r\n        if (extension.endsWith(\".ktx\") || extension.endsWith(\".ktx2\")) {\r\n            registerTextureLoader(\".ktx\", () => import(\"./ktxTextureLoader\").then((module) => new module._KTXTextureLoader()));\r\n            registerTextureLoader(\".ktx2\", () => import(\"./ktxTextureLoader\").then((module) => new module._KTXTextureLoader()));\r\n        }\r\n        if (extension.endsWith(\".tga\")) {\r\n            registerTextureLoader(\".tga\", () => import(\"./tgaTextureLoader\").then((module) => new module._TGATextureLoader()));\r\n        }\r\n        if (extension.endsWith(\".exr\")) {\r\n            registerTextureLoader(\".exr\", () => import(\"./exrTextureLoader\").then((module) => new module._ExrTextureLoader()));\r\n        }\r\n    }\r\n    const registered = _registeredTextureLoaders.get(extension);\r\n    return registered ? Promise.resolve(registered(mimeType)) : null;\r\n}\r\n"]}