{"version":3,"file":"textureHelper.functions.js","sourceRoot":"","sources":["../../../../../dev/core/src/Materials/Textures/textureHelper.functions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,mCAA+B;AAEnD;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,MAAc;IACzC,OAAO,CACH,MAAM,KAAK,SAAS,CAAC,8BAA8B;QACnD,MAAM,KAAK,SAAS,CAAC,2BAA2B;QAChD,MAAM,KAAK,SAAS,CAAC,qBAAqB;QAC1C,MAAM,KAAK,SAAS,CAAC,qBAAqB;QAC1C,MAAM,KAAK,SAAS,CAAC,mCAAmC;QACxD,MAAM,KAAK,SAAS,CAAC,mCAAmC;QACxD,MAAM,KAAK,SAAS,CAAC,sBAAsB,CAC9C,CAAC;AACN,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CAAC,MAAc;IACjD,QAAQ,MAAM,EAAE,CAAC;QACb,KAAK,SAAS,CAAC,8BAA8B,CAAC;QAC9C,KAAK,SAAS,CAAC,mCAAmC,CAAC;QACnD,KAAK,SAAS,CAAC,mCAAmC,CAAC;QACnD,KAAK,SAAS,CAAC,2BAA2B,CAAC;QAC3C,KAAK,SAAS,CAAC,qBAAqB;YAChC,OAAO,SAAS,CAAC,iBAAiB,CAAC;QACvC,KAAK,SAAS,CAAC,qBAAqB;YAChC,OAAO,SAAS,CAAC,0BAA0B,CAAC;QAChD,KAAK,SAAS,CAAC,sBAAsB;YACjC,OAAO,SAAS,CAAC,yBAAyB,CAAC;IACnD,CAAC;IAED,OAAO,SAAS,CAAC,yBAAyB,CAAC;AAC/C,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,gBAAgB,CAAC,MAAc;IAC3C,OAAO,CACH,MAAM,KAAK,SAAS,CAAC,8BAA8B;QACnD,MAAM,KAAK,SAAS,CAAC,mCAAmC;QACxD,MAAM,KAAK,SAAS,CAAC,mCAAmC;QACxD,MAAM,KAAK,SAAS,CAAC,sBAAsB,CAC9C,CAAC;AACN,CAAC","sourcesContent":["import { Constants } from \"core/Engines/constants\";\r\n\r\n/**\r\n * Checks if a given format is a depth texture format\r\n * @param format Format to check\r\n * @returns True if the format is a depth texture format\r\n */\r\nexport function IsDepthTexture(format: number): boolean {\r\n    return (\r\n        format === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 ||\r\n        format === Constants.TEXTUREFORMAT_DEPTH32_FLOAT ||\r\n        format === Constants.TEXTUREFORMAT_DEPTH16 ||\r\n        format === Constants.TEXTUREFORMAT_DEPTH24 ||\r\n        format === Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 ||\r\n        format === Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8 ||\r\n        format === Constants.TEXTUREFORMAT_STENCIL8\r\n    );\r\n}\r\n\r\n/**\r\n * Gets the type of a depth texture for a given format\r\n * @param format Format of the texture\r\n * @returns The type of the depth texture\r\n */\r\nexport function GetTypeForDepthTexture(format: number): number {\r\n    switch (format) {\r\n        case Constants.TEXTUREFORMAT_DEPTH24_STENCIL8:\r\n        case Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8:\r\n        case Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8:\r\n        case Constants.TEXTUREFORMAT_DEPTH32_FLOAT:\r\n        case Constants.TEXTUREFORMAT_DEPTH24:\r\n            return Constants.TEXTURETYPE_FLOAT;\r\n        case Constants.TEXTUREFORMAT_DEPTH16:\r\n            return Constants.TEXTURETYPE_UNSIGNED_SHORT;\r\n        case Constants.TEXTUREFORMAT_STENCIL8:\r\n            return Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n    }\r\n\r\n    return Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n}\r\n\r\n/**\r\n * Checks if a given format has a stencil aspect\r\n * @param format Format to check\r\n * @returns True if the format has a stencil aspect\r\n */\r\nexport function HasStencilAspect(format: number): boolean {\r\n    return (\r\n        format === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 ||\r\n        format === Constants.TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 ||\r\n        format === Constants.TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8 ||\r\n        format === Constants.TEXTUREFORMAT_STENCIL8\r\n    );\r\n}\r\n"]}