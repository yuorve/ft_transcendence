{"version":3,"file":"dracoEncoder.types.js","sourceRoot":"","sources":["../../../../../dev/core/src/Meshes/Compression/dracoEncoder.types.ts"],"names":[],"mappings":"","sourcesContent":["import type { VertexDataTypedArray } from \"core/Buffers/bufferUtils\";\nimport type { Nullable } from \"core/types\";\n\n/**\n * The available Draco attribute names.\n */\nexport type DracoAttributeName = \"POSITION\" | \"NORMAL\" | \"COLOR\" | \"TEX_COORD\" | \"GENERIC\";\n\n/**\n * Draco encoding method (from EncoderMethod enum in `draco_encoder.ts`).\n */\nexport type DracoEncoderMethod = \"MESH_SEQUENTIAL_ENCODING\" | \"MESH_EDGEBREAKER_ENCODING\";\n\n/**\n * Options for a particular encoding.\n */\nexport interface IDracoEncoderOptions {\n    /**\n     * Tune how fast decoding should be (0 = fastest but least compressed, 10 = slowest but most compressed).\n     */\n    decodeSpeed?: number;\n    /**\n     * Tune how fast encoding should be (0 = fastest but least compressed, 10 = slowest but most compressed).\n     */\n    encodeSpeed?: number;\n    /**\n     * The method to use for encoding the data (EDGEBREAKER or SEQUENTIAL). Defaults to EDGEBREAKER, if possible.\n     */\n    method?: DracoEncoderMethod;\n    /**\n     * The number of bits to use for each DRACO attribute kind.\n     */\n    quantizationBits?: Record<DracoAttributeName, number>;\n    /**\n     * The list of BABYLON attribute kinds to skip exporting, if present. Defaults to none.\n     */\n    excludedAttributes?: string[];\n}\n\n/**\n * Encoder parameter carrying Babylon attribute data.\n * @internal\n */\nexport interface IDracoAttributeData {\n    /**\n     * The kind of the attribute.\n     */\n    kind: string;\n    /**\n     * The Draco name for the kind of the attribute.\n     */\n    dracoName: DracoAttributeName;\n    /**\n     * The size of the attribute.\n     */\n    size: number;\n    /**\n     * The buffer view of the attribute.\n     */\n    data: VertexDataTypedArray;\n}\n\n/**\n * Encoded Draco mesh data.\n * @internal\n */\nexport interface IDracoEncodedMeshData {\n    /**\n     * The encoded data.\n     */\n    data: Int8Array;\n    /**\n     * A map of Babylon vertex attributes to their Draco unique ids in the encoded data.\n     */\n    attributeIDs: Record<string, number>;\n}\n\n/**\n * @internal\n */\ninterface EncodeDoneMessage {\n    id: \"encodeMeshDone\";\n    encodedMeshData: Nullable<IDracoEncodedMeshData>;\n}\n\n/**\n * @internal\n */\nexport type EncoderMessage = EncodeDoneMessage;\n"]}