{"version":3,"file":"lattice.js","sourceRoot":"","sources":["../../../../dev/core/src/Meshes/lattice.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"./mesh\";\r\nimport type { FloatArray } from \"core/types\";\r\nimport { VertexBuffer } from \"./buffer\";\r\nimport { Clamp } from \"core/Maths/math.scalar.functions\";\r\n\r\n/**\r\n * Interface used to define options for creating a lattice\r\n */\r\nexport interface ILatticeOptions {\r\n    /** resolution on x axis */\r\n    resolutionX: number;\r\n    /** resolution on y axis */\r\n    resolutionY: number;\r\n    /** resolution on z axis */\r\n    resolutionZ: number;\r\n    /** the lattice position in object space */\r\n    position: Vector3;\r\n    /** size of the lattice along each axis in object space */\r\n    size: Vector3;\r\n    /** Optional mesh to adapt the size to */\r\n    autoAdaptToMesh?: Mesh;\r\n}\r\n\r\n/**\r\n * Class used to represent a lattice\r\n * #MDVD75#18 - Moving lattice bounds\r\n * #MDVD75#23 - Twist\r\n */\r\nexport class Lattice {\r\n    private _resolutionX: number;\r\n    private _resolutionY: number;\r\n    private _resolutionZ: number;\r\n    private _position: Vector3;\r\n    private _size: Vector3;\r\n    private _cellSize = new Vector3();\r\n\r\n    private _data: Vector3[][][];\r\n\r\n    // Cache\r\n    private _min = new Vector3(-0.5, -0.5, -0.5);\r\n    private _max = new Vector3(0.5, 0.5, 0.5);\r\n    private _localPos = new Vector3();\r\n    private _tmpVector = new Vector3();\r\n    private _lerpVector0 = new Vector3();\r\n    private _lerpVector1 = new Vector3();\r\n    private _lerpVector2 = new Vector3();\r\n    private _lerpVector3 = new Vector3();\r\n    private _lerpVector4 = new Vector3();\r\n    private _lerpVector5 = new Vector3();\r\n\r\n    /**\r\n     * @returns the string \"Lattice\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Lattice\";\r\n    }\r\n\r\n    /**\r\n     * Gets the resolution on x axis\r\n     */\r\n    public get resolutionX(): number {\r\n        return this._resolutionX;\r\n    }\r\n\r\n    /**\r\n     * Gets the resolution on y axis\r\n     */\r\n    public get resolutionY(): number {\r\n        return this._resolutionY;\r\n    }\r\n\r\n    /**\r\n     * Gets the resolution on z axis\r\n     */\r\n    public get resolutionZ(): number {\r\n        return this._resolutionZ;\r\n    }\r\n\r\n    /**\r\n     * Gets the size of the lattice along each axis in object space\r\n     * Updating the size requires you to call update afterwards\r\n     */\r\n    public get size(): Vector3 {\r\n        return this._size;\r\n    }\r\n\r\n    /**\r\n     * Gets the lattice position in object space\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    /**\r\n     * Gets the data of the lattice\r\n     */\r\n    public get data(): Vector3[][][] {\r\n        return this._data;\r\n    }\r\n\r\n    /**\r\n     * Gets the size of each cell in the lattice\r\n     */\r\n    public get cellSize(): Vector3 {\r\n        return this._cellSize;\r\n    }\r\n\r\n    /**\r\n     * Gets the min bounds of the lattice\r\n     */\r\n    public get min(): Vector3 {\r\n        return this._min;\r\n    }\r\n\r\n    /**\r\n     * Gets the max bounds of the lattice\r\n     */\r\n    public get max(): Vector3 {\r\n        return this._max;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Lattice\r\n     * @param options options for creating\r\n     */\r\n    public constructor(options?: Partial<ILatticeOptions>) {\r\n        const localOptions: ILatticeOptions = {\r\n            resolutionX: 3,\r\n            resolutionY: 3,\r\n            resolutionZ: 3,\r\n            position: Vector3.Zero(),\r\n            size: Vector3.One(),\r\n            ...options,\r\n        };\r\n\r\n        this._resolutionX = localOptions.resolutionX;\r\n        this._resolutionY = localOptions.resolutionY;\r\n        this._resolutionZ = localOptions.resolutionZ;\r\n        this._position = localOptions.position;\r\n        this._size = localOptions.autoAdaptToMesh ? localOptions.autoAdaptToMesh.getBoundingInfo().boundingBox.extendSize.scale(2) : localOptions.size;\r\n\r\n        // Allocate data\r\n        this._allocateData();\r\n        this.update();\r\n    }\r\n\r\n    private _allocateData() {\r\n        this._data = new Array<Array<Array<Vector3>>>(this.resolutionX);\r\n        for (let i = 0; i < this.resolutionX; i++) {\r\n            this._data[i] = new Array<Array<Vector3>>(this.resolutionY);\r\n            for (let j = 0; j < this.resolutionY; j++) {\r\n                this._data[i][j] = new Array<Vector3>(this.resolutionZ);\r\n                for (let k = 0; k < this.resolutionZ; k++) {\r\n                    this._data[i][j][k] = Vector3.Zero();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update of the lattice data\r\n     */\r\n    public update() {\r\n        for (let i = 0; i < this.resolutionX; i++) {\r\n            for (let j = 0; j < this.resolutionY; j++) {\r\n                for (let k = 0; k < this.resolutionZ; k++) {\r\n                    const x = -this.size.x / 2 + this.size.x * (i / (this.resolutionX - 1));\r\n                    const y = -this.size.y / 2 + this.size.y * (j / (this.resolutionY - 1));\r\n                    const z = -this.size.z / 2 + this.size.z * (k / (this.resolutionZ - 1));\r\n\r\n                    this._data[i][j][k].set(x, y, z);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply the lattice to a mesh\r\n     * @param mesh mesh to deform\r\n     */\r\n    public deformMesh(mesh: Mesh) {\r\n        const positions = mesh.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!positions) {\r\n            return;\r\n        }\r\n\r\n        // Apply the lattice\r\n        this.deform(positions);\r\n\r\n        // Update back the mesh\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions, true);\r\n    }\r\n\r\n    /**\r\n     * Update the lattice internals (like min, max and cell size)\r\n     */\r\n    public updateInternals() {\r\n        const nx = this._resolutionX;\r\n        const ny = this._resolutionY;\r\n        const nz = this._resolutionZ;\r\n\r\n        // Calculate the size of each cell in the lattice\r\n        this._cellSize.set(this.size.x / (nx - 1), this.size.y / (ny - 1), this.size.z / (nz - 1));\r\n\r\n        // Calculate the lattice bounds\r\n        this._min.set(this.position.x - this.size.x / 2, this.position.y - this.size.y / 2, this.position.z - this.size.z / 2);\r\n        this._min.addToRef(this._size, this._max);\r\n    }\r\n\r\n    /**\r\n     * Apply the lattice to a set of points\r\n     * @param positions vertex data to deform\r\n     * @param target optional target array to store the result (operation will be done in place in not defined)\r\n     */\r\n    public deform(positions: FloatArray, target?: FloatArray) {\r\n        const nx = this._resolutionX;\r\n        const ny = this._resolutionY;\r\n        const nz = this._resolutionZ;\r\n\r\n        this.updateInternals();\r\n\r\n        const min = this._min;\r\n        const max = this._max;\r\n\r\n        // Loop over each vertex\r\n        for (let i = 0; i < positions.length; i += 3) {\r\n            const vertex = this._tmpVector.fromArray(positions, i);\r\n\r\n            // Check we are inside\r\n            if (vertex.x < min.x || vertex.x > max.x || vertex.y < min.y || vertex.y > max.y || vertex.z < min.z || vertex.z > max.z) {\r\n                if (target) {\r\n                    vertex.toArray(target, i);\r\n                }\r\n                continue;\r\n            }\r\n\r\n            // Map vertex position to lattice local coordinates\r\n            const localPos = this._localPos.set((vertex.x - min.x) / this._cellSize.x, (vertex.y - min.y) / this._cellSize.y, (vertex.z - min.z) / this._cellSize.z);\r\n\r\n            // Get integer lattice indices\r\n            const i0 = Math.floor(localPos.x);\r\n            const j0 = Math.floor(localPos.y);\r\n            const k0 = Math.floor(localPos.z);\r\n\r\n            const i1 = Math.min(i0 + 1, nx - 1);\r\n            const j1 = Math.min(j0 + 1, ny - 1);\r\n            const k1 = Math.min(k0 + 1, nz - 1);\r\n\r\n            // Compute interpolation weights\r\n            const tx = localPos.x - i0;\r\n            const ty = localPos.y - j0;\r\n            const tz = localPos.z - k0;\r\n\r\n            // Ensure indices are within bounds\r\n            const ii0 = Clamp(i0, 0, nx - 1);\r\n            const jj0 = Clamp(j0, 0, ny - 1);\r\n            const kk0 = Clamp(k0, 0, nz - 1);\r\n            const ii1 = Clamp(i1, 0, nx - 1);\r\n            const jj1 = Clamp(j1, 0, ny - 1);\r\n            const kk1 = Clamp(k1, 0, nz - 1);\r\n\r\n            // Get lattice control points\r\n            const p000 = this._data[ii0][jj0][kk0];\r\n            const p100 = this._data[ii1][jj0][kk0];\r\n            const p010 = this._data[ii0][jj1][kk0];\r\n            const p110 = this._data[ii1][jj1][kk0];\r\n            const p001 = this._data[ii0][jj0][kk1];\r\n            const p101 = this._data[ii1][jj0][kk1];\r\n            const p011 = this._data[ii0][jj1][kk1];\r\n            const p111 = this._data[ii1][jj1][kk1];\r\n\r\n            // Trilinear interpolation\r\n            const p00 = Vector3.LerpToRef(p000, p100, tx, this._lerpVector0);\r\n            const p01 = Vector3.LerpToRef(p001, p101, tx, this._lerpVector1);\r\n            const p10 = Vector3.LerpToRef(p010, p110, tx, this._lerpVector2);\r\n            const p11 = Vector3.LerpToRef(p011, p111, tx, this._lerpVector3);\r\n\r\n            const p0 = Vector3.LerpToRef(p00, p10, ty, this._lerpVector4);\r\n            const p1 = Vector3.LerpToRef(p01, p11, ty, this._lerpVector5);\r\n\r\n            const deformedPos = Vector3.LerpToRef(p0, p1, tz, this._lerpVector0);\r\n            deformedPos.addInPlace(this.position);\r\n\r\n            // Apply deformation to the vertex\r\n            deformedPos.toArray(target || positions, i);\r\n        }\r\n    }\r\n}\r\n"]}