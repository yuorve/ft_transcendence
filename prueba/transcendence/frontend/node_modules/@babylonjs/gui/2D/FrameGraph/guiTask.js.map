{"version":3,"file":"guiTask.js","sourceRoot":"","sources":["../../../../../dev/gui/src/2D/FrameGraph/guiTask.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,sBAAsB,EAAE,MAAM,2BAA2B,CAAC;AACnE,OAAO,EAAE,cAAc,EAAE,qDAAuC;AAEhE;;GAEG;AACH,MAAM,OAAO,iBAAkB,SAAQ,cAAc;IAYjD,IAAoB,QAAQ;QACxB,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,IAAoB,QAAQ,CAAC,KAAc;QACvC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,IAAW,GAAG;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAID;;;;;OAKG;IACH,YAAY,IAAY,EAAE,UAAsB,EAAE,GAA4B;QAC1E,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAExB,IAAI,GAAG,EAAE,CAAC;YACN,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;gBACrB,MAAM,IAAI,KAAK,CAAC,2BAA2B,IAAI,mFAAmF,CAAC,CAAC;YACxI,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,GAAG,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;QAC9F,CAAC;QACD,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAEhB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,oBAAoB,EAAE,CAAC;IAChF,CAAC;IAEe,OAAO;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,eAAgB,CAAC,OAAO,EAAE,CAAC;IAC1E,CAAC;IAEM,MAAM;QACT,IAAI,IAAI,CAAC,kBAAkB,KAAK,SAAS,EAAE,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAEnG,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEvD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACzC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE,EAAE;YAC5B,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC7B,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAgB,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,GAAG,WAAW,EAAE,IAAI,CAAC,CAAC;QAEnF,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACjD,YAAY,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,EAAE,GAAE,CAAC,CAAC,CAAC;IAClD,CAAC;IAEe,OAAO;QACnB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACpB,KAAK,CAAC,OAAO,EAAE,CAAC;IACpB,CAAC;CACJ","sourcesContent":["// eslint-disable-next-line import/no-internal-modules\r\nimport type { FrameGraphTextureHandle, FrameGraph } from \"core/index\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { FrameGraphTask } from \"core/FrameGraph/frameGraphTask\";\r\n\r\n/**\r\n * Task that renders a GUI texture.\r\n */\r\nexport class FrameGraphGUITask extends FrameGraphTask {\r\n    /**\r\n     * The destination texture to render the GUI to.\r\n     */\r\n    public destinationTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The output texture of the task.\r\n     * This is the same texture as the destination texture, but the handles are different!\r\n     */\r\n    public readonly outputTexture: FrameGraphTextureHandle;\r\n\r\n    public override get disabled() {\r\n        return this._disabled;\r\n    }\r\n\r\n    public override set disabled(value: boolean) {\r\n        this._disabled = value;\r\n        this._adt.disablePicking = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying advanced dynamic texture.\r\n     */\r\n    public get gui() {\r\n        return this._adt;\r\n    }\r\n\r\n    protected _adt: AdvancedDynamicTexture;\r\n\r\n    /**\r\n     * Constructs a new GUI task.\r\n     * @param name Name of the task\r\n     * @param frameGraph Frame graph the task belongs to\r\n     * @param adt The GUI texture. If not provided, a new fullscreen GUI will be created.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, adt?: AdvancedDynamicTexture) {\r\n        super(name, frameGraph);\r\n\r\n        if (adt) {\r\n            if (!adt.useStandalone) {\r\n                throw new Error(`AdvancedDynamicTexture \"${name}\": the texture must have been created with the useStandalone property set to true`);\r\n            }\r\n        } else {\r\n            adt = AdvancedDynamicTexture.CreateFullscreenUI(name, undefined, { useStandalone: true });\r\n        }\r\n        this._adt = adt;\r\n\r\n        this.outputTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n    }\r\n\r\n    public override isReady() {\r\n        return this._adt.guiIsReady() && this._adt._layerToDispose!.isReady();\r\n    }\r\n\r\n    public record(): void {\r\n        if (this.destinationTexture === undefined) {\r\n            throw new Error(\"FrameGraphGUITask: destinationTexture is required\");\r\n        }\r\n\r\n        this._frameGraph.textureManager.resolveDanglingHandle(this.outputTexture, this.destinationTexture);\r\n\r\n        const pass = this._frameGraph.addRenderPass(this.name);\r\n\r\n        pass.setRenderTarget(this.outputTexture);\r\n        pass.setExecuteFunc((context) => {\r\n            this._adt._checkUpdate(null);\r\n            context.render(this._adt._layerToDispose!);\r\n        });\r\n\r\n        const passDisabled = this._frameGraph.addRenderPass(this.name + \"_disabled\", true);\r\n\r\n        passDisabled.setRenderTarget(this.outputTexture);\r\n        passDisabled.setExecuteFunc((_context) => {});\r\n    }\r\n\r\n    public override dispose(): void {\r\n        this._adt.dispose();\r\n        super.dispose();\r\n    }\r\n}\r\n"]}