{
  "version": 3,
  "sources": ["../../../dev/core/src/Engines/Extensions/engine.dynamicTexture.ts", "../../../dev/core/src/Materials/Textures/dynamicTexture.ts", "../../../dev/core/src/Engines/constants.ts", "../../../dev/core/src/Events/clipboardEvents.ts", "../../../dev/core/src/Misc/coroutine.ts", "../../../dev/core/src/Collisions/intersectionInfo.ts", "../../../dev/core/src/Culling/boundingBox.ts", "../../../dev/core/src/Culling/boundingSphere.ts", "../../../dev/core/src/Culling/boundingInfo.ts", "../../../dev/core/src/Meshes/subMesh.ts", "../../../dev/core/src/Meshes/mesh.vertexData.ts", "../../../dev/core/src/node.ts", "../../../dev/core/src/Meshes/transformNode.ts", "../../../dev/core/src/Collisions/meshCollisionData.ts", "../../../dev/core/src/Meshes/abstractMesh.ts", "../../../dev/core/src/Materials/materialStencilState.ts", "../../../dev/core/src/Materials/material.ts", "../../../dev/core/src/Layers/layerSceneComponent.ts", "../../../dev/core/src/Layers/layer.ts", "../../../dev/core/src/FrameGraph/Passes/pass.ts", "../../../dev/core/src/FrameGraph/Passes/cullPass.ts", "../../../dev/core/src/FrameGraph/Passes/renderPass.ts", "../../../dev/core/src/FrameGraph/frameGraphTask.ts", "../../../dev/core/src/FrameGraph/Node/Types/nodeRenderGraphTypes.ts", "../../../dev/core/src/FrameGraph/Node/nodeRenderGraphBlockConnectionPoint.ts", "../../../dev/core/src/FrameGraph/Node/nodeRenderGraphBlock.ts", "../../../dev/core/src/Cameras/camera.ts", "../../../dev/core/src/Loading/sceneLoaderFlags.ts", "../../../dev/core/src/Meshes/geometry.ts", "../../../dev/core/src/Materials/multiMaterial.ts", "../../../dev/core/src/Meshes/meshLODLevel.ts", "../../../dev/core/src/Meshes/mesh.ts", "../../../dev/core/src/Meshes/groundMesh.ts", "../../../dev/core/src/Meshes/Builders/groundBuilder.ts", "../../../dev/core/src/Meshes/Builders/boxBuilder.ts", "../../../dev/core/src/Materials/materialDefines.ts", "../../../dev/core/src/Materials/pushMaterial.ts", "../../../dev/core/src/Materials/materialFlags.ts", "../../../dev/core/src/Materials/effectFallbacks.ts", "../../../dev/core/src/Materials/materialPluginManager.ts", "../../../dev/core/src/Materials/materialPluginBase.ts", "../../../dev/core/src/Materials/material.detailMapConfiguration.ts", "../../../dev/core/src/Materials/materialHelper.geometryrendering.ts", "../../../dev/core/src/Materials/prePassConfiguration.ts", "../../../dev/core/src/Materials/standardMaterial.ts", "../../../dev/core/src/XR/webXRFeaturesManager.ts", "../../../dev/core/src/Behaviors/Meshes/handConstraintBehavior.ts", "../../../dev/core/src/Misc/webRequest.fetch.ts", "../../../dev/core/src/Loading/sceneLoader.ts", "../../../dev/core/src/Meshes/Builders/planeBuilder.ts", "../../../dev/core/src/Behaviors/Meshes/fadeInOutBehavior.ts", "../../../dev/core/src/Maths/math.scalar.ts", "../../../dev/core/src/Behaviors/Meshes/followBehavior.ts", "../../../dev/core/src/Behaviors/Meshes/baseSixDofDragBehavior.ts", "../../../dev/core/src/Behaviors/Meshes/sixDofDragBehavior.ts", "../../../dev/core/src/Behaviors/Meshes/surfaceMagnetismBehavior.ts", "../../../dev/core/src/Lights/light.ts", "../../../dev/core/src/Lights/hemisphericLight.ts", "../../../dev/core/src/Rendering/utilityLayerRenderer.ts", "../../../dev/core/src/Gizmos/gizmo.ts", "../../../dev/core/src/Misc/pivotTools.ts", "../../../dev/core/src/Materials/shaderMaterial.ts", "../../../dev/core/src/Culling/ray.core.ts", "../../../dev/core/src/Culling/ray.ts", "../../../dev/core/src/Behaviors/Meshes/pointerDragBehavior.ts", "../../../dev/core/src/Animations/animationRange.ts", "../../../dev/core/src/Animations/animation.ts", "../../../dev/core/src/Bones/bone.ts", "../../../dev/core/src/Animations/runtimeAnimation.ts", "../../../dev/core/src/Animations/animatable.core.ts", "../../../dev/core/src/Animations/animatable.ts", "../../../dev/core/src/Animations/animationGroup.ts"],
  "sourcesContent": ["import { GetExponentOfTwo } from \"core/Misc/tools.functions\";\r\nimport { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport type { ImageSource, Nullable } from \"../../types\";\r\nimport type { ICanvas } from \"../ICanvas\";\r\n\r\ndeclare module \"../../Engines/abstractEngine\" {\r\n    export interface AbstractEngine {\r\n        /**\r\n         * Creates a dynamic texture\r\n         * @param width defines the width of the texture\r\n         * @param height defines the height of the texture\r\n         * @param generateMipMaps defines if the engine should generate the mip levels\r\n         * @param samplingMode defines the required sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n         * @returns the dynamic texture inside an InternalTexture\r\n         */\r\n        createDynamicTexture(width: number, height: number, generateMipMaps: boolean, samplingMode: number): InternalTexture;\r\n\r\n        /**\r\n         * Update the content of a dynamic texture\r\n         * @param texture defines the texture to update\r\n         * @param source defines the source containing the data\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param premulAlpha defines if alpha is stored as premultiplied\r\n         * @param format defines the format of the data\r\n         * @param forceBindTexture if the texture should be forced to be bound eg. after a graphics context loss (Default: false)\r\n         * @param allowGPUOptimization true to allow some specific GPU optimizations (subject to engine feature \"allowGPUOptimizationsForGUI\" being true)\r\n         */\r\n        updateDynamicTexture(\r\n            texture: Nullable<InternalTexture>,\r\n            source: ImageSource | ICanvas,\r\n            invertY?: boolean,\r\n            premulAlpha?: boolean,\r\n            format?: number,\r\n            forceBindTexture?: boolean,\r\n            allowGPUOptimization?: boolean\r\n        ): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createDynamicTexture = function (width: number, height: number, generateMipMaps: boolean, samplingMode: number): InternalTexture {\r\n    const texture = new InternalTexture(this, InternalTextureSource.Dynamic);\r\n    texture.baseWidth = width;\r\n    texture.baseHeight = height;\r\n\r\n    if (generateMipMaps) {\r\n        width = this.needPOTTextures ? GetExponentOfTwo(width, this._caps.maxTextureSize) : width;\r\n        height = this.needPOTTextures ? GetExponentOfTwo(height, this._caps.maxTextureSize) : height;\r\n    }\r\n\r\n    //  this.resetTextureCache();\r\n    texture.width = width;\r\n    texture.height = height;\r\n    texture.isReady = false;\r\n    texture.generateMipMaps = generateMipMaps;\r\n    texture.samplingMode = samplingMode;\r\n\r\n    this.updateTextureSamplingMode(samplingMode, texture);\r\n\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    return texture;\r\n};\r\n\r\nThinEngine.prototype.updateDynamicTexture = function (\r\n    texture: Nullable<InternalTexture>,\r\n    source: ImageSource,\r\n    invertY?: boolean,\r\n    premulAlpha: boolean = false,\r\n    format?: number,\r\n    forceBindTexture: boolean = false,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    allowGPUOptimization: boolean = false\r\n): void {\r\n    if (!texture) {\r\n        return;\r\n    }\r\n\r\n    const gl = this._gl;\r\n    const target = gl.TEXTURE_2D;\r\n\r\n    const wasPreviouslyBound = this._bindTextureDirectly(target, texture, true, forceBindTexture);\r\n\r\n    this._unpackFlipY(invertY === undefined ? texture.invertY : invertY);\r\n\r\n    if (premulAlpha) {\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\r\n    }\r\n\r\n    const textureType = this._getWebGLTextureType(texture.type);\r\n    const glformat = this._getInternalFormat(format ? format : texture.format);\r\n    const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, glformat);\r\n\r\n    gl.texImage2D(target, 0, internalFormat, glformat, textureType, source as TexImageSource);\r\n\r\n    if (texture.generateMipMaps) {\r\n        gl.generateMipmap(target);\r\n    }\r\n\r\n    if (!wasPreviouslyBound) {\r\n        this._bindTextureDirectly(target, null);\r\n    }\r\n\r\n    if (premulAlpha) {\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\r\n    }\r\n\r\n    if (format) {\r\n        texture.format = format;\r\n    }\r\n\r\n    texture._dynamicTextureSource = source;\r\n    texture._premulAlpha = premulAlpha;\r\n    texture.invertY = invertY || false;\r\n    texture.isReady = true;\r\n};\r\n", "import { Logger } from \"../../Misc/logger\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { ISize } from \"../../Maths/math.size\";\r\nimport type { ITextureCreationOptions } from \"../../Materials/Textures/texture\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { ICanvas, ICanvasRenderingContext } from \"../../Engines/ICanvas\";\r\n\r\nimport \"../../Engines/Extensions/engine.dynamicTexture\";\r\n\r\n/**\r\n * Interface defining options used to create a dynamic texture\r\n */\r\nexport interface IDynamicTextureOptions extends ITextureCreationOptions {\r\n    /** defines the width of the texture (default: 0) */\r\n    width?: number;\r\n    /** defines the height of the texture (default: 0) */\r\n    height?: number;\r\n    /** defines the hosting scene (default: null) */\r\n    scene?: Nullable<Scene>;\r\n}\r\n\r\n/**\r\n * A class extending Texture allowing drawing on a texture\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/dynamicTexture\r\n */\r\nexport class DynamicTexture extends Texture {\r\n    private _generateMipMaps: boolean;\r\n    private _canvas: ICanvas;\r\n    private _ownCanvas: boolean;\r\n    private _context: ICanvasRenderingContext;\r\n\r\n    /**\r\n     * Creates a DynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param canvasOrSize provides 3 alternatives for width and height of texture, a canvas, object with width and height properties, number for both width and height\r\n     * @param options The options to be used when constructing the dynamic texture\r\n     */\r\n    constructor(name: string, canvasOrSize: ICanvas | { width: number; height: number } | number, options?: IDynamicTextureOptions);\r\n\r\n    /**\r\n     * Creates a DynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param options provides 3 alternatives for width and height of texture, a canvas, object with width and height properties, number for both width and height\r\n     * @param scene defines the scene where you want the texture\r\n     * @param generateMipMaps defines the use of MinMaps or not (default is false)\r\n     * @param samplingMode defines the sampling mode to use (default is Texture.TRILINEAR_SAMPLINGMODE)\r\n     * @param format defines the texture format to use (default is Engine.TEXTUREFORMAT_RGBA)\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: ICanvas | { width: number; height: number } | number,\r\n        scene?: Nullable<Scene>,\r\n        generateMipMaps?: boolean,\r\n        samplingMode?: number,\r\n        format?: number,\r\n        invertY?: boolean\r\n    );\r\n\r\n    /** @internal */\r\n    constructor(\r\n        name: string,\r\n        canvasOrSize: ICanvas | { width: number; height: number } | number,\r\n        sceneOrOptions?: Nullable<Scene> | IDynamicTextureOptions,\r\n        generateMipMaps?: boolean,\r\n        samplingMode?: number,\r\n        format?: number,\r\n        invertY?: boolean\r\n    );\r\n\r\n    /** @internal */\r\n    constructor(\r\n        name: string,\r\n        canvasOrSize: ICanvas | { width: number; height: number } | number,\r\n        sceneOrOptions?: Nullable<Scene> | IDynamicTextureOptions,\r\n        generateMipMaps: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        format: number = Constants.TEXTUREFORMAT_RGBA,\r\n        invertY?: boolean\r\n    ) {\r\n        const isScene = !sceneOrOptions || (sceneOrOptions as Scene)._isScene;\r\n        const scene = isScene ? (sceneOrOptions as Scene) : (sceneOrOptions as IDynamicTextureOptions)?.scene;\r\n        const noMipmap = isScene ? !generateMipMaps : (sceneOrOptions as IDynamicTextureOptions);\r\n\r\n        super(null, scene, noMipmap, invertY, samplingMode, undefined, undefined, undefined, undefined, format);\r\n\r\n        this.name = name;\r\n        this.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n\r\n        this._generateMipMaps = generateMipMaps;\r\n\r\n        const engine = this._getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n\r\n        if ((canvasOrSize as ICanvas).getContext) {\r\n            this._canvas = canvasOrSize as ICanvas;\r\n            this._ownCanvas = false;\r\n            this._texture = engine.createDynamicTexture(this._canvas.width, this._canvas.height, generateMipMaps, samplingMode);\r\n        } else {\r\n            this._canvas = engine.createCanvas(1, 1);\r\n            this._ownCanvas = true;\r\n\r\n            const optionsAsSize = canvasOrSize as ISize;\r\n            if (optionsAsSize.width || optionsAsSize.width === 0) {\r\n                this._texture = engine.createDynamicTexture(optionsAsSize.width, optionsAsSize.height, generateMipMaps, samplingMode);\r\n            } else {\r\n                this._texture = engine.createDynamicTexture(canvasOrSize as number, canvasOrSize as number, generateMipMaps, samplingMode);\r\n            }\r\n        }\r\n\r\n        const textureSize = this.getSize();\r\n\r\n        if (this._canvas.width !== textureSize.width) {\r\n            this._canvas.width = textureSize.width;\r\n        }\r\n        if (this._canvas.height !== textureSize.height) {\r\n            this._canvas.height = textureSize.height;\r\n        }\r\n        this._context = this._canvas.getContext(\"2d\");\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"DynamicTexture\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"DynamicTexture\";\r\n    }\r\n\r\n    /**\r\n     * Gets the current state of canRescale\r\n     */\r\n    public override get canRescale(): boolean {\r\n        return true;\r\n    }\r\n\r\n    private _recreate(textureSize: ISize): void {\r\n        this._canvas.width = textureSize.width;\r\n        this._canvas.height = textureSize.height;\r\n\r\n        this.releaseInternalTexture();\r\n\r\n        this._texture = this._getEngine()!.createDynamicTexture(textureSize.width, textureSize.height, this._generateMipMaps, this.samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Scales the texture\r\n     * @param ratio the scale factor to apply to both width and height\r\n     */\r\n    public override scale(ratio: number): void {\r\n        const textureSize = this.getSize();\r\n\r\n        textureSize.width *= ratio;\r\n        textureSize.height *= ratio;\r\n\r\n        this._recreate(textureSize);\r\n    }\r\n\r\n    /**\r\n     * Resizes the texture\r\n     * @param width the new width\r\n     * @param height the new height\r\n     */\r\n    public scaleTo(width: number, height: number): void {\r\n        const textureSize = this.getSize();\r\n\r\n        textureSize.width = width;\r\n        textureSize.height = height;\r\n\r\n        this._recreate(textureSize);\r\n    }\r\n\r\n    /**\r\n     * Gets the context of the canvas used by the texture\r\n     * @returns the canvas context of the dynamic texture\r\n     */\r\n    public getContext(): ICanvasRenderingContext {\r\n        return this._context;\r\n    }\r\n\r\n    /**\r\n     * Clears the texture\r\n     * @param clearColor Defines the clear color to use\r\n     */\r\n    public clear(clearColor?: string): void {\r\n        const size = this.getSize();\r\n        if (clearColor) {\r\n            this._context.fillStyle = clearColor;\r\n        }\r\n        this._context.clearRect(0, 0, size.width, size.height);\r\n    }\r\n\r\n    /**\r\n     * Updates the texture\r\n     * @param invertY defines the direction for the Y axis (default is true - y increases downwards)\r\n     * @param premulAlpha defines if alpha is stored as premultiplied (default is false)\r\n     * @param allowGPUOptimization true to allow some specific GPU optimizations (subject to engine feature \"allowGPUOptimizationsForGUI\" being true)\r\n     */\r\n    public update(invertY?: boolean, premulAlpha = false, allowGPUOptimization = false): void {\r\n        this._getEngine()!.updateDynamicTexture(\r\n            this._texture,\r\n            this._canvas,\r\n            invertY === undefined ? true : invertY,\r\n            premulAlpha,\r\n            this._format || undefined,\r\n            undefined,\r\n            allowGPUOptimization\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Draws text onto the texture\r\n     * @param text defines the text to be drawn\r\n     * @param x defines the placement of the text from the left\r\n     * @param y defines the placement of the text from the top when invertY is true and from the bottom when false\r\n     * @param font defines the font to be used with font-style, font-size, font-name\r\n     * @param color defines the color used for the text\r\n     * @param fillColor defines the color for the canvas, use null to not overwrite canvas (this bleands with the background to replace, use the clear function)\r\n     * @param invertY defines the direction for the Y axis (default is true - y increases downwards)\r\n     * @param update defines whether texture is immediately update (default is true)\r\n     */\r\n    public drawText(\r\n        text: string,\r\n        x: number | null | undefined,\r\n        y: number | null | undefined,\r\n        font: string,\r\n        color: string | null,\r\n        fillColor: string | null,\r\n        invertY?: boolean,\r\n        update = true\r\n    ) {\r\n        const size = this.getSize();\r\n        if (fillColor) {\r\n            this._context.fillStyle = fillColor;\r\n            this._context.fillRect(0, 0, size.width, size.height);\r\n        }\r\n\r\n        this._context.font = font;\r\n        if (x === null || x === undefined) {\r\n            const textSize = this._context.measureText(text);\r\n            x = (size.width - textSize.width) / 2;\r\n        }\r\n        if (y === null || y === undefined) {\r\n            const fontSize = parseInt(font.replace(/\\D/g, \"\"));\r\n            y = size.height / 2 + fontSize / 3.65;\r\n        }\r\n\r\n        this._context.fillStyle = color || \"\";\r\n        this._context.fillText(text, x, y);\r\n\r\n        if (update) {\r\n            this.update(invertY);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the dynamic texture.\r\n     */\r\n    public override dispose(): void {\r\n        super.dispose();\r\n\r\n        if (this._ownCanvas) {\r\n            this._canvas?.remove?.();\r\n        }\r\n        (this._canvas as any) = null;\r\n        (this._context as any) = null;\r\n    }\r\n\r\n    /**\r\n     * Clones the texture\r\n     * @returns the clone of the texture.\r\n     */\r\n    public override clone(): DynamicTexture {\r\n        const scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return this;\r\n        }\r\n\r\n        const textureSize = this.getSize();\r\n        const newTexture = new DynamicTexture(this.name, textureSize, scene, this._generateMipMaps);\r\n\r\n        // Base texture\r\n        newTexture.hasAlpha = this.hasAlpha;\r\n        newTexture.level = this.level;\r\n\r\n        // Dynamic Texture\r\n        newTexture.wrapU = this.wrapU;\r\n        newTexture.wrapV = this.wrapV;\r\n\r\n        return newTexture;\r\n    }\r\n\r\n    /**\r\n     * Serializes the dynamic texture.  The scene should be ready before the dynamic texture is serialized\r\n     * @returns a serialized dynamic texture object\r\n     */\r\n    public override serialize(): any {\r\n        const scene = this.getScene();\r\n        if (scene && !scene.isReady()) {\r\n            Logger.Warn(\"The scene must be ready before serializing the dynamic texture\");\r\n        }\r\n\r\n        const serializationObject = super.serialize();\r\n        if (DynamicTexture._IsCanvasElement(this._canvas)) {\r\n            serializationObject.base64String = this._canvas.toDataURL();\r\n        }\r\n\r\n        serializationObject.invertY = this._invertY;\r\n        serializationObject.samplingMode = this.samplingMode;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    private static _IsCanvasElement(canvas: HTMLCanvasElement | OffscreenCanvas | ICanvas): canvas is HTMLCanvasElement {\r\n        return (canvas as HTMLCanvasElement).toDataURL !== undefined;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _rebuild(): void {\r\n        this.update();\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n/** Defines the cross module used constants to avoid circular dependencies */\r\nexport class Constants {\r\n    /** Sampler suffix when associated with a texture name */\r\n    public static readonly AUTOSAMPLERSUFFIX = \"Sampler\";\r\n    /** Flag used to disable diagnostics for WebGPU */\r\n    public static readonly DISABLEUA = \"#define DISABLE_UNIFORMITY_ANALYSIS\";\r\n    /** Defines that alpha blending is disabled */\r\n    public static readonly ALPHA_DISABLE = 0;\r\n    /** Defines that alpha blending is SRC ALPHA * SRC + DEST */\r\n    public static readonly ALPHA_ADD = 1;\r\n    /** Defines that alpha blending is SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_COMBINE = 2;\r\n    /** Defines that alpha blending is DEST - SRC * DEST */\r\n    public static readonly ALPHA_SUBTRACT = 3;\r\n    /** Defines that alpha blending is SRC * DEST */\r\n    public static readonly ALPHA_MULTIPLY = 4;\r\n    /** Defines that alpha blending is SRC ALPHA * SRC + (1 - SRC) * DEST */\r\n    public static readonly ALPHA_MAXIMIZED = 5;\r\n    /** Defines that alpha blending is SRC + DEST */\r\n    public static readonly ALPHA_ONEONE = 6;\r\n    /** Defines that alpha blending is SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_PREMULTIPLIED = 7;\r\n    /**\r\n     * Defines that alpha blending is SRC + (1 - SRC ALPHA) * DEST\r\n     * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_PREMULTIPLIED_PORTERDUFF = 8;\r\n    /** Defines that alpha blending is CST * SRC + (1 - CST) * DEST */\r\n    public static readonly ALPHA_INTERPOLATE = 9;\r\n    /**\r\n     * Defines that alpha blending is SRC + (1 - SRC) * DEST\r\n     * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_SCREENMODE = 10;\r\n    /**\r\n     * Defines that alpha blending is SRC + DST\r\n     * Alpha will be set to SRC ALPHA + DST ALPHA\r\n     */\r\n    public static readonly ALPHA_ONEONE_ONEONE = 11;\r\n    /**\r\n     * Defines that alpha blending is SRC * DST ALPHA + DST\r\n     * Alpha will be set to 0\r\n     */\r\n    public static readonly ALPHA_ALPHATOCOLOR = 12;\r\n    /**\r\n     * Defines that alpha blending is SRC * (1 - DST) + DST * (1 - SRC)\r\n     */\r\n    public static readonly ALPHA_REVERSEONEMINUS = 13;\r\n    /**\r\n     * Defines that alpha blending is SRC + DST * (1 - SRC ALPHA)\r\n     * Alpha will be set to SRC ALPHA + DST ALPHA * (1 - SRC ALPHA)\r\n     */\r\n    public static readonly ALPHA_SRC_DSTONEMINUSSRCALPHA = 14;\r\n    /**\r\n     * Defines that alpha blending is SRC + DST\r\n     * Alpha will be set to SRC ALPHA\r\n     */\r\n    public static readonly ALPHA_ONEONE_ONEZERO = 15;\r\n    /**\r\n     * Defines that alpha blending is SRC * (1 - DST) + DST * (1 - SRC)\r\n     * Alpha will be set to DST ALPHA\r\n     */\r\n    public static readonly ALPHA_EXCLUSION = 16;\r\n    /**\r\n     * Defines that alpha blending is SRC * SRC ALPHA + DST * (1 - SRC ALPHA)\r\n     * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DST ALPHA\r\n     */\r\n    public static readonly ALPHA_LAYER_ACCUMULATE = 17;\r\n\r\n    /** Defines that alpha blending equation a SUM */\r\n    public static readonly ALPHA_EQUATION_ADD = 0;\r\n    /** Defines that alpha blending equation a SUBSTRACTION */\r\n    public static readonly ALPHA_EQUATION_SUBSTRACT = 1;\r\n    /** Defines that alpha blending equation a REVERSE SUBSTRACTION */\r\n    public static readonly ALPHA_EQUATION_REVERSE_SUBTRACT = 2;\r\n    /** Defines that alpha blending equation a MAX operation */\r\n    public static readonly ALPHA_EQUATION_MAX = 3;\r\n    /** Defines that alpha blending equation a MIN operation */\r\n    public static readonly ALPHA_EQUATION_MIN = 4;\r\n    /**\r\n     * Defines that alpha blending equation a DARKEN operation:\r\n     * It takes the min of the src and sums the alpha channels.\r\n     */\r\n    public static readonly ALPHA_EQUATION_DARKEN = 5;\r\n\r\n    /** Defines that the resource is not delayed*/\r\n    public static readonly DELAYLOADSTATE_NONE = 0;\r\n    /** Defines that the resource was successfully delay loaded */\r\n    public static readonly DELAYLOADSTATE_LOADED = 1;\r\n    /** Defines that the resource is currently delay loading */\r\n    public static readonly DELAYLOADSTATE_LOADING = 2;\r\n    /** Defines that the resource is delayed and has not started loading */\r\n    public static readonly DELAYLOADSTATE_NOTLOADED = 4;\r\n\r\n    // Depth or Stencil test Constants.\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\r\n    public static readonly NEVER = 0x0200;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = 0x0207;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\r\n    public static readonly LESS = 0x0201;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\r\n    public static readonly EQUAL = 0x0202;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\r\n    public static readonly LEQUAL = 0x0203;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\r\n    public static readonly GREATER = 0x0204;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\r\n    public static readonly GEQUAL = 0x0206;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\r\n    public static readonly NOTEQUAL = 0x0205;\r\n\r\n    // Stencil Actions Constants.\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = 0x1e00;\r\n    /** Passed to stencilOperation to specify that stencil value must be zero */\r\n    public static readonly ZERO = 0x0000;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = 0x1e01;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented */\r\n    public static readonly INCR = 0x1e02;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented */\r\n    public static readonly DECR = 0x1e03;\r\n    /** Passed to stencilOperation to specify that stencil value must be inverted */\r\n    public static readonly INVERT = 0x150a;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\r\n    public static readonly INCR_WRAP = 0x8507;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\r\n    public static readonly DECR_WRAP = 0x8508;\r\n\r\n    /** Texture is not repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_CLAMP_ADDRESSMODE = 0;\r\n    /** Texture is repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_WRAP_ADDRESSMODE = 1;\r\n    /** Texture is repeating and mirrored */\r\n    public static readonly TEXTURE_MIRROR_ADDRESSMODE = 2;\r\n\r\n    /** Flag to create a storage texture */\r\n    public static readonly TEXTURE_CREATIONFLAG_STORAGE = 1;\r\n\r\n    /** ALPHA */\r\n    public static readonly TEXTUREFORMAT_ALPHA = 0;\r\n    /** LUMINANCE */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE = 1;\r\n    /** LUMINANCE_ALPHA */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE_ALPHA = 2;\r\n    /** RGB */\r\n    public static readonly TEXTUREFORMAT_RGB = 4;\r\n    /** RGBA */\r\n    public static readonly TEXTUREFORMAT_RGBA = 5;\r\n    /** RED */\r\n    public static readonly TEXTUREFORMAT_RED = 6;\r\n    /** RED (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R = 6;\r\n    /** RED unsigned short normed to [0, 1] **/\r\n    public static readonly TEXTUREFORMAT_R16_UNORM = 0x822a;\r\n    /** RG unsigned short normed to [0, 1] **/\r\n    public static readonly TEXTUREFORMAT_RG16_UNORM = 0x822c;\r\n    /** RGB unsigned short normed to [0, 1] **/\r\n    public static readonly TEXTUREFORMAT_RGB16_UNORM = 0x8054;\r\n    /** RGBA unsigned short normed to [0, 1] **/\r\n    public static readonly TEXTUREFORMAT_RGBA16_UNORM = 0x805b;\r\n    /** RED signed short normed to [-1, 1] **/\r\n    public static readonly TEXTUREFORMAT_R16_SNORM = 0x8f98;\r\n    /** RG signed short normed to [-1, 1] **/\r\n    public static readonly TEXTUREFORMAT_RG16_SNORM = 0x8f99;\r\n    /** RGB signed short normed to [-1, 1] **/\r\n    public static readonly TEXTUREFORMAT_RGB16_SNORM = 0x8f9a;\r\n    /** RGBA signed short normed to [-1, 1] **/\r\n    public static readonly TEXTUREFORMAT_RGBA16_SNORM = 0x8f9b;\r\n    /** RG */\r\n    public static readonly TEXTUREFORMAT_RG = 7;\r\n    /** RED_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RED_INTEGER = 8;\r\n    /** RED_INTEGER (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R_INTEGER = 8;\r\n    /** RG_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RG_INTEGER = 9;\r\n    /** RGB_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGB_INTEGER = 10;\r\n    /** RGBA_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGBA_INTEGER = 11;\r\n    /** BGRA */\r\n    public static readonly TEXTUREFORMAT_BGRA = 12;\r\n\r\n    /** Depth 24 bits + Stencil 8 bits */\r\n    public static readonly TEXTUREFORMAT_DEPTH24_STENCIL8 = 13;\r\n    /** Depth 32 bits float */\r\n    public static readonly TEXTUREFORMAT_DEPTH32_FLOAT = 14;\r\n    /** Depth 16 bits */\r\n    public static readonly TEXTUREFORMAT_DEPTH16 = 15;\r\n    /** Depth 24 bits */\r\n    public static readonly TEXTUREFORMAT_DEPTH24 = 16;\r\n    /** Depth 24 bits unorm + Stencil 8 bits */\r\n    public static readonly TEXTUREFORMAT_DEPTH24UNORM_STENCIL8 = 17;\r\n    /** Depth 32 bits float + Stencil 8 bits */\r\n    public static readonly TEXTUREFORMAT_DEPTH32FLOAT_STENCIL8 = 18;\r\n    /** Stencil 8 bits */\r\n    public static readonly TEXTUREFORMAT_STENCIL8 = 19;\r\n    /** UNDEFINED */\r\n    public static readonly TEXTUREFORMAT_UNDEFINED = 0xffffffff;\r\n\r\n    /** Compressed BC7 */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM = 36492;\r\n    /** Compressed BC7 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 36493;\r\n    /** Compressed BC6 unsigned float */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 36495;\r\n    /** Compressed BC6 signed float */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 36494;\r\n    /** Compressed BC3 */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5 = 33779;\r\n    /** Compressed BC3 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919;\r\n    /** Compressed BC2 */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3 = 33778;\r\n    /** Compressed BC2 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918;\r\n    /** Compressed BC1 (RGBA) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT1 = 33777;\r\n    /** Compressed BC1 (RGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1 = 33776;\r\n    /** Compressed BC1 (SRGB+A) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917;\r\n    /** Compressed BC1 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916;\r\n    /** Compressed ASTC 4x4 */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4 = 37808;\r\n    /** Compressed ASTC 4x4 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840;\r\n    /** Compressed ETC1 (RGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB_ETC1_WEBGL = 36196;\r\n    /** Compressed ETC2 (RGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB8_ETC2 = 37492;\r\n    /** Compressed ETC2 (SRGB) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB8_ETC2 = 37493;\r\n    /** Compressed ETC2 (RGB+A1) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494;\r\n    /** Compressed ETC2 (SRGB+A1)*/\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495;\r\n    /** Compressed ETC2 (RGB+A) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_RGBA8_ETC2_EAC = 37496;\r\n    /** Compressed ETC2 (SRGB+1) */\r\n    public static readonly TEXTUREFORMAT_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497;\r\n\r\n    /** UNSIGNED_BYTE */\r\n    public static readonly TEXTURETYPE_UNSIGNED_BYTE = 0;\r\n    /** @deprecated use more explicit TEXTURETYPE_UNSIGNED_BYTE instead. Use TEXTURETYPE_UNSIGNED_INTEGER for 32bits values.*/\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT = 0;\r\n    /** FLOAT */\r\n    public static readonly TEXTURETYPE_FLOAT = 1;\r\n    /** HALF_FLOAT */\r\n    public static readonly TEXTURETYPE_HALF_FLOAT = 2;\r\n    /** BYTE */\r\n    public static readonly TEXTURETYPE_BYTE = 3;\r\n    /** SHORT */\r\n    public static readonly TEXTURETYPE_SHORT = 4;\r\n    /** UNSIGNED_SHORT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT = 5;\r\n    /** INT */\r\n    public static readonly TEXTURETYPE_INT = 6;\r\n    /** UNSIGNED_INT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INTEGER = 7;\r\n    /** UNSIGNED_SHORT_4_4_4_4 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = 8;\r\n    /** UNSIGNED_SHORT_5_5_5_1 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = 9;\r\n    /** UNSIGNED_SHORT_5_6_5 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = 10;\r\n    /** UNSIGNED_INT_2_10_10_10_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = 11;\r\n    /** UNSIGNED_INT_24_8 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_24_8 = 12;\r\n    /** UNSIGNED_INT_10F_11F_11F_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = 13;\r\n    /** UNSIGNED_INT_5_9_9_9_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = 14;\r\n    /** FLOAT_32_UNSIGNED_INT_24_8_REV */\r\n    public static readonly TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 15;\r\n    /** UNDEFINED */\r\n    public static readonly TEXTURETYPE_UNDEFINED = 16;\r\n\r\n    /** 2D Texture target*/\r\n    public static readonly TEXTURE_2D = 3553;\r\n    /** 2D Array Texture target */\r\n    public static readonly TEXTURE_2D_ARRAY = 35866;\r\n    /** Cube Map Texture target */\r\n    public static readonly TEXTURE_CUBE_MAP = 34067;\r\n    /** Cube Map Array Texture target */\r\n    public static readonly TEXTURE_CUBE_MAP_ARRAY = 0xdeadbeef;\r\n    /** 3D Texture target */\r\n    public static readonly TEXTURE_3D = 32879;\r\n\r\n    /** nearest is mag = nearest and min = nearest and no mip */\r\n    public static readonly TEXTURE_NEAREST_SAMPLINGMODE = 1;\r\n    /** mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_NEAREST = 1;\r\n\r\n    /** Bilinear is mag = linear and min = linear and no mip */\r\n    public static readonly TEXTURE_BILINEAR_SAMPLINGMODE = 2;\r\n    /** mag = linear and min = linear and mip = none */\r\n    public static readonly TEXTURE_LINEAR_LINEAR = 2;\r\n\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_TRILINEAR_SAMPLINGMODE = 3;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPLINEAR = 3;\r\n\r\n    /** mag = nearest and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPNEAREST = 4;\r\n    /** mag = nearest and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPNEAREST = 5;\r\n    /** mag = nearest and min = linear and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPLINEAR = 6;\r\n    /** mag = nearest and min = linear and mip = none */\r\n    public static readonly TEXTURE_NEAREST_LINEAR = 7;\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPLINEAR = 8;\r\n    /** mag = linear and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPNEAREST = 9;\r\n    /** mag = linear and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPLINEAR = 10;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPNEAREST = 11;\r\n    /** mag = linear and min = nearest and mip = none */\r\n    public static readonly TEXTURE_LINEAR_NEAREST = 12;\r\n\r\n    /** Explicit coordinates mode */\r\n    public static readonly TEXTURE_EXPLICIT_MODE = 0;\r\n    /** Spherical coordinates mode */\r\n    public static readonly TEXTURE_SPHERICAL_MODE = 1;\r\n    /** Planar coordinates mode */\r\n    public static readonly TEXTURE_PLANAR_MODE = 2;\r\n    /** Cubic coordinates mode */\r\n    public static readonly TEXTURE_CUBIC_MODE = 3;\r\n    /** Projection coordinates mode */\r\n    public static readonly TEXTURE_PROJECTION_MODE = 4;\r\n    /** Skybox coordinates mode */\r\n    public static readonly TEXTURE_SKYBOX_MODE = 5;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly TEXTURE_INVCUBIC_MODE = 6;\r\n    /** Equirectangular coordinates mode */\r\n    public static readonly TEXTURE_EQUIRECTANGULAR_MODE = 7;\r\n    /** Equirectangular Fixed coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MODE = 8;\r\n    /** Equirectangular Fixed Mirrored coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\r\n\r\n    /** Offline (baking) quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_OFFLINE = 4096;\r\n\r\n    /** High quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_HIGH = 64;\r\n\r\n    /** Medium quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_MEDIUM = 16;\r\n\r\n    /** Low quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_LOW = 8;\r\n\r\n    // Texture rescaling mode\r\n    /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_FLOOR = 1;\r\n    /** Defines that texture rescaling will look for the nearest power of 2 size */\r\n    public static readonly SCALEMODE_NEAREST = 2;\r\n    /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_CEILING = 3;\r\n\r\n    /**\r\n     * The dirty texture flag value\r\n     */\r\n    public static readonly MATERIAL_TextureDirtyFlag = 1;\r\n    /**\r\n     * The dirty light flag value\r\n     */\r\n    public static readonly MATERIAL_LightDirtyFlag = 2;\r\n    /**\r\n     * The dirty fresnel flag value\r\n     */\r\n    public static readonly MATERIAL_FresnelDirtyFlag = 4;\r\n    /**\r\n     * The dirty attribute flag value\r\n     */\r\n    public static readonly MATERIAL_AttributesDirtyFlag = 8;\r\n    /**\r\n     * The dirty misc flag value\r\n     */\r\n    public static readonly MATERIAL_MiscDirtyFlag = 16;\r\n    /**\r\n     * The dirty prepass flag value\r\n     */\r\n    public static readonly MATERIAL_PrePassDirtyFlag = 32;\r\n    /**\r\n     * The all dirty flag value\r\n     */\r\n    public static readonly MATERIAL_AllDirtyFlag = 63;\r\n\r\n    /**\r\n     * Returns the triangle fill mode\r\n     */\r\n    public static readonly MATERIAL_TriangleFillMode = 0;\r\n    /**\r\n     * Returns the wireframe mode\r\n     */\r\n    public static readonly MATERIAL_WireFrameFillMode = 1;\r\n    /**\r\n     * Returns the point fill mode\r\n     */\r\n    public static readonly MATERIAL_PointFillMode = 2;\r\n    /**\r\n     * Returns the point list draw mode\r\n     */\r\n    public static readonly MATERIAL_PointListDrawMode = 3;\r\n    /**\r\n     * Returns the line list draw mode\r\n     */\r\n    public static readonly MATERIAL_LineListDrawMode = 4;\r\n    /**\r\n     * Returns the line loop draw mode\r\n     */\r\n    public static readonly MATERIAL_LineLoopDrawMode = 5;\r\n    /**\r\n     * Returns the line strip draw mode\r\n     */\r\n    public static readonly MATERIAL_LineStripDrawMode = 6;\r\n\r\n    /**\r\n     * Returns the triangle strip draw mode\r\n     */\r\n    public static readonly MATERIAL_TriangleStripDrawMode = 7;\r\n    /**\r\n     * Returns the triangle fan draw mode\r\n     */\r\n    public static readonly MATERIAL_TriangleFanDrawMode = 8;\r\n\r\n    /**\r\n     * Stores the clock-wise side orientation\r\n     */\r\n    public static readonly MATERIAL_ClockWiseSideOrientation = 0;\r\n    /**\r\n     * Stores the counter clock-wise side orientation\r\n     */\r\n    public static readonly MATERIAL_CounterClockWiseSideOrientation = 1;\r\n\r\n    /**\r\n     * Nothing\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_NothingTrigger = 0;\r\n    /**\r\n     * On pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickTrigger = 1;\r\n    /**\r\n     * On left pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnLeftPickTrigger = 2;\r\n    /**\r\n     * On right pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnRightPickTrigger = 3;\r\n    /**\r\n     * On center pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnCenterPickTrigger = 4;\r\n    /**\r\n     * On pick down\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickDownTrigger = 5;\r\n    /**\r\n     * On double pick\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnDoublePickTrigger = 6;\r\n    /**\r\n     * On pick up\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickUpTrigger = 7;\r\n    /**\r\n     * On pick out.\r\n     * This trigger will only be raised if you also declared a OnPickDown\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickOutTrigger = 16;\r\n    /**\r\n     * On long press\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnLongPressTrigger = 8;\r\n    /**\r\n     * On pointer over\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPointerOverTrigger = 9;\r\n    /**\r\n     * On pointer out\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPointerOutTrigger = 10;\r\n    /**\r\n     * On every frame\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnEveryFrameTrigger = 11;\r\n    /**\r\n     * On intersection enter\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnIntersectionEnterTrigger = 12;\r\n    /**\r\n     * On intersection exit\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnIntersectionExitTrigger = 13;\r\n    /**\r\n     * On key down\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnKeyDownTrigger = 14;\r\n    /**\r\n     * On key up\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions#triggers\r\n     */\r\n    public static readonly ACTION_OnKeyUpTrigger = 15;\r\n\r\n    /**\r\n     * Billboard mode will only apply to Y axis\r\n     */\r\n    public static readonly PARTICLES_BILLBOARDMODE_Y = 2;\r\n    /**\r\n     * Billboard mode will apply to all axes\r\n     */\r\n    public static readonly PARTICLES_BILLBOARDMODE_ALL = 7;\r\n    /**\r\n     * Special billboard mode where the particle will be biilboard to the camera but rotated to align with direction\r\n     */\r\n    public static readonly PARTICLES_BILLBOARDMODE_STRETCHED = 8;\r\n    /**\r\n     * Special billboard mode where the particle will be billboard to the camera but only around the axis of the direction of particle emission\r\n     */\r\n    public static readonly PARTICLES_BILLBOARDMODE_STRETCHED_LOCAL = 9;\r\n\r\n    /** Default culling strategy : this is an exclusion test and it's the more accurate.\r\n     *  Test order :\r\n     *  Is the bounding sphere outside the frustum ?\r\n     *  If not, are the bounding box vertices outside the frustum ?\r\n     *  It not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_STANDARD = 0;\r\n    /** Culling strategy : Bounding Sphere Only.\r\n     *  This is an exclusion test. It's faster than the standard strategy because the bounding box is not tested.\r\n     *  It's also less accurate than the standard because some not visible objects can still be selected.\r\n     *  Test : is the bounding sphere outside the frustum ?\r\n     *  If not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY = 1;\r\n    /** Culling strategy : Optimistic Inclusion.\r\n     *  This in an inclusion test first, then the standard exclusion test.\r\n     *  This can be faster when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the standard test when the tested object center is not the frustum but one of its bounding box vertex is still inside.\r\n     *  Anyway, it's as accurate as the standard strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the default culling strategy.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION = 2;\r\n    /** Culling strategy : Optimistic Inclusion then Bounding Sphere Only.\r\n     *  This in an inclusion test first, then the bounding sphere only exclusion test.\r\n     *  This can be the fastest test when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the BoundingSphereOnly strategy when the tested object center is not in the frustum but its bounding sphere still intersects it.\r\n     *  It's less accurate than the standard strategy and as accurate as the BoundingSphereOnly strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the Bounding Sphere Only strategy. No Bounding Box is tested here.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY = 3;\r\n\r\n    /**\r\n     * No logging while loading\r\n     */\r\n    public static readonly SCENELOADER_NO_LOGGING = 0;\r\n    /**\r\n     * Minimal logging while loading\r\n     */\r\n    public static readonly SCENELOADER_MINIMAL_LOGGING = 1;\r\n    /**\r\n     * Summary logging while loading\r\n     */\r\n    public static readonly SCENELOADER_SUMMARY_LOGGING = 2;\r\n    /**\r\n     * Detailed logging while loading\r\n     */\r\n    public static readonly SCENELOADER_DETAILED_LOGGING = 3;\r\n\r\n    /**\r\n     * Constant used to retrieve the irradiance texture index in the textures array in the prepass\r\n     * using getIndex(Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_IRRADIANCE_TEXTURE_TYPE = 0;\r\n    /**\r\n     * Constant used to retrieve the position texture index in the textures array in the prepass\r\n     * using getIndex(Constants.PREPASS_POSITION_TEXTURE_INDEX)\r\n     */\r\n    public static readonly PREPASS_POSITION_TEXTURE_TYPE = 1;\r\n    /**\r\n     * Constant used to retrieve the velocity texture index in the textures array in the prepass\r\n     * using getIndex(Constants.PREPASS_VELOCITY_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_VELOCITY_TEXTURE_TYPE = 2;\r\n    /**\r\n     * Constant used to retrieve the reflectivity texture index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_REFLECTIVITY_TEXTURE_TYPE = 3;\r\n    /**\r\n     * Constant used to retrieve the lit color texture index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_COLOR_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_COLOR_TEXTURE_TYPE = 4;\r\n    /**\r\n     * Constant used to retrieve depth index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_DEPTH_TEXTURE_TYPE = 5;\r\n    /**\r\n     * Constant used to retrieve normal index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_NORMAL_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_NORMAL_TEXTURE_TYPE = 6;\r\n    /**\r\n     * Constant used to retrieve (sqrt) albedo index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_ALBEDO_SQRT_TEXTURE_TYPE = 7;\r\n\r\n    /**\r\n     * Constant used to retrieve world normal index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_WORLD_NORMAL_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_WORLD_NORMAL_TEXTURE_TYPE = 8;\r\n\r\n    /**\r\n     * Constant used to retrieve the local position texture index in the textures array in the prepass\r\n     * using getIndex(Constants.PREPASS_LOCAL_POSITION_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_LOCAL_POSITION_TEXTURE_TYPE = 9;\r\n\r\n    /**\r\n     * Constant used to retrieve screen-space (non-linear) depth index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_SCREENSPACE_DEPTH_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_SCREENSPACE_DEPTH_TEXTURE_TYPE = 10;\r\n\r\n    /**\r\n     * Constant used to retrieve the velocity texture index in the textures array in the prepass\r\n     * using getIndex(Constants.PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE = 11;\r\n\r\n    /**\r\n     * Constant used to retrieve albedo index in the textures array in the prepass\r\n     * using the getIndex(Constants.PREPASS_ALBEDO_TEXTURE_TYPE)\r\n     */\r\n    public static readonly PREPASS_ALBEDO_TEXTURE_TYPE = 12;\r\n\r\n    /** Flag to create a readable buffer (the buffer can be the source of a copy) */\r\n    public static readonly BUFFER_CREATIONFLAG_READ = 1;\r\n    /** Flag to create a writable buffer (the buffer can be the destination of a copy) */\r\n    public static readonly BUFFER_CREATIONFLAG_WRITE = 2;\r\n    /** Flag to create a readable and writable buffer */\r\n    public static readonly BUFFER_CREATIONFLAG_READWRITE = 3;\r\n    /** Flag to create a buffer suitable to be used as a uniform buffer */\r\n    public static readonly BUFFER_CREATIONFLAG_UNIFORM = 4;\r\n    /** Flag to create a buffer suitable to be used as a vertex buffer */\r\n    public static readonly BUFFER_CREATIONFLAG_VERTEX = 8;\r\n    /** Flag to create a buffer suitable to be used as an index buffer */\r\n    public static readonly BUFFER_CREATIONFLAG_INDEX = 16;\r\n    /** Flag to create a buffer suitable to be used as a storage buffer */\r\n    public static readonly BUFFER_CREATIONFLAG_STORAGE = 32;\r\n    /** Flag to create a buffer suitable to be used for indirect calls, such as `dispatchIndirect` */\r\n    public static readonly BUFFER_CREATIONFLAG_INDIRECT = 64;\r\n\r\n    /**\r\n     * Prefixes used by the engine for sub mesh draw wrappers\r\n     */\r\n\r\n    /** @internal */\r\n    public static readonly RENDERPASS_MAIN = 0;\r\n\r\n    /**\r\n     * Constant used as key code for Alt key\r\n     */\r\n    public static readonly INPUT_ALT_KEY = 18;\r\n\r\n    /**\r\n     * Constant used as key code for Ctrl key\r\n     */\r\n    public static readonly INPUT_CTRL_KEY = 17;\r\n\r\n    /**\r\n     * Constant used as key code for Meta key (Left Win, Left Cmd)\r\n     */\r\n    public static readonly INPUT_META_KEY1 = 91;\r\n\r\n    /**\r\n     * Constant used as key code for Meta key (Right Win)\r\n     */\r\n    public static readonly INPUT_META_KEY2 = 92;\r\n\r\n    /**\r\n     * Constant used as key code for Meta key (Right Win, Right Cmd)\r\n     */\r\n    public static readonly INPUT_META_KEY3 = 93;\r\n\r\n    /**\r\n     * Constant used as key code for Shift key\r\n     */\r\n    public static readonly INPUT_SHIFT_KEY = 16;\r\n\r\n    /** Standard snapshot rendering. In this mode, some form of dynamic behavior is possible (for eg, uniform buffers are still updated) */\r\n    public static readonly SNAPSHOTRENDERING_STANDARD = 0;\r\n\r\n    /** Fast snapshot rendering. In this mode, everything is static and only some limited form of dynamic behaviour is possible */\r\n    public static readonly SNAPSHOTRENDERING_FAST = 1;\r\n\r\n    /**\r\n     * This is the default projection mode used by the cameras.\r\n     * It helps recreating a feeling of perspective and better appreciate depth.\r\n     * This is the best way to simulate real life cameras.\r\n     */\r\n    public static readonly PERSPECTIVE_CAMERA = 0;\r\n    /**\r\n     * This helps creating camera with an orthographic mode.\r\n     * Orthographic is commonly used in engineering as a means to produce object specifications that communicate dimensions unambiguously, each line of 1 unit length (cm, meter..whatever) will appear to have the same length everywhere on the drawing. This allows the drafter to dimension only a subset of lines and let the reader know that other lines of that length on the drawing are also that length in reality. Every parallel line in the drawing is also parallel in the object.\r\n     */\r\n    public static readonly ORTHOGRAPHIC_CAMERA = 1;\r\n\r\n    /**\r\n     * This is the default FOV mode for perspective cameras.\r\n     * This setting aligns the upper and lower bounds of the viewport to the upper and lower bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_VERTICAL_FIXED = 0;\r\n    /**\r\n     * This setting aligns the left and right bounds of the viewport to the left and right bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_HORIZONTAL_FIXED = 1;\r\n\r\n    /**\r\n     * This specifies there is no need for a camera rig.\r\n     * Basically only one eye is rendered corresponding to the camera.\r\n     */\r\n    public static readonly RIG_MODE_NONE = 0;\r\n    /**\r\n     * Simulates a camera Rig with one blue eye and one red eye.\r\n     * This can be use with 3d blue and red glasses.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_ANAGLYPH = 10;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL = 11;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a none parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED = 12;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered over under each other.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_OVERUNDER = 13;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered on successive lines interlaced for passive 3d monitors.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_INTERLACED = 14;\r\n    /**\r\n     * Defines that both eyes of the camera should be renderered in a VR mode (carbox).\r\n     */\r\n    public static readonly RIG_MODE_VR = 20;\r\n    /**\r\n     * Custom rig mode allowing rig cameras to be populated manually with any number of cameras\r\n     */\r\n    public static readonly RIG_MODE_CUSTOM = 22;\r\n\r\n    /**\r\n     * Maximum number of uv sets supported\r\n     */\r\n    public static readonly MAX_SUPPORTED_UV_SETS = 6;\r\n\r\n    /**\r\n     * GL constants\r\n     */\r\n    /** Alpha blend equation: ADD */\r\n    public static readonly GL_ALPHA_EQUATION_ADD = 0x8006;\r\n    /** Alpha equation: MIN */\r\n    public static readonly GL_ALPHA_EQUATION_MIN = 0x8007;\r\n    /** Alpha equation: MAX */\r\n    public static readonly GL_ALPHA_EQUATION_MAX = 0x8008;\r\n    /** Alpha equation: SUBTRACT */\r\n    public static readonly GL_ALPHA_EQUATION_SUBTRACT = 0x800a;\r\n    /** Alpha equation: REVERSE_SUBTRACT */\r\n    public static readonly GL_ALPHA_EQUATION_REVERSE_SUBTRACT = 0x800b;\r\n\r\n    /** Alpha blend function: SRC */\r\n    public static readonly GL_ALPHA_FUNCTION_SRC = 0x0300;\r\n    /** Alpha blend function: ONE_MINUS_SRC */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR = 0x0301;\r\n    /** Alpha blend function: SRC_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_SRC_ALPHA = 0x0302;\r\n    /** Alpha blend function: ONE_MINUS_SRC_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA = 0x0303;\r\n    /** Alpha blend function: DST_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_DST_ALPHA = 0x0304;\r\n    /** Alpha blend function: ONE_MINUS_DST_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_DST_ALPHA = 0x0305;\r\n    /** Alpha blend function: ONE_MINUS_DST */\r\n    public static readonly GL_ALPHA_FUNCTION_DST_COLOR = 0x0306;\r\n    /** Alpha blend function: ONE_MINUS_DST */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_DST_COLOR = 0x0307;\r\n    /** Alpha blend function: SRC_ALPHA_SATURATED */\r\n    public static readonly GL_ALPHA_FUNCTION_SRC_ALPHA_SATURATED = 0x0308;\r\n    /** Alpha blend function: CONSTANT */\r\n    public static readonly GL_ALPHA_FUNCTION_CONSTANT_COLOR = 0x8001;\r\n    /** Alpha blend function: ONE_MINUS_CONSTANT */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_COLOR = 0x8002;\r\n    /** Alpha blend function: CONSTANT_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_CONSTANT_ALPHA = 0x8003;\r\n    /** Alpha blend function: ONE_MINUS_CONSTANT_ALPHA */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_ALPHA = 0x8004;\r\n    /** Alpha blend function: SRC1 */\r\n    public static readonly GL_ALPHA_FUNCTION_SRC1_COLOR = 0x88f9;\r\n    /** Alpha blend function: SRC1 */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_SRC1_COLOR = 0x88fa;\r\n    /** Alpha blend function: SRC1 */\r\n    public static readonly GL_ALPHA_FUNCTION_SRC1_ALPHA = 0x8589;\r\n    /** Alpha blend function: SRC1 */\r\n    public static readonly GL_ALPHA_FUNCTION_ONE_MINUS_SRC1_ALPHA = 0x88fb;\r\n\r\n    /** URL to the snippet server. Points to the public snippet server by default */\r\n    public static SnippetUrl = \"https://snippet.babylonjs.com\";\r\n\r\n    /** The fog is deactivated */\r\n    public static FOGMODE_NONE = 0;\r\n    /** The fog density is following an exponential function */\r\n    public static FOGMODE_EXP = 1;\r\n    /** The fog density is following an exponential function faster than FOGMODE_EXP */\r\n    public static FOGMODE_EXP2 = 2;\r\n    /** The fog density is following a linear function. */\r\n    public static FOGMODE_LINEAR = 3;\r\n\r\n    /**\r\n     * The byte type.\r\n     */\r\n    public static BYTE = 5120;\r\n\r\n    /**\r\n     * The unsigned byte type.\r\n     */\r\n    public static UNSIGNED_BYTE = 5121;\r\n\r\n    /**\r\n     * The short type.\r\n     */\r\n    public static SHORT = 5122;\r\n\r\n    /**\r\n     * The unsigned short type.\r\n     */\r\n    public static UNSIGNED_SHORT = 5123;\r\n\r\n    /**\r\n     * The integer type.\r\n     */\r\n    public static INT = 5124;\r\n\r\n    /**\r\n     * The unsigned integer type.\r\n     */\r\n    public static UNSIGNED_INT = 5125;\r\n\r\n    /**\r\n     * The float type.\r\n     */\r\n    public static FLOAT = 5126;\r\n\r\n    /**\r\n     * Positions\r\n     */\r\n    public static PositionKind = \"position\";\r\n    /**\r\n     * Normals\r\n     */\r\n    public static NormalKind = \"normal\";\r\n    /**\r\n     * Tangents\r\n     */\r\n    public static TangentKind = \"tangent\";\r\n    /**\r\n     * Texture coordinates\r\n     */\r\n    public static UVKind = \"uv\";\r\n    /**\r\n     * Texture coordinates 2\r\n     */\r\n    public static UV2Kind = \"uv2\";\r\n    /**\r\n     * Texture coordinates 3\r\n     */\r\n    public static UV3Kind = \"uv3\";\r\n    /**\r\n     * Texture coordinates 4\r\n     */\r\n    public static UV4Kind = \"uv4\";\r\n    /**\r\n     * Texture coordinates 5\r\n     */\r\n    public static UV5Kind = \"uv5\";\r\n    /**\r\n     * Texture coordinates 6\r\n     */\r\n    public static UV6Kind = \"uv6\";\r\n    /**\r\n     * Colors\r\n     */\r\n    public static ColorKind = \"color\";\r\n    /**\r\n     * Instance Colors\r\n     */\r\n    public static ColorInstanceKind = \"instanceColor\";\r\n    /**\r\n     * Matrix indices (for bones)\r\n     */\r\n    public static MatricesIndicesKind = \"matricesIndices\";\r\n    /**\r\n     * Matrix weights (for bones)\r\n     */\r\n    public static MatricesWeightsKind = \"matricesWeights\";\r\n    /**\r\n     * Additional matrix indices (for bones)\r\n     */\r\n    public static MatricesIndicesExtraKind = \"matricesIndicesExtra\";\r\n    /**\r\n     * Additional matrix weights (for bones)\r\n     */\r\n    public static MatricesWeightsExtraKind = \"matricesWeightsExtra\";\r\n\r\n    /**\r\n     * The default minZ value for the near plane of a frustum light\r\n     */\r\n    public static ShadowMinZ = 0;\r\n    /**\r\n     * The default maxZ value for the far plane of a frustum light\r\n     */\r\n    public static ShadowMaxZ = 10000;\r\n}\r\n", "/**\r\n * Gather the list of clipboard event types as constants.\r\n */\r\nexport class ClipboardEventTypes {\r\n    /**\r\n     * The clipboard event is fired when a copy command is active (pressed).\r\n     */\r\n    public static readonly COPY = 0x01; //\r\n    /**\r\n     *  The clipboard event is fired when a cut command is active (pressed).\r\n     */\r\n    public static readonly CUT = 0x02;\r\n\r\n    /**\r\n     * The clipboard event is fired when a paste command is active (pressed).\r\n     */\r\n    public static readonly PASTE = 0x03;\r\n}\r\n/**\r\n * This class is used to store clipboard related info for the onClipboardObservable event.\r\n */\r\nexport class ClipboardInfo {\r\n    /**\r\n     *Creates an instance of ClipboardInfo.\r\n     * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (BABYLON.ClipboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: ClipboardEvent\r\n    ) {}\r\n\r\n    /**\r\n     *  Get the clipboard event's type from the keycode.\r\n     * @param keyCode Defines the keyCode for the current keyboard event.\r\n     * @returns {number}\r\n     */\r\n    public static GetTypeFromCharacter(keyCode: number): number {\r\n        const charCode = keyCode;\r\n        //TODO: add codes for extended ASCII\r\n        switch (charCode) {\r\n            case 67:\r\n                return ClipboardEventTypes.COPY;\r\n            case 86:\r\n                return ClipboardEventTypes.PASTE;\r\n            case 88:\r\n                return ClipboardEventTypes.CUT;\r\n            default:\r\n                return -1;\r\n        }\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n// \"Coroutines are computer program components that generalize subroutines for non-preemptive multitasking, by allowing execution to be suspended and resumed.\"\r\n// https://en.wikipedia.org/wiki/Coroutine\r\n\r\n// In this implementation, coroutines are typically created via generator functions (function* with yield statements).\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\r\n\r\n// In this implementation, the generator function (possibly parameterized) is referred to as a coroutine factory, and the returned iterator is referred to as the coroutine.\r\n// Technically yielding generator functions are not required - anything that implements the contract of Coroutine<T> can be run as a coroutine.\r\n\r\n// The coroutine is started with the first call to next on the iterator, it is suspended with yield statements, and it is resumed with additional calls to next on the iterator.\r\n// To create an object satisfying the Coroutine<T> contract with a generator function, it must not yield values, but rather only void via a plain \"yield;\" statement.\r\n// Coroutines can call other coroutines via:\r\n// 1. yield* someOtherCoroutine(); // If the called coroutine does not return a value\r\n// 2. const result = yield* someOtherCoroutine(); // If the called coroutine returns a value\r\n\r\n// Coroutines are run with the runCoroutine function, which takes a Coroutine<T>, a CoroutineScheduler<T>, and a success and error callback.\r\n// A scheduler is responsible for scheduling the next step of a coroutine, either synchronously or asynchronously.\r\n\r\n/**\r\n * A Coroutine<T> is the intersection of:\r\n * 1. An Iterator that yields void, returns a T, and is not passed values with calls to next.\r\n * 2. An IterableIterator of void (since it only yields void).\r\n */\r\ntype CoroutineBase<TStep, TReturn> = Iterator<TStep, TReturn, void> & IterableIterator<TStep>;\r\n/** @internal */\r\nexport type Coroutine<T> = CoroutineBase<void, T>;\r\n/** @internal */\r\nexport type AsyncCoroutine<T> = CoroutineBase<void | Promise<void>, T>;\r\n\r\n// A CoroutineStep<T> represents a single step of a coroutine, and is an IteratorResult as returned from Coroutine<T>.next().\r\n/** @internal */\r\nexport type CoroutineStep<T> = IteratorResult<void, T>;\r\n\r\n// A CoroutineScheduler<T> is responsible for scheduling the call to Coroutine<T>.next and invokes the success or error callback after next is called.\r\n/** @internal */\r\nexport type CoroutineScheduler<T> = (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => void;\r\n\r\n// The inline scheduler simply steps the coroutine synchronously. This is useful for running a coroutine synchronously, and also as a helper function for other schedulers.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function inlineScheduler<T>(coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) {\r\n    try {\r\n        const step = coroutine.next();\r\n\r\n        if (step.done) {\r\n            onStep(step);\r\n        } else if (!step.value) {\r\n            // NOTE: The properties of step have been narrowed, but the type of step itself is not narrowed, so the cast below is the most type safe way to deal with this without instantiating a new object to hold the values.\r\n            onStep(step as { done: typeof step.done; value: typeof step.value });\r\n        } else {\r\n            step.value.then(() => {\r\n                step.value = undefined;\r\n                onStep(step as { done: typeof step.done; value: typeof step.value });\r\n            }, onError);\r\n        }\r\n    } catch (error) {\r\n        onError(error);\r\n    }\r\n}\r\n\r\n// The yielding scheduler steps the coroutine synchronously until the specified time interval has elapsed, then yields control so other operations can be performed.\r\n// A single instance of a yielding scheduler could be shared across multiple coroutines to yield when their collective work exceeds the threshold.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function createYieldingScheduler<T>(yieldAfterMS = 25) {\r\n    let startTime: number | undefined;\r\n    return (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => {\r\n        const currentTime = performance.now();\r\n\r\n        if (startTime === undefined || currentTime - startTime > yieldAfterMS) {\r\n            // If this is the first coroutine step, or if the time interval has elapsed, record a new start time, and schedule the coroutine step to happen later, effectively yielding control of the execution context.\r\n            startTime = currentTime;\r\n            setTimeout(() => {\r\n                inlineScheduler(coroutine, onStep, onError);\r\n            }, 0);\r\n        } else {\r\n            // Otherwise it is not time to yield yet, so step the coroutine synchronously.\r\n            inlineScheduler(coroutine, onStep, onError);\r\n        }\r\n    };\r\n}\r\n\r\n// Runs the specified coroutine with the specified scheduler. The success or error callback will be invoked when the coroutine finishes.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function runCoroutine<T>(\r\n    coroutine: AsyncCoroutine<T>,\r\n    scheduler: CoroutineScheduler<T>,\r\n    onSuccess: (result: T) => void,\r\n    onError: (error: any) => void,\r\n    abortSignal?: AbortSignal\r\n) {\r\n    const resume = () => {\r\n        let reschedule: boolean | undefined;\r\n\r\n        const onStep = (stepResult: CoroutineStep<T>) => {\r\n            if (stepResult.done) {\r\n                // If the coroutine is done, report success.\r\n                onSuccess(stepResult.value);\r\n            } else {\r\n                // If the coroutine is not done, resume the coroutine (via the scheduler).\r\n                if (reschedule === undefined) {\r\n                    // If reschedule is undefined at this point, then the coroutine must have stepped synchronously, so just flag another loop iteration.\r\n                    reschedule = true;\r\n                } else {\r\n                    // If reschedule is defined at this point, then the coroutine must have stepped asynchronously, so call resume to restart the step loop.\r\n                    resume();\r\n                }\r\n            }\r\n        };\r\n\r\n        do {\r\n            reschedule = undefined;\r\n\r\n            if (!abortSignal || !abortSignal.aborted) {\r\n                scheduler(coroutine, onStep, onError);\r\n            } else {\r\n                onError(new Error(\"Aborted\"));\r\n            }\r\n\r\n            if (reschedule === undefined) {\r\n                // If reschedule is undefined at this point, then the coroutine must have stepped asynchronously, so stop looping and let the coroutine be resumed later.\r\n                reschedule = false;\r\n            }\r\n        } while (reschedule);\r\n    };\r\n\r\n    resume();\r\n}\r\n\r\n// Runs the specified coroutine synchronously.\r\n/**\r\n * @internal\r\n */\r\nexport function runCoroutineSync<T>(coroutine: Coroutine<T>, abortSignal?: AbortSignal): T {\r\n    // Run the coroutine with the inline scheduler, storing the returned value, or re-throwing the error (since the error callback will be called synchronously by the inline scheduler).\r\n    let result: T | undefined;\r\n    runCoroutine(\r\n        coroutine,\r\n        inlineScheduler,\r\n        (r: T) => (result = r),\r\n        (e: any) => {\r\n            throw e;\r\n        },\r\n        abortSignal\r\n    );\r\n\r\n    // Synchronously return the result of the coroutine.\r\n    return result!;\r\n}\r\n\r\n// Runs the specified coroutine asynchronously with the specified scheduler.\r\n/**\r\n * @internal\r\n */\r\nexport function runCoroutineAsync<T>(coroutine: AsyncCoroutine<T>, scheduler: CoroutineScheduler<T>, abortSignal?: AbortSignal): Promise<T> {\r\n    // Run the coroutine with a yielding scheduler, resolving or rejecting the result promise when the coroutine finishes.\r\n    return new Promise((resolve, reject) => {\r\n        runCoroutine(coroutine, scheduler, resolve, reject, abortSignal);\r\n    });\r\n}\r\n\r\n/**\r\n * Given a function that returns a Coroutine<T>, produce a function with the same parameters that returns a T.\r\n * The returned function runs the coroutine synchronously.\r\n * @param coroutineFactory A function that returns a Coroutine<T>.\r\n * @param abortSignal\r\n * @returns A function that runs the coroutine synchronously.\r\n * @internal\r\n */\r\nexport function makeSyncFunction<TParams extends unknown[], TReturn>(\r\n    coroutineFactory: (...params: TParams) => Coroutine<TReturn>,\r\n    abortSignal?: AbortSignal\r\n): (...params: TParams) => TReturn {\r\n    return (...params: TParams) => {\r\n        // Run the coroutine synchronously.\r\n        return runCoroutineSync(coroutineFactory(...params), abortSignal);\r\n    };\r\n}\r\n\r\n/**\r\n * Given a function that returns a Coroutine<T>, product a function with the same parameters that returns a Promise<T>.\r\n * The returned function runs the coroutine asynchronously, yield control of the execution context occasionally to enable a more responsive experience.\r\n * @param coroutineFactory A function that returns a Coroutine<T>.\r\n * @param scheduler\r\n * @param abortSignal\r\n * @returns A function that runs the coroutine asynchronously.\r\n * @internal\r\n */\r\nexport function makeAsyncFunction<TParams extends unknown[], TReturn>(\r\n    coroutineFactory: (...params: TParams) => AsyncCoroutine<TReturn>,\r\n    scheduler: CoroutineScheduler<TReturn>,\r\n    abortSignal?: AbortSignal\r\n): (...params: TParams) => Promise<TReturn> {\r\n    return (...params: TParams) => {\r\n        // Run the coroutine asynchronously.\r\n        return runCoroutineAsync(coroutineFactory(...params), scheduler, abortSignal);\r\n    };\r\n}\r\n", "import type { Nullable } from \"../types\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class IntersectionInfo {\r\n    public faceId = 0;\r\n    public subMeshId = 0;\r\n\r\n    constructor(\r\n        public bu: Nullable<number>,\r\n        public bv: Nullable<number>,\r\n        public distance: number\r\n    ) {}\r\n}\r\n", "import type { DeepImmutable, Nullable } from \"../types\";\r\nimport { BuildArray } from \"../Misc/arrayTools\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { BoundingSphere } from \"../Culling/boundingSphere\";\r\n\r\nimport type { ICullable } from \"./boundingInfo\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\nimport type { DrawWrapper } from \"../Materials/drawWrapper\";\r\n\r\n/**\r\n * Class used to store bounding box information\r\n */\r\nexport class BoundingBox implements ICullable {\r\n    /**\r\n     * Gets the 8 vectors representing the bounding box in local space\r\n     */\r\n    public readonly vectors: Vector3[] = BuildArray(8, Vector3.Zero);\r\n    /**\r\n     * Gets the center of the bounding box in local space\r\n     */\r\n    public readonly center: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the center of the bounding box in world space\r\n     */\r\n    public readonly centerWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets half the size of the extent in local space. Multiply by 2 to obtain the full size of the box!\r\n     */\r\n    public readonly extendSize: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets half the size of the extent in world space. Multiply by 2 to obtain the full size of the box!\r\n     */\r\n    public readonly extendSizeWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the OBB (object bounding box) directions\r\n     */\r\n    public readonly directions: Vector3[] = BuildArray(3, Vector3.Zero);\r\n    /**\r\n     * Gets the 8 vectors representing the bounding box in world space\r\n     */\r\n    public readonly vectorsWorld: Vector3[] = BuildArray(8, Vector3.Zero);\r\n    /**\r\n     * Gets the minimum vector in world space\r\n     */\r\n    public readonly minimumWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in world space\r\n     */\r\n    public readonly maximumWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\r\n    public readonly minimum: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\r\n    public readonly maximum: Vector3 = Vector3.Zero();\r\n\r\n    private _worldMatrix: DeepImmutable<Matrix>;\r\n    private static readonly _TmpVector3 = BuildArray(3, Vector3.Zero);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _tag: number;\r\n\r\n    /** @internal */\r\n    public _drawWrapperFront: Nullable<DrawWrapper> = null;\r\n    /** @internal */\r\n    public _drawWrapperBack: Nullable<DrawWrapper> = null;\r\n\r\n    /**\r\n     * Creates a new bounding box\r\n     * @param min defines the minimum vector (in local space)\r\n     * @param max defines the maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Recreates the entire bounding box from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        const vectors = this.vectors;\r\n\r\n        this.minimum.copyFromFloats(minX, minY, minZ);\r\n        this.maximum.copyFromFloats(maxX, maxY, maxZ);\r\n        vectors[0].copyFromFloats(minX, minY, minZ);\r\n        vectors[1].copyFromFloats(maxX, maxY, maxZ);\r\n        vectors[2].copyFromFloats(maxX, minY, minZ);\r\n        vectors[3].copyFromFloats(minX, maxY, minZ);\r\n        vectors[4].copyFromFloats(minX, minY, maxZ);\r\n        vectors[5].copyFromFloats(maxX, maxY, minZ);\r\n        vectors[6].copyFromFloats(minX, maxY, maxZ);\r\n        vectors[7].copyFromFloats(maxX, minY, maxZ);\r\n\r\n        // OBB\r\n        max.addToRef(min, this.center).scaleInPlace(0.5);\r\n        max.subtractToRef(min, this.extendSize).scaleInPlace(0.5);\r\n\r\n        this._worldMatrix = worldMatrix || Matrix.IdentityReadOnly;\r\n\r\n        this._update(this._worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding box by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding box\r\n     */\r\n    public scale(factor: number): BoundingBox {\r\n        const tmpVectors = BoundingBox._TmpVector3;\r\n        const diff = this.maximum.subtractToRef(this.minimum, tmpVectors[0]);\r\n        const len = diff.length();\r\n        diff.normalizeFromLength(len);\r\n        const distance = len * factor;\r\n        const newRadius = diff.scaleInPlace(distance * 0.5);\r\n\r\n        const min = this.center.subtractToRef(newRadius, tmpVectors[1]);\r\n        const max = this.center.addToRef(newRadius, tmpVectors[2]);\r\n\r\n        this.reConstruct(min, max, this._worldMatrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix of the bounding box\r\n     * @returns a matrix\r\n     */\r\n    public getWorldMatrix(): DeepImmutable<Matrix> {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _update(world: DeepImmutable<Matrix>): void {\r\n        const minWorld = this.minimumWorld;\r\n        const maxWorld = this.maximumWorld;\r\n        const directions = this.directions;\r\n        const vectorsWorld = this.vectorsWorld;\r\n        const vectors = this.vectors;\r\n\r\n        if (!world.isIdentity()) {\r\n            minWorld.setAll(Number.MAX_VALUE);\r\n            maxWorld.setAll(-Number.MAX_VALUE);\r\n\r\n            for (let index = 0; index < 8; ++index) {\r\n                const v = vectorsWorld[index];\r\n                Vector3.TransformCoordinatesToRef(vectors[index], world, v);\r\n                minWorld.minimizeInPlace(v);\r\n                maxWorld.maximizeInPlace(v);\r\n            }\r\n\r\n            // Extend\r\n            maxWorld.subtractToRef(minWorld, this.extendSizeWorld).scaleInPlace(0.5);\r\n            maxWorld.addToRef(minWorld, this.centerWorld).scaleInPlace(0.5);\r\n        } else {\r\n            minWorld.copyFrom(this.minimum);\r\n            maxWorld.copyFrom(this.maximum);\r\n            for (let index = 0; index < 8; ++index) {\r\n                vectorsWorld[index].copyFrom(vectors[index]);\r\n            }\r\n\r\n            // Extend\r\n            this.extendSizeWorld.copyFrom(this.extendSize);\r\n            this.centerWorld.copyFrom(this.center);\r\n        }\r\n\r\n        Vector3.FromArrayToRef(world.m, 0, directions[0]);\r\n        Vector3.FromArrayToRef(world.m, 4, directions[1]);\r\n        Vector3.FromArrayToRef(world.m, 8, directions[2]);\r\n\r\n        this._worldMatrix = world;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box is intersecting the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return BoundingBox.IsInFrustum(this.vectorsWorld, frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box is entirely inside the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an inclusion\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return BoundingBox.IsCompletelyInFrustum(this.vectorsWorld, frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is inside the bounding box\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside the bounding box\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        const min = this.minimumWorld;\r\n        const max = this.maximumWorld;\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        const pointX = point.x,\r\n            pointY = point.y,\r\n            pointZ = point.z;\r\n        const delta = -Epsilon;\r\n\r\n        if (maxX - pointX < delta || delta > pointX - minX) {\r\n            return false;\r\n        }\r\n\r\n        if (maxY - pointY < delta || delta > pointY - minY) {\r\n            return false;\r\n        }\r\n\r\n        if (maxZ - pointZ < delta || delta > pointZ - minZ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box intersects with a bounding sphere\r\n     * @param sphere defines the sphere to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsSphere(sphere: DeepImmutable<BoundingSphere>): boolean {\r\n        return BoundingBox.IntersectsSphere(this.minimumWorld, this.maximumWorld, sphere.centerWorld, sphere.radiusWorld);\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box intersects with a box defined by a min and max vectors\r\n     * @param min defines the min vector to use\r\n     * @param max defines the max vector to use\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsMinMax(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>): boolean {\r\n        const myMin = this.minimumWorld;\r\n        const myMax = this.maximumWorld;\r\n        const myMinX = myMin.x,\r\n            myMinY = myMin.y,\r\n            myMinZ = myMin.z,\r\n            myMaxX = myMax.x,\r\n            myMaxY = myMax.y,\r\n            myMaxZ = myMax.z;\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        if (myMaxX < minX || myMinX > maxX) {\r\n            return false;\r\n        }\r\n\r\n        if (myMaxY < minY || myMinY > maxY) {\r\n            return false;\r\n        }\r\n\r\n        if (myMaxZ < minZ || myMinZ > maxZ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources of the class\r\n     */\r\n    public dispose(): void {\r\n        this._drawWrapperFront?.dispose();\r\n        this._drawWrapperBack?.dispose();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Tests if two bounding boxes are intersections\r\n     * @param box0 defines the first box to test\r\n     * @param box1 defines the second box to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static Intersects(box0: DeepImmutable<BoundingBox>, box1: DeepImmutable<BoundingBox>): boolean {\r\n        return box0.intersectsMinMax(box1.minimumWorld, box1.maximumWorld);\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defines by a min/max vectors intersects a sphere\r\n     * @param minPoint defines the minimum vector of the bounding box\r\n     * @param maxPoint defines the maximum vector of the bounding box\r\n     * @param sphereCenter defines the sphere center\r\n     * @param sphereRadius defines the sphere radius\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static IntersectsSphere(minPoint: DeepImmutable<Vector3>, maxPoint: DeepImmutable<Vector3>, sphereCenter: DeepImmutable<Vector3>, sphereRadius: number): boolean {\r\n        const vector = BoundingBox._TmpVector3[0];\r\n        Vector3.ClampToRef(sphereCenter, minPoint, maxPoint, vector);\r\n        const num = Vector3.DistanceSquared(sphereCenter, vector);\r\n        return num <= sphereRadius * sphereRadius;\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defined with 8 vectors is entirely inside frustum planes\r\n     * @param boundingVectors defines an array of 8 vectors representing a bounding box\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an inclusion\r\n     */\r\n    public static IsCompletelyInFrustum(boundingVectors: Array<DeepImmutable<Vector3>>, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        for (let p = 0; p < 6; ++p) {\r\n            const frustumPlane = frustumPlanes[p];\r\n            for (let i = 0; i < 8; ++i) {\r\n                if (frustumPlane.dotCoordinate(boundingVectors[i]) < 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defined with 8 vectors intersects frustum planes\r\n     * @param boundingVectors defines an array of 8 vectors representing a bounding box\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static IsInFrustum(boundingVectors: Array<DeepImmutable<Vector3>>, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        for (let p = 0; p < 6; ++p) {\r\n            let canReturnFalse = true;\r\n            const frustumPlane = frustumPlanes[p];\r\n            for (let i = 0; i < 8; ++i) {\r\n                if (frustumPlane.dotCoordinate(boundingVectors[i]) >= 0) {\r\n                    canReturnFalse = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (canReturnFalse) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n", "import type { DeepImmutable } from \"../types\";\r\nimport { BuildArray } from \"../Misc/arrayTools\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\n/**\r\n * Class used to store bounding sphere information\r\n */\r\nexport class BoundingSphere {\r\n    /**\r\n     * Gets the center of the bounding sphere in local space\r\n     */\r\n    public readonly center = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in local space\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * Gets the center of the bounding sphere in world space\r\n     */\r\n    public readonly centerWorld = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in world space\r\n     */\r\n    public radiusWorld: number;\r\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\r\n    public readonly minimum = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\r\n    public readonly maximum = Vector3.Zero();\r\n\r\n    private _worldMatrix: DeepImmutable<Matrix>;\r\n    private static readonly _TmpVector3 = BuildArray(3, Vector3.Zero);\r\n\r\n    /**\r\n     * Creates a new bounding sphere\r\n     * @param min defines the minimum vector (in local space)\r\n     * @param max defines the maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Recreates the entire bounding sphere from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.minimum.copyFrom(min);\r\n        this.maximum.copyFrom(max);\r\n\r\n        const distance = Vector3.Distance(min, max);\r\n\r\n        max.addToRef(min, this.center).scaleInPlace(0.5);\r\n        this.radius = distance * 0.5;\r\n\r\n        this._update(worldMatrix || Matrix.IdentityReadOnly);\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding sphere by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding box\r\n     */\r\n    public scale(factor: number): BoundingSphere {\r\n        const newRadius = this.radius * factor;\r\n        const tmpVectors = BoundingSphere._TmpVector3;\r\n        const tempRadiusVector = tmpVectors[0].setAll(newRadius);\r\n        const min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\r\n        const max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\r\n\r\n        this.reConstruct(min, max, this._worldMatrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix of the bounding box\r\n     * @returns a matrix\r\n     */\r\n    public getWorldMatrix(): DeepImmutable<Matrix> {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * @internal\r\n     */\r\n    public _update(worldMatrix: DeepImmutable<Matrix>): void {\r\n        if (!worldMatrix.isIdentity()) {\r\n            Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\r\n            const tempVector = BoundingSphere._TmpVector3[0];\r\n            Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\r\n            this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\r\n        } else {\r\n            this.centerWorld.copyFrom(this.center);\r\n            this.radiusWorld = this.radius;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere is intersecting the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        const radius = this.radiusWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere center is in between the frustum planes.\r\n     * Used for optimistic fast inclusion.\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if the sphere center is in between the frustum planes\r\n     */\r\n    public isCenterInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is inside the bounding sphere\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside the bounding sphere\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\r\n        if (this.radiusWorld * this.radiusWorld < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Checks if two sphere intersect\r\n     * @param sphere0 sphere 0\r\n     * @param sphere1 sphere 1\r\n     * @returns true if the spheres intersect\r\n     */\r\n    public static Intersects(sphere0: DeepImmutable<BoundingSphere>, sphere1: DeepImmutable<BoundingSphere>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\r\n        const radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\r\n\r\n        if (radiusSum * radiusSum < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere from a center and a radius\r\n     * @param center The center\r\n     * @param radius radius\r\n     * @param matrix Optional worldMatrix\r\n     * @returns The sphere\r\n     */\r\n    public static CreateFromCenterAndRadius(center: DeepImmutable<Vector3>, radius: number, matrix?: DeepImmutable<Matrix>): BoundingSphere {\r\n        this._TmpVector3[0].copyFrom(center);\r\n        this._TmpVector3[1].copyFromFloats(0, 0, radius);\r\n        this._TmpVector3[2].copyFrom(center);\r\n        this._TmpVector3[0].addInPlace(this._TmpVector3[1]);\r\n        this._TmpVector3[2].subtractInPlace(this._TmpVector3[1]);\r\n\r\n        const sphere = new BoundingSphere(this._TmpVector3[0], this._TmpVector3[2]);\r\n\r\n        if (matrix) {\r\n            sphere._worldMatrix = matrix;\r\n        } else {\r\n            sphere._worldMatrix = Matrix.Identity();\r\n        }\r\n\r\n        return sphere;\r\n    }\r\n}\r\n", "import type { DeepImmutable } from \"../types\";\r\nimport { BuildArray } from \"../Misc/arrayTools\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { TmpVectors } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { BoundingBox } from \"./boundingBox\";\r\nimport { BoundingSphere } from \"./boundingSphere\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\nimport type { Collider } from \"../Collisions/collider\";\r\n\r\nconst _result0 = { min: 0, max: 0 };\r\nconst _result1 = { min: 0, max: 0 };\r\nconst computeBoxExtents = (axis: DeepImmutable<Vector3>, box: DeepImmutable<BoundingBox>, result: { min: number; max: number }) => {\r\n    const p = Vector3.Dot(box.centerWorld, axis);\r\n\r\n    const r0 = Math.abs(Vector3.Dot(box.directions[0], axis)) * box.extendSize.x;\r\n    const r1 = Math.abs(Vector3.Dot(box.directions[1], axis)) * box.extendSize.y;\r\n    const r2 = Math.abs(Vector3.Dot(box.directions[2], axis)) * box.extendSize.z;\r\n\r\n    const r = r0 + r1 + r2;\r\n    result.min = p - r;\r\n    result.max = p + r;\r\n};\r\n\r\nconst axisOverlap = (axis: DeepImmutable<Vector3>, box0: DeepImmutable<BoundingBox>, box1: DeepImmutable<BoundingBox>): boolean => {\r\n    computeBoxExtents(axis, box0, _result0);\r\n    computeBoxExtents(axis, box1, _result1);\r\n    return !(_result0.min > _result1.max || _result1.min > _result0.max);\r\n};\r\n\r\n/**\r\n * Interface for cullable objects\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#back-face-culling\r\n */\r\nexport interface ICullable {\r\n    /**\r\n     * Checks if the object or part of the object is in the frustum\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    isInFrustum(frustumPlanes: Plane[]): boolean;\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    isCompletelyInFrustum(frustumPlanes: Plane[]): boolean;\r\n}\r\n\r\n/**\r\n * Info for a bounding data of a mesh\r\n */\r\nexport class BoundingInfo implements ICullable {\r\n    /**\r\n     * Bounding box for the mesh\r\n     */\r\n    public readonly boundingBox: BoundingBox;\r\n    /**\r\n     * Bounding sphere for the mesh\r\n     */\r\n    public readonly boundingSphere: BoundingSphere;\r\n\r\n    private _isLocked = false;\r\n\r\n    private static readonly _TmpVector3 = BuildArray(2, Vector3.Zero);\r\n\r\n    /**\r\n     * Constructs bounding info\r\n     * @param minimum min vector of the bounding box/sphere\r\n     * @param maximum max vector of the bounding box/sphere\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(minimum: DeepImmutable<Vector3>, maximum: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.boundingBox = new BoundingBox(minimum, maximum, worldMatrix);\r\n        this.boundingSphere = new BoundingSphere(minimum, maximum, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Recreates the entire bounding info from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.boundingBox.reConstruct(min, max, worldMatrix);\r\n        this.boundingSphere.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * min vector of the bounding box/sphere\r\n     */\r\n    public get minimum(): Vector3 {\r\n        return this.boundingBox.minimum;\r\n    }\r\n\r\n    /**\r\n     * max vector of the bounding box/sphere\r\n     */\r\n    public get maximum(): Vector3 {\r\n        return this.boundingBox.maximum;\r\n    }\r\n\r\n    /**\r\n     * If the info is locked and won't be updated to avoid perf overhead\r\n     */\r\n    public get isLocked(): boolean {\r\n        return this._isLocked;\r\n    }\r\n\r\n    public set isLocked(value: boolean) {\r\n        this._isLocked = value;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Updates the bounding sphere and box\r\n     * @param world world matrix to be used to update\r\n     */\r\n    public update(world: DeepImmutable<Matrix>) {\r\n        if (this._isLocked) {\r\n            return;\r\n        }\r\n        this.boundingBox._update(world);\r\n        this.boundingSphere._update(world);\r\n    }\r\n\r\n    /**\r\n     * Recreate the bounding info to be centered around a specific point given a specific extend.\r\n     * @param center New center of the bounding info\r\n     * @param extend New extend of the bounding info\r\n     * @returns the current bounding info\r\n     */\r\n    public centerOn(center: DeepImmutable<Vector3>, extend: DeepImmutable<Vector3>): BoundingInfo {\r\n        const minimum = BoundingInfo._TmpVector3[0].copyFrom(center).subtractInPlace(extend);\r\n        const maximum = BoundingInfo._TmpVector3[1].copyFrom(center).addInPlace(extend);\r\n\r\n        this.boundingBox.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n        this.boundingSphere.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Grows the bounding info to include the given point.\r\n     * @param point The point that will be included in the current bounding info (in local space)\r\n     * @returns the current bounding info\r\n     */\r\n    public encapsulate(point: Vector3): BoundingInfo {\r\n        const minimum = Vector3.Minimize(this.minimum, point);\r\n        const maximum = Vector3.Maximize(this.maximum, point);\r\n        this.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Grows the bounding info to encapsulate the given bounding info.\r\n     * @param toEncapsulate The bounding info that will be encapsulated in the current bounding info\r\n     * @returns the current bounding info\r\n     */\r\n    public encapsulateBoundingInfo(toEncapsulate: BoundingInfo): BoundingInfo {\r\n        const invw = TmpVectors.Matrix[0];\r\n        this.boundingBox.getWorldMatrix().invertToRef(invw);\r\n\r\n        const v = TmpVectors.Vector3[0];\r\n\r\n        Vector3.TransformCoordinatesToRef(toEncapsulate.boundingBox.minimumWorld, invw, v);\r\n        this.encapsulate(v);\r\n\r\n        Vector3.TransformCoordinatesToRef(toEncapsulate.boundingBox.maximumWorld, invw, v);\r\n        this.encapsulate(v);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding info by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding info\r\n     */\r\n    public scale(factor: number): BoundingInfo {\r\n        this.boundingBox.scale(factor);\r\n        this.boundingSphere.scale(factor);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the bounding info is within the frustum defined by the passed array of planes.\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @param strategy defines the strategy to use for the culling (default is BABYLON.AbstractMesh.CULLINGSTRATEGY_STANDARD)\r\n     * The different strategies available are:\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_STANDARD most accurate but slower @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_STANDARD\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY faster but less accurate @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION can be faster if always visible @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_OPTIMISTIC_INCLUSION\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY can be faster if always visible @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY\r\n     * @returns true if the bounding info is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>, strategy: number = Constants.MESHES_CULLINGSTRATEGY_STANDARD): boolean {\r\n        const inclusionTest =\r\n            strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION || strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n        if (inclusionTest) {\r\n            if (this.boundingSphere.isCenterInFrustum(frustumPlanes)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.boundingSphere.isInFrustum(frustumPlanes)) {\r\n            return false;\r\n        }\r\n\r\n        const bSphereOnlyTest =\r\n            strategy === Constants.MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY || strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n        if (bSphereOnlyTest) {\r\n            return true;\r\n        }\r\n\r\n        return this.boundingBox.isInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Gets the world distance between the min and max points of the bounding box\r\n     */\r\n    public get diagonalLength(): number {\r\n        const boundingBox = this.boundingBox;\r\n        const diag = boundingBox.maximumWorld.subtractToRef(boundingBox.minimumWorld, BoundingInfo._TmpVector3[0]);\r\n        return diag.length();\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return this.boundingBox.isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkCollision(collider: Collider): boolean {\r\n        return collider._canDoCollision(this.boundingSphere.centerWorld, this.boundingSphere.radiusWorld, this.boundingBox.minimumWorld, this.boundingBox.maximumWorld);\r\n    }\r\n\r\n    /**\r\n     * Checks if a point is inside the bounding box and bounding sphere or the mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/mesh_intersect\r\n     * @param point the point to check intersection with\r\n     * @returns if the point intersects\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        if (!this.boundingSphere.centerWorld) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.boundingSphere.intersectsPoint(point)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.boundingBox.intersectsPoint(point)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if another bounding info intersects the bounding box and bounding sphere or the mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/mesh_intersect\r\n     * @param boundingInfo the bounding info to check intersection with\r\n     * @param precise if the intersection should be done using OBB\r\n     * @returns if the bounding info intersects\r\n     */\r\n    public intersects(boundingInfo: DeepImmutable<BoundingInfo>, precise: boolean): boolean {\r\n        if (!BoundingSphere.Intersects(this.boundingSphere, boundingInfo.boundingSphere)) {\r\n            return false;\r\n        }\r\n\r\n        if (!BoundingBox.Intersects(this.boundingBox, boundingInfo.boundingBox)) {\r\n            return false;\r\n        }\r\n\r\n        if (!precise) {\r\n            return true;\r\n        }\r\n\r\n        const box0 = this.boundingBox;\r\n        const box1 = boundingInfo.boundingBox;\r\n\r\n        if (!axisOverlap(box0.directions[0], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box0.directions[1], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box0.directions[2], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box1.directions[0], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box1.directions[1], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(box1.directions[2], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n", "import type { Nullable, IndicesArray, DeepImmutable, FloatArray } from \"../types\";\r\nimport type { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { IntersectionInfo } from \"../Collisions/intersectionInfo\";\r\nimport type { ICullable } from \"../Culling/boundingInfo\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { extractMinAndMaxIndexed } from \"../Maths/math.functions\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport type { IMaterialContext } from \"../Engines/IMaterialContext\";\r\n\r\nimport type { Collider } from \"../Collisions/collider\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport type { MultiMaterial } from \"../Materials/multiMaterial\";\r\nimport type { AbstractMesh } from \"./abstractMesh\";\r\nimport type { Mesh } from \"./mesh\";\r\nimport type { Ray } from \"../Culling/ray\";\r\nimport type { TrianglePickingPredicate } from \"../Culling/ray\";\r\nimport type { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n/**\r\n * Defines a subdivision inside a mesh\r\n */\r\nexport class SubMesh implements ICullable {\r\n    private _engine: AbstractEngine;\r\n    /** @internal */\r\n    public _drawWrappers: Array<DrawWrapper>; // index in this array = pass id\r\n    private _mainDrawWrapperOverride: Nullable<DrawWrapper> = null;\r\n\r\n    /**\r\n     * Gets material defines used by the effect associated to the sub mesh\r\n     */\r\n    public get materialDefines(): Nullable<MaterialDefines> {\r\n        return this._mainDrawWrapperOverride ? (this._mainDrawWrapperOverride.defines as MaterialDefines) : (this._getDrawWrapper()?.defines as Nullable<MaterialDefines>);\r\n    }\r\n\r\n    /**\r\n     * Sets material defines used by the effect associated to the sub mesh\r\n     */\r\n    public set materialDefines(defines: Nullable<MaterialDefines>) {\r\n        const drawWrapper = this._mainDrawWrapperOverride ?? this._getDrawWrapper(undefined, true)!;\r\n        drawWrapper.defines = defines;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getDrawWrapper(passId?: number, createIfNotExisting = false): DrawWrapper | undefined {\r\n        passId = passId ?? this._engine.currentRenderPassId;\r\n        let drawWrapper = this._drawWrappers[passId];\r\n        if (!drawWrapper && createIfNotExisting) {\r\n            this._drawWrappers[passId] = drawWrapper = new DrawWrapper(this._mesh.getScene().getEngine());\r\n        }\r\n        return drawWrapper;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _removeDrawWrapper(passId: number, disposeWrapper = true, immediate = false): void {\r\n        if (disposeWrapper) {\r\n            this._drawWrappers[passId]?.dispose(immediate);\r\n        }\r\n        this._drawWrappers[passId] = undefined as any;\r\n    }\r\n\r\n    /**\r\n     * Gets associated (main) effect (possibly the effect override if defined)\r\n     */\r\n    public get effect(): Nullable<Effect> {\r\n        return this._mainDrawWrapperOverride ? this._mainDrawWrapperOverride.effect : (this._getDrawWrapper()?.effect ?? null);\r\n    }\r\n\r\n    /** @internal */\r\n    public get _drawWrapper(): DrawWrapper {\r\n        return this._mainDrawWrapperOverride ?? this._getDrawWrapper(undefined, true)!;\r\n    }\r\n\r\n    /** @internal */\r\n    public get _drawWrapperOverride(): Nullable<DrawWrapper> {\r\n        return this._mainDrawWrapperOverride;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setMainDrawWrapperOverride(wrapper: Nullable<DrawWrapper>): void {\r\n        this._mainDrawWrapperOverride = wrapper;\r\n    }\r\n\r\n    /**\r\n     * Sets associated effect (effect used to render this submesh)\r\n     * @param effect defines the effect to associate with\r\n     * @param defines defines the set of defines used to compile this effect\r\n     * @param materialContext material context associated to the effect\r\n     * @param resetContext true to reset the draw context\r\n     */\r\n    public setEffect(effect: Nullable<Effect>, defines: Nullable<string | MaterialDefines> = null, materialContext?: IMaterialContext, resetContext = true) {\r\n        const drawWrapper = this._drawWrapper;\r\n        drawWrapper.setEffect(effect, defines, resetContext);\r\n        if (materialContext !== undefined) {\r\n            drawWrapper.materialContext = materialContext;\r\n        }\r\n        if (!effect) {\r\n            drawWrapper.defines = null;\r\n            drawWrapper.materialContext = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache\r\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\r\n     * @param immediate If true, the draw wrapper will dispose the effect immediately (false by default)\r\n     */\r\n    public resetDrawCache(passId?: number, immediate = false): void {\r\n        if (this._drawWrappers) {\r\n            if (passId !== undefined) {\r\n                this._removeDrawWrapper(passId, true, immediate);\r\n                return;\r\n            } else {\r\n                for (const drawWrapper of this._drawWrappers) {\r\n                    drawWrapper?.dispose(immediate);\r\n                }\r\n            }\r\n        }\r\n        this._drawWrappers = [];\r\n    }\r\n\r\n    /** @internal */\r\n    public _linesIndexCount: number = 0;\r\n    private _mesh: AbstractMesh;\r\n    private _renderingMesh: Mesh;\r\n    private _boundingInfo: BoundingInfo;\r\n    private _linesIndexBuffer: Nullable<DataBuffer> = null;\r\n    /** @internal */\r\n    public _lastColliderWorldVertices: Nullable<Vector3[]> = null;\r\n    /** @internal */\r\n    public _trianglePlanes: Plane[];\r\n    /** @internal */\r\n    public _lastColliderTransformMatrix: Nullable<Matrix> = null;\r\n    /** @internal */\r\n    public _wasDispatched = false;\r\n\r\n    /** @internal */\r\n    public _renderId = 0;\r\n    /** @internal */\r\n    public _alphaIndex: number = 0;\r\n    /** @internal */\r\n    public _distanceToCamera: number = 0;\r\n    /** @internal */\r\n    public _id: number;\r\n\r\n    private _currentMaterial: Nullable<Material> = null;\r\n\r\n    /**\r\n     * Add a new submesh to a mesh\r\n     * @param materialIndex defines the material index to use\r\n     * @param verticesStart defines vertex index start\r\n     * @param verticesCount defines vertices count\r\n     * @param indexStart defines index start\r\n     * @param indexCount defines indices count\r\n     * @param mesh defines the parent mesh\r\n     * @param renderingMesh defines an optional rendering mesh\r\n     * @param createBoundingBox defines if bounding box should be created for this submesh\r\n     * @returns the new submesh\r\n     */\r\n    public static AddToMesh(\r\n        materialIndex: number,\r\n        verticesStart: number,\r\n        verticesCount: number,\r\n        indexStart: number,\r\n        indexCount: number,\r\n        mesh: AbstractMesh,\r\n        renderingMesh?: Mesh,\r\n        createBoundingBox: boolean = true\r\n    ): SubMesh {\r\n        return new SubMesh(materialIndex, verticesStart, verticesCount, indexStart, indexCount, mesh, renderingMesh, createBoundingBox);\r\n    }\r\n\r\n    /**\r\n     * Creates a new submesh\r\n     * @param materialIndex defines the material index to use\r\n     * @param verticesStart defines vertex index start\r\n     * @param verticesCount defines vertices count\r\n     * @param indexStart defines index start\r\n     * @param indexCount defines indices count\r\n     * @param mesh defines the parent mesh\r\n     * @param renderingMesh defines an optional rendering mesh\r\n     * @param createBoundingBox defines if bounding box should be created for this submesh\r\n     * @param addToMesh defines a boolean indicating that the submesh must be added to the mesh.subMeshes array (true by default)\r\n     */\r\n    constructor(\r\n        /** the material index to use */\r\n        public materialIndex: number,\r\n        /** vertex index start */\r\n        public verticesStart: number,\r\n        /** vertices count */\r\n        public verticesCount: number,\r\n        /** index start */\r\n        public indexStart: number,\r\n        /** indices count */\r\n        public indexCount: number,\r\n        mesh: AbstractMesh,\r\n        renderingMesh?: Mesh,\r\n        createBoundingBox: boolean = true,\r\n        addToMesh = true\r\n    ) {\r\n        this._mesh = mesh;\r\n        this._renderingMesh = renderingMesh || <Mesh>mesh;\r\n        if (addToMesh) {\r\n            mesh.subMeshes.push(this);\r\n        }\r\n\r\n        this._engine = this._mesh.getScene().getEngine();\r\n        this.resetDrawCache();\r\n        this._trianglePlanes = [];\r\n\r\n        this._id = mesh.subMeshes.length - 1;\r\n\r\n        if (createBoundingBox) {\r\n            this.refreshBoundingInfo();\r\n            mesh.computeWorldMatrix(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if this submesh covers the entire parent mesh\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public get IsGlobal(): boolean {\r\n        return this.verticesStart === 0 && this.verticesCount === this._mesh.getTotalVertices() && this.indexStart === 0 && this.indexCount === this._mesh.getTotalIndices();\r\n    }\r\n\r\n    /**\r\n     * Returns the submesh BoundingInfo object\r\n     * @returns current bounding info (or mesh's one if the submesh is global)\r\n     */\r\n    public getBoundingInfo(): BoundingInfo {\r\n        if (this.IsGlobal || this._mesh.hasThinInstances) {\r\n            return this._mesh.getBoundingInfo();\r\n        }\r\n\r\n        return this._boundingInfo;\r\n    }\r\n\r\n    /**\r\n     * Sets the submesh BoundingInfo\r\n     * @param boundingInfo defines the new bounding info to use\r\n     * @returns the SubMesh\r\n     */\r\n    public setBoundingInfo(boundingInfo: BoundingInfo): SubMesh {\r\n        this._boundingInfo = boundingInfo;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh of the current submesh\r\n     * @returns the parent mesh\r\n     */\r\n    public getMesh(): AbstractMesh {\r\n        return this._mesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the rendering mesh of the submesh\r\n     * @returns the rendering mesh (could be different from parent mesh)\r\n     */\r\n    public getRenderingMesh(): Mesh {\r\n        return this._renderingMesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the replacement mesh of the submesh\r\n     * @returns the replacement mesh (could be different from parent mesh)\r\n     */\r\n    public getReplacementMesh(): Nullable<AbstractMesh> {\r\n        return this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : null;\r\n    }\r\n\r\n    /**\r\n     * Returns the effective mesh of the submesh\r\n     * @returns the effective mesh (could be different from parent mesh)\r\n     */\r\n    public getEffectiveMesh(): AbstractMesh {\r\n        const replacementMesh = this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : null;\r\n\r\n        return replacementMesh ? replacementMesh : this._renderingMesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the submesh material\r\n     * @param getDefaultMaterial Defines whether or not to get the default material if nothing has been defined.\r\n     * @returns null or the current material\r\n     */\r\n    public getMaterial(getDefaultMaterial = true): Nullable<Material> {\r\n        const rootMaterial = this._renderingMesh.getMaterialForRenderPass(this._engine.currentRenderPassId) ?? this._renderingMesh.material;\r\n\r\n        if (!rootMaterial) {\r\n            return getDefaultMaterial ? this._mesh.getScene().defaultMaterial : null;\r\n        } else if (this._isMultiMaterial(rootMaterial)) {\r\n            const effectiveMaterial = rootMaterial.getSubMaterial(this.materialIndex);\r\n\r\n            if (this._currentMaterial !== effectiveMaterial) {\r\n                this._currentMaterial = effectiveMaterial;\r\n                this.resetDrawCache();\r\n            }\r\n\r\n            return effectiveMaterial;\r\n        }\r\n\r\n        return rootMaterial;\r\n    }\r\n\r\n    private _isMultiMaterial(material: Material): material is MultiMaterial {\r\n        return (material as MultiMaterial).getSubMaterial !== undefined;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Sets a new updated BoundingInfo object to the submesh\r\n     * @param data defines an optional position array to use to determine the bounding info\r\n     * @returns the SubMesh\r\n     */\r\n    public refreshBoundingInfo(data: Nullable<FloatArray> = null): SubMesh {\r\n        this._lastColliderWorldVertices = null;\r\n\r\n        if (this.IsGlobal || !this._renderingMesh || !this._renderingMesh.geometry) {\r\n            return this;\r\n        }\r\n\r\n        if (!data) {\r\n            data = this._renderingMesh.getVerticesData(VertexBuffer.PositionKind);\r\n        }\r\n\r\n        if (!data) {\r\n            this._boundingInfo = this._mesh.getBoundingInfo();\r\n            return this;\r\n        }\r\n\r\n        const indices = <IndicesArray>this._renderingMesh.getIndices();\r\n        let extend: { minimum: Vector3; maximum: Vector3 };\r\n\r\n        //is this the only submesh?\r\n        if (this.indexStart === 0 && this.indexCount === indices.length) {\r\n            const boundingInfo = this._renderingMesh.getBoundingInfo();\r\n\r\n            //the rendering mesh's bounding info can be used, it is the standard submesh for all indices.\r\n            extend = { minimum: boundingInfo.minimum.clone(), maximum: boundingInfo.maximum.clone() };\r\n        } else {\r\n            extend = extractMinAndMaxIndexed(data, indices, this.indexStart, this.indexCount, this._renderingMesh.geometry.boundingBias);\r\n        }\r\n\r\n        if (this._boundingInfo) {\r\n            this._boundingInfo.reConstruct(extend.minimum, extend.maximum);\r\n        } else {\r\n            this._boundingInfo = new BoundingInfo(extend.minimum, extend.maximum);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkCollision(collider: Collider): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        return boundingInfo._checkCollision(collider);\r\n    }\r\n\r\n    /**\r\n     * Updates the submesh BoundingInfo\r\n     * @param world defines the world matrix to use to update the bounding info\r\n     * @returns the submesh\r\n     */\r\n    public updateBoundingInfo(world: DeepImmutable<Matrix>): SubMesh {\r\n        let boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            this.refreshBoundingInfo();\r\n            boundingInfo = this.getBoundingInfo();\r\n        }\r\n        if (boundingInfo) {\r\n            (<BoundingInfo>boundingInfo).update(world);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * True is the submesh bounding box intersects the frustum defined by the passed array of planes.\r\n     * @param frustumPlanes defines the frustum planes\r\n     * @returns true if the submesh is intersecting with the frustum\r\n     */\r\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            return false;\r\n        }\r\n        return boundingInfo.isInFrustum(frustumPlanes, this._mesh.cullingStrategy);\r\n    }\r\n\r\n    /**\r\n     * True is the submesh bounding box is completely inside the frustum defined by the passed array of planes\r\n     * @param frustumPlanes defines the frustum planes\r\n     * @returns true if the submesh is inside the frustum\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Plane[]): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            return false;\r\n        }\r\n        return boundingInfo.isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Renders the submesh\r\n     * @param enableAlphaMode defines if alpha needs to be used\r\n     * @returns the submesh\r\n     */\r\n    public render(enableAlphaMode: boolean): SubMesh {\r\n        this._renderingMesh.render(this, enableAlphaMode, this._mesh._internalAbstractMeshDataInfo._actAsRegularMesh ? this._mesh : undefined);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getLinesIndexBuffer(indices: IndicesArray, engine: AbstractEngine): DataBuffer {\r\n        if (!this._linesIndexBuffer) {\r\n            const adjustedIndexCount = Math.floor(this.indexCount / 3) * 6;\r\n            const shouldUseUint32 = this.verticesStart + this.verticesCount > 65535;\r\n            const linesIndices = shouldUseUint32 ? new Uint32Array(adjustedIndexCount) : new Uint16Array(adjustedIndexCount);\r\n\r\n            let offset = 0;\r\n            if (indices.length === 0) {\r\n                // Unindexed mesh\r\n                for (let index = this.indexStart; index < this.indexStart + this.indexCount; index += 3) {\r\n                    linesIndices[offset++] = index;\r\n                    linesIndices[offset++] = index + 1;\r\n                    linesIndices[offset++] = index + 1;\r\n                    linesIndices[offset++] = index + 2;\r\n                    linesIndices[offset++] = index + 2;\r\n                    linesIndices[offset++] = index;\r\n                }\r\n            } else {\r\n                for (let index = this.indexStart; index < this.indexStart + this.indexCount; index += 3) {\r\n                    linesIndices[offset++] = indices[index];\r\n                    linesIndices[offset++] = indices[index + 1];\r\n                    linesIndices[offset++] = indices[index + 1];\r\n                    linesIndices[offset++] = indices[index + 2];\r\n                    linesIndices[offset++] = indices[index + 2];\r\n                    linesIndices[offset++] = indices[index];\r\n                }\r\n            }\r\n\r\n            this._linesIndexBuffer = engine.createIndexBuffer(linesIndices);\r\n            this._linesIndexCount = linesIndices.length;\r\n        }\r\n        return this._linesIndexBuffer;\r\n    }\r\n\r\n    /**\r\n     * Checks if the submesh intersects with a ray\r\n     * @param ray defines the ray to test\r\n     * @returns true is the passed ray intersects the submesh bounding box\r\n     */\r\n    public canIntersects(ray: Ray): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n\r\n        if (!boundingInfo) {\r\n            return false;\r\n        }\r\n        return ray.intersectsBox(boundingInfo.boundingBox);\r\n    }\r\n\r\n    /**\r\n     * Intersects current submesh with a ray\r\n     * @param ray defines the ray to test\r\n     * @param positions defines mesh's positions array\r\n     * @param indices defines mesh's indices array\r\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @returns intersection info or null if no intersection\r\n     */\r\n    public intersects(ray: Ray, positions: Vector3[], indices: IndicesArray, fastCheck?: boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<IntersectionInfo> {\r\n        const material = this.getMaterial();\r\n        if (!material) {\r\n            return null;\r\n        }\r\n        let step = 3;\r\n        let checkStopper = false;\r\n\r\n        switch (material.fillMode) {\r\n            case Constants.MATERIAL_PointListDrawMode:\r\n            case Constants.MATERIAL_LineLoopDrawMode:\r\n            case Constants.MATERIAL_LineStripDrawMode:\r\n            case Constants.MATERIAL_TriangleFanDrawMode:\r\n                return null;\r\n            case Constants.MATERIAL_TriangleStripDrawMode:\r\n                step = 1;\r\n                checkStopper = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // LineMesh first as it's also a Mesh...\r\n        if (material.fillMode === Constants.MATERIAL_LineListDrawMode) {\r\n            // Check if mesh is unindexed\r\n            if (!indices.length) {\r\n                return this._intersectUnIndexedLines(ray, positions, indices, (this._mesh as any).intersectionThreshold, fastCheck);\r\n            }\r\n            return this._intersectLines(ray, positions, indices, (this._mesh as any).intersectionThreshold, fastCheck);\r\n        } else {\r\n            // Check if mesh is unindexed\r\n            if (!indices.length && this._mesh._unIndexed) {\r\n                return this._intersectUnIndexedTriangles(ray, positions, indices, fastCheck, trianglePredicate);\r\n            }\r\n\r\n            return this._intersectTriangles(ray, positions, indices, step, checkStopper, fastCheck, trianglePredicate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectLines(ray: Ray, positions: Vector3[], indices: IndicesArray, intersectionThreshold: number, fastCheck?: boolean): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        // Line test\r\n        for (let index = this.indexStart; index < this.indexStart + this.indexCount; index += 2) {\r\n            const p0 = positions[indices[index]];\r\n            const p1 = positions[indices[index + 1]];\r\n\r\n            const length = ray.intersectionSegment(p0, p1, intersectionThreshold);\r\n            if (length < 0) {\r\n                continue;\r\n            }\r\n\r\n            if (fastCheck || !intersectInfo || length < intersectInfo.distance) {\r\n                intersectInfo = new IntersectionInfo(null, null, length);\r\n                intersectInfo.faceId = index / 2;\r\n                if (fastCheck) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return intersectInfo;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectUnIndexedLines(ray: Ray, positions: Vector3[], indices: IndicesArray, intersectionThreshold: number, fastCheck?: boolean): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        // Line test\r\n        for (let index = this.verticesStart; index < this.verticesStart + this.verticesCount; index += 2) {\r\n            const p0 = positions[index];\r\n            const p1 = positions[index + 1];\r\n\r\n            const length = ray.intersectionSegment(p0, p1, intersectionThreshold);\r\n            if (length < 0) {\r\n                continue;\r\n            }\r\n\r\n            if (fastCheck || !intersectInfo || length < intersectInfo.distance) {\r\n                intersectInfo = new IntersectionInfo(null, null, length);\r\n                intersectInfo.faceId = index / 2;\r\n                if (fastCheck) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return intersectInfo;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectTriangles(\r\n        ray: Ray,\r\n        positions: Vector3[],\r\n        indices: IndicesArray,\r\n        step: number,\r\n        checkStopper: boolean,\r\n        fastCheck?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate\r\n    ): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        // Triangles test\r\n        let faceId = -1;\r\n        for (let index = this.indexStart; index < this.indexStart + this.indexCount - (3 - step); index += step) {\r\n            faceId++;\r\n            const indexA = indices[index];\r\n            const indexB = indices[index + 1];\r\n            const indexC = indices[index + 2];\r\n\r\n            if (checkStopper && indexC === 0xffffffff) {\r\n                index += 2;\r\n                continue;\r\n            }\r\n\r\n            const p0 = positions[indexA];\r\n            const p1 = positions[indexB];\r\n            const p2 = positions[indexC];\r\n\r\n            // stay defensive and don't check against undefined positions.\r\n            if (!p0 || !p1 || !p2) {\r\n                continue;\r\n            }\r\n\r\n            if (trianglePredicate && !trianglePredicate(p0, p1, p2, ray, indexA, indexB, indexC)) {\r\n                continue;\r\n            }\r\n\r\n            const currentIntersectInfo = ray.intersectsTriangle(p0, p1, p2);\r\n\r\n            if (currentIntersectInfo) {\r\n                if (currentIntersectInfo.distance < 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\r\n                    intersectInfo = currentIntersectInfo;\r\n                    intersectInfo.faceId = faceId;\r\n\r\n                    if (fastCheck) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return intersectInfo;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    private _intersectUnIndexedTriangles(\r\n        ray: Ray,\r\n        positions: Vector3[],\r\n        indices: IndicesArray,\r\n        fastCheck?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate\r\n    ): Nullable<IntersectionInfo> {\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n        // Triangles test\r\n        for (let index = this.verticesStart; index < this.verticesStart + this.verticesCount; index += 3) {\r\n            const p0 = positions[index];\r\n            const p1 = positions[index + 1];\r\n            const p2 = positions[index + 2];\r\n\r\n            if (trianglePredicate && !trianglePredicate(p0, p1, p2, ray, -1, -1, -1)) {\r\n                continue;\r\n            }\r\n\r\n            const currentIntersectInfo = ray.intersectsTriangle(p0, p1, p2);\r\n\r\n            if (currentIntersectInfo) {\r\n                if (currentIntersectInfo.distance < 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\r\n                    intersectInfo = currentIntersectInfo;\r\n                    intersectInfo.faceId = index / 3;\r\n\r\n                    if (fastCheck) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return intersectInfo;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        if (this._linesIndexBuffer) {\r\n            this._linesIndexBuffer = null;\r\n        }\r\n    }\r\n\r\n    // Clone\r\n    /**\r\n     * Creates a new submesh from the passed mesh\r\n     * @param newMesh defines the new hosting mesh\r\n     * @param newRenderingMesh defines an optional rendering mesh\r\n     * @returns the new submesh\r\n     */\r\n    public clone(newMesh: AbstractMesh, newRenderingMesh?: Mesh): SubMesh {\r\n        const result = new SubMesh(this.materialIndex, this.verticesStart, this.verticesCount, this.indexStart, this.indexCount, newMesh, newRenderingMesh, false);\r\n\r\n        if (!this.IsGlobal) {\r\n            const boundingInfo = this.getBoundingInfo();\r\n\r\n            if (!boundingInfo) {\r\n                return result;\r\n            }\r\n\r\n            result._boundingInfo = new BoundingInfo(boundingInfo.minimum, boundingInfo.maximum);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Dispose\r\n\r\n    /**\r\n     * Release associated resources\r\n     * @param immediate If true, the effect will be disposed immediately (false by default)\r\n     */\r\n    public dispose(immediate = false): void {\r\n        if (this._linesIndexBuffer) {\r\n            this._mesh.getScene().getEngine()._releaseBuffer(this._linesIndexBuffer);\r\n            this._linesIndexBuffer = null;\r\n        }\r\n\r\n        // Remove from mesh\r\n        const index = this._mesh.subMeshes.indexOf(this);\r\n        this._mesh.subMeshes.splice(index, 1);\r\n\r\n        this.resetDrawCache(undefined, immediate);\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"SubMesh\".\r\n     */\r\n    public getClassName(): string {\r\n        return \"SubMesh\";\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new submesh from indices data\r\n     * @param materialIndex the index of the main mesh material\r\n     * @param startIndex the index where to start the copy in the mesh indices array\r\n     * @param indexCount the number of indices to copy then from the startIndex\r\n     * @param mesh the main mesh to create the submesh from\r\n     * @param renderingMesh the optional rendering mesh\r\n     * @param createBoundingBox defines if bounding box should be created for this submesh\r\n     * @returns a new submesh\r\n     */\r\n    public static CreateFromIndices(\r\n        materialIndex: number,\r\n        startIndex: number,\r\n        indexCount: number,\r\n        mesh: AbstractMesh,\r\n        renderingMesh?: Mesh,\r\n        createBoundingBox: boolean = true\r\n    ): SubMesh {\r\n        let minVertexIndex = Number.MAX_VALUE;\r\n        let maxVertexIndex = -Number.MAX_VALUE;\r\n\r\n        const whatWillRender = renderingMesh || mesh;\r\n        const indices = whatWillRender!.getIndices()!;\r\n\r\n        for (let index = startIndex; index < startIndex + indexCount; index++) {\r\n            const vertexIndex = indices[index];\r\n\r\n            if (vertexIndex < minVertexIndex) {\r\n                minVertexIndex = vertexIndex;\r\n            }\r\n            if (vertexIndex > maxVertexIndex) {\r\n                maxVertexIndex = vertexIndex;\r\n            }\r\n        }\r\n\r\n        return new SubMesh(materialIndex, minVertexIndex, maxVertexIndex - minVertexIndex + 1, startIndex, indexCount, mesh, renderingMesh, createBoundingBox);\r\n    }\r\n}\r\n", "/* eslint-disable jsdoc/require-returns-check */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable, FloatArray, IndicesArray, DeepImmutable } from \"../types\";\r\nimport type { Matrix, Vector2 } from \"../Maths/math.vector\";\r\nimport { Vector3, Vector4, TmpVectors } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { Color3 } from \"../Maths/math.color\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { nativeOverride } from \"../Misc/decorators\";\r\nimport type { Coroutine } from \"../Misc/coroutine\";\r\nimport { makeSyncFunction, runCoroutineSync } from \"../Misc/coroutine\";\r\nimport type { ICreateCapsuleOptions } from \"./Builders/capsuleBuilder\";\r\nimport { RuntimeError, ErrorCodes } from \"../Misc/error\";\r\n\r\nimport type { Geometry } from \"../Meshes/geometry\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { SubMesh } from \"./subMesh\";\r\n\r\n/**\r\n * Define an interface for all classes that will get and set the data on vertices\r\n */\r\nexport interface IGetSetVerticesData {\r\n    /**\r\n     * Gets a boolean indicating if specific vertex data is present\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns true is data kind is present\r\n     */\r\n    isVerticesDataPresent(kind: string): boolean;\r\n    /**\r\n     * Gets a specific vertex data attached to this geometry. Float data is constructed if the vertex buffer data cannot be returned directly.\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns a float array containing vertex data\r\n     */\r\n    getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray>;\r\n    /**\r\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\r\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the indices array or an empty array if the mesh has no geometry\r\n     */\r\n    getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray>;\r\n    /**\r\n     * Set specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the vertex data to use\r\n     * @param updatable defines if the vertex must be flagged as updatable (false as default)\r\n     * @param stride defines the stride to use (0 by default). This value is deduced from the kind value if not specified\r\n     */\r\n    setVerticesData(kind: string, data: FloatArray, updatable: boolean): void;\r\n    /**\r\n     * Update a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\r\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\r\n     */\r\n    updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): void;\r\n    /**\r\n     * Creates a new index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param totalVertices defines the total number of vertices (could be null)\r\n     * @param updatable defines if the index buffer must be flagged as updatable (false by default)\r\n     */\r\n    setIndices(indices: IndicesArray, totalVertices: Nullable<number>, updatable?: boolean): void;\r\n}\r\n\r\n/** Class used to attach material info to sub section of a vertex data class */\r\nexport class VertexDataMaterialInfo {\r\n    /** Defines the material index to use */\r\n    public materialIndex: number;\r\n    /** Defines vertex index start*/\r\n    public verticesStart: number;\r\n    /** Defines vertices count */\r\n    public verticesCount: number;\r\n    /** Defines index start */\r\n    public indexStart: number;\r\n    /** Defines indices count */\r\n    public indexCount: number;\r\n}\r\n\r\n/**\r\n * Interface used to define a object like a vertex data structure\r\n */\r\nexport interface IVertexDataLike {\r\n    /**\r\n     * An array of the x, y, z position of each vertex  [...., x, y, z, .....]\r\n     */\r\n    positions: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z normal vector of each vertex  [...., x, y, z, .....]\r\n     */\r\n    normals?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z tangent vector of each vertex  [...., x, y, z, .....]\r\n     */\r\n    tangents?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A second array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs2?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A third array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs3?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fourth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs4?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fifth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs5?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A sixth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs6?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the r, g, b, a, color of each vertex  [...., r, g, b, a, .....]\r\n     */\r\n    colors?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of indices to the array of matrices produced by bones, each vertex have up to 4 indices (8 if the matricesIndicesExtra is set).\r\n     */\r\n    matricesIndices?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of weights defining the weight of each indexed matrix in the final computation\r\n     */\r\n    matricesWeights?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible indices\r\n     */\r\n    matricesIndicesExtra?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible weights when the number of indices is extended\r\n     */\r\n    matricesWeightsExtra?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of i, j, k the three vertex indices required for each triangular facet  [...., i, j, k .....]\r\n     */\r\n    indices?: Nullable<IndicesArray>;\r\n}\r\n\r\n/**\r\n * This class contains the various kinds of data on every vertex of a mesh used in determining its shape and appearance\r\n */\r\nexport class VertexData implements IVertexDataLike {\r\n    /**\r\n     * Mesh side orientation : usually the external or front surface\r\n     */\r\n    public static readonly FRONTSIDE = 0;\r\n    /**\r\n     * Mesh side orientation : usually the internal or back surface\r\n     */\r\n    public static readonly BACKSIDE = 1;\r\n    /**\r\n     * Mesh side orientation : both internal and external or front and back surfaces\r\n     */\r\n    public static readonly DOUBLESIDE = 2;\r\n    /**\r\n     * Mesh side orientation : by default, `FRONTSIDE`\r\n     */\r\n    public static readonly DEFAULTSIDE = 0;\r\n\r\n    private static _UniqueIDGenerator = 0;\r\n\r\n    /**\r\n     * An array of the x, y, z position of each vertex  [...., x, y, z, .....]\r\n     */\r\n    public positions: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z normal vector of each vertex  [...., x, y, z, .....]\r\n     */\r\n    public normals: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z tangent vector of each vertex  [...., x, y, z, .....]\r\n     */\r\n    public tangents: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A second array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs2: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A third array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs3: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fourth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs4: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fifth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs5: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A sixth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs6: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the r, g, b, a, color of each vertex  [...., r, g, b, a, .....]\r\n     */\r\n    public colors: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of indices to the array of matrices produced by bones, each vertex have up to 4 indices (8 if the matricesIndicesExtra is set).\r\n     */\r\n    public matricesIndices: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of weights defining the weight of each indexed matrix in the final computation\r\n     */\r\n    public matricesWeights: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible indices\r\n     */\r\n    public matricesIndicesExtra: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible weights when the number of indices is extended\r\n     */\r\n    public matricesWeightsExtra: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of i, j, k the three vertex indices required for each triangular facet  [...., i, j, k .....]\r\n     */\r\n    public indices: Nullable<IndicesArray>;\r\n\r\n    /**\r\n     * An array defining material association for sub sections of the vertex data\r\n     */\r\n    public materialInfos: Nullable<Array<VertexDataMaterialInfo>>;\r\n\r\n    /**\r\n     * Gets the unique ID of this vertex Data\r\n     */\r\n    public uniqueId = 0;\r\n\r\n    /**\r\n     * Metadata used to store contextual values\r\n     */\r\n    public metadata: any = {};\r\n\r\n    /**\r\n     * Gets or sets a value indicating that the mesh must be flagged with hasVertexAlpha = true\r\n     */\r\n    public hasVertexAlpha: boolean;\r\n\r\n    /**\r\n     * Creates a new VertexData\r\n     */\r\n    public constructor() {\r\n        this.uniqueId = VertexData._UniqueIDGenerator;\r\n        VertexData._UniqueIDGenerator++;\r\n    }\r\n\r\n    /**\r\n     * Uses the passed data array to set the set the values for the specified kind of data\r\n     * @param data a linear array of floating numbers\r\n     * @param kind the type of data that is being set, eg positions, colors etc\r\n     */\r\n    public set(data: FloatArray, kind: string) {\r\n        if (!data.length) {\r\n            Logger.Warn(`Setting vertex data kind '${kind}' with an empty array`);\r\n        }\r\n\r\n        switch (kind) {\r\n            case VertexBuffer.PositionKind:\r\n                this.positions = data;\r\n                break;\r\n            case VertexBuffer.NormalKind:\r\n                this.normals = data;\r\n                break;\r\n            case VertexBuffer.TangentKind:\r\n                this.tangents = data;\r\n                break;\r\n            case VertexBuffer.UVKind:\r\n                this.uvs = data;\r\n                break;\r\n            case VertexBuffer.UV2Kind:\r\n                this.uvs2 = data;\r\n                break;\r\n            case VertexBuffer.UV3Kind:\r\n                this.uvs3 = data;\r\n                break;\r\n            case VertexBuffer.UV4Kind:\r\n                this.uvs4 = data;\r\n                break;\r\n            case VertexBuffer.UV5Kind:\r\n                this.uvs5 = data;\r\n                break;\r\n            case VertexBuffer.UV6Kind:\r\n                this.uvs6 = data;\r\n                break;\r\n            case VertexBuffer.ColorKind:\r\n                this.colors = data;\r\n                break;\r\n            case VertexBuffer.MatricesIndicesKind:\r\n                this.matricesIndices = data;\r\n                break;\r\n            case VertexBuffer.MatricesWeightsKind:\r\n                this.matricesWeights = data;\r\n                break;\r\n            case VertexBuffer.MatricesIndicesExtraKind:\r\n                this.matricesIndicesExtra = data;\r\n                break;\r\n            case VertexBuffer.MatricesWeightsExtraKind:\r\n                this.matricesWeightsExtra = data;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Associates the vertexData to the passed Mesh.\r\n     * Sets it as updatable or not (default `false`)\r\n     * @param mesh the mesh the vertexData is applied to\r\n     * @param updatable when used and having the value true allows new data to update the vertexData\r\n     * @returns the VertexData\r\n     */\r\n    public applyToMesh(mesh: Mesh, updatable?: boolean): VertexData {\r\n        this._applyTo(mesh, updatable, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Associates the vertexData to the passed Geometry.\r\n     * Sets it as updatable or not (default `false`)\r\n     * @param geometry the geometry the vertexData is applied to\r\n     * @param updatable when used and having the value true allows new data to update the vertexData\r\n     * @returns VertexData\r\n     */\r\n    public applyToGeometry(geometry: Geometry, updatable?: boolean): VertexData {\r\n        this._applyTo(geometry, updatable, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the associated mesh\r\n     * @param mesh the mesh to be updated\r\n     * @returns VertexData\r\n     */\r\n    public updateMesh(mesh: Mesh): VertexData {\r\n        this._update(mesh);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the associated geometry\r\n     * @param geometry the geometry to be updated\r\n     * @returns VertexData.\r\n     */\r\n    public updateGeometry(geometry: Geometry): VertexData {\r\n        this._update(geometry);\r\n        return this;\r\n    }\r\n\r\n    private readonly _applyTo = makeSyncFunction(this._applyToCoroutine.bind(this));\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public *_applyToCoroutine(meshOrGeometry: IGetSetVerticesData, updatable: boolean = false, isAsync: boolean): Coroutine<VertexData> {\r\n        if (this.positions) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.PositionKind, this.positions, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.normals) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.NormalKind, this.normals, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.tangents) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.TangentKind, this.tangents, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UVKind, this.uvs, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV2Kind, this.uvs2, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV3Kind, this.uvs3, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV4Kind, this.uvs4, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV5Kind, this.uvs5, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV6Kind, this.uvs6, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.colors) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.ColorKind, this.colors, updatable);\r\n            if (this.hasVertexAlpha && (meshOrGeometry as any).hasVertexAlpha !== undefined) {\r\n                (meshOrGeometry as any).hasVertexAlpha = true;\r\n            }\r\n\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesIndicesKind, this.matricesIndices, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesWeightsKind, this.matricesWeights, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.indices) {\r\n            meshOrGeometry.setIndices(this.indices, null, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        } else {\r\n            meshOrGeometry.setIndices([], null);\r\n        }\r\n\r\n        if ((meshOrGeometry as Mesh).subMeshes && this.materialInfos && this.materialInfos.length > 1) {\r\n            const mesh = meshOrGeometry as Mesh;\r\n            mesh.subMeshes = [];\r\n            for (const matInfo of this.materialInfos) {\r\n                new SubMesh(matInfo.materialIndex, matInfo.verticesStart, matInfo.verticesCount, matInfo.indexStart, matInfo.indexCount, mesh);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _update(meshOrGeometry: IGetSetVerticesData, updateExtends?: boolean, makeItUnique?: boolean): VertexData {\r\n        if (this.positions) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.PositionKind, this.positions, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.normals) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.NormalKind, this.normals, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.tangents) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.TangentKind, this.tangents, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UVKind, this.uvs, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV2Kind, this.uvs2, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV3Kind, this.uvs3, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV4Kind, this.uvs4, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV5Kind, this.uvs5, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV6Kind, this.uvs6, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.colors) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.ColorKind, this.colors, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesIndicesKind, this.matricesIndices, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesWeightsKind, this.matricesWeights, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.indices) {\r\n            meshOrGeometry.setIndices(this.indices, null);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    @nativeOverride.filter((...[coordinates]: Parameters<typeof VertexData._TransformVector3Coordinates>) => !Array.isArray(coordinates))\r\n    private static _TransformVector3Coordinates(coordinates: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = coordinates.length) {\r\n        const coordinate = TmpVectors.Vector3[0];\r\n        const transformedCoordinate = TmpVectors.Vector3[1];\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            Vector3.FromArrayToRef(coordinates, index, coordinate);\r\n            Vector3.TransformCoordinatesToRef(coordinate, transformation, transformedCoordinate);\r\n            coordinates[index] = transformedCoordinate.x;\r\n            coordinates[index + 1] = transformedCoordinate.y;\r\n            coordinates[index + 2] = transformedCoordinate.z;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[normals]: Parameters<typeof VertexData._TransformVector3Normals>) => !Array.isArray(normals))\r\n    private static _TransformVector3Normals(normals: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = normals.length) {\r\n        const normal = TmpVectors.Vector3[0];\r\n        const transformedNormal = TmpVectors.Vector3[1];\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            Vector3.FromArrayToRef(normals, index, normal);\r\n            Vector3.TransformNormalToRef(normal, transformation, transformedNormal);\r\n            normals[index] = transformedNormal.x;\r\n            normals[index + 1] = transformedNormal.y;\r\n            normals[index + 2] = transformedNormal.z;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[normals]: Parameters<typeof VertexData._TransformVector4Normals>) => !Array.isArray(normals))\r\n    private static _TransformVector4Normals(normals: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = normals.length) {\r\n        const normal = TmpVectors.Vector4[0];\r\n        const transformedNormal = TmpVectors.Vector4[1];\r\n        for (let index = offset; index < offset + length; index += 4) {\r\n            Vector4.FromArrayToRef(normals, index, normal);\r\n            Vector4.TransformNormalToRef(normal, transformation, transformedNormal);\r\n            normals[index] = transformedNormal.x;\r\n            normals[index + 1] = transformedNormal.y;\r\n            normals[index + 2] = transformedNormal.z;\r\n            normals[index + 3] = transformedNormal.w;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[indices]: Parameters<typeof VertexData._FlipFaces>) => !Array.isArray(indices))\r\n    private static _FlipFaces(indices: IndicesArray, offset = 0, length = indices.length) {\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            const tmp = indices[index + 1];\r\n            indices[index + 1] = indices[index + 2];\r\n            indices[index + 2] = tmp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transforms each position and each normal of the vertexData according to the passed Matrix\r\n     * @param matrix the transforming matrix\r\n     * @returns the VertexData\r\n     */\r\n    public transform(matrix: Matrix): VertexData {\r\n        const flip = matrix.determinant() < 0;\r\n        if (this.positions) {\r\n            VertexData._TransformVector3Coordinates(this.positions, matrix);\r\n        }\r\n\r\n        if (this.normals) {\r\n            VertexData._TransformVector3Normals(this.normals, matrix);\r\n        }\r\n\r\n        if (this.tangents) {\r\n            VertexData._TransformVector4Normals(this.tangents, matrix);\r\n        }\r\n\r\n        if (flip && this.indices) {\r\n            VertexData._FlipFaces(this.indices);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Generates an array of vertex data where each vertex data only has one material info\r\n     * @returns An array of VertexData\r\n     */\r\n    public splitBasedOnMaterialID() {\r\n        if (!this.materialInfos || this.materialInfos.length < 2) {\r\n            return [this];\r\n        }\r\n\r\n        const result: VertexData[] = [];\r\n        for (const materialInfo of this.materialInfos) {\r\n            const vertexData = new VertexData();\r\n\r\n            if (this.positions) {\r\n                vertexData.positions = this.positions.slice(materialInfo.verticesStart * 3, (materialInfo.verticesCount + materialInfo.verticesStart) * 3);\r\n            }\r\n\r\n            if (this.normals) {\r\n                vertexData.normals = this.normals.slice(materialInfo.verticesStart * 3, (materialInfo.verticesCount + materialInfo.verticesStart) * 3);\r\n            }\r\n\r\n            if (this.tangents) {\r\n                vertexData.tangents = this.tangents.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.colors) {\r\n                vertexData.colors = this.colors.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.uvs) {\r\n                vertexData.uvs = this.uvs.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs2) {\r\n                vertexData.uvs2 = this.uvs2.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs3) {\r\n                vertexData.uvs3 = this.uvs3.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs4) {\r\n                vertexData.uvs4 = this.uvs4.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs5) {\r\n                vertexData.uvs5 = this.uvs5.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs6) {\r\n                vertexData.uvs6 = this.uvs6.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.matricesIndices) {\r\n                vertexData.matricesIndices = this.matricesIndices.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.matricesIndicesExtra) {\r\n                vertexData.matricesIndicesExtra = this.matricesIndicesExtra.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.matricesWeights) {\r\n                vertexData.matricesWeights = this.matricesWeights.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.matricesWeightsExtra) {\r\n                vertexData.matricesWeightsExtra = this.matricesWeightsExtra.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.indices) {\r\n                vertexData.indices = [];\r\n                for (let index = materialInfo.indexStart; index < materialInfo.indexStart + materialInfo.indexCount; index++) {\r\n                    vertexData.indices.push(this.indices[index] - materialInfo.verticesStart);\r\n                }\r\n            }\r\n\r\n            const newMaterialInfo = new VertexDataMaterialInfo();\r\n            newMaterialInfo.indexStart = 0;\r\n            newMaterialInfo.indexCount = vertexData.indices ? vertexData.indices.length : 0;\r\n            newMaterialInfo.materialIndex = materialInfo.materialIndex;\r\n            newMaterialInfo.verticesStart = 0;\r\n            newMaterialInfo.verticesCount = (vertexData.positions ? vertexData.positions.length : 0) / 3;\r\n            vertexData.materialInfos = [newMaterialInfo];\r\n\r\n            result.push(vertexData);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Merges the passed VertexData into the current one\r\n     * @param others the VertexData to be merged into the current one\r\n     * @param use32BitsIndices defines a boolean indicating if indices must be store in a 32 bits array\r\n     * @param forceCloneIndices defines a boolean indicating if indices are forced to be cloned\r\n     * @param mergeMaterialIds defines a boolean indicating if we need to merge the material infos\r\n     * @param enableCompletion defines a boolean indicating if the vertex data should be completed to be compatible\r\n     * @returns the modified VertexData\r\n     */\r\n    public merge(others: VertexData | VertexData[], use32BitsIndices = false, forceCloneIndices = false, mergeMaterialIds = false, enableCompletion = false) {\r\n        const vertexDatas: { vertexData: VertexData; transform?: Matrix }[] = Array.isArray(others)\r\n            ? others.map((other) => {\r\n                  return { vertexData: other };\r\n              })\r\n            : [{ vertexData: others }];\r\n        return runCoroutineSync(this._mergeCoroutine(undefined, vertexDatas, use32BitsIndices, false, forceCloneIndices, mergeMaterialIds, enableCompletion));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public *_mergeCoroutine(\r\n        transform: Matrix | undefined,\r\n        vertexDatas: { vertexData: VertexData; transform?: Matrix }[],\r\n        use32BitsIndices = false,\r\n        isAsync: boolean,\r\n        forceCloneIndices: boolean,\r\n        mergeMaterialIds = false,\r\n        enableCompletion = false\r\n    ): Coroutine<VertexData> {\r\n        this._validate();\r\n\r\n        let others = vertexDatas.map((vertexData) => vertexData.vertexData);\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        let root: VertexData = this;\r\n\r\n        if (enableCompletion) {\r\n            // First let's make sure we have the max set of attributes on the main vertex data\r\n            for (const other of others) {\r\n                if (!other) {\r\n                    continue;\r\n                }\r\n\r\n                other._validate();\r\n\r\n                if (!this.normals && other.normals) {\r\n                    this.normals = new Float32Array(this.positions!.length);\r\n                }\r\n\r\n                if (!this.tangents && other.tangents) {\r\n                    this.tangents = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.uvs && other.uvs) {\r\n                    this.uvs = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs2 && other.uvs2) {\r\n                    this.uvs2 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs3 && other.uvs3) {\r\n                    this.uvs3 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs4 && other.uvs4) {\r\n                    this.uvs4 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs5 && other.uvs5) {\r\n                    this.uvs5 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs6 && other.uvs6) {\r\n                    this.uvs6 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.colors && other.colors) {\r\n                    this.colors = new Float32Array((this.positions!.length / 3) * 4);\r\n                    this.colors.fill(1); // Set to white by default\r\n                }\r\n\r\n                if (!this.matricesIndices && other.matricesIndices) {\r\n                    this.matricesIndices = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.matricesWeights && other.matricesWeights) {\r\n                    this.matricesWeights = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.matricesIndicesExtra && other.matricesIndicesExtra) {\r\n                    this.matricesIndicesExtra = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.matricesWeightsExtra && other.matricesWeightsExtra) {\r\n                    this.matricesWeightsExtra = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const other of others) {\r\n            if (!other) {\r\n                continue;\r\n            }\r\n\r\n            if (!enableCompletion) {\r\n                other._validate();\r\n                if (\r\n                    !this.normals !== !other.normals ||\r\n                    !this.tangents !== !other.tangents ||\r\n                    !this.uvs !== !other.uvs ||\r\n                    !this.uvs2 !== !other.uvs2 ||\r\n                    !this.uvs3 !== !other.uvs3 ||\r\n                    !this.uvs4 !== !other.uvs4 ||\r\n                    !this.uvs5 !== !other.uvs5 ||\r\n                    !this.uvs6 !== !other.uvs6 ||\r\n                    !this.colors !== !other.colors ||\r\n                    !this.matricesIndices !== !other.matricesIndices ||\r\n                    !this.matricesWeights !== !other.matricesWeights ||\r\n                    !this.matricesIndicesExtra !== !other.matricesIndicesExtra ||\r\n                    !this.matricesWeightsExtra !== !other.matricesWeightsExtra\r\n                ) {\r\n                    throw new Error(\"Cannot merge vertex data that do not have the same set of attributes\");\r\n                }\r\n            } else {\r\n                // Align the others with main set of attributes\r\n                if (this.normals && !other.normals) {\r\n                    other.normals = new Float32Array(other.positions!.length);\r\n                }\r\n\r\n                if (this.tangents && !other.tangents) {\r\n                    other.tangents = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (this.uvs && !other.uvs) {\r\n                    other.uvs = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs2 && !other.uvs2) {\r\n                    other.uvs2 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs3 && !other.uvs3) {\r\n                    other.uvs3 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs4 && !other.uvs4) {\r\n                    other.uvs4 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n                if (this.uvs5 && !other.uvs5) {\r\n                    other.uvs5 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs6 && !other.uvs6) {\r\n                    other.uvs6 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.colors && !other.colors) {\r\n                    other.colors = new Float32Array((other.positions!.length / 3) * 4);\r\n                    other.colors.fill(1); // Set to white by default\r\n                }\r\n\r\n                if (this.matricesIndices && !other.matricesIndices) {\r\n                    other.matricesIndices = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n                if (this.matricesWeights && !other.matricesWeights) {\r\n                    other.matricesWeights = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (this.matricesIndicesExtra && !other.matricesIndicesExtra) {\r\n                    other.matricesIndicesExtra = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (this.matricesWeightsExtra && !other.matricesWeightsExtra) {\r\n                    other.matricesWeightsExtra = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (mergeMaterialIds) {\r\n            // Merge material infos\r\n            let materialIndex = 0;\r\n            let indexOffset = 0;\r\n            let vertexOffset = 0;\r\n            const materialInfos: VertexDataMaterialInfo[] = [];\r\n            let currentMaterialInfo: Nullable<VertexDataMaterialInfo> = null;\r\n            const vertexDataList: { vertexData: VertexData; transform?: Matrix }[] = [];\r\n\r\n            // We need to split vertexData with more than one materialInfo\r\n            for (const split of this.splitBasedOnMaterialID()) {\r\n                vertexDataList.push({ vertexData: split, transform: transform });\r\n            }\r\n\r\n            for (const data of vertexDatas) {\r\n                if (!data.vertexData) {\r\n                    continue;\r\n                }\r\n                for (const split of data.vertexData.splitBasedOnMaterialID()) {\r\n                    vertexDataList.push({ vertexData: split, transform: data.transform });\r\n                }\r\n            }\r\n\r\n            // Sort by material IDs\r\n            vertexDataList.sort((a, b) => {\r\n                const matInfoA = a.vertexData.materialInfos ? a.vertexData.materialInfos[0].materialIndex : 0;\r\n                const matInfoB = b.vertexData.materialInfos ? b.vertexData.materialInfos[0].materialIndex : 0;\r\n\r\n                if (matInfoA > matInfoB) {\r\n                    return 1;\r\n                }\r\n\r\n                if (matInfoA === matInfoB) {\r\n                    return 0;\r\n                }\r\n\r\n                return -1;\r\n            });\r\n\r\n            // Build the new material info\r\n            for (const vertexDataSource of vertexDataList) {\r\n                const vertexData = vertexDataSource.vertexData;\r\n                if (vertexData.materialInfos) {\r\n                    materialIndex = vertexData.materialInfos[0].materialIndex;\r\n                } else {\r\n                    materialIndex = 0;\r\n                }\r\n                if (currentMaterialInfo && currentMaterialInfo.materialIndex === materialIndex) {\r\n                    currentMaterialInfo.indexCount += vertexData.indices!.length;\r\n                    currentMaterialInfo.verticesCount += vertexData.positions!.length / 3;\r\n                } else {\r\n                    const materialInfo = new VertexDataMaterialInfo();\r\n                    materialInfo.materialIndex = materialIndex;\r\n                    materialInfo.indexStart = indexOffset;\r\n                    materialInfo.indexCount = vertexData.indices!.length;\r\n                    materialInfo.verticesStart = vertexOffset;\r\n                    materialInfo.verticesCount = vertexData.positions!.length / 3;\r\n\r\n                    materialInfos.push(materialInfo);\r\n                    currentMaterialInfo = materialInfo;\r\n                }\r\n                indexOffset += vertexData.indices!.length;\r\n                vertexOffset += vertexData.positions!.length / 3;\r\n            }\r\n            // Extract sorted values\r\n            const first = vertexDataList.splice(0, 1)[0];\r\n            root = first.vertexData;\r\n            transform = first.transform;\r\n            others = vertexDataList.map((v) => v.vertexData);\r\n            vertexDatas = vertexDataList;\r\n\r\n            this.materialInfos = materialInfos;\r\n        }\r\n\r\n        // Merge geometries\r\n        const totalIndices = others.reduce((indexSum, vertexData) => indexSum + (vertexData.indices?.length ?? 0), root.indices?.length ?? 0);\r\n        const sliceIndices = forceCloneIndices || others.some((vertexData) => vertexData.indices === root.indices);\r\n        let indices = sliceIndices ? root.indices?.slice() : root.indices;\r\n        if (totalIndices > 0) {\r\n            let indicesOffset = indices?.length ?? 0;\r\n\r\n            if (!indices) {\r\n                indices = new Array<number>(totalIndices);\r\n            }\r\n\r\n            if (indices.length !== totalIndices) {\r\n                if (Array.isArray(indices)) {\r\n                    indices.length = totalIndices;\r\n                } else {\r\n                    const temp = use32BitsIndices || indices instanceof Uint32Array ? new Uint32Array(totalIndices) : new Uint16Array(totalIndices);\r\n                    temp.set(indices);\r\n                    indices = temp;\r\n                }\r\n\r\n                if (transform && transform.determinant() < 0) {\r\n                    VertexData._FlipFaces(indices, 0, indicesOffset);\r\n                }\r\n            }\r\n\r\n            let positionsOffset = root.positions ? root.positions.length / 3 : 0;\r\n            for (const { vertexData: other, transform } of vertexDatas) {\r\n                if (other.indices) {\r\n                    for (let index = 0; index < other.indices.length; index++) {\r\n                        indices[indicesOffset + index] = other.indices[index] + positionsOffset;\r\n                    }\r\n\r\n                    if (transform && transform.determinant() < 0) {\r\n                        VertexData._FlipFaces(indices, indicesOffset, other.indices.length);\r\n                    }\r\n\r\n                    // The call to _validate already checked for positions\r\n                    positionsOffset += other.positions!.length / 3;\r\n                    indicesOffset += other.indices.length;\r\n\r\n                    if (isAsync) {\r\n                        yield;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.indices = indices!;\r\n\r\n        this.positions = VertexData._MergeElement(\r\n            VertexBuffer.PositionKind,\r\n            root.positions,\r\n            transform,\r\n            vertexDatas.map((other) => [other.vertexData.positions, other.transform])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        if (root.normals) {\r\n            this.normals = VertexData._MergeElement(\r\n                VertexBuffer.NormalKind,\r\n                root.normals,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.normals, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.tangents) {\r\n            this.tangents = VertexData._MergeElement(\r\n                VertexBuffer.TangentKind,\r\n                root.tangents,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.tangents, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs) {\r\n            this.uvs = VertexData._MergeElement(\r\n                VertexBuffer.UVKind,\r\n                root.uvs,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs2) {\r\n            this.uvs2 = VertexData._MergeElement(\r\n                VertexBuffer.UV2Kind,\r\n                root.uvs2,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs2, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs3) {\r\n            this.uvs3 = VertexData._MergeElement(\r\n                VertexBuffer.UV3Kind,\r\n                root.uvs3,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs3, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs4) {\r\n            this.uvs4 = VertexData._MergeElement(\r\n                VertexBuffer.UV4Kind,\r\n                root.uvs4,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs4, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs5) {\r\n            this.uvs5 = VertexData._MergeElement(\r\n                VertexBuffer.UV5Kind,\r\n                root.uvs5,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs5, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs6) {\r\n            this.uvs6 = VertexData._MergeElement(\r\n                VertexBuffer.UV6Kind,\r\n                root.uvs6,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs6, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.colors) {\r\n            this.colors = VertexData._MergeElement(\r\n                VertexBuffer.ColorKind,\r\n                root.colors,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.colors, other.transform])\r\n            );\r\n            if (root.hasVertexAlpha !== undefined || vertexDatas.some((other) => other.vertexData.hasVertexAlpha !== undefined)) {\r\n                this.hasVertexAlpha = root.hasVertexAlpha || vertexDatas.some((other) => other.vertexData.hasVertexAlpha);\r\n            }\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesIndices) {\r\n            this.matricesIndices = VertexData._MergeElement(\r\n                VertexBuffer.MatricesIndicesKind,\r\n                root.matricesIndices,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesIndices, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesWeights) {\r\n            this.matricesWeights = VertexData._MergeElement(\r\n                VertexBuffer.MatricesWeightsKind,\r\n                root.matricesWeights,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesWeights, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesIndicesExtra) {\r\n            this.matricesIndicesExtra = VertexData._MergeElement(\r\n                VertexBuffer.MatricesIndicesExtraKind,\r\n                root.matricesIndicesExtra,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesIndicesExtra, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesWeightsExtra) {\r\n            this.matricesWeightsExtra = VertexData._MergeElement(\r\n                VertexBuffer.MatricesWeightsExtraKind,\r\n                root.matricesWeightsExtra,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesWeightsExtra, other.transform])\r\n            );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private static _MergeElement(\r\n        kind: string,\r\n        source: Nullable<FloatArray>,\r\n        transform: Matrix | undefined,\r\n        others: readonly (readonly [element: Nullable<FloatArray>, transform?: Matrix])[]\r\n    ): Nullable<FloatArray> {\r\n        const nonNullOthers = others.filter((other): other is [element: FloatArray, transform?: Matrix] => other[0] !== null && other[0] !== undefined);\r\n\r\n        // If there is no source to copy and no other non-null sources then skip this element.\r\n        if (!source && nonNullOthers.length == 0) {\r\n            return source;\r\n        }\r\n\r\n        if (!source) {\r\n            return this._MergeElement(kind, nonNullOthers[0][0], nonNullOthers[0][1], nonNullOthers.slice(1));\r\n        }\r\n\r\n        const len = nonNullOthers.reduce((sumLen, elements) => sumLen + elements[0].length, source.length);\r\n\r\n        const transformRange =\r\n            kind === VertexBuffer.PositionKind\r\n                ? VertexData._TransformVector3Coordinates\r\n                : kind === VertexBuffer.NormalKind\r\n                  ? VertexData._TransformVector3Normals\r\n                  : kind === VertexBuffer.TangentKind\r\n                    ? VertexData._TransformVector4Normals\r\n                    : () => {};\r\n\r\n        if (source instanceof Float32Array) {\r\n            // use non-loop method when the source is Float32Array\r\n            const ret32 = new Float32Array(len);\r\n            ret32.set(source);\r\n            transform && transformRange(ret32, transform, 0, source.length);\r\n\r\n            let offset = source.length;\r\n            for (const [vertexData, transform] of nonNullOthers) {\r\n                ret32.set(vertexData, offset);\r\n                transform && transformRange(ret32, transform, offset, vertexData.length);\r\n                offset += vertexData.length;\r\n            }\r\n            return ret32;\r\n        } else {\r\n            // don't use concat as it is super slow, just loop for other cases\r\n            const ret = new Array<number>(len);\r\n            for (let i = 0; i < source.length; i++) {\r\n                ret[i] = source[i];\r\n            }\r\n            transform && transformRange(ret, transform, 0, source.length);\r\n\r\n            let offset = source.length;\r\n            for (const [vertexData, transform] of nonNullOthers) {\r\n                for (let i = 0; i < vertexData.length; i++) {\r\n                    ret[offset + i] = vertexData[i];\r\n                }\r\n                transform && transformRange(ret, transform, offset, vertexData.length);\r\n                offset += vertexData.length;\r\n            }\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    private _validate(): void {\r\n        if (!this.positions) {\r\n            throw new RuntimeError(\"Positions are required\", ErrorCodes.MeshInvalidPositionsError);\r\n        }\r\n\r\n        const getElementCount = (kind: string, values: FloatArray) => {\r\n            const stride = VertexBuffer.DeduceStride(kind);\r\n            if (values.length % stride !== 0) {\r\n                throw new Error(\"The \" + kind + \"s array count must be a multiple of \" + stride);\r\n            }\r\n\r\n            return values.length / stride;\r\n        };\r\n\r\n        const positionsElementCount = getElementCount(VertexBuffer.PositionKind, this.positions);\r\n\r\n        const validateElementCount = (kind: string, values: FloatArray) => {\r\n            const elementCount = getElementCount(kind, values);\r\n            if (elementCount !== positionsElementCount) {\r\n                throw new Error(\"The \" + kind + \"s element count (\" + elementCount + \") does not match the positions count (\" + positionsElementCount + \")\");\r\n            }\r\n        };\r\n\r\n        if (this.normals) {\r\n            validateElementCount(VertexBuffer.NormalKind, this.normals);\r\n        }\r\n        if (this.tangents) {\r\n            validateElementCount(VertexBuffer.TangentKind, this.tangents);\r\n        }\r\n        if (this.uvs) {\r\n            validateElementCount(VertexBuffer.UVKind, this.uvs);\r\n        }\r\n        if (this.uvs2) {\r\n            validateElementCount(VertexBuffer.UV2Kind, this.uvs2);\r\n        }\r\n        if (this.uvs3) {\r\n            validateElementCount(VertexBuffer.UV3Kind, this.uvs3);\r\n        }\r\n        if (this.uvs4) {\r\n            validateElementCount(VertexBuffer.UV4Kind, this.uvs4);\r\n        }\r\n        if (this.uvs5) {\r\n            validateElementCount(VertexBuffer.UV5Kind, this.uvs5);\r\n        }\r\n        if (this.uvs6) {\r\n            validateElementCount(VertexBuffer.UV6Kind, this.uvs6);\r\n        }\r\n        if (this.colors) {\r\n            validateElementCount(VertexBuffer.ColorKind, this.colors);\r\n        }\r\n        if (this.matricesIndices) {\r\n            validateElementCount(VertexBuffer.MatricesIndicesKind, this.matricesIndices);\r\n        }\r\n        if (this.matricesWeights) {\r\n            validateElementCount(VertexBuffer.MatricesWeightsKind, this.matricesWeights);\r\n        }\r\n        if (this.matricesIndicesExtra) {\r\n            validateElementCount(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra);\r\n        }\r\n        if (this.matricesWeightsExtra) {\r\n            validateElementCount(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone the current vertex data\r\n     * @returns a copy of the current data\r\n     */\r\n    public clone() {\r\n        const serializationObject = this.serialize();\r\n        return VertexData.Parse(serializationObject);\r\n    }\r\n\r\n    /**\r\n     * Serializes the VertexData\r\n     * @returns a serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        if (this.positions) {\r\n            serializationObject.positions = Array.from(this.positions);\r\n        }\r\n\r\n        if (this.normals) {\r\n            serializationObject.normals = Array.from(this.normals);\r\n        }\r\n\r\n        if (this.tangents) {\r\n            serializationObject.tangents = Array.from(this.tangents);\r\n        }\r\n\r\n        if (this.uvs) {\r\n            serializationObject.uvs = Array.from(this.uvs);\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            serializationObject.uvs2 = Array.from(this.uvs2);\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            serializationObject.uvs3 = Array.from(this.uvs3);\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            serializationObject.uvs4 = Array.from(this.uvs4);\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            serializationObject.uvs5 = Array.from(this.uvs5);\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            serializationObject.uvs6 = Array.from(this.uvs6);\r\n        }\r\n\r\n        if (this.colors) {\r\n            serializationObject.colors = Array.from(this.colors);\r\n            serializationObject.hasVertexAlpha = this.hasVertexAlpha;\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            serializationObject.matricesIndices = Array.from(this.matricesIndices);\r\n            serializationObject.matricesIndices._isExpanded = true;\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            serializationObject.matricesWeights = Array.from(this.matricesWeights);\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            serializationObject.matricesIndicesExtra = Array.from(this.matricesIndicesExtra);\r\n            serializationObject.matricesIndicesExtra._isExpanded = true;\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            serializationObject.matricesWeightsExtra = Array.from(this.matricesWeightsExtra);\r\n        }\r\n\r\n        serializationObject.indices = Array.from(this.indices as number[]);\r\n\r\n        if (this.materialInfos) {\r\n            serializationObject.materialInfos = [];\r\n            for (const materialInfo of this.materialInfos) {\r\n                const materialInfoSerializationObject = {\r\n                    indexStart: materialInfo.indexStart,\r\n                    indexCount: materialInfo.indexCount,\r\n                    materialIndex: materialInfo.materialIndex,\r\n                    verticesStart: materialInfo.verticesStart,\r\n                    verticesCount: materialInfo.verticesCount,\r\n                };\r\n                serializationObject.materialInfos.push(materialInfoSerializationObject);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Extracts the vertexData from a mesh\r\n     * @param mesh the mesh from which to extract the VertexData\r\n     * @param copyWhenShared defines if the VertexData must be cloned when shared between multiple meshes, optional, default false\r\n     * @param forceCopy indicating that the VertexData must be cloned, optional, default false\r\n     * @returns the object VertexData associated to the passed mesh\r\n     */\r\n    public static ExtractFromMesh(mesh: Mesh, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        return VertexData._ExtractFrom(mesh, copyWhenShared, forceCopy);\r\n    }\r\n\r\n    /**\r\n     * Extracts the vertexData from the geometry\r\n     * @param geometry the geometry from which to extract the VertexData\r\n     * @param copyWhenShared defines if the VertexData must be cloned when the geometry is shared between multiple meshes, optional, default false\r\n     * @param forceCopy indicating that the VertexData must be cloned, optional, default false\r\n     * @returns the object VertexData associated to the passed mesh\r\n     */\r\n    public static ExtractFromGeometry(geometry: Geometry, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        return VertexData._ExtractFrom(geometry, copyWhenShared, forceCopy);\r\n    }\r\n\r\n    private static _ExtractFrom(meshOrGeometry: IGetSetVerticesData, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        const result = new VertexData();\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            result.positions = meshOrGeometry.getVerticesData(VertexBuffer.PositionKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            result.normals = meshOrGeometry.getVerticesData(VertexBuffer.NormalKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            result.tangents = meshOrGeometry.getVerticesData(VertexBuffer.TangentKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            result.uvs = meshOrGeometry.getVerticesData(VertexBuffer.UVKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n            result.uvs2 = meshOrGeometry.getVerticesData(VertexBuffer.UV2Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV3Kind)) {\r\n            result.uvs3 = meshOrGeometry.getVerticesData(VertexBuffer.UV3Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV4Kind)) {\r\n            result.uvs4 = meshOrGeometry.getVerticesData(VertexBuffer.UV4Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV5Kind)) {\r\n            result.uvs5 = meshOrGeometry.getVerticesData(VertexBuffer.UV5Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV6Kind)) {\r\n            result.uvs6 = meshOrGeometry.getVerticesData(VertexBuffer.UV6Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            const geometry = (meshOrGeometry as Mesh).geometry || (meshOrGeometry as Geometry);\r\n            const vertexBuffer = geometry.getVertexBuffer(VertexBuffer.ColorKind)!;\r\n            const colors = geometry.getVerticesData(VertexBuffer.ColorKind, copyWhenShared, forceCopy)!;\r\n            if (vertexBuffer.getSize() === 3) {\r\n                const newColors = new Float32Array((colors.length * 4) / 3);\r\n                for (let i = 0, j = 0; i < colors.length; i += 3, j += 4) {\r\n                    newColors[j] = colors[i];\r\n                    newColors[j + 1] = colors[i + 1];\r\n                    newColors[j + 2] = colors[i + 2];\r\n                    newColors[j + 3] = 1;\r\n                }\r\n                result.colors = newColors;\r\n            } else if (vertexBuffer.getSize() === 4) {\r\n                result.colors = colors;\r\n            } else {\r\n                throw new Error(`Unexpected number of color components: ${vertexBuffer.getSize()}`);\r\n            }\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            result.matricesIndices = meshOrGeometry.getVerticesData(VertexBuffer.MatricesIndicesKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            result.matricesWeights = meshOrGeometry.getVerticesData(VertexBuffer.MatricesWeightsKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesIndicesExtraKind)) {\r\n            result.matricesIndicesExtra = meshOrGeometry.getVerticesData(VertexBuffer.MatricesIndicesExtraKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\r\n            result.matricesWeightsExtra = meshOrGeometry.getVerticesData(VertexBuffer.MatricesWeightsExtraKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        result.indices = meshOrGeometry.getIndices(copyWhenShared, forceCopy);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Ribbon\r\n     * @param options an object used to set the following optional parameters for the ribbon, required but can be empty\r\n     * * pathArray array of paths, each of which an array of successive Vector3\r\n     * * closeArray creates a seam between the first and the last paths of the pathArray, optional, default false\r\n     * * closePath creates a seam between the first and the last points of each path of the path array, optional, default false\r\n     * * offset a positive integer, only used when pathArray contains a single path (offset = 10 means the point 1 is joined to the point 11), default rounded half size of the pathArray length\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * * invertUV swaps in the U and V coordinates when applying a texture, optional, default false\r\n     * * uvs a linear array, of length 2 * number of vertices, of custom UV values, optional\r\n     * * colors a linear array, of length 4 * number of vertices, of custom color values, optional\r\n     * @returns the VertexData of the ribbon\r\n     * @deprecated use CreateRibbonVertexData instead\r\n     */\r\n    public static CreateRibbon(options: {\r\n        pathArray: Vector3[][];\r\n        closeArray?: boolean;\r\n        closePath?: boolean;\r\n        offset?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        invertUV?: boolean;\r\n        uvs?: Vector2[];\r\n        colors?: Color4[];\r\n    }): VertexData {\r\n        throw _WarnImport(\"ribbonBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a box\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n     * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n     * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n     * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n     * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n     * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the box\r\n     * @deprecated Please use CreateBoxVertexData from the BoxBuilder file instead\r\n     */\r\n    public static CreateBox(options: {\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"boxBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a tiled box\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * faceTiles sets the pattern, tile size and number of tiles for a face\r\n     * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n     * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * @param options.pattern\r\n     * @param options.width\r\n     * @param options.height\r\n     * @param options.depth\r\n     * @param options.tileSize\r\n     * @param options.tileWidth\r\n     * @param options.tileHeight\r\n     * @param options.alignHorizontal\r\n     * @param options.alignVertical\r\n     * @param options.faceUV\r\n     * @param options.faceColors\r\n     * @param options.sideOrientation\r\n     * @returns the VertexData of the box\r\n     * @deprecated Please use CreateTiledBoxVertexData instead\r\n     */\r\n    public static CreateTiledBox(options: {\r\n        pattern?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n    }): VertexData {\r\n        throw _WarnImport(\"tiledBoxBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a tiled plane\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * pattern a limited pattern arrangement depending on the number\r\n     * * tileSize sets the width, height and depth of the tile to the value of size, optional default 1\r\n     * * tileWidth sets the width (x direction) of the tile, overwrites the width set by size, optional, default size\r\n     * * tileHeight sets the height (y direction) of the tile, overwrites the height set by size, optional, default size\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the tiled plane\r\n     * @deprecated use CreateTiledPlaneVertexData instead\r\n     */\r\n    public static CreateTiledPlane(options: {\r\n        pattern?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"tiledPlaneBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for an ellipsoid, defaults to a sphere\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * segments sets the number of horizontal strips optional, default 32\r\n     * * diameter sets the axes dimensions, diameterX, diameterY and diameterZ to the value of diameter, optional default 1\r\n     * * diameterX sets the diameterX (x direction) of the ellipsoid, overwrites the diameterX set by diameter, optional, default diameter\r\n     * * diameterY sets the diameterY (y direction) of the ellipsoid, overwrites the diameterY set by diameter, optional, default diameter\r\n     * * diameterZ sets the diameterZ (z direction) of the ellipsoid, overwrites the diameterZ set by diameter, optional, default diameter\r\n     * * arc a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the circumference (latitude) given by the arc value, optional, default 1\r\n     * * slice a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the height (latitude) given by the arc value, optional, default 1\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the ellipsoid\r\n     * @deprecated use CreateSphereVertexData instead\r\n     */\r\n    public static CreateSphere(options: {\r\n        segments?: number;\r\n        diameter?: number;\r\n        diameterX?: number;\r\n        diameterY?: number;\r\n        diameterZ?: number;\r\n        arc?: number;\r\n        slice?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"sphereBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a cylinder, cone or prism\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * height sets the height (y direction) of the cylinder, optional, default 2\r\n     * * diameterTop sets the diameter of the top of the cone, overwrites diameter,  optional, default diameter\r\n     * * diameterBottom sets the diameter of the bottom of the cone, overwrites diameter,  optional, default diameter\r\n     * * diameter sets the diameter of the top and bottom of the cone, optional default 1\r\n     * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n     * * subdivisions` the number of rings along the cylinder height, optional, default 1\r\n     * * arc a number from 0 to 1, to create an unclosed cylinder based on the fraction of the circumference given by the arc value, optional, default 1\r\n     * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * * hasRings when true makes each subdivision independently treated as a face for faceUV and faceColors, optional, default false\r\n     * * enclose when true closes an open cylinder by adding extra flat faces between the height axis and vertical edges, think cut cake\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the cylinder, cone or prism\r\n     * @deprecated please use CreateCylinderVertexData instead\r\n     */\r\n    public static CreateCylinder(options: {\r\n        height?: number;\r\n        diameterTop?: number;\r\n        diameterBottom?: number;\r\n        diameter?: number;\r\n        tessellation?: number;\r\n        subdivisions?: number;\r\n        arc?: number;\r\n        faceColors?: Color4[];\r\n        faceUV?: Vector4[];\r\n        hasRings?: boolean;\r\n        enclose?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"cylinderBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a torus\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * diameter the diameter of the torus, optional default 1\r\n     * * thickness the diameter of the tube forming the torus, optional default 0.5\r\n     * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the torus\r\n     * @deprecated use CreateTorusVertexData instead\r\n     */\r\n    public static CreateTorus(options: {\r\n        diameter?: number;\r\n        thickness?: number;\r\n        tessellation?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"torusBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the LineSystem\r\n     * @param options an object used to set the following optional parameters for the LineSystem, required but can be empty\r\n     *  - lines an array of lines, each line being an array of successive Vector3\r\n     *  - colors an array of line colors, each of the line colors being an array of successive Color4, one per line point\r\n     * @returns the VertexData of the LineSystem\r\n     * @deprecated use CreateLineSystemVertexData instead\r\n     */\r\n    public static CreateLineSystem(options: { lines: Vector3[][]; colors?: Nullable<Color4[][]> }): VertexData {\r\n        throw _WarnImport(\"linesBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Create the VertexData for a DashedLines\r\n     * @param options an object used to set the following optional parameters for the DashedLines, required but can be empty\r\n     *  - points an array successive Vector3\r\n     *  - dashSize the size of the dashes relative to the dash number, optional, default 3\r\n     *  - gapSize the size of the gap between two successive dashes relative to the dash number, optional, default 1\r\n     *  - dashNb the intended total number of dashes, optional, default 200\r\n     * @returns the VertexData for the DashedLines\r\n     * @deprecated use CreateDashedLinesVertexData instead\r\n     */\r\n    public static CreateDashedLines(options: { points: Vector3[]; dashSize?: number; gapSize?: number; dashNb?: number }): VertexData {\r\n        throw _WarnImport(\"linesBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Ground\r\n     * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n     *  - width the width (x direction) of the ground, optional, default 1\r\n     *  - height the height (z direction) of the ground, optional, default 1\r\n     *  - subdivisions the number of subdivisions per side, optional, default 1\r\n     * @returns the VertexData of the Ground\r\n     * @deprecated Please use CreateGroundVertexData instead\r\n     */\r\n    public static CreateGround(options: { width?: number; height?: number; subdivisions?: number; subdivisionsX?: number; subdivisionsY?: number }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a TiledGround by subdividing the ground into tiles\r\n     * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n     * * xmin the ground minimum X coordinate, optional, default -1\r\n     * * zmin the ground minimum Z coordinate, optional, default -1\r\n     * * xmax the ground maximum X coordinate, optional, default 1\r\n     * * zmax the ground maximum Z coordinate, optional, default 1\r\n     * * subdivisions a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the ground width and height creating 'tiles', default {w: 6, h: 6}\r\n     * * precision a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the tile width and height, default {w: 2, h: 2}\r\n     * @returns the VertexData of the TiledGround\r\n     * @deprecated use CreateTiledGroundVertexData instead\r\n     */\r\n    public static CreateTiledGround(options: {\r\n        xmin: number;\r\n        zmin: number;\r\n        xmax: number;\r\n        zmax: number;\r\n        subdivisions?: { w: number; h: number };\r\n        precision?: { w: number; h: number };\r\n    }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the Ground designed from a heightmap\r\n     * @param options an object used to set the following parameters for the Ground, required and provided by CreateGroundFromHeightMap\r\n     * * width the width (x direction) of the ground\r\n     * * height the height (z direction) of the ground\r\n     * * subdivisions the number of subdivisions per side\r\n     * * minHeight the minimum altitude on the ground, optional, default 0\r\n     * * maxHeight the maximum altitude on the ground, optional default 1\r\n     * * colorFilter the filter to apply to the image pixel colors to compute the height, optional Color3, default (0.3, 0.59, 0.11)\r\n     * * buffer the array holding the image color data\r\n     * * bufferWidth the width of image\r\n     * * bufferHeight the height of image\r\n     * * alphaFilter Remove any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n     * @returns the VertexData of the Ground designed from a heightmap\r\n     * @deprecated use CreateGroundFromHeightMapVertexData instead\r\n     */\r\n    public static CreateGroundFromHeightMap(options: {\r\n        width: number;\r\n        height: number;\r\n        subdivisions: number;\r\n        minHeight: number;\r\n        maxHeight: number;\r\n        colorFilter: Color3;\r\n        buffer: Uint8Array;\r\n        bufferWidth: number;\r\n        bufferHeight: number;\r\n        alphaFilter: number;\r\n    }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Plane\r\n     * @param options an object used to set the following optional parameters for the plane, required but can be empty\r\n     * * size sets the width and height of the plane to the value of size, optional default 1\r\n     * * width sets the width (x direction) of the plane, overwrites the width set by size, optional, default size\r\n     * * height sets the height (y direction) of the plane, overwrites the height set by size, optional, default size\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the box\r\n     * @deprecated use CreatePlaneVertexData instead\r\n     */\r\n    public static CreatePlane(options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n        throw _WarnImport(\"planeBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the Disc or regular Polygon\r\n     * @param options an object used to set the following optional parameters for the disc, required but can be empty\r\n     * * radius the radius of the disc, optional default 0.5\r\n     * * tessellation the number of polygon sides, optional, default 64\r\n     * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the box\r\n     * @deprecated use CreateDiscVertexData instead\r\n     */\r\n    public static CreateDisc(options: { radius?: number; tessellation?: number; arc?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n        throw _WarnImport(\"discBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for an irregular Polygon in the XoZ plane using a mesh built by polygonTriangulation.build()\r\n     * All parameters are provided by CreatePolygon as needed\r\n     * @param polygon a mesh built from polygonTriangulation.build()\r\n     * @param sideOrientation takes the values Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * @param fUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * @param fColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * @param frontUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param wrap a boolean, default false, when true and fUVs used texture is wrapped around all sides, when false texture is applied side\r\n     * @returns the VertexData of the Polygon\r\n     * @deprecated use CreatePolygonVertexData instead\r\n     */\r\n    public static CreatePolygon(polygon: Mesh, sideOrientation: number, fUV?: Vector4[], fColors?: Color4[], frontUVs?: Vector4, backUVs?: Vector4, wrap?: boolean): VertexData {\r\n        throw _WarnImport(\"polygonBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the IcoSphere\r\n     * @param options an object used to set the following optional parameters for the IcoSphere, required but can be empty\r\n     * * radius the radius of the IcoSphere, optional default 1\r\n     * * radiusX allows stretching in the x direction, optional, default radius\r\n     * * radiusY allows stretching in the y direction, optional, default radius\r\n     * * radiusZ allows stretching in the z direction, optional, default radius\r\n     * * flat when true creates a flat shaded mesh, optional, default true\r\n     * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the IcoSphere\r\n     * @deprecated use CreateIcoSphereVertexData instead\r\n     */\r\n    public static CreateIcoSphere(options: {\r\n        radius?: number;\r\n        radiusX?: number;\r\n        radiusY?: number;\r\n        radiusZ?: number;\r\n        flat?: boolean;\r\n        subdivisions?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"icoSphereBuilder\");\r\n    }\r\n\r\n    // inspired from // http://stemkoski.github.io/Three.js/Polyhedra.html\r\n    /**\r\n     * Creates the VertexData for a Polyhedron\r\n     * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n     * * type provided types are:\r\n     *  * 0 : Tetrahedron, 1 : Octahedron, 2 : Dodecahedron, 3 : Icosahedron, 4 : Rhombicuboctahedron, 5 : Triangular Prism, 6 : Pentagonal Prism, 7 : Hexagonal Prism, 8 : Square Pyramid (J1)\r\n     *  * 9 : Pentagonal Pyramid (J2), 10 : Triangular Dipyramid (J12), 11 : Pentagonal Dipyramid (J13), 12 : Elongated Square Dipyramid (J15), 13 : Elongated Pentagonal Dipyramid (J16), 14 : Elongated Pentagonal Cupola (J20)\r\n     * * size the size of the IcoSphere, optional default 1\r\n     * * sizeX allows stretching in the x direction, optional, default size\r\n     * * sizeY allows stretching in the y direction, optional, default size\r\n     * * sizeZ allows stretching in the z direction, optional, default size\r\n     * * custom a number that overwrites the type to create from an extended set of polyhedron from https://www.babylonjs-playground.com/#21QRSK#15 with minimised editor\r\n     * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * * flat when true creates a flat shaded mesh, optional, default true\r\n     * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the Polyhedron\r\n     * @deprecated use CreatePolyhedronVertexData instead\r\n     */\r\n    public static CreatePolyhedron(options: {\r\n        type?: number;\r\n        size?: number;\r\n        sizeX?: number;\r\n        sizeY?: number;\r\n        sizeZ?: number;\r\n        custom?: any;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        flat?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"polyhedronBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Capsule, inspired from https://github.com/maximeq/three-js-capsule-geometry/blob/master/src/CapsuleBufferGeometry.js\r\n     * @param options an object used to set the following optional parameters for the capsule, required but can be empty\r\n     * @returns the VertexData of the Capsule\r\n     * @deprecated Please use CreateCapsuleVertexData from the capsuleBuilder file instead\r\n     */\r\n    public static CreateCapsule(\r\n        options: ICreateCapsuleOptions = {\r\n            orientation: Vector3.Up(),\r\n            subdivisions: 2,\r\n            tessellation: 16,\r\n            height: 1,\r\n            radius: 0.25,\r\n            capSubdivisions: 6,\r\n        }\r\n    ): VertexData {\r\n        throw _WarnImport(\"capsuleBuilder\");\r\n    }\r\n\r\n    // based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\r\n    /**\r\n     * Creates the VertexData for a TorusKnot\r\n     * @param options an object used to set the following optional parameters for the TorusKnot, required but can be empty\r\n     * * radius the radius of the torus knot, optional, default 2\r\n     * * tube the thickness of the tube, optional, default 0.5\r\n     * * radialSegments the number of sides on each tube segments, optional, default 32\r\n     * * tubularSegments the number of tubes to decompose the knot into, optional, default 32\r\n     * * p the number of windings around the z axis, optional,  default 2\r\n     * * q the number of windings around the x axis, optional,  default 3\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the Torus Knot\r\n     * @deprecated use CreateTorusKnotVertexData instead\r\n     */\r\n    public static CreateTorusKnot(options: {\r\n        radius?: number;\r\n        tube?: number;\r\n        radialSegments?: number;\r\n        tubularSegments?: number;\r\n        p?: number;\r\n        q?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"torusKnotBuilder\");\r\n    }\r\n\r\n    // Tools\r\n\r\n    /**\r\n     * Compute normals for given positions and indices\r\n     * @param positions an array of vertex positions, [...., x, y, z, ......]\r\n     * @param indices an array of indices in groups of three for each triangular facet, [...., i, j, k, ......]\r\n     * @param normals an array of vertex normals, [...., x, y, z, ......]\r\n     * @param options an object used to set the following optional parameters for the TorusKnot, optional\r\n     * * facetNormals : optional array of facet normals (vector3)\r\n     * * facetPositions : optional array of facet positions (vector3)\r\n     * * facetPartitioning : optional partitioning array. facetPositions is required for facetPartitioning computation\r\n     * * ratio : optional partitioning ratio / bounding box, required for facetPartitioning computation\r\n     * * bInfo : optional bounding info, required for facetPartitioning computation\r\n     * * bbSize : optional bounding box size data, required for facetPartitioning computation\r\n     * * subDiv : optional partitioning data about subdivisions on  each axis (int), required for facetPartitioning computation\r\n     * * useRightHandedSystem: optional boolean to for right handed system computation\r\n     * * depthSort : optional boolean to enable the facet depth sort computation\r\n     * * distanceTo : optional Vector3 to compute the facet depth from this location\r\n     * * depthSortedFacets : optional array of depthSortedFacets to store the facet distances from the reference location\r\n     */\r\n    public static ComputeNormals(\r\n        positions: any,\r\n        indices: any,\r\n        normals: any,\r\n        options?: {\r\n            facetNormals?: any;\r\n            facetPositions?: any;\r\n            facetPartitioning?: any;\r\n            ratio?: number;\r\n            bInfo?: any;\r\n            bbSize?: Vector3;\r\n            subDiv?: any;\r\n            useRightHandedSystem?: boolean;\r\n            depthSort?: boolean;\r\n            distanceTo?: Vector3;\r\n            depthSortedFacets?: any;\r\n        }\r\n    ): void {\r\n        // temporary scalar variables\r\n        let index = 0; // facet index\r\n        let p1p2x = 0.0; // p1p2 vector x coordinate\r\n        let p1p2y = 0.0; // p1p2 vector y coordinate\r\n        let p1p2z = 0.0; // p1p2 vector z coordinate\r\n        let p3p2x = 0.0; // p3p2 vector x coordinate\r\n        let p3p2y = 0.0; // p3p2 vector y coordinate\r\n        let p3p2z = 0.0; // p3p2 vector z coordinate\r\n        let faceNormalx = 0.0; // facet normal x coordinate\r\n        let faceNormaly = 0.0; // facet normal y coordinate\r\n        let faceNormalz = 0.0; // facet normal z coordinate\r\n        let length = 0.0; // facet normal length before normalization\r\n        let v1x = 0; // vector1 x index in the positions array\r\n        let v1y = 0; // vector1 y index in the positions array\r\n        let v1z = 0; // vector1 z index in the positions array\r\n        let v2x = 0; // vector2 x index in the positions array\r\n        let v2y = 0; // vector2 y index in the positions array\r\n        let v2z = 0; // vector2 z index in the positions array\r\n        let v3x = 0; // vector3 x index in the positions array\r\n        let v3y = 0; // vector3 y index in the positions array\r\n        let v3z = 0; // vector3 z index in the positions array\r\n        let computeFacetNormals = false;\r\n        let computeFacetPositions = false;\r\n        let computeFacetPartitioning = false;\r\n        let computeDepthSort = false;\r\n        let faceNormalSign = 1;\r\n        let ratio = 0;\r\n        let distanceTo: Nullable<Vector3> = null;\r\n        if (options) {\r\n            computeFacetNormals = options.facetNormals ? true : false;\r\n            computeFacetPositions = options.facetPositions ? true : false;\r\n            computeFacetPartitioning = options.facetPartitioning ? true : false;\r\n            faceNormalSign = options.useRightHandedSystem === true ? -1 : 1;\r\n            ratio = options.ratio || 0;\r\n            computeDepthSort = options.depthSort ? true : false;\r\n            distanceTo = <Vector3>options.distanceTo;\r\n            if (computeDepthSort) {\r\n                if (distanceTo === undefined) {\r\n                    distanceTo = Vector3.Zero();\r\n                }\r\n            }\r\n        }\r\n\r\n        // facetPartitioning reinit if needed\r\n        let xSubRatio = 0;\r\n        let ySubRatio = 0;\r\n        let zSubRatio = 0;\r\n        let subSq = 0;\r\n        if (computeFacetPartitioning && options && options.bbSize) {\r\n            //let bbSizeMax = options.bbSize.x > options.bbSize.y ? options.bbSize.x : options.bbSize.y;\r\n            //bbSizeMax = bbSizeMax > options.bbSize.z ? bbSizeMax : options.bbSize.z;\r\n            xSubRatio = (options.subDiv.X * ratio) / options.bbSize.x;\r\n            ySubRatio = (options.subDiv.Y * ratio) / options.bbSize.y;\r\n            zSubRatio = (options.subDiv.Z * ratio) / options.bbSize.z;\r\n            subSq = options.subDiv.max * options.subDiv.max;\r\n            options.facetPartitioning.length = 0;\r\n        }\r\n\r\n        // reset the normals\r\n        for (index = 0; index < positions.length; index++) {\r\n            normals[index] = 0.0;\r\n        }\r\n\r\n        // Loop : 1 indice triplet = 1 facet\r\n        const nbFaces = (indices.length / 3) | 0;\r\n        for (index = 0; index < nbFaces; index++) {\r\n            // get the indexes of the coordinates of each vertex of the facet\r\n            v1x = indices[index * 3] * 3;\r\n            v1y = v1x + 1;\r\n            v1z = v1x + 2;\r\n            v2x = indices[index * 3 + 1] * 3;\r\n            v2y = v2x + 1;\r\n            v2z = v2x + 2;\r\n            v3x = indices[index * 3 + 2] * 3;\r\n            v3y = v3x + 1;\r\n            v3z = v3x + 2;\r\n\r\n            p1p2x = positions[v1x] - positions[v2x]; // compute two vectors per facet : p1p2 and p3p2\r\n            p1p2y = positions[v1y] - positions[v2y];\r\n            p1p2z = positions[v1z] - positions[v2z];\r\n\r\n            p3p2x = positions[v3x] - positions[v2x];\r\n            p3p2y = positions[v3y] - positions[v2y];\r\n            p3p2z = positions[v3z] - positions[v2z];\r\n\r\n            // compute the face normal with the cross product\r\n            faceNormalx = faceNormalSign * (p1p2y * p3p2z - p1p2z * p3p2y);\r\n            faceNormaly = faceNormalSign * (p1p2z * p3p2x - p1p2x * p3p2z);\r\n            faceNormalz = faceNormalSign * (p1p2x * p3p2y - p1p2y * p3p2x);\r\n            // normalize this normal and store it in the array facetData\r\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\r\n            length = length === 0 ? 1.0 : length;\r\n            faceNormalx /= length;\r\n            faceNormaly /= length;\r\n            faceNormalz /= length;\r\n\r\n            if (computeFacetNormals && options) {\r\n                options.facetNormals[index].x = faceNormalx;\r\n                options.facetNormals[index].y = faceNormaly;\r\n                options.facetNormals[index].z = faceNormalz;\r\n            }\r\n\r\n            if (computeFacetPositions && options) {\r\n                // compute and the facet barycenter coordinates in the array facetPositions\r\n                options.facetPositions[index].x = (positions[v1x] + positions[v2x] + positions[v3x]) / 3.0;\r\n                options.facetPositions[index].y = (positions[v1y] + positions[v2y] + positions[v3y]) / 3.0;\r\n                options.facetPositions[index].z = (positions[v1z] + positions[v2z] + positions[v3z]) / 3.0;\r\n            }\r\n\r\n            if (computeFacetPartitioning && options) {\r\n                // store the facet indexes in arrays in the main facetPartitioning array :\r\n                // compute each facet vertex (+ facet barycenter) index in the partiniong array\r\n                const ox = Math.floor((options.facetPositions[index].x - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const oy = Math.floor((options.facetPositions[index].y - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const oz = Math.floor((options.facetPositions[index].z - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b1x = Math.floor((positions[v1x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b1y = Math.floor((positions[v1y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b1z = Math.floor((positions[v1z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b2x = Math.floor((positions[v2x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b2y = Math.floor((positions[v2y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b2z = Math.floor((positions[v2z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b3x = Math.floor((positions[v3x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b3y = Math.floor((positions[v3y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b3z = Math.floor((positions[v3z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n\r\n                const block_idx_v1 = b1x + options.subDiv.max * b1y + subSq * b1z;\r\n                const block_idx_v2 = b2x + options.subDiv.max * b2y + subSq * b2z;\r\n                const block_idx_v3 = b3x + options.subDiv.max * b3y + subSq * b3z;\r\n                const block_idx_o = ox + options.subDiv.max * oy + subSq * oz;\r\n\r\n                options.facetPartitioning[block_idx_o] = options.facetPartitioning[block_idx_o] ? options.facetPartitioning[block_idx_o] : new Array();\r\n                options.facetPartitioning[block_idx_v1] = options.facetPartitioning[block_idx_v1] ? options.facetPartitioning[block_idx_v1] : new Array();\r\n                options.facetPartitioning[block_idx_v2] = options.facetPartitioning[block_idx_v2] ? options.facetPartitioning[block_idx_v2] : new Array();\r\n                options.facetPartitioning[block_idx_v3] = options.facetPartitioning[block_idx_v3] ? options.facetPartitioning[block_idx_v3] : new Array();\r\n\r\n                // push each facet index in each block containing the vertex\r\n                options.facetPartitioning[block_idx_v1].push(index);\r\n                if (block_idx_v2 != block_idx_v1) {\r\n                    options.facetPartitioning[block_idx_v2].push(index);\r\n                }\r\n                if (!(block_idx_v3 == block_idx_v2 || block_idx_v3 == block_idx_v1)) {\r\n                    options.facetPartitioning[block_idx_v3].push(index);\r\n                }\r\n                if (!(block_idx_o == block_idx_v1 || block_idx_o == block_idx_v2 || block_idx_o == block_idx_v3)) {\r\n                    options.facetPartitioning[block_idx_o].push(index);\r\n                }\r\n            }\r\n\r\n            if (computeDepthSort && options && options.facetPositions) {\r\n                const dsf = options.depthSortedFacets[index];\r\n                dsf.ind = index * 3;\r\n                dsf.sqDistance = Vector3.DistanceSquared(options.facetPositions[index], distanceTo!);\r\n            }\r\n\r\n            // compute the normals anyway\r\n            normals[v1x] += faceNormalx; // accumulate all the normals per face\r\n            normals[v1y] += faceNormaly;\r\n            normals[v1z] += faceNormalz;\r\n            normals[v2x] += faceNormalx;\r\n            normals[v2y] += faceNormaly;\r\n            normals[v2z] += faceNormalz;\r\n            normals[v3x] += faceNormalx;\r\n            normals[v3y] += faceNormaly;\r\n            normals[v3z] += faceNormalz;\r\n        }\r\n        // last normalization of each normal\r\n        for (index = 0; index < normals.length / 3; index++) {\r\n            faceNormalx = normals[index * 3];\r\n            faceNormaly = normals[index * 3 + 1];\r\n            faceNormalz = normals[index * 3 + 2];\r\n\r\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\r\n            length = length === 0 ? 1.0 : length;\r\n            faceNormalx /= length;\r\n            faceNormaly /= length;\r\n            faceNormalz /= length;\r\n\r\n            normals[index * 3] = faceNormalx;\r\n            normals[index * 3 + 1] = faceNormaly;\r\n            normals[index * 3 + 2] = faceNormalz;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _ComputeSides(\r\n        sideOrientation: number,\r\n        positions: FloatArray,\r\n        indices: FloatArray | IndicesArray,\r\n        normals: FloatArray,\r\n        uvs: FloatArray,\r\n        frontUVs?: Vector4,\r\n        backUVs?: Vector4\r\n    ) {\r\n        const li: number = indices.length;\r\n        const ln: number = normals.length;\r\n        let i: number;\r\n        let n: number;\r\n        sideOrientation = sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n        switch (sideOrientation) {\r\n            case VertexData.FRONTSIDE:\r\n                // nothing changed\r\n                break;\r\n\r\n            case VertexData.BACKSIDE:\r\n                // indices\r\n                for (i = 0; i < li; i += 3) {\r\n                    const tmp = indices[i];\r\n                    indices[i] = indices[i + 2];\r\n                    indices[i + 2] = tmp;\r\n                }\r\n                // normals\r\n                for (n = 0; n < ln; n++) {\r\n                    normals[n] = -normals[n];\r\n                }\r\n                break;\r\n\r\n            case VertexData.DOUBLESIDE: {\r\n                // positions\r\n                const lp: number = positions.length;\r\n                const l: number = lp / 3;\r\n                for (let p = 0; p < lp; p++) {\r\n                    positions[lp + p] = positions[p];\r\n                }\r\n                // indices\r\n                for (i = 0; i < li; i += 3) {\r\n                    indices[i + li] = indices[i + 2] + l;\r\n                    indices[i + 1 + li] = indices[i + 1] + l;\r\n                    indices[i + 2 + li] = indices[i] + l;\r\n                }\r\n                // normals\r\n                for (n = 0; n < ln; n++) {\r\n                    normals[ln + n] = -normals[n];\r\n                }\r\n\r\n                // uvs\r\n                const lu: number = uvs.length;\r\n                let u: number = 0;\r\n                for (u = 0; u < lu; u++) {\r\n                    uvs[u + lu] = uvs[u];\r\n                }\r\n                frontUVs = frontUVs ? frontUVs : new Vector4(0.0, 0.0, 1.0, 1.0);\r\n                backUVs = backUVs ? backUVs : new Vector4(0.0, 0.0, 1.0, 1.0);\r\n                u = 0;\r\n                for (i = 0; i < lu / 2; i++) {\r\n                    uvs[u] = frontUVs.x + (frontUVs.z - frontUVs.x) * uvs[u];\r\n                    uvs[u + 1] = frontUVs.y + (frontUVs.w - frontUVs.y) * uvs[u + 1];\r\n                    uvs[u + lu] = backUVs.x + (backUVs.z - backUVs.x) * uvs[u + lu];\r\n                    uvs[u + lu + 1] = backUVs.y + (backUVs.w - backUVs.y) * uvs[u + lu + 1];\r\n                    u += 2;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a VertexData from serialized data\r\n     * @param parsedVertexData the parsed data from an imported file\r\n     * @returns a VertexData\r\n     */\r\n    public static Parse(parsedVertexData: any) {\r\n        const vertexData = new VertexData();\r\n\r\n        // positions\r\n        const positions = parsedVertexData.positions;\r\n        if (positions) {\r\n            vertexData.set(positions, VertexBuffer.PositionKind);\r\n        }\r\n\r\n        // normals\r\n        const normals = parsedVertexData.normals;\r\n        if (normals) {\r\n            vertexData.set(normals, VertexBuffer.NormalKind);\r\n        }\r\n\r\n        // tangents\r\n        const tangents = parsedVertexData.tangents;\r\n        if (tangents) {\r\n            vertexData.set(tangents, VertexBuffer.TangentKind);\r\n        }\r\n\r\n        // uvs\r\n        const uvs = parsedVertexData.uvs;\r\n        if (uvs) {\r\n            vertexData.set(uvs, VertexBuffer.UVKind);\r\n        }\r\n\r\n        // uv2s\r\n        const uvs2 = parsedVertexData.uvs2;\r\n        if (uvs2) {\r\n            vertexData.set(uvs2, VertexBuffer.UV2Kind);\r\n        }\r\n\r\n        // uv3s\r\n        const uvs3 = parsedVertexData.uvs3;\r\n        if (uvs3) {\r\n            vertexData.set(uvs3, VertexBuffer.UV3Kind);\r\n        }\r\n\r\n        // uv4s\r\n        const uvs4 = parsedVertexData.uvs4;\r\n        if (uvs4) {\r\n            vertexData.set(uvs4, VertexBuffer.UV4Kind);\r\n        }\r\n\r\n        // uv5s\r\n        const uvs5 = parsedVertexData.uvs5;\r\n        if (uvs5) {\r\n            vertexData.set(uvs5, VertexBuffer.UV5Kind);\r\n        }\r\n\r\n        // uv6s\r\n        const uvs6 = parsedVertexData.uvs6;\r\n        if (uvs6) {\r\n            vertexData.set(uvs6, VertexBuffer.UV6Kind);\r\n        }\r\n\r\n        // colors\r\n        const colors = parsedVertexData.colors;\r\n        if (colors) {\r\n            vertexData.set(Color4.CheckColors4(colors, positions.length / 3), VertexBuffer.ColorKind);\r\n            if (parsedVertexData.hasVertexAlpha !== undefined) {\r\n                vertexData.hasVertexAlpha = parsedVertexData.hasVertexAlpha;\r\n            }\r\n        }\r\n\r\n        // matricesIndices\r\n        const matricesIndices = parsedVertexData.matricesIndices;\r\n        if (matricesIndices) {\r\n            vertexData.set(matricesIndices, VertexBuffer.MatricesIndicesKind);\r\n        }\r\n\r\n        // matricesWeights\r\n        const matricesWeights = parsedVertexData.matricesWeights;\r\n        if (matricesWeights) {\r\n            vertexData.set(matricesWeights, VertexBuffer.MatricesWeightsKind);\r\n        }\r\n\r\n        // indices\r\n        const indices = parsedVertexData.indices;\r\n        if (indices) {\r\n            vertexData.indices = indices;\r\n        }\r\n\r\n        // MaterialInfos\r\n        const materialInfos = parsedVertexData.materialInfos;\r\n        if (materialInfos) {\r\n            vertexData.materialInfos = [];\r\n            for (const materialInfoFromJSON of materialInfos) {\r\n                const materialInfo = new VertexDataMaterialInfo();\r\n                materialInfo.indexCount = materialInfoFromJSON.indexCount;\r\n                materialInfo.indexStart = materialInfoFromJSON.indexStart;\r\n                materialInfo.verticesCount = materialInfoFromJSON.verticesCount;\r\n                materialInfo.verticesStart = materialInfoFromJSON.verticesStart;\r\n                materialInfo.materialIndex = materialInfoFromJSON.materialIndex;\r\n                vertexData.materialInfos.push(materialInfo);\r\n            }\r\n        }\r\n\r\n        return vertexData;\r\n    }\r\n\r\n    /**\r\n     * Applies VertexData created from the imported parameters to the geometry\r\n     * @param parsedVertexData the parsed data from an imported file\r\n     * @param geometry the geometry to apply the VertexData to\r\n     */\r\n    public static ImportVertexData(parsedVertexData: any, geometry: Geometry) {\r\n        const vertexData = VertexData.Parse(parsedVertexData);\r\n\r\n        geometry.setAllVerticesData(vertexData, parsedVertexData.updatable);\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Scene } from \"./scene\";\r\nimport type { Nullable } from \"./types\";\r\nimport { Matrix, Vector3 } from \"./Maths/math.vector\";\r\nimport type { AbstractEngine } from \"./Engines/abstractEngine\";\r\nimport type { IBehaviorAware, Behavior } from \"./Behaviors/behavior\";\r\nimport { serialize } from \"./Misc/decorators\";\r\nimport type { Observer } from \"./Misc/observable\";\r\nimport { Observable } from \"./Misc/observable\";\r\nimport { EngineStore } from \"./Engines/engineStore\";\r\nimport { _WarnImport } from \"./Misc/devTools\";\r\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\r\nimport type { IInspectable } from \"./Misc/iInspectable\";\r\nimport type { IAccessibilityTag } from \"./IAccessibilityTag\";\r\nimport type { AnimationRange } from \"./Animations/animationRange\";\r\nimport type { AnimationPropertiesOverride } from \"./Animations/animationPropertiesOverride\";\r\nimport type { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport type { Animation } from \"./Animations/animation\";\r\nimport type { Animatable } from \"./Animations/animatable.core\";\r\nimport { SerializationHelper } from \"./Misc/decorators.serialization\";\r\nimport type { IAssetContainer } from \"./IAssetContainer\";\r\n\r\n/**\r\n * Defines how a node can be built from a string name.\r\n */\r\nexport type NodeConstructor = (name: string, scene: Scene, options?: any) => () => Node;\r\n\r\n/** @internal */\r\nclass _InternalNodeDataInfo {\r\n    public _doNotSerialize = false;\r\n    public _isDisposed = false;\r\n    public _sceneRootNodesIndex = -1;\r\n    public _isEnabled = true;\r\n    public _isParentEnabled = true;\r\n    public _isReady = true;\r\n    public _onEnabledStateChangedObservable = new Observable<boolean>();\r\n    public _onClonedObservable = new Observable<Node>();\r\n}\r\n\r\n/**\r\n * Node is the basic class for all scene objects (Mesh, Light, Camera.)\r\n */\r\nexport class Node implements IBehaviorAware<Node> {\r\n    protected _isDirty = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _AnimationRangeFactory = (_name: string, _from: number, _to: number): AnimationRange => {\r\n        throw _WarnImport(\"AnimationRange\");\r\n    };\r\n\r\n    private static _NodeConstructors: { [key: string]: any } = {};\r\n\r\n    /**\r\n     * Add a new node constructor\r\n     * @param type defines the type name of the node to construct\r\n     * @param constructorFunc defines the constructor function\r\n     */\r\n    public static AddNodeConstructor(type: string, constructorFunc: NodeConstructor) {\r\n        this._NodeConstructors[type] = constructorFunc;\r\n    }\r\n\r\n    /**\r\n     * Returns a node constructor based on type name\r\n     * @param type defines the type name\r\n     * @param name defines the new node name\r\n     * @param scene defines the hosting scene\r\n     * @param options defines optional options to transmit to constructors\r\n     * @returns the new constructor or null\r\n     */\r\n    public static Construct(type: string, name: string, scene: Scene, options?: any): Nullable<() => Node> {\r\n        const constructorFunc = this._NodeConstructors[type];\r\n\r\n        if (!constructorFunc) {\r\n            return null;\r\n        }\r\n\r\n        return constructorFunc(name, scene, options);\r\n    }\r\n\r\n    private _nodeDataStorage = new _InternalNodeDataInfo();\r\n\r\n    /**\r\n     * Gets or sets the name of the node\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Gets or sets the id of the node\r\n     */\r\n    @serialize()\r\n    public id: string;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node\r\n     */\r\n    @serialize()\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or sets a string used to store user defined state for the node\r\n     */\r\n    @serialize()\r\n    public state = \"\";\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** @internal */\r\n    public _internalMetadata: any;\r\n\r\n    /**\r\n     * For internal use only. Please do not use.\r\n     */\r\n    public reservedDataStore: any = null;\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    /**\r\n     * Gets or sets the accessibility tag to describe the node for accessibility purpose.\r\n     */\r\n    public set accessibilityTag(value: Nullable<IAccessibilityTag>) {\r\n        this._accessibilityTag = value;\r\n        this.onAccessibilityTagChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    public get accessibilityTag() {\r\n        return this._accessibilityTag;\r\n    }\r\n\r\n    protected _accessibilityTag: Nullable<IAccessibilityTag> = null;\r\n\r\n    /**\r\n     * Observable fired when an accessibility tag is changed\r\n     */\r\n    public onAccessibilityTagChangedObservable = new Observable<Nullable<IAccessibilityTag>>();\r\n\r\n    /**\r\n     * Gets or sets a boolean used to define if the node must be serialized\r\n     */\r\n    public get doNotSerialize() {\r\n        if (this._nodeDataStorage._doNotSerialize) {\r\n            return true;\r\n        }\r\n\r\n        if (this._parentNode) {\r\n            return this._parentNode.doNotSerialize;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public set doNotSerialize(value: boolean) {\r\n        this._nodeDataStorage._doNotSerialize = value;\r\n    }\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<IAssetContainer> = null;\r\n\r\n    /**\r\n     * Gets a list of Animations associated with the node\r\n     */\r\n    public animations: Animation[] = [];\r\n    protected _ranges: { [name: string]: Nullable<AnimationRange> } = {};\r\n\r\n    /**\r\n     * Callback raised when the node is ready to be used\r\n     */\r\n    public onReady: Nullable<(node: Node) => void> = null;\r\n\r\n    /** @internal */\r\n    public _currentRenderId = -1;\r\n    private _parentUpdateId = -1;\r\n    /** @internal */\r\n    public _childUpdateId = -1;\r\n\r\n    /** @internal */\r\n    public _waitingParentId: Nullable<string> = null;\r\n    /** @internal */\r\n    public _waitingParentInstanceIndex: Nullable<string> = null;\r\n    /** @internal */\r\n    public _waitingParsedUniqueId: Nullable<number> = null;\r\n    /** @internal */\r\n    public _scene: Scene;\r\n    /** @internal */\r\n    public _cache: any = {};\r\n\r\n    protected _parentNode: Nullable<Node> = null;\r\n\r\n    /** @internal */\r\n    protected _children: Nullable<Node[]> = null;\r\n\r\n    /** @internal */\r\n    public _worldMatrix = Matrix.Identity();\r\n    /** @internal */\r\n    public _worldMatrixDeterminant = 0;\r\n    /** @internal */\r\n    public _worldMatrixDeterminantIsDirty = true;\r\n\r\n    /**\r\n     * Gets a boolean indicating if the node has been disposed\r\n     * @returns true if the node was disposed\r\n     */\r\n    public isDisposed(): boolean {\r\n        return this._nodeDataStorage._isDisposed;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the parent of the node (without keeping the current position in the scene)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/parent\r\n     */\r\n    public set parent(parent: Nullable<Node>) {\r\n        if (this._parentNode === parent) {\r\n            return;\r\n        }\r\n\r\n        const previousParentNode = this._parentNode;\r\n\r\n        // Remove self from list of children of parent\r\n        if (this._parentNode && this._parentNode._children !== undefined && this._parentNode._children !== null) {\r\n            const index = this._parentNode._children.indexOf(this);\r\n            if (index !== -1) {\r\n                this._parentNode._children.splice(index, 1);\r\n            }\r\n\r\n            if (!parent && !this._nodeDataStorage._isDisposed) {\r\n                this._addToSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        // Store new parent\r\n        this._parentNode = parent;\r\n        this._isDirty = true;\r\n\r\n        // Add as child to new parent\r\n        if (this._parentNode) {\r\n            if (this._parentNode._children === undefined || this._parentNode._children === null) {\r\n                this._parentNode._children = new Array<Node>();\r\n            }\r\n            this._parentNode._children.push(this);\r\n\r\n            if (!previousParentNode) {\r\n                this._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        // Enabled state\r\n        this._syncParentEnabledState();\r\n    }\r\n\r\n    public get parent(): Nullable<Node> {\r\n        return this._parentNode;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _serializeAsParent(serializationObject: any): void {\r\n        serializationObject.parentId = this.uniqueId;\r\n    }\r\n\r\n    /** @internal */\r\n    public _addToSceneRootNodes() {\r\n        if (this._nodeDataStorage._sceneRootNodesIndex === -1) {\r\n            this._nodeDataStorage._sceneRootNodesIndex = this._scene.rootNodes.length;\r\n            this._scene.rootNodes.push(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _removeFromSceneRootNodes() {\r\n        if (this._nodeDataStorage._sceneRootNodesIndex !== -1) {\r\n            const rootNodes = this._scene.rootNodes;\r\n            const lastIdx = rootNodes.length - 1;\r\n            rootNodes[this._nodeDataStorage._sceneRootNodesIndex] = rootNodes[lastIdx];\r\n            rootNodes[this._nodeDataStorage._sceneRootNodesIndex]._nodeDataStorage._sceneRootNodesIndex = this._nodeDataStorage._sceneRootNodesIndex;\r\n            this._scene.rootNodes.pop();\r\n            this._nodeDataStorage._sceneRootNodesIndex = -1;\r\n        }\r\n    }\r\n\r\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\r\n\r\n    /**\r\n     * Gets or sets the animation properties override\r\n     */\r\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        if (!this._animationPropertiesOverride) {\r\n            return this._scene.animationPropertiesOverride;\r\n        }\r\n        return this._animationPropertiesOverride;\r\n    }\r\n\r\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\r\n        this._animationPropertiesOverride = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"Node\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"Node\";\r\n    }\r\n\r\n    /** @internal */\r\n    public readonly _isNode = true;\r\n\r\n    /**\r\n     * An event triggered when the mesh is disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Node>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<Node>> = null;\r\n    /**\r\n     * Sets a callback that will be raised when the node will be disposed\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the enabled state of the node changes\r\n     */\r\n    public get onEnabledStateChangedObservable(): Observable<boolean> {\r\n        return this._nodeDataStorage._onEnabledStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the node is cloned\r\n     */\r\n    public get onClonedObservable(): Observable<Node> {\r\n        return this._nodeDataStorage._onClonedObservable;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Node\r\n     * @param name the name and id to be given to this node\r\n     * @param scene the scene this node will be added to\r\n     * @param isPure indicates this Node is just a Node, and not a derived class like Mesh or Camera\r\n     */\r\n    public constructor(name: string, scene: Nullable<Scene> = null, isPure = true) {\r\n        this.name = name;\r\n        this.id = name;\r\n        this._scene = <Scene>(scene || EngineStore.LastCreatedScene);\r\n        this.uniqueId = this._scene.getUniqueId();\r\n        this._initCache();\r\n\r\n        if (isPure) {\r\n            this._addToSceneRootNodes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the scene of the node\r\n     * @returns a scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets the engine of the node\r\n     * @returns a Engine\r\n     */\r\n    public getEngine(): AbstractEngine {\r\n        return this._scene.getEngine();\r\n    }\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Node>>();\r\n\r\n    /**\r\n     * Attach a behavior to the node\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @param attachImmediately defines that the behavior must be attached even if the scene is still loading\r\n     * @returns the current Node\r\n     */\r\n    public addBehavior(behavior: Behavior<Node>, attachImmediately = false): Node {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        if (this._scene.isLoading && !attachImmediately) {\r\n            // We defer the attach when the scene will be loaded\r\n            this._scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current Node\r\n     */\r\n    public removeBehavior(behavior: Behavior<Node>): Node {\r\n        const index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     */\r\n    public get behaviors(): Behavior<Node>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/behaviors\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Node>> {\r\n        for (const behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the latest update of the World matrix\r\n     * @returns a Matrix\r\n     */\r\n    public getWorldMatrix(): Matrix {\r\n        if (this._currentRenderId !== this._scene.getRenderId()) {\r\n            this.computeWorldMatrix();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getWorldMatrixDeterminant(): number {\r\n        if (this._worldMatrixDeterminantIsDirty) {\r\n            this._worldMatrixDeterminantIsDirty = false;\r\n            this._worldMatrixDeterminant = this._worldMatrix.determinant();\r\n        }\r\n        return this._worldMatrixDeterminant;\r\n    }\r\n\r\n    /**\r\n     * Returns directly the latest state of the mesh World matrix.\r\n     * A Matrix is returned.\r\n     */\r\n    public get worldMatrixFromCache(): Matrix {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    // and call the parent class method\r\n    /** @internal */\r\n    public _initCache() {\r\n        this._cache = {};\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public updateCache(force?: boolean): void {\r\n        if (!force && this.isSynchronized()) {\r\n            return;\r\n        }\r\n\r\n        this._updateCache();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getActionManagerForTrigger(trigger?: number, _initialCall = true): Nullable<AbstractActionManager> {\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        return this.parent._getActionManagerForTrigger(trigger, false);\r\n    }\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    // and call the parent class method if !ignoreParentClass\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateCache(_ignoreParentClass?: boolean): void {}\r\n\r\n    // override it in derived class if you add new variables to the cache\r\n    /** @internal */\r\n    public _isSynchronized(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSyncedWithParent() {\r\n        if (this._parentNode) {\r\n            this._parentUpdateId = this._parentNode._childUpdateId;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public isSynchronizedWithParent(): boolean {\r\n        if (!this._parentNode) {\r\n            return true;\r\n        }\r\n\r\n        if (this._parentNode._isDirty || this._parentUpdateId !== this._parentNode._childUpdateId) {\r\n            return false;\r\n        }\r\n\r\n        return this._parentNode.isSynchronized();\r\n    }\r\n\r\n    /** @internal */\r\n    public isSynchronized(): boolean {\r\n        if (this._parentNode && !this.isSynchronizedWithParent()) {\r\n            return false;\r\n        }\r\n\r\n        return this._isSynchronized();\r\n    }\r\n\r\n    /**\r\n     * Is this node ready to be used/rendered\r\n     * @param _completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\r\n     * @returns true if the node is ready\r\n     */\r\n    public isReady(_completeCheck = false): boolean {\r\n        return this._nodeDataStorage._isReady;\r\n    }\r\n\r\n    /**\r\n     * Flag the  node as dirty (Forcing it to update everything)\r\n     * @param _property helps children apply precise \"dirtyfication\"\r\n     * @returns this node\r\n     */\r\n    public markAsDirty(_property?: string): Node {\r\n        this._currentRenderId = Number.MAX_VALUE;\r\n        this._isDirty = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Is this node enabled?\r\n     * If the node has a parent, all ancestors will be checked and false will be returned if any are false (not enabled), otherwise will return true\r\n     * @param checkAncestors indicates if this method should check the ancestors. The default is to check the ancestors. If set to false, the method will return the value of this node without checking ancestors\r\n     * @returns whether this node (and its parent) is enabled\r\n     */\r\n    public isEnabled(checkAncestors: boolean = true): boolean {\r\n        if (checkAncestors === false) {\r\n            return this._nodeDataStorage._isEnabled;\r\n        }\r\n\r\n        if (!this._nodeDataStorage._isEnabled) {\r\n            return false;\r\n        }\r\n\r\n        return this._nodeDataStorage._isParentEnabled;\r\n    }\r\n\r\n    /** @internal */\r\n    protected _syncParentEnabledState() {\r\n        this._nodeDataStorage._isParentEnabled = this._parentNode ? this._parentNode.isEnabled() : true;\r\n\r\n        if (this._children) {\r\n            this._children.forEach((c) => {\r\n                c._syncParentEnabledState(); // Force children to update accordingly\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the enabled state of this node\r\n     * @param value defines the new enabled state\r\n     */\r\n    public setEnabled(value: boolean): void {\r\n        if (this._nodeDataStorage._isEnabled === value) {\r\n            return;\r\n        }\r\n        this._nodeDataStorage._isEnabled = value;\r\n        this._syncParentEnabledState();\r\n        this._nodeDataStorage._onEnabledStateChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Is this node a descendant of the given node?\r\n     * The function will iterate up the hierarchy until the ancestor was found or no more parents defined\r\n     * @param ancestor defines the parent node to inspect\r\n     * @returns a boolean indicating if this node is a descendant of the given node\r\n     */\r\n    public isDescendantOf(ancestor: Node): boolean {\r\n        if (this.parent) {\r\n            if (this.parent === ancestor) {\r\n                return true;\r\n            }\r\n\r\n            return this.parent.isDescendantOf(ancestor);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getDescendants(results: Node[], directDescendantsOnly: boolean = false, predicate?: (node: Node) => boolean): void {\r\n        if (!this._children) {\r\n            return;\r\n        }\r\n\r\n        for (let index = 0; index < this._children.length; index++) {\r\n            const item = this._children[index];\r\n\r\n            if (!predicate || predicate(item)) {\r\n                results.push(item);\r\n            }\r\n\r\n            if (!directDescendantsOnly) {\r\n                item._getDescendants(results, false, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants<T extends Node>(directDescendantsOnly?: boolean, predicate?: (node: Node) => node is T): T[];\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): Node[];\r\n\r\n    /**\r\n     * Will return all nodes that have this node as ascendant\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns all children nodes of all types\r\n     */\r\n    public getDescendants(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): Node[] {\r\n        const results: Node[] = [];\r\n\r\n        this._getDescendants(results, directDescendantsOnly, predicate);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes<T extends AbstractMesh>(directDescendantsOnly?: boolean, predicate?: (node: Node) => node is T): T[];\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): AbstractMesh[];\r\n\r\n    /**\r\n     * Get all child-meshes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: false)\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getChildMeshes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): AbstractMesh[] {\r\n        const results: Array<AbstractMesh> = [];\r\n        this._getDescendants(results, directDescendantsOnly, (node: Node) => {\r\n            return (!predicate || predicate(node)) && (<AbstractMesh>node).cullingStrategy !== undefined;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren<T extends Node>(predicate?: (node: Node) => node is T, directDescendantsOnly?: boolean): T[];\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren(predicate?: (node: Node) => boolean, directDescendantsOnly?: boolean): Node[];\r\n\r\n    /**\r\n     * Get all direct children of this node\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered (Default: true)\r\n     * @returns an array of Node\r\n     */\r\n    public getChildren(predicate?: (node: Node) => boolean, directDescendantsOnly = true): Node[] {\r\n        return this.getDescendants(directDescendantsOnly, predicate);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setReady(state: boolean): void {\r\n        if (state === this._nodeDataStorage._isReady) {\r\n            return;\r\n        }\r\n\r\n        if (!state) {\r\n            this._nodeDataStorage._isReady = false;\r\n            return;\r\n        }\r\n\r\n        if (this.onReady) {\r\n            this.onReady(this);\r\n        }\r\n        this._nodeDataStorage._isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Get an animation by name\r\n     * @param name defines the name of the animation to look for\r\n     * @returns null if not found else the requested animation\r\n     */\r\n    public getAnimationByName(name: string): Nullable<Animation> {\r\n        for (let i = 0; i < this.animations.length; i++) {\r\n            const animation = this.animations[i];\r\n\r\n            if (animation.name === name) {\r\n                return animation;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Creates an animation range for this node\r\n     * @param name defines the name of the range\r\n     * @param from defines the starting key\r\n     * @param to defines the end key\r\n     */\r\n    public createAnimationRange(name: string, from: number, to: number): void {\r\n        // check name not already in use\r\n        if (!this._ranges[name]) {\r\n            this._ranges[name] = Node._AnimationRangeFactory(name, from, to);\r\n            for (let i = 0, nAnimations = this.animations.length; i < nAnimations; i++) {\r\n                if (this.animations[i]) {\r\n                    this.animations[i].createRange(name, from, to);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a specific animation range\r\n     * @param name defines the name of the range to delete\r\n     * @param deleteFrames defines if animation frames from the range must be deleted as well\r\n     */\r\n    public deleteAnimationRange(name: string, deleteFrames = true): void {\r\n        for (let i = 0, nAnimations = this.animations.length; i < nAnimations; i++) {\r\n            if (this.animations[i]) {\r\n                this.animations[i].deleteRange(name, deleteFrames);\r\n            }\r\n        }\r\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\r\n    }\r\n\r\n    /**\r\n     * Get an animation range by name\r\n     * @param name defines the name of the animation range to look for\r\n     * @returns null if not found else the requested animation range\r\n     */\r\n    public getAnimationRange(name: string): Nullable<AnimationRange> {\r\n        return this._ranges[name] || null;\r\n    }\r\n\r\n    /**\r\n     * Clone the current node\r\n     * @param name Name of the new clone\r\n     * @param newParent New parent for the clone\r\n     * @param doNotCloneChildren Do not clone children hierarchy\r\n     * @returns the new transform node\r\n     */\r\n    public clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<Node> {\r\n        const result = SerializationHelper.Clone(() => new Node(name, this.getScene()), this);\r\n\r\n        if (newParent) {\r\n            result.parent = newParent;\r\n        }\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            const directDescendants = this.getDescendants(true);\r\n            for (let index = 0; index < directDescendants.length; index++) {\r\n                const child = directDescendants[index];\r\n\r\n                child.clone(name + \".\" + child.name, result);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of all animation ranges defined on this node\r\n     * @returns an array\r\n     */\r\n    public getAnimationRanges(): Nullable<AnimationRange>[] {\r\n        const animationRanges: Nullable<AnimationRange>[] = [];\r\n        let name: string;\r\n        for (name in this._ranges) {\r\n            animationRanges.push(this._ranges[name]);\r\n        }\r\n        return animationRanges;\r\n    }\r\n\r\n    /**\r\n     * Will start the animation sequence\r\n     * @param name defines the range frames for animation sequence\r\n     * @param loop defines if the animation should loop (false by default)\r\n     * @param speedRatio defines the speed factor in which to run the animation (1 by default)\r\n     * @param onAnimationEnd defines a function to be executed when the animation ended (undefined by default)\r\n     * @returns the object created for this animation. If range does not exist, it will return null\r\n     */\r\n    public beginAnimation(name: string, loop?: boolean, speedRatio?: number, onAnimationEnd?: () => void): Nullable<Animatable> {\r\n        const range = this.getAnimationRange(name);\r\n\r\n        if (!range) {\r\n            return null;\r\n        }\r\n\r\n        return this._scene.beginAnimation(this, range.from, range.to, loop, speedRatio, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Serialize animation ranges into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public serializeAnimationRanges(): any {\r\n        const serializationRanges = [];\r\n        for (const name in this._ranges) {\r\n            const localRange = this._ranges[name];\r\n            if (!localRange) {\r\n                continue;\r\n            }\r\n            const range: any = {};\r\n            range.name = name;\r\n            range.from = localRange.from;\r\n            range.to = localRange.to;\r\n            serializationRanges.push(range);\r\n        }\r\n        return serializationRanges;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param _force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(_force?: boolean): Matrix {\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        this._nodeDataStorage._isDisposed = true;\r\n\r\n        if (!doNotRecurse) {\r\n            const nodes = this.getDescendants(true);\r\n            for (const node of nodes) {\r\n                node.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n            }\r\n        }\r\n\r\n        if (!this.parent) {\r\n            this._removeFromSceneRootNodes();\r\n        } else {\r\n            this.parent = null;\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n\r\n        this.onEnabledStateChangedObservable.clear();\r\n        this.onClonedObservable.clear();\r\n\r\n        // Behaviors\r\n        for (const behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n\r\n        this._behaviors.length = 0;\r\n\r\n        this.metadata = null;\r\n    }\r\n\r\n    /**\r\n     * Parse animation range data from a serialization object and store them into a given node\r\n     * @param node defines where to store the animation ranges\r\n     * @param parsedNode defines the serialization object to read data from\r\n     * @param _scene defines the hosting scene\r\n     */\r\n    public static ParseAnimationRanges(node: Node, parsedNode: any, _scene: Scene): void {\r\n        if (parsedNode.ranges) {\r\n            for (let index = 0; index < parsedNode.ranges.length; index++) {\r\n                const data = parsedNode.ranges[index];\r\n                node.createAnimationRange(data.name, data.from, data.to);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Return the minimum and maximum world vectors of the entire hierarchy under current node\r\n     * @param includeDescendants Include bounding info from descendants as well (true by default)\r\n     * @param predicate defines a callback function that can be customize to filter what meshes should be included in the list used to compute the bounding vectors\r\n     * @returns the new bounding vectors\r\n     */\r\n    public getHierarchyBoundingVectors(includeDescendants = true, predicate: Nullable<(abstractMesh: AbstractMesh) => boolean> = null): { min: Vector3; max: Vector3 } {\r\n        // Ensures that all world matrix will be recomputed.\r\n        this.getScene().incrementRenderId();\r\n\r\n        this.computeWorldMatrix(true);\r\n\r\n        let min: Vector3;\r\n        let max: Vector3;\r\n\r\n        const thisAbstractMesh = this as Node as AbstractMesh;\r\n        if (thisAbstractMesh.getBoundingInfo && thisAbstractMesh.subMeshes) {\r\n            // If this is an abstract mesh get its bounding info\r\n            const boundingInfo = thisAbstractMesh.getBoundingInfo();\r\n            min = boundingInfo.boundingBox.minimumWorld.clone();\r\n            max = boundingInfo.boundingBox.maximumWorld.clone();\r\n        } else {\r\n            min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n            max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            const descendants = this.getDescendants(false);\r\n\r\n            for (const descendant of descendants) {\r\n                const childMesh = <AbstractMesh>descendant;\r\n                childMesh.computeWorldMatrix(true);\r\n\r\n                // Filters meshes based on custom predicate function.\r\n                if (predicate && !predicate(childMesh)) {\r\n                    continue;\r\n                }\r\n\r\n                //make sure we have the needed params to get mix and max\r\n                if (!childMesh.getBoundingInfo || childMesh.getTotalVertices() === 0) {\r\n                    continue;\r\n                }\r\n\r\n                const childBoundingInfo = childMesh.getBoundingInfo();\r\n                const boundingBox = childBoundingInfo.boundingBox;\r\n\r\n                const minBox = boundingBox.minimumWorld;\r\n                const maxBox = boundingBox.maximumWorld;\r\n\r\n                Vector3.CheckExtends(minBox, min, max);\r\n                Vector3.CheckExtends(maxBox, min, max);\r\n            }\r\n        }\r\n\r\n        return {\r\n            min: min,\r\n            max: max,\r\n        };\r\n    }\r\n}\r\n", "import type { DeepImmutable, Nullable } from \"../types\";\r\nimport { serialize, serializeAsVector3, serializeAsQuaternion } from \"../Misc/decorators\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { Observable } from \"../Misc/observable\";\r\n\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { Bone } from \"../Bones/bone\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Space } from \"../Maths/math.axis\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\n\r\nconst convertRHSToLHS = Matrix.Compose(Vector3.One(), Quaternion.FromEulerAngles(0, Math.PI, 0), Vector3.Zero());\r\n\r\n/**\r\n * A TransformNode is an object that is not rendered but can be used as a center of transformation. This can decrease memory usage and increase rendering speed compared to using an empty mesh as a parent and is less complicated than using a pivot matrix.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node\r\n */\r\nexport class TransformNode extends Node {\r\n    // Statics\r\n    /**\r\n     * Object will not rotate to face the camera\r\n     */\r\n    public static BILLBOARDMODE_NONE = 0;\r\n    /**\r\n     * Object will rotate to face the camera but only on the x axis\r\n     */\r\n    public static BILLBOARDMODE_X = 1;\r\n    /**\r\n     * Object will rotate to face the camera but only on the y axis\r\n     */\r\n    public static BILLBOARDMODE_Y = 2;\r\n    /**\r\n     * Object will rotate to face the camera but only on the z axis\r\n     */\r\n    public static BILLBOARDMODE_Z = 4;\r\n    /**\r\n     * Object will rotate to face the camera\r\n     */\r\n    public static BILLBOARDMODE_ALL = 7;\r\n    /**\r\n     * Object will rotate to face the camera's position instead of orientation\r\n     */\r\n    public static BILLBOARDMODE_USE_POSITION = 128;\r\n    /**\r\n     * Child transform with Billboard flags should or should not apply parent rotation (default if off)\r\n     */\r\n    public static BillboardUseParentOrientation: boolean = false;\r\n\r\n    private static _TmpRotation = Quaternion.Zero();\r\n    private static _TmpScaling = Vector3.Zero();\r\n    private static _TmpTranslation = Vector3.Zero();\r\n\r\n    private _forward = new Vector3(0, 0, 1);\r\n    private _up = new Vector3(0, 1, 0);\r\n    private _right = new Vector3(1, 0, 0);\r\n\r\n    // Properties\r\n    @serializeAsVector3(\"position\")\r\n    private _position = Vector3.Zero();\r\n\r\n    @serializeAsVector3(\"rotation\")\r\n    private _rotation = Vector3.Zero();\r\n\r\n    @serializeAsQuaternion(\"rotationQuaternion\")\r\n    private _rotationQuaternion: Nullable<Quaternion> = null;\r\n\r\n    @serializeAsVector3(\"scaling\")\r\n    protected _scaling = Vector3.One();\r\n    private _transformToBoneReferal: Nullable<TransformNode> = null;\r\n    private _currentParentWhenAttachingToBone: Nullable<Node>;\r\n    private _isAbsoluteSynced = false;\r\n\r\n    @serialize(\"billboardMode\")\r\n    private _billboardMode = TransformNode.BILLBOARDMODE_NONE;\r\n\r\n    /**\r\n     * Gets or sets the billboard mode. Default is 0.\r\n     *\r\n     * | Value | Type | Description |\r\n     * | --- | --- | --- |\r\n     * | 0 | BILLBOARDMODE_NONE |  |\r\n     * | 1 | BILLBOARDMODE_X |  |\r\n     * | 2 | BILLBOARDMODE_Y |  |\r\n     * | 4 | BILLBOARDMODE_Z |  |\r\n     * | 7 | BILLBOARDMODE_ALL |  |\r\n     *\r\n     */\r\n    public get billboardMode() {\r\n        return this._billboardMode;\r\n    }\r\n\r\n    public set billboardMode(value: number) {\r\n        if (this._billboardMode === value) {\r\n            return;\r\n        }\r\n        this._billboardMode = value;\r\n        this._cache.useBillboardPosition = (this._billboardMode & TransformNode.BILLBOARDMODE_USE_POSITION) !== 0;\r\n        this._computeUseBillboardPath();\r\n    }\r\n\r\n    private _preserveParentRotationForBillboard = false;\r\n    /**\r\n     * Gets or sets a boolean indicating that parent rotation should be preserved when using billboards.\r\n     * This could be useful for glTF objects where parent rotation helps converting from right handed to left handed\r\n     */\r\n    public get preserveParentRotationForBillboard() {\r\n        return this._preserveParentRotationForBillboard;\r\n    }\r\n\r\n    public set preserveParentRotationForBillboard(value: boolean) {\r\n        if (value === this._preserveParentRotationForBillboard) {\r\n            return;\r\n        }\r\n        this._preserveParentRotationForBillboard = value;\r\n        this._computeUseBillboardPath();\r\n    }\r\n\r\n    private _computeUseBillboardPath(): void {\r\n        this._cache.useBillboardPath = this._billboardMode !== TransformNode.BILLBOARDMODE_NONE && !this.preserveParentRotationForBillboard;\r\n    }\r\n\r\n    /**\r\n     * Multiplication factor on scale x/y/z when computing the world matrix. Eg. for a 1x1x1 cube setting this to 2 will make it a 2x2x2 cube\r\n     */\r\n    @serialize()\r\n    public scalingDeterminant = 1;\r\n\r\n    @serialize(\"infiniteDistance\")\r\n    private _infiniteDistance = false;\r\n\r\n    /**\r\n     * Gets or sets the distance of the object to max, often used by skybox\r\n     */\r\n    public get infiniteDistance() {\r\n        return this._infiniteDistance;\r\n    }\r\n\r\n    public set infiniteDistance(value: boolean) {\r\n        if (this._infiniteDistance === value) {\r\n            return;\r\n        }\r\n\r\n        this._infiniteDistance = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that non uniform scaling (when at least one component is different from others) should be ignored.\r\n     * By default the system will update normals to compensate\r\n     */\r\n    @serialize()\r\n    public ignoreNonUniformScaling = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that even if rotationQuaternion is defined, you can keep updating rotation property and Babylon.js will just mix both\r\n     */\r\n    @serialize()\r\n    public reIntegrateRotationIntoRotationQuaternion = false;\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _poseMatrix: Nullable<Matrix> = null;\r\n    /** @internal */\r\n    public _localMatrix = Matrix.Zero();\r\n\r\n    private _usePivotMatrix = false;\r\n    private _absolutePosition = Vector3.Zero();\r\n    private _absoluteScaling = Vector3.Zero();\r\n    private _absoluteRotationQuaternion = Quaternion.Identity();\r\n    private _pivotMatrix = Matrix.Identity();\r\n    private _pivotMatrixInverse: Matrix;\r\n    /** @internal */\r\n    public _postMultiplyPivotMatrix = false;\r\n\r\n    protected _isWorldMatrixFrozen = false;\r\n\r\n    /** @internal */\r\n    public _indexInSceneTransformNodesArray = -1;\r\n\r\n    /**\r\n     * An event triggered after the world matrix is updated\r\n     */\r\n    public onAfterWorldMatrixUpdateObservable = new Observable<TransformNode>();\r\n\r\n    constructor(name: string, scene: Nullable<Scene> = null, isPure = true) {\r\n        super(name, scene, false);\r\n\r\n        if (isPure) {\r\n            this.getScene().addTransformNode(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"TransformNode\" string\r\n     */\r\n    public override getClassName(): string {\r\n        return \"TransformNode\";\r\n    }\r\n\r\n    /**\r\n     * Gets or set the node position (default is (0.0, 0.0, 0.0))\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(newPosition: Vector3) {\r\n        this._position = newPosition;\r\n        this._markAsDirtyInternal();\r\n    }\r\n\r\n    /**\r\n     * return true if a pivot has been set\r\n     * @returns true if a pivot matrix is used\r\n     */\r\n    public isUsingPivotMatrix(): boolean {\r\n        return this._usePivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * @returns true if pivot matrix must be cancelled in the world matrix. When this parameter is set to true (default), the inverse of the pivot matrix is also applied at the end to cancel the transformation effect.\r\n     */\r\n    public isUsingPostMultiplyPivotMatrix(): boolean {\r\n        return this._postMultiplyPivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the rotation property : a Vector3 defining the rotation value in radians around each local axis X, Y, Z  (default is (0.0, 0.0, 0.0)).\r\n     * If rotation quaternion is set, this Vector3 will be ignored and copy from the quaternion\r\n     */\r\n    public get rotation(): Vector3 {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(newRotation: Vector3) {\r\n        this._rotation = newRotation;\r\n        this._rotationQuaternion = null;\r\n        this._markAsDirtyInternal();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the scaling property : a Vector3 defining the node scaling along each local axis X, Y, Z (default is (1.0, 1.0, 1.0)).\r\n     */\r\n    public get scaling(): Vector3 {\r\n        return this._scaling;\r\n    }\r\n\r\n    public set scaling(newScaling: Vector3) {\r\n        this._scaling = newScaling;\r\n        this._markAsDirtyInternal();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the rotation Quaternion property : this a Quaternion object defining the node rotation by using a unit quaternion (undefined by default, but can be null).\r\n     * If set, only the rotationQuaternion is then used to compute the node rotation (ie. node.rotation will be ignored)\r\n     */\r\n    public get rotationQuaternion(): Nullable<Quaternion> {\r\n        return this._rotationQuaternion;\r\n    }\r\n\r\n    public set rotationQuaternion(quaternion: Nullable<Quaternion>) {\r\n        this._rotationQuaternion = quaternion;\r\n        //reset the rotation vector.\r\n        if (quaternion) {\r\n            this._rotation.setAll(0.0);\r\n        }\r\n        this._markAsDirtyInternal();\r\n    }\r\n\r\n    /**\r\n     * Allow user to specify custom mechanism for mark as dirty\r\n     */\r\n    public customMarkAsDirty: () => void;\r\n\r\n    private _markAsDirtyInternal(): void {\r\n        if (this._isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = true;\r\n\r\n        if (this.customMarkAsDirty) {\r\n            this.customMarkAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The forward direction of that transform in world space.\r\n     */\r\n    public get forward(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(0, 0, this.getScene().useRightHandedSystem ? -1.0 : 1.0, this.getWorldMatrix(), this._forward);\r\n        return this._forward.normalize();\r\n    }\r\n\r\n    /**\r\n     * The up direction of that transform in world space.\r\n     */\r\n    public get up(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(0, 1, 0, this.getWorldMatrix(), this._up);\r\n        return this._up.normalize();\r\n    }\r\n\r\n    /**\r\n     * The right direction of that transform in world space.\r\n     */\r\n    public get right(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(this.getScene().useRightHandedSystem ? -1.0 : 1.0, 0, 0, this.getWorldMatrix(), this._right);\r\n        return this._right.normalize();\r\n    }\r\n\r\n    /**\r\n     * Copies the parameter passed Matrix into the mesh Pose matrix.\r\n     * @param matrix the matrix to copy the pose from\r\n     * @returns this TransformNode.\r\n     */\r\n    public updatePoseMatrix(matrix: Matrix): TransformNode {\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = matrix.clone();\r\n            return this;\r\n        }\r\n        this._poseMatrix.copyFrom(matrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh Pose matrix.\r\n     * @returns the pose matrix\r\n     */\r\n    public getPoseMatrix(): Matrix {\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = Matrix.Identity();\r\n        }\r\n        return this._poseMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _isSynchronized(): boolean {\r\n        const cache = this._cache;\r\n\r\n        if (this._billboardMode !== cache.billboardMode || this._billboardMode !== TransformNode.BILLBOARDMODE_NONE) {\r\n            return false;\r\n        }\r\n\r\n        if (cache.pivotMatrixUpdated) {\r\n            return false;\r\n        }\r\n\r\n        if (this._infiniteDistance) {\r\n            return false;\r\n        }\r\n\r\n        if (this._position._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        if (this._scaling._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        if ((this._rotationQuaternion && this._rotationQuaternion._isDirty) || this._rotation._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _initCache() {\r\n        super._initCache();\r\n\r\n        const cache = this._cache;\r\n        cache.localMatrixUpdated = false;\r\n        cache.billboardMode = -1;\r\n        cache.infiniteDistance = false;\r\n        cache.useBillboardPosition = false;\r\n        cache.useBillboardPath = false;\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute position.\r\n     * Returns a Vector3.\r\n     */\r\n    public get absolutePosition(): Vector3 {\r\n        return this.getAbsolutePosition();\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute scaling.\r\n     * Returns a Vector3.\r\n     */\r\n    public get absoluteScaling(): Vector3 {\r\n        this._syncAbsoluteScalingAndRotation();\r\n        return this._absoluteScaling;\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute rotation.\r\n     * Returns a Quaternion.\r\n     */\r\n    public get absoluteRotationQuaternion(): Quaternion {\r\n        this._syncAbsoluteScalingAndRotation();\r\n        return this._absoluteRotationQuaternion;\r\n    }\r\n\r\n    /**\r\n     * Sets a new matrix to apply before all other transformation\r\n     * @param matrix defines the transform matrix\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPreTransformMatrix(matrix: Matrix): TransformNode {\r\n        return this.setPivotMatrix(matrix, false);\r\n    }\r\n\r\n    /**\r\n     * Sets a new pivot matrix to the current node\r\n     * @param matrix defines the new pivot matrix to use\r\n     * @param postMultiplyPivotMatrix defines if the pivot matrix must be cancelled in the world matrix. When this parameter is set to true (default), the inverse of the pivot matrix is also applied at the end to cancel the transformation effect\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPivotMatrix(matrix: DeepImmutable<Matrix>, postMultiplyPivotMatrix = true): TransformNode {\r\n        this._pivotMatrix.copyFrom(matrix);\r\n        this._usePivotMatrix = !this._pivotMatrix.isIdentity();\r\n\r\n        this._cache.pivotMatrixUpdated = true;\r\n        this._postMultiplyPivotMatrix = postMultiplyPivotMatrix;\r\n\r\n        if (this._postMultiplyPivotMatrix) {\r\n            if (!this._pivotMatrixInverse) {\r\n                this._pivotMatrixInverse = Matrix.Invert(this._pivotMatrix);\r\n            } else {\r\n                this._pivotMatrix.invertToRef(this._pivotMatrixInverse);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh pivot matrix.\r\n     * Default : Identity.\r\n     * @returns the matrix\r\n     */\r\n    public getPivotMatrix(): Matrix {\r\n        return this._pivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * Instantiate (when possible) or clone that node with its hierarchy\r\n     * @param newParent defines the new parent to use for the instance (or clone)\r\n     * @param options defines options to configure how copy is done\r\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\r\n     * @param onNewNodeCreated defines an option callback to call when a clone or an instance is created\r\n     * @returns an instance (or a clone) of the current node with its hierarchy\r\n     */\r\n    public instantiateHierarchy(\r\n        newParent: Nullable<TransformNode> = null,\r\n        options?: { doNotInstantiate: boolean | ((node: TransformNode) => boolean) },\r\n        onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void\r\n    ): Nullable<TransformNode> {\r\n        const clone = this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true);\r\n\r\n        if (clone) {\r\n            if (onNewNodeCreated) {\r\n                onNewNodeCreated(this, clone);\r\n            }\r\n        }\r\n\r\n        for (const child of this.getChildTransformNodes(true)) {\r\n            child.instantiateHierarchy(clone, options, onNewNodeCreated);\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Prevents the World matrix to be computed any longer\r\n     * @param newWorldMatrix defines an optional matrix to use as world matrix\r\n     * @param decompose defines whether to decompose the given newWorldMatrix or directly assign\r\n     * @returns the TransformNode.\r\n     */\r\n    public freezeWorldMatrix(newWorldMatrix: Nullable<Matrix> = null, decompose = false): TransformNode {\r\n        if (newWorldMatrix) {\r\n            if (decompose) {\r\n                this._rotation.setAll(0);\r\n                this._rotationQuaternion = this._rotationQuaternion || Quaternion.Identity();\r\n                newWorldMatrix.decompose(this._scaling, this._rotationQuaternion, this._position);\r\n                this.computeWorldMatrix(true);\r\n            } else {\r\n                this._worldMatrix = newWorldMatrix;\r\n                this._absolutePosition.copyFromFloats(this._worldMatrix.m[12], this._worldMatrix.m[13], this._worldMatrix.m[14]);\r\n                this._afterComputeWorldMatrix();\r\n            }\r\n        } else {\r\n            this._isWorldMatrixFrozen = false; // no guarantee world is not already frozen, switch off temporarily\r\n            this.computeWorldMatrix(true);\r\n        }\r\n        this._isDirty = false;\r\n        this._isWorldMatrixFrozen = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Allows back the World matrix computation.\r\n     * @returns the TransformNode.\r\n     */\r\n    public unfreezeWorldMatrix() {\r\n        this._isWorldMatrixFrozen = false;\r\n        this.computeWorldMatrix(true);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * True if the World matrix has been frozen.\r\n     */\r\n    public get isWorldMatrixFrozen(): boolean {\r\n        return this._isWorldMatrixFrozen;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh absolute position in the World.\r\n     * @returns a Vector3.\r\n     */\r\n    public getAbsolutePosition(): Vector3 {\r\n        this.computeWorldMatrix();\r\n        return this._absolutePosition;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh absolute position in the World from a Vector3 or an Array(3).\r\n     * @param absolutePosition the absolute position to set\r\n     * @returns the TransformNode.\r\n     */\r\n    public setAbsolutePosition(absolutePosition: Vector3): TransformNode {\r\n        if (!absolutePosition) {\r\n            return this;\r\n        }\r\n        let absolutePositionX;\r\n        let absolutePositionY;\r\n        let absolutePositionZ;\r\n        if (absolutePosition.x === undefined) {\r\n            if (arguments.length < 3) {\r\n                return this;\r\n            }\r\n            absolutePositionX = arguments[0];\r\n            absolutePositionY = arguments[1];\r\n            absolutePositionZ = arguments[2];\r\n        } else {\r\n            absolutePositionX = absolutePosition.x;\r\n            absolutePositionY = absolutePosition.y;\r\n            absolutePositionZ = absolutePosition.z;\r\n        }\r\n        if (this.parent) {\r\n            const invertParentWorldMatrix = TmpVectors.Matrix[0];\r\n            this.parent.getWorldMatrix().invertToRef(invertParentWorldMatrix);\r\n            Vector3.TransformCoordinatesFromFloatsToRef(absolutePositionX, absolutePositionY, absolutePositionZ, invertParentWorldMatrix, this.position);\r\n        } else {\r\n            this.position.x = absolutePositionX;\r\n            this.position.y = absolutePositionY;\r\n            this.position.z = absolutePositionZ;\r\n        }\r\n\r\n        this._absolutePosition.copyFrom(absolutePosition);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh position in its local space.\r\n     * @param vector3 the position to set in localspace\r\n     * @returns the TransformNode.\r\n     */\r\n    public setPositionWithLocalVector(vector3: Vector3): TransformNode {\r\n        this.computeWorldMatrix();\r\n        this.position = Vector3.TransformNormal(vector3, this._localMatrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh position in the local space from the current World matrix values.\r\n     * @returns a new Vector3.\r\n     */\r\n    public getPositionExpressedInLocalSpace(): Vector3 {\r\n        this.computeWorldMatrix();\r\n        const invLocalWorldMatrix = TmpVectors.Matrix[0];\r\n        this._localMatrix.invertToRef(invLocalWorldMatrix);\r\n        return Vector3.TransformNormal(this.position, invLocalWorldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Translates the mesh along the passed Vector3 in its local space.\r\n     * @param vector3 the distance to translate in localspace\r\n     * @returns the TransformNode.\r\n     */\r\n    public locallyTranslate(vector3: Vector3): TransformNode {\r\n        this.computeWorldMatrix(true);\r\n        this.position = Vector3.TransformCoordinates(vector3, this._localMatrix);\r\n        return this;\r\n    }\r\n\r\n    private static _LookAtVectorCache = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Orients a mesh towards a target point. Mesh must be drawn facing user.\r\n     * @param targetPoint the position (must be in same space as current mesh) to look at\r\n     * @param yawCor optional yaw (y-axis) correction in radians\r\n     * @param pitchCor optional pitch (x-axis) correction in radians\r\n     * @param rollCor optional roll (z-axis) correction in radians\r\n     * @param space the chosen space of the target\r\n     * @returns the TransformNode.\r\n     */\r\n    public lookAt(targetPoint: Vector3, yawCor: number = 0, pitchCor: number = 0, rollCor: number = 0, space: Space = Space.LOCAL): TransformNode {\r\n        const dv = TransformNode._LookAtVectorCache;\r\n        const pos = space === Space.LOCAL ? this.position : this.getAbsolutePosition();\r\n        targetPoint.subtractToRef(pos, dv);\r\n        this.setDirection(dv, yawCor, pitchCor, rollCor);\r\n\r\n        // Correct for parent's rotation offset\r\n        if (space === Space.WORLD && this.parent) {\r\n            if (this.rotationQuaternion) {\r\n                // Get local rotation matrix of the looking object\r\n                const rotationMatrix = TmpVectors.Matrix[0];\r\n                this.rotationQuaternion.toRotationMatrix(rotationMatrix);\r\n\r\n                // Offset rotation by parent's inverted rotation matrix to correct in world space\r\n                const parentRotationMatrix = TmpVectors.Matrix[1];\r\n                this.parent.getWorldMatrix().getRotationMatrixToRef(parentRotationMatrix);\r\n                parentRotationMatrix.invert();\r\n                rotationMatrix.multiplyToRef(parentRotationMatrix, rotationMatrix);\r\n                this.rotationQuaternion.fromRotationMatrix(rotationMatrix);\r\n            } else {\r\n                // Get local rotation matrix of the looking object\r\n                const quaternionRotation = TmpVectors.Quaternion[0];\r\n                Quaternion.FromEulerVectorToRef(this.rotation, quaternionRotation);\r\n                const rotationMatrix = TmpVectors.Matrix[0];\r\n                quaternionRotation.toRotationMatrix(rotationMatrix);\r\n\r\n                // Offset rotation by parent's inverted rotation matrix to correct in world space\r\n                const parentRotationMatrix = TmpVectors.Matrix[1];\r\n                this.parent.getWorldMatrix().getRotationMatrixToRef(parentRotationMatrix);\r\n                parentRotationMatrix.invert();\r\n                rotationMatrix.multiplyToRef(parentRotationMatrix, rotationMatrix);\r\n                quaternionRotation.fromRotationMatrix(rotationMatrix);\r\n                quaternionRotation.toEulerAnglesToRef(this.rotation);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 that is the localAxis, expressed in the mesh local space, rotated like the mesh.\r\n     * This Vector3 is expressed in the World space.\r\n     * @param localAxis axis to rotate\r\n     * @returns a new Vector3 that is the localAxis, expressed in the mesh local space, rotated like the mesh.\r\n     */\r\n    public getDirection(localAxis: Vector3): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getDirectionToRef(localAxis, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vector3 \"result\" as the rotated Vector3 \"localAxis\" in the same rotation than the mesh.\r\n     * localAxis is expressed in the mesh local space.\r\n     * result is computed in the World space from the mesh World matrix.\r\n     * @param localAxis axis to rotate\r\n     * @param result the resulting transformnode\r\n     * @returns this TransformNode.\r\n     */\r\n    public getDirectionToRef(localAxis: Vector3, result: Vector3): TransformNode {\r\n        Vector3.TransformNormalToRef(localAxis, this.getWorldMatrix(), result);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets this transform node rotation to the given local axis.\r\n     * @param localAxis the axis in local space\r\n     * @param yawCor optional yaw (y-axis) correction in radians\r\n     * @param pitchCor optional pitch (x-axis) correction in radians\r\n     * @param rollCor optional roll (z-axis) correction in radians\r\n     * @returns this TransformNode\r\n     */\r\n    public setDirection(localAxis: Vector3, yawCor: number = 0, pitchCor: number = 0, rollCor: number = 0): TransformNode {\r\n        const yaw = -Math.atan2(localAxis.z, localAxis.x) + Math.PI / 2;\r\n        const len = Math.sqrt(localAxis.x * localAxis.x + localAxis.z * localAxis.z);\r\n        const pitch = -Math.atan2(localAxis.y, len);\r\n        if (this.rotationQuaternion) {\r\n            Quaternion.RotationYawPitchRollToRef(yaw + yawCor, pitch + pitchCor, rollCor, this.rotationQuaternion);\r\n        } else {\r\n            this.rotation.x = pitch + pitchCor;\r\n            this.rotation.y = yaw + yawCor;\r\n            this.rotation.z = rollCor;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a new pivot point to the current node\r\n     * @param point defines the new pivot point to use\r\n     * @param space defines if the point is in world or local space (local by default)\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPivotPoint(point: Vector3, space: Space = Space.LOCAL): TransformNode {\r\n        if (this.getScene().getRenderId() == 0) {\r\n            this.computeWorldMatrix(true);\r\n        }\r\n\r\n        const wm = this.getWorldMatrix();\r\n\r\n        if (space == Space.WORLD) {\r\n            const tmat = TmpVectors.Matrix[0];\r\n            wm.invertToRef(tmat);\r\n            point = Vector3.TransformCoordinates(point, tmat);\r\n        }\r\n\r\n        return this.setPivotMatrix(Matrix.Translation(-point.x, -point.y, -point.z), true);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the mesh pivot point coordinates in the local space.\r\n     * @returns the pivot point\r\n     */\r\n    public getPivotPoint(): Vector3 {\r\n        const point = Vector3.Zero();\r\n        this.getPivotPointToRef(point);\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Vector3 \"result\" with the coordinates of the mesh pivot point in the local space.\r\n     * @param result the vector3 to store the result\r\n     * @returns this TransformNode.\r\n     */\r\n    public getPivotPointToRef(result: Vector3): TransformNode {\r\n        result.x = -this._pivotMatrix.m[12];\r\n        result.y = -this._pivotMatrix.m[13];\r\n        result.z = -this._pivotMatrix.m[14];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the mesh pivot point World coordinates.\r\n     * @returns a new Vector3 set with the mesh pivot point World coordinates.\r\n     */\r\n    public getAbsolutePivotPoint(): Vector3 {\r\n        const point = Vector3.Zero();\r\n        this.getAbsolutePivotPointToRef(point);\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vector3 \"result\" coordinates with the mesh pivot point World coordinates.\r\n     * @param result vector3 to store the result\r\n     * @returns this TransformNode.\r\n     */\r\n    public getAbsolutePivotPointToRef(result: Vector3): TransformNode {\r\n        this.getPivotPointToRef(result);\r\n        Vector3.TransformCoordinatesToRef(result, this.getWorldMatrix(), result);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Flag the transform node as dirty (Forcing it to update everything)\r\n     * @param property if set to \"rotation\" the objects rotationQuaternion will be set to null\r\n     * @returns this  node\r\n     */\r\n    public override markAsDirty(property?: string): Node {\r\n        if (this._isDirty) {\r\n            return this;\r\n        }\r\n\r\n        // We need to explicitly update the children\r\n        // as the scene.evaluateActiveMeshes will not poll the transform nodes\r\n        if (this._children) {\r\n            for (const child of this._children) {\r\n                child.markAsDirty(property);\r\n            }\r\n        }\r\n        return super.markAsDirty(property);\r\n    }\r\n\r\n    /**\r\n     * Defines the passed node as the parent of the current node.\r\n     * The node will remain exactly where it is and its position / rotation will be updated accordingly.\r\n     * If you don't want to preserve the current rotation / position, assign the parent through parent accessor.\r\n     * Note that if the mesh has a pivot matrix / point defined it will be applied after the parent was updated.\r\n     * In that case the node will not remain in the same space as it is, as the pivot will be applied.\r\n     * To avoid this, you can set updatePivot to true and the pivot will be updated to identity\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/parent\r\n     * @param node the node ot set as the parent\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @param updatePivot if true, update the pivot matrix to keep the node in the same space as before\r\n     * @returns this TransformNode.\r\n     */\r\n    public setParent(node: Nullable<Node>, preserveScalingSign: boolean = false, updatePivot = false): TransformNode {\r\n        if (!node && !this.parent) {\r\n            return this;\r\n        }\r\n\r\n        const quatRotation = TmpVectors.Quaternion[0];\r\n        const position = TmpVectors.Vector3[0];\r\n        const scale = TmpVectors.Vector3[1];\r\n        const invParentMatrix = TmpVectors.Matrix[1];\r\n        Matrix.IdentityToRef(invParentMatrix);\r\n        const composedMatrix = TmpVectors.Matrix[0];\r\n        this.computeWorldMatrix(true);\r\n\r\n        let currentRotation = this.rotationQuaternion;\r\n        if (!currentRotation) {\r\n            currentRotation = TransformNode._TmpRotation;\r\n            Quaternion.RotationYawPitchRollToRef(this._rotation.y, this._rotation.x, this._rotation.z, currentRotation);\r\n        }\r\n\r\n        // current global transformation without pivot\r\n        Matrix.ComposeToRef(this.scaling, currentRotation, this.position, composedMatrix);\r\n        if (this.parent) {\r\n            composedMatrix.multiplyToRef(this.parent.computeWorldMatrix(true), composedMatrix);\r\n        }\r\n\r\n        // is a node was set, calculate the difference between this and the node\r\n        if (node) {\r\n            node.computeWorldMatrix(true).invertToRef(invParentMatrix);\r\n            composedMatrix.multiplyToRef(invParentMatrix, composedMatrix);\r\n        }\r\n        composedMatrix.decompose(scale, quatRotation, position, preserveScalingSign ? this : undefined);\r\n\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion.copyFrom(quatRotation);\r\n        } else {\r\n            quatRotation.toEulerAnglesToRef(this.rotation);\r\n        }\r\n\r\n        this.scaling.copyFrom(scale);\r\n        this.position.copyFrom(position);\r\n\r\n        this.parent = node;\r\n\r\n        if (updatePivot) {\r\n            this.setPivotMatrix(Matrix.Identity());\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the passed mesh as a child to the current mesh.\r\n     * The node will remain exactly where it is and its position / rotation will be updated accordingly.\r\n     * This method is equivalent to calling setParent().\r\n     * @param mesh defines the child mesh\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @returns the current mesh\r\n     */\r\n    public addChild(mesh: TransformNode, preserveScalingSign: boolean = false): this {\r\n        mesh.setParent(this, preserveScalingSign);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the passed mesh from the current mesh children list\r\n     * @param mesh defines the child mesh\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @returns the current mesh\r\n     */\r\n    public removeChild(mesh: TransformNode, preserveScalingSign: boolean = false): this {\r\n        if (mesh.parent !== this) return this;\r\n        mesh.setParent(null, preserveScalingSign);\r\n        return this;\r\n    }\r\n\r\n    private _nonUniformScaling = false;\r\n    /**\r\n     * True if the scaling property of this object is non uniform eg. (1,2,1)\r\n     */\r\n    public get nonUniformScaling(): boolean {\r\n        return this._nonUniformScaling;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateNonUniformScalingState(value: boolean): boolean {\r\n        if (this._nonUniformScaling === value) {\r\n            return false;\r\n        }\r\n\r\n        this._nonUniformScaling = value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Attach the current TransformNode to another TransformNode associated with a bone\r\n     * @param bone Bone affecting the TransformNode\r\n     * @param affectedTransformNode TransformNode associated with the bone\r\n     * @returns this object\r\n     */\r\n    public attachToBone(bone: Bone, affectedTransformNode: TransformNode): TransformNode {\r\n        this._currentParentWhenAttachingToBone = this.parent;\r\n        this._transformToBoneReferal = affectedTransformNode;\r\n        this.parent = bone;\r\n\r\n        bone.getSkeleton().prepare(true); // make sure bone.getFinalMatrix() is up to date\r\n\r\n        if (bone.getFinalMatrix().determinant() < 0) {\r\n            this.scalingDeterminant *= -1;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Detach the transform node if its associated with a bone\r\n     * @param resetToPreviousParent Indicates if the parent that was in effect when attachToBone was called should be set back or if we should set parent to null instead (defaults to the latter)\r\n     * @returns this object\r\n     */\r\n    public detachFromBone(resetToPreviousParent = false): TransformNode {\r\n        if (!this.parent) {\r\n            if (resetToPreviousParent) {\r\n                this.parent = this._currentParentWhenAttachingToBone;\r\n            }\r\n            return this;\r\n        }\r\n\r\n        if (this.parent.getWorldMatrix().determinant() < 0) {\r\n            this.scalingDeterminant *= -1;\r\n        }\r\n        this._transformToBoneReferal = null;\r\n        if (resetToPreviousParent) {\r\n            this.parent = this._currentParentWhenAttachingToBone;\r\n        } else {\r\n            this.parent = null;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private static _RotationAxisCache = new Quaternion();\r\n    /**\r\n     * Rotates the mesh around the axis vector for the passed angle (amount) expressed in radians, in the given space.\r\n     * space (default LOCAL) can be either Space.LOCAL, either Space.WORLD.\r\n     * Note that the property `rotationQuaternion` is then automatically updated and the property `rotation` is set to (0,0,0) and no longer used.\r\n     * The passed axis is also normalized.\r\n     * @param axis the axis to rotate around\r\n     * @param amount the amount to rotate in radians\r\n     * @param space Space to rotate in (Default: local)\r\n     * @returns the TransformNode.\r\n     */\r\n    public rotate(axis: Vector3, amount: number, space?: Space): TransformNode {\r\n        axis.normalize();\r\n        if (!this.rotationQuaternion) {\r\n            this.rotationQuaternion = this.rotation.toQuaternion();\r\n            this.rotation.setAll(0);\r\n        }\r\n        let rotationQuaternion: Quaternion;\r\n        if (!space || (space as any) === Space.LOCAL) {\r\n            rotationQuaternion = Quaternion.RotationAxisToRef(axis, amount, TransformNode._RotationAxisCache);\r\n            this.rotationQuaternion.multiplyToRef(rotationQuaternion, this.rotationQuaternion);\r\n        } else {\r\n            if (this.parent) {\r\n                const parentWorldMatrix = this.parent.getWorldMatrix();\r\n                const invertParentWorldMatrix = TmpVectors.Matrix[0];\r\n                parentWorldMatrix.invertToRef(invertParentWorldMatrix);\r\n                axis = Vector3.TransformNormal(axis, invertParentWorldMatrix);\r\n\r\n                if (parentWorldMatrix.determinant() < 0) {\r\n                    amount *= -1;\r\n                }\r\n            }\r\n            rotationQuaternion = Quaternion.RotationAxisToRef(axis, amount, TransformNode._RotationAxisCache);\r\n            rotationQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates the mesh around the axis vector for the passed angle (amount) expressed in radians, in world space.\r\n     * Note that the property `rotationQuaternion` is then automatically updated and the property `rotation` is set to (0,0,0) and no longer used.\r\n     * The passed axis is also normalized. .\r\n     * Method is based on http://www.euclideanspace.com/maths/geometry/affine/aroundPoint/index.htm\r\n     * @param point the point to rotate around\r\n     * @param axis the axis to rotate around\r\n     * @param amount the amount to rotate in radians\r\n     * @returns the TransformNode\r\n     */\r\n    public rotateAround(point: Vector3, axis: Vector3, amount: number): TransformNode {\r\n        axis.normalize();\r\n        if (!this.rotationQuaternion) {\r\n            this.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);\r\n            this.rotation.setAll(0);\r\n        }\r\n\r\n        const tmpVector = TmpVectors.Vector3[0];\r\n        const finalScale = TmpVectors.Vector3[1];\r\n        const finalTranslation = TmpVectors.Vector3[2];\r\n\r\n        const finalRotation = TmpVectors.Quaternion[0];\r\n\r\n        const translationMatrix = TmpVectors.Matrix[0]; // T\r\n        const translationMatrixInv = TmpVectors.Matrix[1]; // T'\r\n        const rotationMatrix = TmpVectors.Matrix[2]; // R\r\n        const finalMatrix = TmpVectors.Matrix[3]; // T' x R x T\r\n\r\n        point.subtractToRef(this.position, tmpVector);\r\n        Matrix.TranslationToRef(tmpVector.x, tmpVector.y, tmpVector.z, translationMatrix); // T\r\n        Matrix.TranslationToRef(-tmpVector.x, -tmpVector.y, -tmpVector.z, translationMatrixInv); // T'\r\n        Matrix.RotationAxisToRef(axis, amount, rotationMatrix); // R\r\n\r\n        translationMatrixInv.multiplyToRef(rotationMatrix, finalMatrix); // T' x R\r\n        finalMatrix.multiplyToRef(translationMatrix, finalMatrix); // T' x R x T\r\n\r\n        finalMatrix.decompose(finalScale, finalRotation, finalTranslation);\r\n\r\n        this.position.addInPlace(finalTranslation);\r\n        finalRotation.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translates the mesh along the axis vector for the passed distance in the given space.\r\n     * space (default LOCAL) can be either Space.LOCAL, either Space.WORLD.\r\n     * @param axis the axis to translate in\r\n     * @param distance the distance to translate\r\n     * @param space Space to rotate in (Default: local)\r\n     * @returns the TransformNode.\r\n     */\r\n    public translate(axis: Vector3, distance: number, space?: Space): TransformNode {\r\n        const displacementVector = axis.scale(distance);\r\n        if (!space || (space as any) === Space.LOCAL) {\r\n            const tempV3 = this.getPositionExpressedInLocalSpace().add(displacementVector);\r\n            this.setPositionWithLocalVector(tempV3);\r\n        } else {\r\n            this.setAbsolutePosition(this.getAbsolutePosition().add(displacementVector));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a rotation step to the mesh current rotation.\r\n     * x, y, z are Euler angles expressed in radians.\r\n     * This methods updates the current mesh rotation, either mesh.rotation, either mesh.rotationQuaternion if it's set.\r\n     * This means this rotation is made in the mesh local space only.\r\n     * It's useful to set a custom rotation order different from the BJS standard one YXZ.\r\n     * Example : this rotates the mesh first around its local X axis, then around its local Z axis, finally around its local Y axis.\r\n     * ```javascript\r\n     * mesh.addRotation(x1, 0, 0).addRotation(0, 0, z2).addRotation(0, 0, y3);\r\n     * ```\r\n     * Note that `addRotation()` accumulates the passed rotation values to the current ones and computes the .rotation or .rotationQuaternion updated values.\r\n     * Under the hood, only quaternions are used. So it's a little faster is you use .rotationQuaternion because it doesn't need to translate them back to Euler angles.\r\n     * @param x Rotation to add\r\n     * @param y Rotation to add\r\n     * @param z Rotation to add\r\n     * @returns the TransformNode.\r\n     */\r\n    public addRotation(x: number, y: number, z: number): TransformNode {\r\n        let rotationQuaternion;\r\n        if (this.rotationQuaternion) {\r\n            rotationQuaternion = this.rotationQuaternion;\r\n        } else {\r\n            rotationQuaternion = TmpVectors.Quaternion[1];\r\n            Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, rotationQuaternion);\r\n        }\r\n        const accumulation = TmpVectors.Quaternion[0];\r\n        Quaternion.RotationYawPitchRollToRef(y, x, z, accumulation);\r\n        rotationQuaternion.multiplyInPlace(accumulation);\r\n        if (!this.rotationQuaternion) {\r\n            rotationQuaternion.toEulerAnglesToRef(this.rotation);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _getEffectiveParent(): Nullable<Node> {\r\n        return this.parent;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the transform node world matrix computation needs the camera information to be computed.\r\n     * This is the case when the node is a billboard or has an infinite distance for instance.\r\n     * @returns true if the world matrix computation needs the camera information to be computed\r\n     */\r\n    public isWorldMatrixCameraDependent(): boolean {\r\n        return (this._infiniteDistance && !this.parent) || (this._billboardMode !== TransformNode.BILLBOARDMODE_NONE && !this.preserveParentRotationForBillboard);\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @param camera defines the camera used if different from the scene active camera (This is used with modes like Billboard or infinite distance)\r\n     * @returns the world matrix\r\n     */\r\n    public override computeWorldMatrix(force: boolean = false, camera: Nullable<Camera> = null): Matrix {\r\n        if (this._isWorldMatrixFrozen && !this._isDirty) {\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        const currentRenderId = this.getScene().getRenderId();\r\n        if (!this._isDirty && !force && (this._currentRenderId === currentRenderId || this.isSynchronized())) {\r\n            this._currentRenderId = currentRenderId;\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        camera = camera || this.getScene().activeCamera;\r\n\r\n        this._updateCache();\r\n        const cache = this._cache;\r\n        cache.pivotMatrixUpdated = false;\r\n        cache.billboardMode = this.billboardMode;\r\n        cache.infiniteDistance = this.infiniteDistance;\r\n        cache.parent = this._parentNode;\r\n\r\n        this._currentRenderId = currentRenderId;\r\n        this._childUpdateId += 1;\r\n        this._isDirty = false;\r\n        this._position._isDirty = false;\r\n        this._rotation._isDirty = false;\r\n        this._scaling._isDirty = false;\r\n        const parent = this._getEffectiveParent();\r\n\r\n        // Scaling\r\n        const scaling: Vector3 = TransformNode._TmpScaling;\r\n        let translation: Vector3 = this._position;\r\n\r\n        // Translation\r\n        if (this._infiniteDistance) {\r\n            if (!this.parent && camera) {\r\n                const cameraWorldMatrix = camera.getWorldMatrix();\r\n                const cameraGlobalPosition = new Vector3(cameraWorldMatrix.m[12], cameraWorldMatrix.m[13], cameraWorldMatrix.m[14]);\r\n\r\n                translation = TransformNode._TmpTranslation;\r\n                translation.copyFromFloats(this._position.x + cameraGlobalPosition.x, this._position.y + cameraGlobalPosition.y, this._position.z + cameraGlobalPosition.z);\r\n            }\r\n        }\r\n\r\n        // Scaling\r\n        scaling.copyFromFloats(this._scaling.x * this.scalingDeterminant, this._scaling.y * this.scalingDeterminant, this._scaling.z * this.scalingDeterminant);\r\n\r\n        // Rotation\r\n        let rotation: Quaternion;\r\n        if (this._rotationQuaternion) {\r\n            this._rotationQuaternion._isDirty = false;\r\n            rotation = this._rotationQuaternion;\r\n            if (this.reIntegrateRotationIntoRotationQuaternion) {\r\n                const len = this.rotation.lengthSquared();\r\n                if (len) {\r\n                    this._rotationQuaternion.multiplyInPlace(Quaternion.RotationYawPitchRoll(this._rotation.y, this._rotation.x, this._rotation.z));\r\n                    this._rotation.copyFromFloats(0, 0, 0);\r\n                }\r\n            }\r\n        } else {\r\n            rotation = TransformNode._TmpRotation;\r\n            Quaternion.RotationYawPitchRollToRef(this._rotation.y, this._rotation.x, this._rotation.z, rotation);\r\n        }\r\n\r\n        // Compose\r\n        if (this._usePivotMatrix) {\r\n            const scaleMatrix = TmpVectors.Matrix[1];\r\n            Matrix.ScalingToRef(scaling.x, scaling.y, scaling.z, scaleMatrix);\r\n\r\n            // Rotation\r\n            const rotationMatrix = TmpVectors.Matrix[0];\r\n            rotation.toRotationMatrix(rotationMatrix);\r\n\r\n            // Composing transformations\r\n            this._pivotMatrix.multiplyToRef(scaleMatrix, TmpVectors.Matrix[4]);\r\n            TmpVectors.Matrix[4].multiplyToRef(rotationMatrix, this._localMatrix);\r\n\r\n            // Post multiply inverse of pivotMatrix\r\n            if (this._postMultiplyPivotMatrix) {\r\n                this._localMatrix.multiplyToRef(this._pivotMatrixInverse, this._localMatrix);\r\n            }\r\n\r\n            this._localMatrix.addTranslationFromFloats(translation.x, translation.y, translation.z);\r\n        } else {\r\n            Matrix.ComposeToRef(scaling, rotation, translation, this._localMatrix);\r\n        }\r\n\r\n        // Parent\r\n        if (parent && parent.getWorldMatrix) {\r\n            if (force) {\r\n                parent.computeWorldMatrix(force);\r\n            }\r\n            if (cache.useBillboardPath) {\r\n                if (this._transformToBoneReferal) {\r\n                    const bone = this.parent as Bone;\r\n                    bone.getSkeleton().prepare();\r\n                    bone.getFinalMatrix().multiplyToRef(this._transformToBoneReferal.getWorldMatrix(), TmpVectors.Matrix[7]);\r\n                } else {\r\n                    TmpVectors.Matrix[7].copyFrom(parent.getWorldMatrix());\r\n                }\r\n\r\n                // Extract scaling and translation from parent\r\n                const translation = TmpVectors.Vector3[5];\r\n                const scale = TmpVectors.Vector3[6];\r\n                const orientation = TmpVectors.Quaternion[0];\r\n                TmpVectors.Matrix[7].decompose(scale, orientation, translation);\r\n                Matrix.ScalingToRef(scale.x, scale.y, scale.z, TmpVectors.Matrix[7]);\r\n                TmpVectors.Matrix[7].setTranslation(translation);\r\n\r\n                if (TransformNode.BillboardUseParentOrientation) {\r\n                    // set localMatrix translation to be transformed against parent's orientation.\r\n                    this._position.applyRotationQuaternionToRef(orientation, translation);\r\n                    this._localMatrix.setTranslation(translation);\r\n                }\r\n\r\n                this._localMatrix.multiplyToRef(TmpVectors.Matrix[7], this._worldMatrix);\r\n            } else {\r\n                if (this._transformToBoneReferal) {\r\n                    const bone = this.parent as Bone;\r\n                    bone.getSkeleton().prepare();\r\n                    this._localMatrix.multiplyToRef(bone.getFinalMatrix(), TmpVectors.Matrix[6]);\r\n                    TmpVectors.Matrix[6].multiplyToRef(this._transformToBoneReferal.getWorldMatrix(), this._worldMatrix);\r\n                } else {\r\n                    this._localMatrix.multiplyToRef(parent.getWorldMatrix(), this._worldMatrix);\r\n                }\r\n            }\r\n            this._markSyncedWithParent();\r\n        } else {\r\n            this._worldMatrix.copyFrom(this._localMatrix);\r\n        }\r\n\r\n        // Billboarding based on camera orientation (testing PG:http://www.babylonjs-playground.com/#UJEIL#13)\r\n        if (cache.useBillboardPath && camera && this.billboardMode && !cache.useBillboardPosition) {\r\n            const storedTranslation = TmpVectors.Vector3[0];\r\n            this._worldMatrix.getTranslationToRef(storedTranslation); // Save translation\r\n\r\n            // Cancel camera rotation\r\n            TmpVectors.Matrix[1].copyFrom(camera.getViewMatrix());\r\n\r\n            if (this._scene.useRightHandedSystem) {\r\n                TmpVectors.Matrix[1].multiplyToRef(convertRHSToLHS, TmpVectors.Matrix[1]);\r\n            }\r\n\r\n            TmpVectors.Matrix[1].setTranslationFromFloats(0, 0, 0);\r\n            TmpVectors.Matrix[1].invertToRef(TmpVectors.Matrix[0]);\r\n\r\n            if ((this.billboardMode & TransformNode.BILLBOARDMODE_ALL) !== TransformNode.BILLBOARDMODE_ALL) {\r\n                TmpVectors.Matrix[0].decompose(undefined, TmpVectors.Quaternion[0], undefined);\r\n                const eulerAngles = TmpVectors.Vector3[1];\r\n                TmpVectors.Quaternion[0].toEulerAnglesToRef(eulerAngles);\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_X) !== TransformNode.BILLBOARDMODE_X) {\r\n                    eulerAngles.x = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Y) !== TransformNode.BILLBOARDMODE_Y) {\r\n                    eulerAngles.y = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Z) !== TransformNode.BILLBOARDMODE_Z) {\r\n                    eulerAngles.z = 0;\r\n                }\r\n\r\n                Matrix.RotationYawPitchRollToRef(eulerAngles.y, eulerAngles.x, eulerAngles.z, TmpVectors.Matrix[0]);\r\n            }\r\n            this._worldMatrix.setTranslationFromFloats(0, 0, 0);\r\n            this._worldMatrix.multiplyToRef(TmpVectors.Matrix[0], this._worldMatrix);\r\n\r\n            // Restore translation\r\n            this._worldMatrix.setTranslation(TmpVectors.Vector3[0]);\r\n        }\r\n        // Billboarding based on camera position\r\n        else if (cache.useBillboardPath && camera && cache.useBillboardPosition) {\r\n            const storedTranslation = TmpVectors.Vector3[0];\r\n            // Save translation\r\n            this._worldMatrix.getTranslationToRef(storedTranslation);\r\n\r\n            // Compute camera position in local space\r\n            const cameraPosition = camera.globalPosition;\r\n            this._worldMatrix.invertToRef(TmpVectors.Matrix[1]);\r\n            const camInObjSpace = TmpVectors.Vector3[1];\r\n            Vector3.TransformCoordinatesToRef(cameraPosition, TmpVectors.Matrix[1], camInObjSpace);\r\n            camInObjSpace.normalize();\r\n\r\n            // Find the lookAt info in local space\r\n            const yaw = -Math.atan2(camInObjSpace.z, camInObjSpace.x) + Math.PI / 2;\r\n            const len = Math.sqrt(camInObjSpace.x * camInObjSpace.x + camInObjSpace.z * camInObjSpace.z);\r\n            const pitch = -Math.atan2(camInObjSpace.y, len);\r\n            Quaternion.RotationYawPitchRollToRef(yaw, pitch, 0, TmpVectors.Quaternion[0]);\r\n\r\n            if ((this.billboardMode & TransformNode.BILLBOARDMODE_ALL) !== TransformNode.BILLBOARDMODE_ALL) {\r\n                const eulerAngles = TmpVectors.Vector3[1];\r\n                TmpVectors.Quaternion[0].toEulerAnglesToRef(eulerAngles);\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_X) !== TransformNode.BILLBOARDMODE_X) {\r\n                    eulerAngles.x = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Y) !== TransformNode.BILLBOARDMODE_Y) {\r\n                    eulerAngles.y = 0;\r\n                }\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_Z) !== TransformNode.BILLBOARDMODE_Z) {\r\n                    eulerAngles.z = 0;\r\n                }\r\n\r\n                Matrix.RotationYawPitchRollToRef(eulerAngles.y, eulerAngles.x, eulerAngles.z, TmpVectors.Matrix[0]);\r\n            } else {\r\n                Matrix.FromQuaternionToRef(TmpVectors.Quaternion[0], TmpVectors.Matrix[0]);\r\n            }\r\n\r\n            // Cancel translation\r\n            this._worldMatrix.setTranslationFromFloats(0, 0, 0);\r\n\r\n            // Rotate according to lookat (diff from local to lookat)\r\n            this._worldMatrix.multiplyToRef(TmpVectors.Matrix[0], this._worldMatrix);\r\n\r\n            // Restore translation\r\n            this._worldMatrix.setTranslation(TmpVectors.Vector3[0]);\r\n        }\r\n\r\n        // Normal matrix\r\n        if (!this.ignoreNonUniformScaling) {\r\n            if (this._scaling.isNonUniformWithinEpsilon(0.000001)) {\r\n                this._updateNonUniformScalingState(true);\r\n            } else if (parent && (<TransformNode>parent)._nonUniformScaling) {\r\n                this._updateNonUniformScalingState((<TransformNode>parent)._nonUniformScaling);\r\n            } else {\r\n                this._updateNonUniformScalingState(false);\r\n            }\r\n        } else {\r\n            this._updateNonUniformScalingState(false);\r\n        }\r\n\r\n        this._afterComputeWorldMatrix();\r\n\r\n        // Absolute position\r\n        this._absolutePosition.copyFromFloats(this._worldMatrix.m[12], this._worldMatrix.m[13], this._worldMatrix.m[14]);\r\n        this._isAbsoluteSynced = false;\r\n\r\n        // Callbacks\r\n        this.onAfterWorldMatrixUpdateObservable.notifyObservers(this);\r\n\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = Matrix.Invert(this._worldMatrix);\r\n        }\r\n\r\n        // Cache the determinant\r\n        this._worldMatrixDeterminantIsDirty = true;\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Resets this nodeTransform's local matrix to Matrix.Identity().\r\n     * @param independentOfChildren indicates if all child nodeTransform's world-space transform should be preserved.\r\n     */\r\n    public resetLocalMatrix(independentOfChildren: boolean = true): void {\r\n        this.computeWorldMatrix();\r\n        if (independentOfChildren) {\r\n            const children = this.getChildren();\r\n            for (let i = 0; i < children.length; ++i) {\r\n                const child = children[i] as TransformNode;\r\n                if (child) {\r\n                    child.computeWorldMatrix();\r\n                    const bakedMatrix = TmpVectors.Matrix[0];\r\n                    child._localMatrix.multiplyToRef(this._localMatrix, bakedMatrix);\r\n                    const tmpRotationQuaternion = TmpVectors.Quaternion[0];\r\n                    bakedMatrix.decompose(child.scaling, tmpRotationQuaternion, child.position);\r\n                    if (child.rotationQuaternion) {\r\n                        child.rotationQuaternion.copyFrom(tmpRotationQuaternion);\r\n                    } else {\r\n                        tmpRotationQuaternion.toEulerAnglesToRef(child.rotation);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.scaling.copyFromFloats(1, 1, 1);\r\n        this.position.copyFromFloats(0, 0, 0);\r\n        this.rotation.copyFromFloats(0, 0, 0);\r\n\r\n        //only if quaternion is already set\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion = Quaternion.Identity();\r\n        }\r\n        this._worldMatrix = Matrix.Identity();\r\n    }\r\n\r\n    protected _afterComputeWorldMatrix(): void {}\r\n\r\n    /**\r\n     * If you'd like to be called back after the mesh position, rotation or scaling has been updated.\r\n     * @param func callback function to add\r\n     *\r\n     * @returns the TransformNode.\r\n     */\r\n    public registerAfterWorldMatrixUpdate(func: (mesh: TransformNode) => void): TransformNode {\r\n        this.onAfterWorldMatrixUpdateObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a registered callback function.\r\n     * @param func callback function to remove\r\n     * @returns the TransformNode.\r\n     */\r\n    public unregisterAfterWorldMatrixUpdate(func: (mesh: TransformNode) => void): TransformNode {\r\n        this.onAfterWorldMatrixUpdateObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the position of the current mesh in camera space\r\n     * @param camera defines the camera to use\r\n     * @returns a position\r\n     */\r\n    public getPositionInCameraSpace(camera: Nullable<Camera> = null): Vector3 {\r\n        if (!camera) {\r\n            camera = <Camera>this.getScene().activeCamera;\r\n        }\r\n\r\n        return Vector3.TransformCoordinates(this.getAbsolutePosition(), camera.getViewMatrix());\r\n    }\r\n\r\n    /**\r\n     * Returns the distance from the mesh to the active camera\r\n     * @param camera defines the camera to use\r\n     * @returns the distance\r\n     */\r\n    public getDistanceToCamera(camera: Nullable<Camera> = null): number {\r\n        if (!camera) {\r\n            camera = <Camera>this.getScene().activeCamera;\r\n        }\r\n        return this.getAbsolutePosition().subtract(camera.globalPosition).length();\r\n    }\r\n\r\n    /**\r\n     * Clone the current transform node\r\n     * @param name Name of the new clone\r\n     * @param newParent New parent for the clone\r\n     * @param doNotCloneChildren Do not clone children hierarchy\r\n     * @returns the new transform node\r\n     */\r\n    public override clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<TransformNode> {\r\n        const result = SerializationHelper.Clone(() => new TransformNode(name, this.getScene()), this);\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        if (newParent) {\r\n            result.parent = newParent;\r\n        }\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            const directDescendants = this.getDescendants(true);\r\n            for (let index = 0; index < directDescendants.length; index++) {\r\n                const child = directDescendants[index];\r\n\r\n                if ((<any>child).clone) {\r\n                    (<any>child).clone(name + \".\" + child.name, result);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Serializes the objects information.\r\n     * @param currentSerializationObject defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(currentSerializationObject?: any): any {\r\n        const serializationObject = SerializationHelper.Serialize(this, currentSerializationObject);\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        serializationObject.localMatrix = this.getPivotMatrix().asArray();\r\n\r\n        serializationObject.isEnabled = this.isEnabled();\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Returns a new TransformNode object parsed from the source provided.\r\n     * @param parsedTransformNode is the source.\r\n     * @param scene the scene the object belongs to\r\n     * @param rootUrl is a string, it's the root URL to prefix the `delayLoadingFile` property with\r\n     * @returns a new TransformNode object parsed from the source provided.\r\n     */\r\n    public static Parse(parsedTransformNode: any, scene: Scene, rootUrl: string): TransformNode {\r\n        const transformNode = SerializationHelper.Parse(() => new TransformNode(parsedTransformNode.name, scene), parsedTransformNode, scene, rootUrl);\r\n\r\n        if (parsedTransformNode.localMatrix) {\r\n            transformNode.setPreTransformMatrix(Matrix.FromArray(parsedTransformNode.localMatrix));\r\n        } else if (parsedTransformNode.pivotMatrix) {\r\n            transformNode.setPivotMatrix(Matrix.FromArray(parsedTransformNode.pivotMatrix));\r\n        }\r\n\r\n        transformNode.setEnabled(parsedTransformNode.isEnabled);\r\n\r\n        transformNode._waitingParsedUniqueId = parsedTransformNode.uniqueId;\r\n\r\n        // Parent\r\n        if (parsedTransformNode.parentId !== undefined) {\r\n            transformNode._waitingParentId = parsedTransformNode.parentId;\r\n        }\r\n\r\n        if (parsedTransformNode.parentInstanceIndex !== undefined) {\r\n            transformNode._waitingParentInstanceIndex = parsedTransformNode.parentInstanceIndex;\r\n        }\r\n\r\n        // Animations\r\n        if (parsedTransformNode.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedTransformNode.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedTransformNode.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    transformNode.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(transformNode, parsedTransformNode, scene);\r\n        }\r\n\r\n        if (parsedTransformNode.autoAnimate) {\r\n            scene.beginAnimation(\r\n                transformNode,\r\n                parsedTransformNode.autoAnimateFrom,\r\n                parsedTransformNode.autoAnimateTo,\r\n                parsedTransformNode.autoAnimateLoop,\r\n                parsedTransformNode.autoAnimateSpeed || 1.0\r\n            );\r\n        }\r\n\r\n        return transformNode;\r\n    }\r\n\r\n    /**\r\n     * Get all child-transformNodes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of TransformNode\r\n     */\r\n    public getChildTransformNodes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): TransformNode[] {\r\n        const results: Array<TransformNode> = [];\r\n        this._getDescendants(results, directDescendantsOnly, (node: Node) => {\r\n            return (!predicate || predicate(node)) && node instanceof TransformNode;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this transform node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        // Remove from scene\r\n        this.getScene().removeTransformNode(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.transformNodes.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.transformNodes.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        this.onAfterWorldMatrixUpdateObservable.clear();\r\n\r\n        if (doNotRecurse) {\r\n            const transformNodes = this.getChildTransformNodes(true);\r\n            for (const transformNode of transformNodes) {\r\n                transformNode.parent = null;\r\n                transformNode.computeWorldMatrix(true);\r\n            }\r\n        }\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * Uniformly scales the mesh to fit inside of a unit cube (1 X 1 X 1 units)\r\n     * @param includeDescendants Use the hierarchy's bounding box instead of the mesh's bounding box. Default is false\r\n     * @param ignoreRotation ignore rotation when computing the scale (ie. object will be axis aligned). Default is false\r\n     * @param predicate predicate that is passed in to getHierarchyBoundingVectors when selecting which object should be included when scaling\r\n     * @returns the current mesh\r\n     */\r\n    public normalizeToUnitCube(includeDescendants = true, ignoreRotation = false, predicate?: Nullable<(node: AbstractMesh) => boolean>): TransformNode {\r\n        let storedRotation: Nullable<Vector3> = null;\r\n        let storedRotationQuaternion: Nullable<Quaternion> = null;\r\n\r\n        if (ignoreRotation) {\r\n            if (this.rotationQuaternion) {\r\n                storedRotationQuaternion = this.rotationQuaternion.clone();\r\n                this.rotationQuaternion.copyFromFloats(0, 0, 0, 1);\r\n            } else if (this.rotation) {\r\n                storedRotation = this.rotation.clone();\r\n                this.rotation.copyFromFloats(0, 0, 0);\r\n            }\r\n        }\r\n\r\n        const boundingVectors = this.getHierarchyBoundingVectors(includeDescendants, predicate);\r\n        const sizeVec = boundingVectors.max.subtract(boundingVectors.min);\r\n        const maxDimension = Math.max(sizeVec.x, sizeVec.y, sizeVec.z);\r\n\r\n        if (maxDimension === 0) {\r\n            return this;\r\n        }\r\n\r\n        const scale = 1 / maxDimension;\r\n\r\n        this.scaling.scaleInPlace(scale);\r\n\r\n        if (ignoreRotation) {\r\n            if (this.rotationQuaternion && storedRotationQuaternion) {\r\n                this.rotationQuaternion.copyFrom(storedRotationQuaternion);\r\n            } else if (this.rotation && storedRotation) {\r\n                this.rotation.copyFrom(storedRotation);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _syncAbsoluteScalingAndRotation(): void {\r\n        if (!this._isAbsoluteSynced) {\r\n            this._worldMatrix.decompose(this._absoluteScaling, this._absoluteRotationQuaternion);\r\n            this._isAbsoluteSynced = true;\r\n        }\r\n    }\r\n}\r\n", "import type { Collider } from \"./collider\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Observer } from \"../Misc/observable\";\r\n\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _MeshCollisionData {\r\n    public _checkCollisions = false;\r\n    public _collisionMask = -1;\r\n    public _collisionGroup = -1;\r\n    public _surroundingMeshes: Nullable<AbstractMesh[]> = null;\r\n    public _collider: Nullable<Collider> = null;\r\n    public _oldPositionForCollisions = new Vector3(0, 0, 0);\r\n    public _diffPositionForCollisions = new Vector3(0, 0, 0);\r\n    public _onCollideObserver: Nullable<Observer<AbstractMesh>>;\r\n    public _onCollisionPositionChangeObserver: Nullable<Observer<Vector3>>;\r\n    public _collisionResponse = true;\r\n}\r\n", "import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable, FloatArray, IndicesArray, DeepImmutable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { ScenePerformancePriority } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { Node } from \"../node\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { IGetSetVerticesData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport type { IntersectionInfo } from \"../Collisions/intersectionInfo\";\r\nimport type { ICullable } from \"../Culling/boundingInfo\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport type { MorphTargetManager } from \"../Morph/morphTargetManager\";\r\nimport type { IBakedVertexAnimationManager } from \"../BakedVertexAnimation/bakedVertexAnimationManager\";\r\nimport type { IEdgesRenderer } from \"../Rendering/edgesRenderer\";\r\nimport type { SolidParticle } from \"../Particles/solidParticle\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { AbstractActionManager } from \"../Actions/abstractActionManager\";\r\nimport { UniformBuffer } from \"../Materials/uniformBuffer\";\r\nimport { _MeshCollisionData } from \"../Collisions/meshCollisionData\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { RawTexture } from \"../Materials/Textures/rawTexture\";\r\nimport { extractMinAndMax } from \"../Maths/math.functions\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport type { Ray } from \"../Culling/ray\";\r\nimport type { Collider } from \"../Collisions/collider\";\r\nimport type { TrianglePickingPredicate } from \"../Culling/ray\";\r\nimport type { RenderingGroup } from \"../Rendering/renderingGroup\";\r\nimport type { IEdgesRendererOptions } from \"../Rendering/edgesRenderer\";\r\nimport type { MorphTarget } from \"../Morph/morphTarget\";\r\nimport { nativeOverride } from \"../Misc/decorators\";\r\nimport { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\nfunction applyMorph(data: FloatArray, kind: string, morphTargetManager: MorphTargetManager): void {\r\n    let getTargetData: Nullable<(target: MorphTarget) => Nullable<FloatArray>> = null;\r\n    switch (kind) {\r\n        case VertexBuffer.PositionKind:\r\n            getTargetData = (target) => target.getPositions();\r\n            break;\r\n        case VertexBuffer.NormalKind:\r\n            getTargetData = (target) => target.getNormals();\r\n            break;\r\n        case VertexBuffer.TangentKind:\r\n            getTargetData = (target) => target.getTangents();\r\n            break;\r\n        case VertexBuffer.UVKind:\r\n            getTargetData = (target) => target.getUVs();\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n\r\n    for (let index = 0; index < data.length; index++) {\r\n        let value = data[index];\r\n        for (let targetCount = 0; targetCount < morphTargetManager.numTargets; targetCount++) {\r\n            const target = morphTargetManager.getTarget(targetCount);\r\n            const influence = target.influence;\r\n            if (influence !== 0) {\r\n                const targetData = getTargetData(target);\r\n                if (targetData) {\r\n                    value += (targetData[index] - data[index]) * influence;\r\n                }\r\n            }\r\n        }\r\n        data[index] = value;\r\n    }\r\n}\r\n\r\nfunction applySkeleton(\r\n    data: FloatArray,\r\n    kind: string,\r\n    skeletonMatrices: Float32Array,\r\n    matricesIndicesData: FloatArray,\r\n    matricesWeightsData: FloatArray,\r\n    matricesIndicesExtraData: Nullable<FloatArray>,\r\n    matricesWeightsExtraData: Nullable<FloatArray>\r\n): void {\r\n    const tempVector = TmpVectors.Vector3[0];\r\n    const finalMatrix = TmpVectors.Matrix[0];\r\n    const tempMatrix = TmpVectors.Matrix[1];\r\n\r\n    const transformFromFloatsToRef = kind === VertexBuffer.NormalKind ? Vector3.TransformNormalFromFloatsToRef : Vector3.TransformCoordinatesFromFloatsToRef;\r\n\r\n    for (let index = 0, matWeightIdx = 0; index < data.length; index += 3, matWeightIdx += 4) {\r\n        finalMatrix.reset();\r\n\r\n        let inf: number;\r\n        let weight: number;\r\n        for (inf = 0; inf < 4; inf++) {\r\n            weight = matricesWeightsData[matWeightIdx + inf];\r\n            if (weight > 0) {\r\n                Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                finalMatrix.addToSelf(tempMatrix);\r\n            }\r\n        }\r\n        if (matricesIndicesExtraData && matricesWeightsExtraData) {\r\n            for (inf = 0; inf < 4; inf++) {\r\n                weight = matricesWeightsExtraData[matWeightIdx + inf];\r\n                if (weight > 0) {\r\n                    Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                    finalMatrix.addToSelf(tempMatrix);\r\n                }\r\n            }\r\n        }\r\n\r\n        transformFromFloatsToRef(data[index], data[index + 1], data[index + 2], finalMatrix, tempVector);\r\n        tempVector.toArray(data, index);\r\n    }\r\n}\r\n\r\n/**\r\n * Opaque cache when computing data about a mesh\r\n */\r\nexport interface IMeshDataCache {\r\n    /** @internal */\r\n    _outputData?: Float32Array;\r\n\r\n    /** @internal */\r\n    _vertexData?: { [kind: string]: Float32Array };\r\n}\r\n\r\n/**\r\n * Options when computing data about a mesh\r\n */\r\nexport interface IMeshDataOptions {\r\n    /** Apply skeleton when computing the bounding info. Defaults to false. */\r\n    applySkeleton?: boolean;\r\n\r\n    /** Apply morph when computing the bounding info. Defaults to false. */\r\n    applyMorph?: boolean;\r\n\r\n    /** Update the cached positions stored as a Vector3 array. Defaults to true. */\r\n    updatePositionsArray?: boolean;\r\n\r\n    /**\r\n     * Cache to avoid redundant allocations and computations when computing the bounding info multiple times. Pass in\r\n     * an initial empty object and continue with subsequent calls using the same object. Caching is disabled by default.\r\n     */\r\n    cache?: IMeshDataCache;\r\n}\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass _FacetDataStorage {\r\n    // facetData private properties\r\n    public facetPositions: Vector3[]; // facet local positions\r\n    public facetNormals: Vector3[]; // facet local normals\r\n    public facetPartitioning: number[][]; // partitioning array of facet index arrays\r\n    public facetNb: number = 0; // facet number\r\n    public partitioningSubdivisions: number = 10; // number of subdivisions per axis in the partitioning space\r\n    public partitioningBBoxRatio: number = 1.01; // the partitioning array space is by default 1% bigger than the bounding box\r\n    public facetDataEnabled: boolean = false; // is the facet data feature enabled on this mesh ?\r\n    public facetParameters: any = {}; // keep a reference to the object parameters to avoid memory re-allocation\r\n    public bbSize: Vector3 = Vector3.Zero(); // bbox size approximated for facet data\r\n    public subDiv = {\r\n        // actual number of subdivisions per axis for ComputeNormals()\r\n        max: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        X: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        Y: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        Z: 1,\r\n    };\r\n\r\n    public facetDepthSort: boolean = false; // is the facet depth sort to be computed\r\n    public facetDepthSortEnabled: boolean = false; // is the facet depth sort initialized\r\n    public depthSortedIndices: IndicesArray; // copy of the indices array to store them once sorted\r\n    public depthSortedFacets: { ind: number; sqDistance: number }[]; // array of depth sorted facets\r\n    public facetDepthSortFunction: (f1: { ind: number; sqDistance: number }, f2: { ind: number; sqDistance: number }) => number; // facet depth sort function\r\n    public facetDepthSortFrom: Vector3; // location where to depth sort from\r\n    public facetDepthSortOrigin: Vector3; // same as facetDepthSortFrom but expressed in the mesh local space\r\n\r\n    public invertedMatrix: Matrix; // Inverted world matrix.\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass _InternalAbstractMeshDataInfo {\r\n    public _hasVertexAlpha = false;\r\n    public _useVertexColors = true;\r\n    public _numBoneInfluencers = 4;\r\n    public _applyFog = true;\r\n    public _receiveShadows = false;\r\n    public _facetData = new _FacetDataStorage();\r\n    public _visibility = 1.0;\r\n    public _skeleton: Nullable<Skeleton> = null;\r\n    public _layerMask: number = 0x0fffffff;\r\n    public _computeBonesUsingShaders = true;\r\n    public _isActive = false;\r\n    public _onlyForInstances = false;\r\n    public _isActiveIntermediate = false;\r\n    public _onlyForInstancesIntermediate = false;\r\n    public _actAsRegularMesh = false;\r\n    public _currentLOD: Map<Camera, [Nullable<AbstractMesh>, number]> = new Map();\r\n    public _collisionRetryCount: number = 3;\r\n    public _morphTargetManager: Nullable<MorphTargetManager> = null;\r\n    public _renderingGroupId = 0;\r\n    public _bakedVertexAnimationManager: Nullable<IBakedVertexAnimationManager> = null;\r\n    public _material: Nullable<Material> = null;\r\n    public _materialForRenderPass: Array<Material | undefined>; // map a render pass id (index in the array) to a Material\r\n    public _positions: Nullable<Vector3[]> = null;\r\n    public _pointerOverDisableMeshTesting: boolean = false;\r\n    // Collisions\r\n    public _meshCollisionData = new _MeshCollisionData();\r\n    public _enableDistantPicking = false;\r\n    /** @internal\r\n     * Bounding info that is unnafected by the addition of thin instances\r\n     */\r\n    public _rawBoundingInfo: Nullable<BoundingInfo> = null;\r\n    /** @internal\r\n     * This value will indicate us that at some point, the mesh was specifically used with the opposite winding order\r\n     * We use that as a clue to force the material to sideOrientation = null\r\n     */\r\n    public _sideOrientationHint = false;\r\n\r\n    /**\r\n     * @internal\r\n     * if this is set to true, the mesh will be visible only if its parent(s) are also visible\r\n     */\r\n    public _inheritVisibility = false;\r\n}\r\n\r\n/**\r\n * Class used to store all common mesh properties\r\n */\r\nexport abstract class AbstractMesh extends TransformNode implements IDisposable, ICullable, IGetSetVerticesData {\r\n    /** No occlusion */\r\n    public static OCCLUSION_TYPE_NONE = 0;\r\n    /** Occlusion set to optimistic */\r\n    public static OCCLUSION_TYPE_OPTIMISTIC = 1;\r\n    /** Occlusion set to strict */\r\n    public static OCCLUSION_TYPE_STRICT = 2;\r\n    /** Use an accurate occlusion algorithm */\r\n    public static OCCLUSION_ALGORITHM_TYPE_ACCURATE = 0;\r\n    /** Use a conservative occlusion algorithm */\r\n    public static OCCLUSION_ALGORITHM_TYPE_CONSERVATIVE = 1;\r\n\r\n    /** Default culling strategy : this is an exclusion test and it's the more accurate.\r\n     *  Test order :\r\n     *  Is the bounding sphere outside the frustum ?\r\n     *  If not, are the bounding box vertices outside the frustum ?\r\n     *  It not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_STANDARD = Constants.MESHES_CULLINGSTRATEGY_STANDARD;\r\n    /** Culling strategy : Bounding Sphere Only.\r\n     *  This is an exclusion test. It's faster than the standard strategy because the bounding box is not tested.\r\n     *  It's also less accurate than the standard because some not visible objects can still be selected.\r\n     *  Test : is the bounding sphere outside the frustum ?\r\n     *  If not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY = Constants.MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\r\n    /** Culling strategy : Optimistic Inclusion.\r\n     *  This in an inclusion test first, then the standard exclusion test.\r\n     *  This can be faster when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the standard test when the tested object center is not the frustum but one of its bounding box vertex is still inside.\r\n     *  Anyway, it's as accurate as the standard strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the default culling strategy.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_OPTIMISTIC_INCLUSION = Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION;\r\n    /** Culling strategy : Optimistic Inclusion then Bounding Sphere Only.\r\n     *  This in an inclusion test first, then the bounding sphere only exclusion test.\r\n     *  This can be the fastest test when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the BoundingSphereOnly strategy when the tested object center is not in the frustum but its bounding sphere still intersects it.\r\n     *  It's less accurate than the standard strategy and as accurate as the BoundingSphereOnly strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the Bounding Sphere Only strategy. No Bounding Box is tested here.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY = Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n\r\n    /**\r\n     * No billboard\r\n     */\r\n    public static override get BILLBOARDMODE_NONE(): number {\r\n        return TransformNode.BILLBOARDMODE_NONE;\r\n    }\r\n\r\n    /** Billboard on X axis */\r\n    public static override get BILLBOARDMODE_X(): number {\r\n        return TransformNode.BILLBOARDMODE_X;\r\n    }\r\n\r\n    /** Billboard on Y axis */\r\n    public static override get BILLBOARDMODE_Y(): number {\r\n        return TransformNode.BILLBOARDMODE_Y;\r\n    }\r\n\r\n    /** Billboard on Z axis */\r\n    public static override get BILLBOARDMODE_Z(): number {\r\n        return TransformNode.BILLBOARDMODE_Z;\r\n    }\r\n\r\n    /** Billboard on all axes */\r\n    public static override get BILLBOARDMODE_ALL(): number {\r\n        return TransformNode.BILLBOARDMODE_ALL;\r\n    }\r\n\r\n    /** Billboard on using position instead of orientation */\r\n    public static override get BILLBOARDMODE_USE_POSITION(): number {\r\n        return TransformNode.BILLBOARDMODE_USE_POSITION;\r\n    }\r\n\r\n    // Internal data\r\n    /** @internal */\r\n    public _internalAbstractMeshDataInfo = new _InternalAbstractMeshDataInfo();\r\n\r\n    /** @internal */\r\n    public _waitingMaterialId: Nullable<string> = null;\r\n\r\n    /** @internal */\r\n    public _waitingMorphTargetManagerId: Nullable<number> = null;\r\n\r\n    /**\r\n     * The culling strategy to use to check whether the mesh must be rendered or not.\r\n     * This value can be changed at any time and will be used on the next render mesh selection.\r\n     * The possible values are :\r\n     * - AbstractMesh.CULLINGSTRATEGY_STANDARD\r\n     * - AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY\r\n     * Please read each static variable documentation to get details about the culling process.\r\n     * */\r\n    public cullingStrategy = AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\r\n\r\n    /**\r\n     * Gets the number of facets in the mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#what-is-a-mesh-facet\r\n     */\r\n    public get facetNb(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetNb;\r\n    }\r\n    /**\r\n     * Gets or set the number (integer) of subdivisions per axis in the partitioning space\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#tweaking-the-partitioning\r\n     */\r\n    public get partitioningSubdivisions(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.partitioningSubdivisions;\r\n    }\r\n    public set partitioningSubdivisions(nb: number) {\r\n        this._internalAbstractMeshDataInfo._facetData.partitioningSubdivisions = nb;\r\n    }\r\n    /**\r\n     * The ratio (float) to apply to the bounding box size to set to the partitioning space.\r\n     * Ex : 1.01 (default) the partitioning space is 1% bigger than the bounding box\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#tweaking-the-partitioning\r\n     */\r\n    public get partitioningBBoxRatio(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.partitioningBBoxRatio;\r\n    }\r\n    public set partitioningBBoxRatio(ratio: number) {\r\n        this._internalAbstractMeshDataInfo._facetData.partitioningBBoxRatio = ratio;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the facets must be depth sorted on next call to `updateFacetData()`.\r\n     * Works only for updatable meshes.\r\n     * Doesn't work with multi-materials\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#facet-depth-sort\r\n     */\r\n    public get mustDepthSortFacets(): boolean {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDepthSort;\r\n    }\r\n    public set mustDepthSortFacets(sort: boolean) {\r\n        this._internalAbstractMeshDataInfo._facetData.facetDepthSort = sort;\r\n    }\r\n\r\n    /**\r\n     * The location (Vector3) where the facet depth sort must be computed from.\r\n     * By default, the active camera position.\r\n     * Used only when facet depth sort is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#facet-depth-sort\r\n     */\r\n    public get facetDepthSortFrom(): Vector3 {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDepthSortFrom;\r\n    }\r\n    public set facetDepthSortFrom(location: Vector3) {\r\n        this._internalAbstractMeshDataInfo._facetData.facetDepthSortFrom = location;\r\n    }\r\n\r\n    /** number of collision detection tries. Change this value if not all collisions are detected and handled properly */\r\n    public get collisionRetryCount(): number {\r\n        return this._internalAbstractMeshDataInfo._collisionRetryCount;\r\n    }\r\n    public set collisionRetryCount(retryCount: number) {\r\n        this._internalAbstractMeshDataInfo._collisionRetryCount = retryCount;\r\n    }\r\n    /**\r\n     * gets a boolean indicating if facetData is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#what-is-a-mesh-facet\r\n     */\r\n    public get isFacetDataEnabled(): boolean {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the morph target manager\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/morphTargets\r\n     */\r\n    public get morphTargetManager(): Nullable<MorphTargetManager> {\r\n        return this._internalAbstractMeshDataInfo._morphTargetManager;\r\n    }\r\n\r\n    public set morphTargetManager(value: Nullable<MorphTargetManager>) {\r\n        if (this._internalAbstractMeshDataInfo._morphTargetManager === value) {\r\n            return;\r\n        }\r\n        this._internalAbstractMeshDataInfo._morphTargetManager = value;\r\n        this._syncGeometryWithMorphTargetManager();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the baked vertex animation manager\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/baked_texture_animations\r\n     */\r\n    public get bakedVertexAnimationManager(): Nullable<IBakedVertexAnimationManager> {\r\n        return this._internalAbstractMeshDataInfo._bakedVertexAnimationManager;\r\n    }\r\n\r\n    public set bakedVertexAnimationManager(value: Nullable<IBakedVertexAnimationManager>) {\r\n        if (this._internalAbstractMeshDataInfo._bakedVertexAnimationManager === value) {\r\n            return;\r\n        }\r\n        this._internalAbstractMeshDataInfo._bakedVertexAnimationManager = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _syncGeometryWithMorphTargetManager(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _updateNonUniformScalingState(value: boolean): boolean {\r\n        if (!super._updateNonUniformScalingState(value)) {\r\n            return false;\r\n        }\r\n        this._markSubMeshesAsMiscDirty();\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public get rawBoundingInfo(): Nullable<BoundingInfo> {\r\n        return this._internalAbstractMeshDataInfo._rawBoundingInfo;\r\n    }\r\n    public set rawBoundingInfo(boundingInfo: Nullable<BoundingInfo>) {\r\n        this._internalAbstractMeshDataInfo._rawBoundingInfo = boundingInfo;\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * An event triggered when this mesh collides with another one\r\n     */\r\n    public onCollideObservable = new Observable<AbstractMesh>();\r\n\r\n    /** Set a function to call when this mesh collides with another one */\r\n    public set onCollide(callback: (collidedMesh?: AbstractMesh) => void) {\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver) {\r\n            this.onCollideObservable.remove(this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver);\r\n        }\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver = this.onCollideObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the collision's position changes\r\n     */\r\n    public onCollisionPositionChangeObservable = new Observable<Vector3>();\r\n\r\n    /** Set a function to call when the collision's position changes */\r\n    public set onCollisionPositionChange(callback: () => void) {\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver) {\r\n            this.onCollisionPositionChangeObservable.remove(this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver);\r\n        }\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver = this.onCollisionPositionChangeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when material is changed\r\n     */\r\n    public onMaterialChangedObservable = new Observable<AbstractMesh>();\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets or sets the orientation for POV movement & rotation\r\n     */\r\n    public definedFacingForward = true;\r\n\r\n    /** @internal */\r\n    public _occlusionQuery: Nullable<WebGLQuery | number> = null;\r\n\r\n    /** @internal */\r\n    public _renderingGroup: Nullable<RenderingGroup> = null;\r\n\r\n    /**\r\n     * Gets or sets mesh visibility between 0 and 1 (default is 1)\r\n     */\r\n    public get visibility(): number {\r\n        return this._internalAbstractMeshDataInfo._visibility;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets mesh visibility between 0 and 1 (default is 1)\r\n     */\r\n    public set visibility(value: number) {\r\n        if (this._internalAbstractMeshDataInfo._visibility === value) {\r\n            return;\r\n        }\r\n\r\n        const oldValue = this._internalAbstractMeshDataInfo._visibility;\r\n\r\n        this._internalAbstractMeshDataInfo._visibility = value;\r\n\r\n        if ((oldValue === 1 && value !== 1) || (oldValue !== 1 && value === 1)) {\r\n            this._markSubMeshesAsDirty((defines) => {\r\n                defines.markAsMiscDirty();\r\n                defines.markAsPrePassDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the alpha index used to sort transparent meshes\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering#alpha-index\r\n     */\r\n    public alphaIndex = Number.MAX_VALUE;\r\n\r\n    /**\r\n     * If set to true, a mesh will only be visible only if its parent(s) are also visible (default is false)\r\n     */\r\n    public get inheritVisibility(): boolean {\r\n        return this._internalAbstractMeshDataInfo._inheritVisibility;\r\n    }\r\n\r\n    public set inheritVisibility(value: boolean) {\r\n        this._internalAbstractMeshDataInfo._inheritVisibility = value;\r\n    }\r\n\r\n    private _isVisible = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh is visible (renderable). Default is true\r\n     */\r\n    public get isVisible(): boolean {\r\n        if (!this._isVisible || !this.inheritVisibility || !this._parentNode) {\r\n            return this._isVisible;\r\n        }\r\n        if (this._isVisible) {\r\n            let parent: Nullable<Node> = this._parentNode;\r\n            while (parent) {\r\n                const parentVisible = (parent as AbstractMesh).isVisible;\r\n                if (typeof parentVisible !== \"undefined\") {\r\n                    return parentVisible;\r\n                }\r\n                parent = parent.parent;\r\n            }\r\n        }\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        this._isVisible = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be picked (by scene.pick for instance or through actions). Default is true\r\n     */\r\n    public isPickable = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be near picked (touched by the XR controller or hands). Default is false\r\n     */\r\n    public isNearPickable = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be grabbed. Default is false.\r\n     * Setting this to true, while using the XR near interaction feature, will trigger a pointer event when the mesh is grabbed.\r\n     * Grabbing means that the controller is using the squeeze or main trigger button to grab the mesh.\r\n     * This is different from nearPickable which only triggers the event when the mesh is touched by the controller\r\n     */\r\n    public isNearGrabbable = false;\r\n\r\n    /** Gets or sets a boolean indicating that bounding boxes of subMeshes must be rendered as well (false by default) */\r\n    public showSubMeshesBoundingBox = false;\r\n\r\n    /** Gets or sets a boolean indicating if the mesh must be considered as a ray blocker for lens flares (false by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\r\n     */\r\n    public isBlocker = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that pointer move events must be supported on this mesh (false by default)\r\n     */\r\n    public enablePointerMoveEvents = false;\r\n\r\n    /**\r\n     * Gets or sets the property which disables the test that is checking that the mesh under the pointer is the same than the previous time we tested for it (default: false).\r\n     * Set this property to true if you want thin instances picking to be reported accurately when moving over the mesh.\r\n     * Note that setting this property to true will incur some performance penalties when dealing with pointer events for this mesh so use it sparingly.\r\n     */\r\n    public get pointerOverDisableMeshTesting() {\r\n        return this._internalAbstractMeshDataInfo._pointerOverDisableMeshTesting;\r\n    }\r\n\r\n    public set pointerOverDisableMeshTesting(disable: boolean) {\r\n        this._internalAbstractMeshDataInfo._pointerOverDisableMeshTesting = disable;\r\n    }\r\n\r\n    /**\r\n     * Specifies the rendering group id for this mesh (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering#rendering-groups\r\n     */\r\n    public get renderingGroupId() {\r\n        return this._internalAbstractMeshDataInfo._renderingGroupId;\r\n    }\r\n\r\n    public set renderingGroupId(value: number) {\r\n        this._internalAbstractMeshDataInfo._renderingGroupId = value;\r\n    }\r\n\r\n    /** Gets or sets current material */\r\n    public get material(): Nullable<Material> {\r\n        return this._internalAbstractMeshDataInfo._material;\r\n    }\r\n    public set material(value: Nullable<Material>) {\r\n        this._setMaterial(value);\r\n    }\r\n\r\n    /** @internal */\r\n    protected _setMaterial(value: Nullable<Material>) {\r\n        if (this._internalAbstractMeshDataInfo._material === value) {\r\n            return;\r\n        }\r\n\r\n        // remove from material mesh map id needed\r\n        if (this._internalAbstractMeshDataInfo._material && this._internalAbstractMeshDataInfo._material.meshMap) {\r\n            this._internalAbstractMeshDataInfo._material.meshMap[this.uniqueId] = undefined;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._material = value;\r\n\r\n        if (value && value.meshMap) {\r\n            value.meshMap[this.uniqueId] = this;\r\n        }\r\n\r\n        if (this.onMaterialChangedObservable.hasObservers()) {\r\n            this.onMaterialChangedObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        this.resetDrawCache(undefined, value == null);\r\n        this._unBindEffect();\r\n    }\r\n\r\n    /**\r\n     * Gets the material used to render the mesh in a specific render pass\r\n     * @param renderPassId render pass id\r\n     * @returns material used for the render pass. If no specific material is used for this render pass, undefined is returned (meaning mesh.material is used for this pass)\r\n     */\r\n    public getMaterialForRenderPass(renderPassId: number): Material | undefined {\r\n        return this._internalAbstractMeshDataInfo._materialForRenderPass?.[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Sets the material to be used to render the mesh in a specific render pass\r\n     * @param renderPassId render pass id\r\n     * @param material material to use for this render pass. If undefined is passed, no specific material will be used for this render pass but the regular material will be used instead (mesh.material)\r\n     */\r\n    public setMaterialForRenderPass(renderPassId: number, material?: Material): void {\r\n        this.resetDrawCache(renderPassId);\r\n        if (!this._internalAbstractMeshDataInfo._materialForRenderPass) {\r\n            this._internalAbstractMeshDataInfo._materialForRenderPass = [];\r\n        }\r\n        const currentMaterial = this._internalAbstractMeshDataInfo._materialForRenderPass[renderPassId];\r\n        if (currentMaterial?.meshMap?.[this.uniqueId]) {\r\n            currentMaterial.meshMap[this.uniqueId] = undefined;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._materialForRenderPass[renderPassId] = material;\r\n        if (material && material.meshMap) {\r\n            material.meshMap[this.uniqueId] = this;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh can receive realtime shadows\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\r\n     */\r\n    public get receiveShadows(): boolean {\r\n        return this._internalAbstractMeshDataInfo._receiveShadows;\r\n    }\r\n    public set receiveShadows(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._receiveShadows === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._receiveShadows = value;\r\n        this._markSubMeshesAsLightDirty();\r\n    }\r\n\r\n    /** Defines color to use when rendering outline */\r\n    public outlineColor = Color3.Red();\r\n    /** Define width to use when rendering outline */\r\n    public outlineWidth = 0.02;\r\n\r\n    /** Defines color to use when rendering overlay */\r\n    public overlayColor = Color3.Red();\r\n    /** Defines alpha to use when rendering overlay */\r\n    public overlayAlpha = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh needs to use vertex alpha data to render.\r\n     * This property is misnamed and should be `useVertexAlpha`. Note that the mesh will be rendered\r\n     * with alpha blending when this flag is set even if vertex alpha data is missing from the geometry.\r\n     */\r\n    public get hasVertexAlpha(): boolean {\r\n        return this._internalAbstractMeshDataInfo._hasVertexAlpha;\r\n    }\r\n    public set hasVertexAlpha(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._hasVertexAlpha === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._hasVertexAlpha = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n        this._markSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that this mesh needs to use vertex color data to render (if this kind of vertex data is available in the geometry) */\r\n    public get useVertexColors(): boolean {\r\n        return this._internalAbstractMeshDataInfo._useVertexColors;\r\n    }\r\n    public set useVertexColors(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._useVertexColors === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._useVertexColors = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that bone animations must be computed by the GPU (true by default)\r\n     */\r\n    public get computeBonesUsingShaders(): boolean {\r\n        return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\r\n    }\r\n    public set computeBonesUsingShaders(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** Gets or sets the number of allowed bone influences per vertex (4 by default) */\r\n    public get numBoneInfluencers(): number {\r\n        return this._internalAbstractMeshDataInfo._numBoneInfluencers;\r\n    }\r\n    public set numBoneInfluencers(value: number) {\r\n        if (this._internalAbstractMeshDataInfo._numBoneInfluencers === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._numBoneInfluencers = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that this mesh will allow fog to be rendered on it (true by default) */\r\n    public get applyFog(): boolean {\r\n        return this._internalAbstractMeshDataInfo._applyFog;\r\n    }\r\n    public set applyFog(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._applyFog === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._applyFog = value;\r\n        this._markSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /** When enabled, decompose picking matrices for better precision with large values for mesh position and scling */\r\n    public get enableDistantPicking(): boolean {\r\n        return this._internalAbstractMeshDataInfo._enableDistantPicking;\r\n    }\r\n    public set enableDistantPicking(value: boolean) {\r\n        this._internalAbstractMeshDataInfo._enableDistantPicking = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes selection (true by default) */\r\n    public useOctreeForRenderingSelection = true;\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes picking (true by default) */\r\n    public useOctreeForPicking = true;\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes collision (true by default) */\r\n    public useOctreeForCollisions = true;\r\n    /**\r\n     * Gets or sets the current layer mask (default is 0x0FFFFFFF)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/layerMasksAndMultiCam\r\n     */\r\n    public get layerMask(): number {\r\n        return this._internalAbstractMeshDataInfo._layerMask;\r\n    }\r\n\r\n    public set layerMask(value: number) {\r\n        if (value === this._internalAbstractMeshDataInfo._layerMask) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._layerMask = value;\r\n        this._resyncLightSources();\r\n    }\r\n\r\n    /**\r\n     * True if the mesh must be rendered in any case (this will shortcut the frustum clipping phase)\r\n     */\r\n    public alwaysSelectAsActiveMesh = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the bounding info does not need to be kept in sync (for performance reason)\r\n     */\r\n    public doNotSyncBoundingInfo = false;\r\n\r\n    /**\r\n     * Gets or sets the current action manager\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n     */\r\n    public actionManager: Nullable<AbstractActionManager> = null;\r\n\r\n    /**\r\n     * Gets or sets the ellipsoid used to impersonate this mesh when using collision engine (default is (0.5, 1, 0.5))\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public ellipsoid = new Vector3(0.5, 1, 0.5);\r\n    /**\r\n     * Gets or sets the ellipsoid offset used to impersonate this mesh when using collision engine (default is (0, 0, 0))\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public ellipsoidOffset = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets a collision mask used to mask collisions (default is -1).\r\n     * A collision between A and B will happen if A.collisionGroup & b.collisionMask !== 0\r\n     */\r\n    public get collisionMask(): number {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionMask;\r\n    }\r\n\r\n    public set collisionMask(mask: number) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionMask = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a collision response flag (default is true).\r\n     * when collisionResponse is false, events are still triggered but colliding entity has no response\r\n     * This helps creating trigger volume when user wants collision feedback events but not position/velocity\r\n     * to respond to the collision.\r\n     */\r\n    public get collisionResponse(): boolean {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionResponse;\r\n    }\r\n\r\n    public set collisionResponse(response: boolean) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionResponse = response;\r\n    }\r\n    /**\r\n     * Gets or sets the current collision group mask (-1 by default).\r\n     * A collision between A and B will happen if A.collisionGroup & b.collisionMask !== 0\r\n     */\r\n    public get collisionGroup(): number {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionGroup;\r\n    }\r\n\r\n    public set collisionGroup(mask: number) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionGroup = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets current surrounding meshes (null by default).\r\n     *\r\n     * By default collision detection is tested against every mesh in the scene.\r\n     * It is possible to set surroundingMeshes to a defined list of meshes and then only these specified\r\n     * meshes will be tested for the collision.\r\n     *\r\n     * Note: if set to an empty array no collision will happen when this mesh is moved.\r\n     */\r\n    public get surroundingMeshes(): Nullable<AbstractMesh[]> {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._surroundingMeshes;\r\n    }\r\n\r\n    public set surroundingMeshes(meshes: Nullable<AbstractMesh[]>) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._surroundingMeshes = meshes;\r\n    }\r\n\r\n    // Edges\r\n    /**\r\n     * Defines edge width used when edgesRenderer is enabled\r\n     * @see https://www.babylonjs-playground.com/#10OJSG#13\r\n     */\r\n    public edgesWidth = 1;\r\n    /**\r\n     * Defines edge color used when edgesRenderer is enabled\r\n     * @see https://www.babylonjs-playground.com/#10OJSG#13\r\n     */\r\n    public edgesColor = new Color4(1, 0, 0, 1);\r\n    /** @internal */\r\n    public _edgesRenderer: Nullable<IEdgesRenderer> = null;\r\n\r\n    /** @internal */\r\n    public _masterMesh: Nullable<AbstractMesh> = null;\r\n    protected _boundingInfo: Nullable<BoundingInfo> = null;\r\n    protected _boundingInfoIsDirty = true;\r\n    /** @internal */\r\n    public _renderId = 0;\r\n\r\n    /**\r\n     * Gets or sets the list of subMeshes\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n     */\r\n    public subMeshes: SubMesh[];\r\n\r\n    /** @internal */\r\n    public _intersectionsInProgress = new Array<AbstractMesh>();\r\n\r\n    /** @internal */\r\n    public _unIndexed = false;\r\n\r\n    /** @internal */\r\n    public _lightSources = new Array<Light>();\r\n\r\n    /** Gets the list of lights affecting that mesh */\r\n    public get lightSources(): Light[] {\r\n        return this._lightSources;\r\n    }\r\n\r\n    /** @internal */\r\n    public abstract get _positions(): Nullable<Vector3[]>;\r\n\r\n    // Loading properties\r\n    /** @internal */\r\n    public _waitingData: {\r\n        lods: Nullable<any>;\r\n        actions: Nullable<any>;\r\n        freezeWorldMatrix: Nullable<boolean>;\r\n    } = {\r\n        lods: null,\r\n        actions: null,\r\n        freezeWorldMatrix: null,\r\n    };\r\n\r\n    /** @internal */\r\n    public _bonesTransformMatrices: Nullable<Float32Array> = null;\r\n\r\n    /** @internal */\r\n    public _transformMatrixTexture: Nullable<RawTexture> = null;\r\n\r\n    /**\r\n     * Gets or sets a skeleton to apply skinning transformations\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\r\n     */\r\n    public set skeleton(value: Nullable<Skeleton>) {\r\n        const skeleton = this._internalAbstractMeshDataInfo._skeleton;\r\n        if (skeleton && skeleton.needInitialSkinMatrix) {\r\n            skeleton._unregisterMeshWithPoseMatrix(this);\r\n        }\r\n\r\n        if (value && value.needInitialSkinMatrix) {\r\n            value._registerMeshWithPoseMatrix(this);\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._skeleton = value;\r\n\r\n        if (!this._internalAbstractMeshDataInfo._skeleton) {\r\n            this._bonesTransformMatrices = null;\r\n        }\r\n\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    public get skeleton(): Nullable<Skeleton> {\r\n        return this._internalAbstractMeshDataInfo._skeleton;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the mesh is rebuilt.\r\n     */\r\n    public onRebuildObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * The current mesh uniform buffer.\r\n     * @internal Internal use only.\r\n     */\r\n    public _uniformBuffer: UniformBuffer;\r\n\r\n    // Constructor\r\n\r\n    /**\r\n     * Creates a new AbstractMesh\r\n     * @param name defines the name of the mesh\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Nullable<Scene> = null) {\r\n        super(name, scene, false);\r\n\r\n        scene = this.getScene();\r\n\r\n        scene.addMesh(this);\r\n\r\n        this._resyncLightSources();\r\n\r\n        // Mesh Uniform Buffer.\r\n        this._uniformBuffer = new UniformBuffer(this.getScene().getEngine(), undefined, undefined, name, !this.getScene().getEngine().isWebGPU);\r\n        this._buildUniformLayout();\r\n\r\n        switch (scene.performancePriority) {\r\n            case ScenePerformancePriority.Aggressive:\r\n                this.doNotSyncBoundingInfo = true;\r\n            // eslint-disable-next-line no-fallthrough\r\n            case ScenePerformancePriority.Intermediate:\r\n                this.alwaysSelectAsActiveMesh = true;\r\n                this.isPickable = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"world\", 16);\r\n        this._uniformBuffer.addUniform(\"visibility\", 1);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Transfer the mesh values to its UBO.\r\n     * @param world The world matrix associated with the mesh\r\n     */\r\n    public transferToEffect(world: Matrix): void {\r\n        const ubo = this._uniformBuffer;\r\n\r\n        ubo.updateMatrix(\"world\", world);\r\n        ubo.updateFloat(\"visibility\", this._internalAbstractMeshDataInfo._visibility);\r\n\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh uniform buffer.\r\n     * @returns the uniform buffer of the mesh.\r\n     */\r\n    public getMeshUniformBuffer(): UniformBuffer {\r\n        return this._uniformBuffer;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"AbstractMesh\"\r\n     * @returns \"AbstractMesh\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"AbstractMesh\";\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the current mesh\r\n     * @param fullDetails defines a boolean indicating if full details must be included\r\n     * @returns a string representation of the current mesh\r\n     */\r\n    public override toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name + \", isInstance: \" + (this.getClassName() !== \"InstancedMesh\" ? \"YES\" : \"NO\");\r\n        ret += \", # of submeshes: \" + (this.subMeshes ? this.subMeshes.length : 0);\r\n\r\n        const skeleton = this._internalAbstractMeshDataInfo._skeleton;\r\n        if (skeleton) {\r\n            ret += \", skeleton: \" + skeleton.name;\r\n        }\r\n        if (fullDetails) {\r\n            ret += \", billboard mode: \" + [\"NONE\", \"X\", \"Y\", null, \"Z\", null, null, \"ALL\"][this.billboardMode];\r\n            ret += \", freeze wrld mat: \" + (this._isWorldMatrixFrozen || this._waitingData.freezeWorldMatrix ? \"YES\" : \"NO\");\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected override _getEffectiveParent(): Nullable<Node> {\r\n        if (this._masterMesh && this.billboardMode !== TransformNode.BILLBOARDMODE_NONE) {\r\n            return this._masterMesh;\r\n        }\r\n\r\n        return super._getEffectiveParent();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _getActionManagerForTrigger(trigger?: number, initialCall = true): Nullable<AbstractActionManager> {\r\n        if (this.actionManager && (initialCall || this.actionManager.isRecursive)) {\r\n            if (trigger) {\r\n                if (this.actionManager.hasSpecificTrigger(trigger)) {\r\n                    return this.actionManager;\r\n                }\r\n            } else {\r\n                return this.actionManager;\r\n            }\r\n        }\r\n\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        return this.parent._getActionManagerForTrigger(trigger, false);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _rebuild(dispose = false): void {\r\n        this.onRebuildObservable.notifyObservers(this);\r\n\r\n        if (this._occlusionQuery !== null) {\r\n            this._occlusionQuery = null;\r\n        }\r\n\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh._rebuild();\r\n        }\r\n\r\n        this.resetDrawCache();\r\n    }\r\n\r\n    /** @internal */\r\n    public _resyncLightSources(): void {\r\n        this._lightSources.length = 0;\r\n\r\n        for (const light of this.getScene().lights) {\r\n            if (!light.isEnabled()) {\r\n                continue;\r\n            }\r\n\r\n            if (light.canAffectMesh(this)) {\r\n                this._lightSources.push(light);\r\n            }\r\n        }\r\n\r\n        this._markSubMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _resyncLightSource(light: Light): void {\r\n        const isIn = light.isEnabled() && light.canAffectMesh(this);\r\n\r\n        const index = this._lightSources.indexOf(light);\r\n        let removed = false;\r\n        if (index === -1) {\r\n            if (!isIn) {\r\n                return;\r\n            }\r\n            this._lightSources.push(light);\r\n        } else {\r\n            if (isIn) {\r\n                return;\r\n            }\r\n            removed = true;\r\n            this._lightSources.splice(index, 1);\r\n        }\r\n\r\n        this._markSubMeshesAsLightDirty(removed);\r\n    }\r\n\r\n    /** @internal */\r\n    public _unBindEffect() {\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh.setEffect(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _removeLightSource(light: Light, dispose: boolean): void {\r\n        const index = this._lightSources.indexOf(light);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        this._lightSources.splice(index, 1);\r\n\r\n        this._markSubMeshesAsLightDirty(dispose);\r\n    }\r\n\r\n    private _markSubMeshesAsDirty(func: (defines: MaterialDefines) => void) {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            for (let i = 0; i < subMesh._drawWrappers.length; ++i) {\r\n                const drawWrapper = subMesh._drawWrappers[i];\r\n                if (!drawWrapper || !drawWrapper.defines || !(drawWrapper.defines as MaterialDefines).markAllAsDirty) {\r\n                    continue;\r\n                }\r\n                func(drawWrapper.defines as MaterialDefines);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _markSubMeshesAsLightDirty(dispose: boolean = false) {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsLightDirty(dispose));\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSubMeshesAsAttributesDirty() {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsAttributesDirty());\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSubMeshesAsMiscDirty() {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsMiscDirty());\r\n    }\r\n\r\n    /**\r\n     * Flag the AbstractMesh as dirty (Forcing it to update everything)\r\n     * @param property if set to \"rotation\" the objects rotationQuaternion will be set to null\r\n     * @returns this AbstractMesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public override markAsDirty(property?: string): AbstractMesh {\r\n        this._currentRenderId = Number.MAX_VALUE;\r\n        super.markAsDirty(property);\r\n        this._isDirty = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache for all submeshes of this abstract mesh\r\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\r\n     * @param immediate If true, the effect will be released immediately, otherwise it will be released at the next frame\r\n     */\r\n    public resetDrawCache(passId?: number, immediate = false): void {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh.resetDrawCache(passId, immediate);\r\n        }\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Returns true if the mesh is blocked. Implemented by child classes\r\n     */\r\n    public get isBlocked(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh itself by default. Implemented by child classes\r\n     * @param camera defines the camera to use to pick the right LOD level\r\n     * @returns the currentAbstractMesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getLOD(camera: Camera): Nullable<AbstractMesh> {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns 0 by default. Implemented by child classes\r\n     * @returns an integer\r\n     */\r\n    public getTotalVertices(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the number of indices or zero if the mesh has no geometry.\r\n     */\r\n    public getTotalIndices(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns null by default. Implemented by child classes\r\n     * @returns null\r\n     */\r\n    public getIndices(): Nullable<IndicesArray> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the array of the requested vertex data kind. Implemented by child classes\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns null\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getVerticesData(kind: string): Nullable<FloatArray> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Copies the requested vertex data kind into the given vertex data map. Float data is constructed if the map doesn't have the data.\r\n     * @param kind defines the vertex data kind to use\r\n     * @param vertexData defines the map that stores the resulting data\r\n     */\r\n    public abstract copyVerticesData(kind: string, vertexData: { [kind: string]: Float32Array }): void;\r\n\r\n    /**\r\n     * Sets the vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\r\n     * Note that a new underlying VertexBuffer object is created each call.\r\n     * If the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\r\n     * @param kind defines vertex data kind:\r\n     * * VertexBuffer.PositionKind\r\n     * * VertexBuffer.UVKind\r\n     * * VertexBuffer.UV2Kind\r\n     * * VertexBuffer.UV3Kind\r\n     * * VertexBuffer.UV4Kind\r\n     * * VertexBuffer.UV5Kind\r\n     * * VertexBuffer.UV6Kind\r\n     * * VertexBuffer.ColorKind\r\n     * * VertexBuffer.MatricesIndicesKind\r\n     * * VertexBuffer.MatricesIndicesExtraKind\r\n     * * VertexBuffer.MatricesWeightsKind\r\n     * * VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updatable defines if the data must be flagged as updatable (or static)\r\n     * @param stride defines the vertex stride (size of an entire vertex). Can be null and in this case will be deduced from vertex data kind\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setVerticesData(kind: string, data: FloatArray, updatable?: boolean, stride?: number): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the existing vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, it is simply returned as it is.\r\n     * @param kind defines vertex data kind:\r\n     * * VertexBuffer.PositionKind\r\n     * * VertexBuffer.UVKind\r\n     * * VertexBuffer.UV2Kind\r\n     * * VertexBuffer.UV3Kind\r\n     * * VertexBuffer.UV4Kind\r\n     * * VertexBuffer.UV5Kind\r\n     * * VertexBuffer.UV6Kind\r\n     * * VertexBuffer.ColorKind\r\n     * * VertexBuffer.MatricesIndicesKind\r\n     * * VertexBuffer.MatricesIndicesExtraKind\r\n     * * VertexBuffer.MatricesWeightsKind\r\n     * * VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends If `kind` is `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed\r\n     * @param makeItUnique If true, a new global geometry is created from this data and is set to the mesh\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh indices,\r\n     * If the mesh has no geometry, a new Geometry object is created and set to the mesh.\r\n     * @param indices Expects an array populated with integers or a typed array (Int32Array, Uint32Array, Uint16Array)\r\n     * @param totalVertices Defines the total number of vertices\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number>): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if specific vertex data is present\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns true is data kind is present\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isVerticesDataPresent(kind: string): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh BoundingInfo object or creates a new one and returns if it was undefined.\r\n     * Note that it returns a shallow bounding of the mesh (i.e. it does not include children).\r\n     * However, if the mesh contains thin instances, it will be expanded to include them. If you want the \"raw\" bounding data instead, then use `getRawBoundingInfo()`.\r\n     * To get the full bounding of all children, call `getHierarchyBoundingVectors` instead.\r\n     * @returns a BoundingInfo\r\n     */\r\n    public getBoundingInfo(): BoundingInfo {\r\n        if (this._masterMesh) {\r\n            return this._masterMesh.getBoundingInfo();\r\n        }\r\n\r\n        if (this._boundingInfoIsDirty) {\r\n            this._boundingInfoIsDirty = false;\r\n            // this._boundingInfo is being created if undefined\r\n            this._updateBoundingInfo();\r\n        }\r\n        // cannot be null.\r\n        return this._boundingInfo!;\r\n    }\r\n\r\n    /**\r\n     * Returns the bounding info unnafected by instance data.\r\n     * @returns the bounding info of the mesh unaffected by instance data.\r\n     */\r\n    public getRawBoundingInfo() {\r\n        return this.rawBoundingInfo ?? this.getBoundingInfo();\r\n    }\r\n\r\n    /**\r\n     * Overwrite the current bounding info\r\n     * @param boundingInfo defines the new bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public setBoundingInfo(boundingInfo: BoundingInfo): AbstractMesh {\r\n        this._boundingInfo = boundingInfo;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns true if there is already a bounding info\r\n     */\r\n    public get hasBoundingInfo(): boolean {\r\n        return this._boundingInfo !== null;\r\n    }\r\n\r\n    /**\r\n     * Creates a new bounding info for the mesh\r\n     * @param minimum min vector of the bounding box/sphere\r\n     * @param maximum max vector of the bounding box/sphere\r\n     * @param worldMatrix defines the new world matrix\r\n     * @returns the new bounding info\r\n     */\r\n    public buildBoundingInfo(minimum: DeepImmutable<Vector3>, maximum: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this._boundingInfo = new BoundingInfo(minimum, maximum, worldMatrix);\r\n        return this._boundingInfo;\r\n    }\r\n\r\n    /**\r\n     * Uniformly scales the mesh to fit inside of a unit cube (1 X 1 X 1 units)\r\n     * @param includeDescendants Use the hierarchy's bounding box instead of the mesh's bounding box. Default is false\r\n     * @param ignoreRotation ignore rotation when computing the scale (ie. object will be axis aligned). Default is false\r\n     * @param predicate predicate that is passed in to getHierarchyBoundingVectors when selecting which object should be included when scaling\r\n     * @returns the current mesh\r\n     */\r\n    public override normalizeToUnitCube(includeDescendants = true, ignoreRotation = false, predicate?: Nullable<(node: AbstractMesh) => boolean>): AbstractMesh {\r\n        return <AbstractMesh>super.normalizeToUnitCube(includeDescendants, ignoreRotation, predicate);\r\n    }\r\n\r\n    /** Gets a boolean indicating if this mesh has skinning data and an attached skeleton */\r\n    public get useBones(): boolean {\r\n        return <boolean>(\r\n            (this.skeleton &&\r\n                this.getScene().skeletonsEnabled &&\r\n                this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind) &&\r\n                this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind))\r\n        );\r\n    }\r\n\r\n    /** @internal */\r\n    public _preActivate(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _preActivateForIntermediateRendering(renderId: number): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _activate(renderId: number, intermediateRendering: boolean): boolean {\r\n        this._renderId = renderId;\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _postActivate(): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _freeze() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _unFreeze() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Gets the current world matrix\r\n     * @returns a Matrix\r\n     */\r\n    public override getWorldMatrix(): Matrix {\r\n        if (this._masterMesh && this.billboardMode === TransformNode.BILLBOARDMODE_NONE) {\r\n            return this._masterMesh.getWorldMatrix();\r\n        }\r\n\r\n        return super.getWorldMatrix();\r\n    }\r\n\r\n    /** @internal */\r\n    public override _getWorldMatrixDeterminant(): number {\r\n        if (this._masterMesh) {\r\n            return this._masterMesh._getWorldMatrixDeterminant();\r\n        }\r\n\r\n        return super._getWorldMatrixDeterminant();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh is an instance or a regular mesh\r\n     */\r\n    public get isAnInstance(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has instances\r\n     */\r\n    public get hasInstances(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has thin instances\r\n     */\r\n    public get hasThinInstances(): boolean {\r\n        return false;\r\n    }\r\n\r\n    // ================================== Point of View Movement =================================\r\n\r\n    /**\r\n     * Perform relative position change from the point of view of behind the front of the mesh.\r\n     * This is performed taking into account the meshes current rotation, so you do not have to care.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param amountRight defines the distance on the right axis\r\n     * @param amountUp defines the distance on the up axis\r\n     * @param amountForward defines the distance on the forward axis\r\n     * @returns the current mesh\r\n     */\r\n    public movePOV(amountRight: number, amountUp: number, amountForward: number): AbstractMesh {\r\n        this.position.addInPlace(this.calcMovePOV(amountRight, amountUp, amountForward));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculate relative position change from the point of view of behind the front of the mesh.\r\n     * This is performed taking into account the meshes current rotation, so you do not have to care.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param amountRight defines the distance on the right axis\r\n     * @param amountUp defines the distance on the up axis\r\n     * @param amountForward defines the distance on the forward axis\r\n     * @returns the new displacement vector\r\n     */\r\n    public calcMovePOV(amountRight: number, amountUp: number, amountForward: number): Vector3 {\r\n        const rotMatrix = new Matrix();\r\n        const rotQuaternion = this.rotationQuaternion ? this.rotationQuaternion : Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);\r\n        rotQuaternion.toRotationMatrix(rotMatrix);\r\n\r\n        const translationDelta = Vector3.Zero();\r\n        const defForwardMult = this.definedFacingForward ? -1 : 1;\r\n        Vector3.TransformCoordinatesFromFloatsToRef(amountRight * defForwardMult, amountUp, amountForward * defForwardMult, rotMatrix, translationDelta);\r\n        return translationDelta;\r\n    }\r\n    // ================================== Point of View Rotation =================================\r\n    /**\r\n     * Perform relative rotation change from the point of view of behind the front of the mesh.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param flipBack defines the flip\r\n     * @param twirlClockwise defines the twirl\r\n     * @param tiltRight defines the tilt\r\n     * @returns the current mesh\r\n     */\r\n    public rotatePOV(flipBack: number, twirlClockwise: number, tiltRight: number): AbstractMesh {\r\n        this.rotation.addInPlace(this.calcRotatePOV(flipBack, twirlClockwise, tiltRight));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculate relative rotation change from the point of view of behind the front of the mesh.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param flipBack defines the flip\r\n     * @param twirlClockwise defines the twirl\r\n     * @param tiltRight defines the tilt\r\n     * @returns the new rotation vector\r\n     */\r\n    public calcRotatePOV(flipBack: number, twirlClockwise: number, tiltRight: number): Vector3 {\r\n        const defForwardMult = this.definedFacingForward ? 1 : -1;\r\n        return new Vector3(flipBack * defForwardMult, twirlClockwise, tiltRight * defForwardMult);\r\n    }\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param options defines a set of options for computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public abstract refreshBoundingInfo(options: IMeshDataOptions): AbstractMesh;\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param applySkeletonOrOptions defines whether to apply the skeleton before computing the bounding info or a set of options\r\n     * @param applyMorph defines whether to apply the morph target before computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public abstract refreshBoundingInfo(applySkeletonOrOptions: boolean | IMeshDataOptions, applyMorph: boolean): AbstractMesh;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _refreshBoundingInfo(data: Nullable<FloatArray>, bias: Nullable<Vector2>): void {\r\n        if (data) {\r\n            const extend = extractMinAndMax(data, 0, this.getTotalVertices(), bias);\r\n            if (this._boundingInfo) {\r\n                this._boundingInfo.reConstruct(extend.minimum, extend.maximum);\r\n            } else {\r\n                this._boundingInfo = new BoundingInfo(extend.minimum, extend.maximum);\r\n            }\r\n        }\r\n\r\n        if (this.subMeshes) {\r\n            for (let index = 0; index < this.subMeshes.length; index++) {\r\n                this.subMeshes[index].refreshBoundingInfo(data);\r\n            }\r\n        }\r\n\r\n        this._updateBoundingInfo();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _refreshBoundingInfoDirect(extend: { minimum: Vector3; maximum: Vector3 }): void {\r\n        if (this._boundingInfo) {\r\n            this._boundingInfo.reConstruct(extend.minimum, extend.maximum);\r\n        } else {\r\n            this._boundingInfo = new BoundingInfo(extend.minimum, extend.maximum);\r\n        }\r\n\r\n        if (this.subMeshes) {\r\n            for (let index = 0; index < this.subMeshes.length; index++) {\r\n                this.subMeshes[index].refreshBoundingInfo(null);\r\n            }\r\n        }\r\n\r\n        this._updateBoundingInfo();\r\n    }\r\n\r\n    // This function is only here so we can apply the nativeOverride decorator.\r\n    @nativeOverride.filter(\r\n        (...[data, matricesIndicesData, matricesWeightsData, matricesIndicesExtraData, matricesWeightsExtraData]: Parameters<typeof AbstractMesh._ApplySkeleton>) =>\r\n            !Array.isArray(data) &&\r\n            !Array.isArray(matricesIndicesData) &&\r\n            !Array.isArray(matricesWeightsData) &&\r\n            !Array.isArray(matricesIndicesExtraData) &&\r\n            !Array.isArray(matricesWeightsExtraData)\r\n    )\r\n    private static _ApplySkeleton(\r\n        data: FloatArray,\r\n        kind: string,\r\n        skeletonMatrices: Float32Array,\r\n        matricesIndicesData: FloatArray,\r\n        matricesWeightsData: FloatArray,\r\n        matricesIndicesExtraData: Nullable<FloatArray>,\r\n        matricesWeightsExtraData: Nullable<FloatArray>\r\n    ): void {\r\n        applySkeleton(data, kind, skeletonMatrices, matricesIndicesData, matricesWeightsData, matricesIndicesExtraData, matricesWeightsExtraData);\r\n    }\r\n\r\n    /** @internal */\r\n    public _getData(options: IMeshDataOptions, data: Nullable<FloatArray>, kind: string = VertexBuffer.PositionKind): Nullable<FloatArray> {\r\n        const cache = options.cache;\r\n\r\n        const getVertexData = (kind: string): Nullable<FloatArray> => {\r\n            if (cache) {\r\n                const vertexData = (cache._vertexData ||= {});\r\n                if (!vertexData[kind]) {\r\n                    this.copyVerticesData(kind, vertexData);\r\n                }\r\n                return vertexData[kind];\r\n            }\r\n\r\n            return this.getVerticesData(kind);\r\n        };\r\n\r\n        data ||= getVertexData(kind);\r\n        if (!data) {\r\n            return null;\r\n        }\r\n\r\n        if (cache) {\r\n            if (cache._outputData) {\r\n                cache._outputData.set(data);\r\n            } else {\r\n                cache._outputData = new Float32Array(data);\r\n            }\r\n\r\n            data = cache._outputData;\r\n        } else if ((options.applyMorph && this.morphTargetManager) || (options.applySkeleton && this.skeleton)) {\r\n            data = data.slice();\r\n        }\r\n\r\n        if (options.applyMorph && this.morphTargetManager) {\r\n            applyMorph(data, kind, this.morphTargetManager);\r\n        }\r\n\r\n        if (options.applySkeleton && this.skeleton) {\r\n            const matricesIndicesData = getVertexData(VertexBuffer.MatricesIndicesKind);\r\n            const matricesWeightsData = getVertexData(VertexBuffer.MatricesWeightsKind);\r\n            if (matricesWeightsData && matricesIndicesData) {\r\n                const needExtras = this.numBoneInfluencers > 4;\r\n                const matricesIndicesExtraData = needExtras ? getVertexData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n                const matricesWeightsExtraData = needExtras ? getVertexData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n                const skeletonMatrices = this.skeleton.getTransformMatrices(this);\r\n                AbstractMesh._ApplySkeleton(data, kind, skeletonMatrices, matricesIndicesData, matricesWeightsData, matricesIndicesExtraData, matricesWeightsExtraData);\r\n            }\r\n        }\r\n\r\n        if (options.updatePositionsArray !== false && kind === VertexBuffer.PositionKind) {\r\n            const positions = this._internalAbstractMeshDataInfo._positions || [];\r\n            const previousLength = positions.length;\r\n            positions.length = data.length / 3;\r\n            if (previousLength < positions.length) {\r\n                for (let positionIndex = previousLength; positionIndex < positions.length; positionIndex++) {\r\n                    positions[positionIndex] = new Vector3();\r\n                }\r\n            }\r\n\r\n            for (let positionIndex = 0, dataIndex = 0; positionIndex < positions.length; positionIndex++, dataIndex += 3) {\r\n                positions[positionIndex].copyFromFloats(data[dataIndex], data[dataIndex + 1], data[dataIndex + 2]);\r\n            }\r\n\r\n            this._internalAbstractMeshDataInfo._positions = positions;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Get the normals vertex data and optionally apply skeleton and morphing.\r\n     * @param applySkeleton defines whether to apply the skeleton\r\n     * @param applyMorph  defines whether to apply the morph target\r\n     * @returns the normals data\r\n     */\r\n    public getNormalsData(applySkeleton = false, applyMorph = false): Nullable<FloatArray> {\r\n        return this._getData({ applySkeleton, applyMorph, updatePositionsArray: false }, null, VertexBuffer.NormalKind);\r\n    }\r\n\r\n    /**\r\n     * Get the position vertex data and optionally apply skeleton and morphing.\r\n     * @param applySkeleton defines whether to apply the skeleton\r\n     * @param applyMorph  defines whether to apply the morph target\r\n     * @param data defines the position data to apply the skeleton and morph to\r\n     * @returns the position data\r\n     */\r\n    public getPositionData(applySkeleton: boolean = false, applyMorph: boolean = false, data: Nullable<FloatArray> = null): Nullable<FloatArray> {\r\n        return this._getData({ applySkeleton, applyMorph, updatePositionsArray: false }, data, VertexBuffer.PositionKind);\r\n    }\r\n\r\n    /** @internal */\r\n    public _updateBoundingInfo(): AbstractMesh {\r\n        if (this._boundingInfo) {\r\n            this._boundingInfo.update(this.worldMatrixFromCache);\r\n        } else {\r\n            this._boundingInfo = new BoundingInfo(Vector3.Zero(), Vector3.Zero(), this.worldMatrixFromCache);\r\n        }\r\n        this._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateSubMeshesBoundingInfo(matrix: DeepImmutable<Matrix>): AbstractMesh {\r\n        if (!this.subMeshes) {\r\n            return this;\r\n        }\r\n        const count = this.subMeshes.length;\r\n        for (let subIndex = 0; subIndex < count; subIndex++) {\r\n            const subMesh = this.subMeshes[subIndex];\r\n            if (count > 1 || !subMesh.IsGlobal) {\r\n                subMesh.updateBoundingInfo(matrix);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    protected override _afterComputeWorldMatrix(): void {\r\n        if (this.doNotSyncBoundingInfo) {\r\n            return;\r\n        }\r\n        // Bounding info\r\n        this._boundingInfoIsDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\r\n     * A mesh is in the frustum if its bounding box intersects the frustum\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        return this.getBoundingInfo().isInFrustum(frustumPlanes, this.cullingStrategy);\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is completely in the frustum defined be the passed array of planes.\r\n     * A mesh is completely in the frustum if its bounding box it completely inside the frustum.\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is completely in the frustum planes\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Plane[]): boolean {\r\n        return this.getBoundingInfo().isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * True if the mesh intersects another mesh or a SolidParticle object\r\n     * @param mesh defines a target mesh or SolidParticle to test\r\n     * @param precise Unless the parameter `precise` is set to `true` the intersection is computed according to Axis Aligned Bounding Boxes (AABB), else according to OBB (Oriented BBoxes)\r\n     * @param includeDescendants Can be set to true to test if the mesh defined in parameters intersects with the current mesh or any child meshes\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsMesh(mesh: AbstractMesh | SolidParticle, precise: boolean = false, includeDescendants?: boolean): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n        const otherBoundingInfo = mesh.getBoundingInfo();\r\n\r\n        if (boundingInfo.intersects(otherBoundingInfo, precise)) {\r\n            return true;\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            for (const child of this.getChildMeshes()) {\r\n                if (child.intersectsMesh(mesh, precise, true)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the passed point (Vector3) is inside the mesh bounding box\r\n     * @param point defines the point to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsPoint(point: Vector3): boolean {\r\n        return this.getBoundingInfo().intersectsPoint(point);\r\n    }\r\n\r\n    // Collisions\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh can be used in the collision engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public get checkCollisions(): boolean {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._checkCollisions;\r\n    }\r\n\r\n    public set checkCollisions(collisionEnabled: boolean) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._checkCollisions = collisionEnabled;\r\n    }\r\n\r\n    /**\r\n     * Gets Collider object used to compute collisions (not physics)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public get collider(): Nullable<Collider> {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collider;\r\n    }\r\n\r\n    /**\r\n     * Move the mesh using collision engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     * @param displacement defines the requested displacement vector\r\n     * @returns the current mesh\r\n     */\r\n    public moveWithCollisions(displacement: Vector3): AbstractMesh {\r\n        const globalPosition = this.getAbsolutePosition();\r\n\r\n        globalPosition.addToRef(this.ellipsoidOffset, this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions);\r\n        const coordinator = this.getScene().collisionCoordinator;\r\n\r\n        if (!this._internalAbstractMeshDataInfo._meshCollisionData._collider) {\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._collider = coordinator.createCollider();\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collider._radius = this.ellipsoid;\r\n\r\n        coordinator.getNewPosition(\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions,\r\n            displacement,\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._collider,\r\n            this.collisionRetryCount,\r\n            this,\r\n            this._onCollisionPositionChange,\r\n            this.uniqueId\r\n        );\r\n        return this;\r\n    }\r\n\r\n    private _onCollisionPositionChange = (collisionId: number, newPosition: Vector3, collidedMesh: Nullable<AbstractMesh> = null) => {\r\n        newPosition.subtractToRef(\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions,\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions\r\n        );\r\n\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions.length() > AbstractEngine.CollisionsEpsilon) {\r\n            this.position.addInPlace(this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions);\r\n        }\r\n\r\n        if (collidedMesh) {\r\n            this.onCollideObservable.notifyObservers(collidedMesh);\r\n        }\r\n\r\n        this.onCollisionPositionChangeObservable.notifyObservers(this.position);\r\n    };\r\n\r\n    // Collisions\r\n    /**\r\n     * @internal\r\n     */\r\n    public _collideForSubMesh(subMesh: SubMesh, transformMatrix: Matrix, collider: Collider): AbstractMesh {\r\n        this._generatePointsArray();\r\n\r\n        if (!this._positions) {\r\n            return this;\r\n        }\r\n\r\n        // Transformation\r\n        if (!subMesh._lastColliderWorldVertices || !subMesh._lastColliderTransformMatrix!.equals(transformMatrix)) {\r\n            subMesh._lastColliderTransformMatrix = transformMatrix.clone();\r\n            subMesh._lastColliderWorldVertices = [];\r\n            subMesh._trianglePlanes = [];\r\n            const start = subMesh.verticesStart;\r\n            const end = subMesh.verticesStart + subMesh.verticesCount;\r\n            for (let i = start; i < end; i++) {\r\n                subMesh._lastColliderWorldVertices.push(Vector3.TransformCoordinates(this._positions[i], transformMatrix));\r\n            }\r\n        }\r\n\r\n        // Collide\r\n        collider._collide(\r\n            subMesh._trianglePlanes,\r\n            subMesh._lastColliderWorldVertices,\r\n            <IndicesArray>this.getIndices(),\r\n            subMesh.indexStart,\r\n            subMesh.indexStart + subMesh.indexCount,\r\n            subMesh.verticesStart,\r\n            !!subMesh.getMaterial(),\r\n            this,\r\n            this._shouldConvertRHS(),\r\n            subMesh.getMaterial()?.fillMode === Constants.MATERIAL_TriangleStripDrawMode\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processCollisionsForSubMeshes(collider: Collider, transformMatrix: Matrix): AbstractMesh {\r\n        const subMeshes = this._scene.getCollidingSubMeshCandidates(this, collider);\r\n        const len = subMeshes.length;\r\n\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n\r\n            // Bounding test\r\n            if (len > 1 && !subMesh._checkCollision(collider)) {\r\n                continue;\r\n            }\r\n\r\n            this._collideForSubMesh(subMesh, transformMatrix, collider);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _shouldConvertRHS() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkCollision(collider: Collider): AbstractMesh {\r\n        // Bounding box test\r\n        if (!this.getBoundingInfo()._checkCollision(collider)) {\r\n            return this;\r\n        }\r\n\r\n        // Transformation matrix\r\n        const collisionsScalingMatrix = TmpVectors.Matrix[0];\r\n        const collisionsTransformMatrix = TmpVectors.Matrix[1];\r\n        Matrix.ScalingToRef(1.0 / collider._radius.x, 1.0 / collider._radius.y, 1.0 / collider._radius.z, collisionsScalingMatrix);\r\n        this.worldMatrixFromCache.multiplyToRef(collisionsScalingMatrix, collisionsTransformMatrix);\r\n        this._processCollisionsForSubMeshes(collider, collisionsTransformMatrix);\r\n        return this;\r\n    }\r\n\r\n    // Picking\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the passed Ray intersects with the mesh. A mesh triangle can be picked both from its front and back sides,\r\n     * irrespective of orientation.\r\n     * @param ray defines the ray to use. It should be in the mesh's LOCAL coordinate space.\r\n     * @param fastCheck defines if fast mode (but less precise) must be used (false by default)\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @param onlyBoundingInfo defines a boolean indicating if picking should only happen using bounding info (false by default)\r\n     * @param worldToUse defines the world matrix to use to get the world coordinate of the intersection point\r\n     * @param skipBoundingInfo a boolean indicating if we should skip the bounding info check\r\n     * @returns the picking info\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/mesh_intersect\r\n     */\r\n    public intersects(\r\n        ray: Ray,\r\n        fastCheck?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate,\r\n        onlyBoundingInfo = false,\r\n        worldToUse?: Matrix,\r\n        skipBoundingInfo = false\r\n    ): PickingInfo {\r\n        const pickingInfo = new PickingInfo();\r\n        const className = this.getClassName();\r\n        const intersectionThreshold = className === \"InstancedLinesMesh\" || className === \"LinesMesh\" || className === \"GreasedLineMesh\" ? (this as any).intersectionThreshold : 0;\r\n        const boundingInfo = this.getBoundingInfo();\r\n        if (!this.subMeshes) {\r\n            return pickingInfo;\r\n        }\r\n        if (\r\n            !skipBoundingInfo &&\r\n            (!ray.intersectsSphere(boundingInfo.boundingSphere, intersectionThreshold) || !ray.intersectsBox(boundingInfo.boundingBox, intersectionThreshold))\r\n        ) {\r\n            return pickingInfo;\r\n        }\r\n\r\n        if (onlyBoundingInfo) {\r\n            pickingInfo.hit = skipBoundingInfo ? false : true;\r\n            pickingInfo.pickedMesh = skipBoundingInfo ? null : this;\r\n            pickingInfo.distance = skipBoundingInfo ? 0 : Vector3.Distance(ray.origin, boundingInfo.boundingSphere.center);\r\n            pickingInfo.subMeshId = 0;\r\n            return pickingInfo;\r\n        }\r\n\r\n        if (!this._generatePointsArray()) {\r\n            return pickingInfo;\r\n        }\r\n\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        const subMeshes = this._scene.getIntersectingSubMeshCandidates(this, ray);\r\n        const len: number = subMeshes.length;\r\n\r\n        // Check if all submeshes are using a material that don't allow picking (point/lines rendering)\r\n        // if no submesh can be picked that way, then fallback to BBox picking\r\n        let anySubmeshSupportIntersect = false;\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n            const material = subMesh.getMaterial();\r\n            if (!material) {\r\n                continue;\r\n            }\r\n            if (\r\n                material.fillMode == Constants.MATERIAL_TriangleStripDrawMode ||\r\n                material.fillMode == Constants.MATERIAL_TriangleFillMode ||\r\n                material.fillMode == Constants.MATERIAL_WireFrameFillMode ||\r\n                material.fillMode == Constants.MATERIAL_PointFillMode ||\r\n                material.fillMode == Constants.MATERIAL_LineListDrawMode\r\n            ) {\r\n                anySubmeshSupportIntersect = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // no sub mesh support intersection, fallback to BBox that has already be done\r\n        if (!anySubmeshSupportIntersect) {\r\n            pickingInfo.hit = true;\r\n            pickingInfo.pickedMesh = this;\r\n            pickingInfo.distance = Vector3.Distance(ray.origin, boundingInfo.boundingSphere.center);\r\n            pickingInfo.subMeshId = -1;\r\n            return pickingInfo;\r\n        }\r\n\r\n        // at least 1 submesh supports intersection, keep going\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n\r\n            // Bounding test\r\n            if (len > 1 && !skipBoundingInfo && !subMesh.canIntersects(ray)) {\r\n                continue;\r\n            }\r\n\r\n            const currentIntersectInfo = subMesh.intersects(ray, <Vector3[]>this._positions, <IndicesArray>this.getIndices(), fastCheck, trianglePredicate);\r\n\r\n            if (currentIntersectInfo) {\r\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\r\n                    intersectInfo = currentIntersectInfo;\r\n                    intersectInfo.subMeshId = index;\r\n\r\n                    if (fastCheck) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (intersectInfo) {\r\n            // Get picked point\r\n            const world = worldToUse ?? this.getWorldMatrix();\r\n            const worldOrigin = TmpVectors.Vector3[0];\r\n            const direction = TmpVectors.Vector3[1];\r\n            Vector3.TransformCoordinatesToRef(ray.origin, world, worldOrigin);\r\n            ray.direction.scaleToRef(intersectInfo.distance, direction);\r\n            const worldDirection = Vector3.TransformNormal(direction, world);\r\n            const pickedPoint = worldDirection.addInPlace(worldOrigin);\r\n\r\n            // Return result\r\n            pickingInfo.hit = true;\r\n            pickingInfo.distance = Vector3.Distance(worldOrigin, pickedPoint);\r\n            pickingInfo.pickedPoint = pickedPoint;\r\n            pickingInfo.pickedMesh = this;\r\n            pickingInfo.bu = intersectInfo.bu || 0;\r\n            pickingInfo.bv = intersectInfo.bv || 0;\r\n            pickingInfo.subMeshFaceId = intersectInfo.faceId;\r\n            pickingInfo.faceId = intersectInfo.faceId + subMeshes.data[intersectInfo.subMeshId].indexStart / (this.getClassName().indexOf(\"LinesMesh\") !== -1 ? 2 : 3);\r\n            pickingInfo.subMeshId = intersectInfo.subMeshId;\r\n            return pickingInfo;\r\n        }\r\n\r\n        return pickingInfo;\r\n    }\r\n\r\n    /**\r\n     * Clones the current mesh\r\n     * @param name defines the mesh name\r\n     * @param newParent defines the new mesh parent\r\n     * @param doNotCloneChildren defines a boolean indicating that children must not be cloned (false by default)\r\n     * @returns the new mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public override clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<AbstractMesh> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Disposes all the submeshes of the current mesh\r\n     * @param immediate should dispose the effects immediately or not\r\n     * @returns the current mesh\r\n     */\r\n    public releaseSubMeshes(immediate = false): AbstractMesh {\r\n        if (this.subMeshes) {\r\n            while (this.subMeshes.length) {\r\n                this.subMeshes[0].dispose(immediate);\r\n            }\r\n        } else {\r\n            this.subMeshes = [] as SubMesh[];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this abstract mesh.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        let index: number;\r\n\r\n        const scene = this.getScene();\r\n\r\n        // mesh map release.\r\n        if (this._scene.useMaterialMeshMap) {\r\n            // remove from material mesh map id needed\r\n            if (this._internalAbstractMeshDataInfo._material && this._internalAbstractMeshDataInfo._material.meshMap) {\r\n                this._internalAbstractMeshDataInfo._material.meshMap[this.uniqueId] = undefined;\r\n            }\r\n        }\r\n\r\n        // Smart Array Retainers.\r\n        scene.freeActiveMeshes();\r\n        scene.freeRenderingGroups();\r\n        if (scene.renderingManager.maintainStateBetweenFrames) {\r\n            scene.renderingManager.restoreDispachedFlags();\r\n        }\r\n\r\n        // Action manager\r\n        if (this.actionManager !== undefined && this.actionManager !== null) {\r\n            // If we are the only mesh using the action manager, dispose of the action manager too unless it has opted out from that behavior\r\n            if (this.actionManager.disposeWhenUnowned && !this._scene.meshes.some((m) => m !== this && m.actionManager === this.actionManager)) {\r\n                this.actionManager.dispose();\r\n            }\r\n            this.actionManager = null;\r\n        }\r\n\r\n        // Skeleton\r\n        this._internalAbstractMeshDataInfo._skeleton = null;\r\n\r\n        if (this._transformMatrixTexture) {\r\n            this._transformMatrixTexture.dispose();\r\n            this._transformMatrixTexture = null;\r\n        }\r\n\r\n        // Intersections in progress\r\n        for (index = 0; index < this._intersectionsInProgress.length; index++) {\r\n            const other = this._intersectionsInProgress[index];\r\n\r\n            const pos = other._intersectionsInProgress.indexOf(this);\r\n            other._intersectionsInProgress.splice(pos, 1);\r\n        }\r\n\r\n        this._intersectionsInProgress.length = 0;\r\n\r\n        // Lights\r\n        const lights = scene.lights;\r\n\r\n        lights.forEach((light: Light) => {\r\n            let meshIndex = light.includedOnlyMeshes.indexOf(this);\r\n\r\n            if (meshIndex !== -1) {\r\n                light.includedOnlyMeshes.splice(meshIndex, 1);\r\n            }\r\n\r\n            meshIndex = light.excludedMeshes.indexOf(this);\r\n\r\n            if (meshIndex !== -1) {\r\n                light.excludedMeshes.splice(meshIndex, 1);\r\n            }\r\n\r\n            // Shadow generators\r\n            const generators = light.getShadowGenerators();\r\n            if (generators) {\r\n                const iterator = generators.values();\r\n                for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                    const generator = key.value;\r\n                    const shadowMap = generator.getShadowMap();\r\n\r\n                    if (shadowMap && shadowMap.renderList) {\r\n                        meshIndex = shadowMap.renderList.indexOf(this);\r\n\r\n                        if (meshIndex !== -1) {\r\n                            shadowMap.renderList.splice(meshIndex, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // SubMeshes\r\n        if (this.getClassName() !== \"InstancedMesh\" || this.getClassName() !== \"InstancedLinesMesh\") {\r\n            this.releaseSubMeshes(true);\r\n        }\r\n\r\n        // Query\r\n        const engine = scene.getEngine();\r\n        if (this._occlusionQuery !== null) {\r\n            this.isOcclusionQueryInProgress = false;\r\n            engine.deleteQuery(this._occlusionQuery);\r\n            this._occlusionQuery = null;\r\n        }\r\n\r\n        // Engine\r\n        engine.wipeCaches();\r\n\r\n        // Remove from scene\r\n        scene.removeMesh(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.meshes.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.meshes.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        if (disposeMaterialAndTextures) {\r\n            if (this.material) {\r\n                if (this.material.getClassName() === \"MultiMaterial\") {\r\n                    this.material.dispose(false, true, true);\r\n                } else {\r\n                    this.material.dispose(false, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!doNotRecurse) {\r\n            // Particles\r\n            for (index = 0; index < scene.particleSystems.length; index++) {\r\n                if (scene.particleSystems[index].emitter === this) {\r\n                    scene.particleSystems[index].dispose();\r\n                    index--;\r\n                }\r\n            }\r\n        }\r\n\r\n        // facet data\r\n        if (this._internalAbstractMeshDataInfo._facetData.facetDataEnabled) {\r\n            this.disableFacetData();\r\n        }\r\n\r\n        this._uniformBuffer.dispose();\r\n\r\n        this.onAfterWorldMatrixUpdateObservable.clear();\r\n        this.onCollideObservable.clear();\r\n        this.onCollisionPositionChangeObservable.clear();\r\n        this.onRebuildObservable.clear();\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    // Facet data\r\n    /** @internal */\r\n    private _initFacetData(): AbstractMesh {\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!data.facetNormals) {\r\n            data.facetNormals = [] as Vector3[];\r\n        }\r\n        if (!data.facetPositions) {\r\n            data.facetPositions = [] as Vector3[];\r\n        }\r\n        if (!data.facetPartitioning) {\r\n            data.facetPartitioning = new Array<number[]>();\r\n        }\r\n        data.facetNb = ((<IndicesArray>this.getIndices()).length / 3) | 0;\r\n        data.partitioningSubdivisions = data.partitioningSubdivisions ? data.partitioningSubdivisions : 10; // default nb of partitioning subdivisions = 10\r\n        data.partitioningBBoxRatio = data.partitioningBBoxRatio ? data.partitioningBBoxRatio : 1.01; // default ratio 1.01 = the partitioning is 1% bigger than the bounding box\r\n        for (let f = 0; f < data.facetNb; f++) {\r\n            data.facetNormals[f] = Vector3.Zero();\r\n            data.facetPositions[f] = Vector3.Zero();\r\n        }\r\n        data.facetDataEnabled = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the mesh facetData arrays and the internal partitioning when the mesh is morphed or updated.\r\n     * This method can be called within the render loop.\r\n     * You don't need to call this method by yourself in the render loop when you update/morph a mesh with the methods CreateXXX() as they automatically manage this computation\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public updateFacetData(): AbstractMesh {\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!data.facetDataEnabled) {\r\n            this._initFacetData();\r\n        }\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        const indices = this.getIndices();\r\n        const normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n        const bInfo = this.getBoundingInfo();\r\n\r\n        if (data.facetDepthSort && !data.facetDepthSortEnabled) {\r\n            // init arrays, matrix and sort function on first call\r\n            data.facetDepthSortEnabled = true;\r\n            if (indices instanceof Uint16Array) {\r\n                data.depthSortedIndices = new Uint16Array(indices!);\r\n            } else if (indices instanceof Uint32Array) {\r\n                data.depthSortedIndices = new Uint32Array(indices!);\r\n            } else {\r\n                let needs32bits = false;\r\n                for (let i = 0; i < indices!.length; i++) {\r\n                    if (indices![i] > 65535) {\r\n                        needs32bits = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (needs32bits) {\r\n                    data.depthSortedIndices = new Uint32Array(indices!);\r\n                } else {\r\n                    data.depthSortedIndices = new Uint16Array(indices!);\r\n                }\r\n            }\r\n            data.facetDepthSortFunction = function (f1, f2) {\r\n                return f2.sqDistance - f1.sqDistance;\r\n            };\r\n            if (!data.facetDepthSortFrom) {\r\n                const camera = this.getScene().activeCamera;\r\n                data.facetDepthSortFrom = camera ? camera.position : Vector3.Zero();\r\n            }\r\n            data.depthSortedFacets = [];\r\n            for (let f = 0; f < data.facetNb; f++) {\r\n                const depthSortedFacet = { ind: f * 3, sqDistance: 0.0 };\r\n                data.depthSortedFacets.push(depthSortedFacet);\r\n            }\r\n            data.invertedMatrix = Matrix.Identity();\r\n            data.facetDepthSortOrigin = Vector3.Zero();\r\n        }\r\n\r\n        data.bbSize.x = bInfo.maximum.x - bInfo.minimum.x > Epsilon ? bInfo.maximum.x - bInfo.minimum.x : Epsilon;\r\n        data.bbSize.y = bInfo.maximum.y - bInfo.minimum.y > Epsilon ? bInfo.maximum.y - bInfo.minimum.y : Epsilon;\r\n        data.bbSize.z = bInfo.maximum.z - bInfo.minimum.z > Epsilon ? bInfo.maximum.z - bInfo.minimum.z : Epsilon;\r\n        let bbSizeMax = data.bbSize.x > data.bbSize.y ? data.bbSize.x : data.bbSize.y;\r\n        bbSizeMax = bbSizeMax > data.bbSize.z ? bbSizeMax : data.bbSize.z;\r\n        data.subDiv.max = data.partitioningSubdivisions;\r\n        data.subDiv.X = Math.floor((data.subDiv.max * data.bbSize.x) / bbSizeMax); // adjust the number of subdivisions per axis\r\n        data.subDiv.Y = Math.floor((data.subDiv.max * data.bbSize.y) / bbSizeMax); // according to each bbox size per axis\r\n        data.subDiv.Z = Math.floor((data.subDiv.max * data.bbSize.z) / bbSizeMax);\r\n        data.subDiv.X = data.subDiv.X < 1 ? 1 : data.subDiv.X; // at least one subdivision\r\n        data.subDiv.Y = data.subDiv.Y < 1 ? 1 : data.subDiv.Y;\r\n        data.subDiv.Z = data.subDiv.Z < 1 ? 1 : data.subDiv.Z;\r\n        // set the parameters for ComputeNormals()\r\n        data.facetParameters.facetNormals = this.getFacetLocalNormals();\r\n        data.facetParameters.facetPositions = this.getFacetLocalPositions();\r\n        data.facetParameters.facetPartitioning = this.getFacetLocalPartitioning();\r\n        data.facetParameters.bInfo = bInfo;\r\n        data.facetParameters.bbSize = data.bbSize;\r\n        data.facetParameters.subDiv = data.subDiv;\r\n        data.facetParameters.ratio = this.partitioningBBoxRatio;\r\n        data.facetParameters.depthSort = data.facetDepthSort;\r\n        if (data.facetDepthSort && data.facetDepthSortEnabled) {\r\n            this.computeWorldMatrix(true);\r\n            this._worldMatrix.invertToRef(data.invertedMatrix);\r\n            Vector3.TransformCoordinatesToRef(data.facetDepthSortFrom, data.invertedMatrix, data.facetDepthSortOrigin);\r\n            data.facetParameters.distanceTo = data.facetDepthSortOrigin;\r\n        }\r\n        data.facetParameters.depthSortedFacets = data.depthSortedFacets;\r\n        if (normals) {\r\n            VertexData.ComputeNormals(positions, indices, normals, data.facetParameters);\r\n        }\r\n\r\n        if (data.facetDepthSort && data.facetDepthSortEnabled) {\r\n            data.depthSortedFacets.sort(data.facetDepthSortFunction);\r\n            const l = (data.depthSortedIndices.length / 3) | 0;\r\n            for (let f = 0; f < l; f++) {\r\n                const sind = data.depthSortedFacets[f].ind;\r\n                data.depthSortedIndices[f * 3] = indices![sind];\r\n                data.depthSortedIndices[f * 3 + 1] = indices![sind + 1];\r\n                data.depthSortedIndices[f * 3 + 2] = indices![sind + 2];\r\n            }\r\n            this.updateIndices(data.depthSortedIndices, undefined, true);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalNormals array.\r\n     * The normals are expressed in the mesh local spac\r\n     * @returns an array of Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetLocalNormals(): Vector3[] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!facetData.facetNormals) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetNormals;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalPositions array.\r\n     * The facet positions are expressed in the mesh local space\r\n     * @returns an array of Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetLocalPositions(): Vector3[] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!facetData.facetPositions) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetPositions;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalPartitioning array\r\n     * @returns an array of array of numbers\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetLocalPartitioning(): number[][] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n\r\n        if (!facetData.facetPartitioning) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetPartitioning;\r\n    }\r\n\r\n    /**\r\n     * Returns the i-th facet position in the world system.\r\n     * This method allocates a new Vector3 per call\r\n     * @param i defines the facet index\r\n     * @returns a new Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetPosition(i: number): Vector3 {\r\n        const pos = Vector3.Zero();\r\n        this.getFacetPositionToRef(i, pos);\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * Sets the reference Vector3 with the i-th facet position in the world system\r\n     * @param i defines the facet index\r\n     * @param ref defines the target vector\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetPositionToRef(i: number, ref: Vector3): AbstractMesh {\r\n        const localPos = this.getFacetLocalPositions()[i];\r\n        const world = this.getWorldMatrix();\r\n        Vector3.TransformCoordinatesToRef(localPos, world, ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the i-th facet normal in the world system.\r\n     * This method allocates a new Vector3 per call\r\n     * @param i defines the facet index\r\n     * @returns a new Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetNormal(i: number): Vector3 {\r\n        const norm = Vector3.Zero();\r\n        this.getFacetNormalToRef(i, norm);\r\n        return norm;\r\n    }\r\n\r\n    /**\r\n     * Sets the reference Vector3 with the i-th facet normal in the world system\r\n     * @param i defines the facet index\r\n     * @param ref defines the target vector\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetNormalToRef(i: number, ref: Vector3) {\r\n        const localNorm = this.getFacetLocalNormals()[i];\r\n        Vector3.TransformNormalToRef(localNorm, this.getWorldMatrix(), ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the facets (in an array) in the same partitioning block than the one the passed coordinates are located (expressed in the mesh local system)\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @returns the array of facet indexes\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetsAtLocalCoordinates(x: number, y: number, z: number): Nullable<number[]> {\r\n        const bInfo = this.getBoundingInfo();\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n\r\n        const ox = Math.floor(((x - bInfo.minimum.x * data.partitioningBBoxRatio) * data.subDiv.X * data.partitioningBBoxRatio) / data.bbSize.x);\r\n        const oy = Math.floor(((y - bInfo.minimum.y * data.partitioningBBoxRatio) * data.subDiv.Y * data.partitioningBBoxRatio) / data.bbSize.y);\r\n        const oz = Math.floor(((z - bInfo.minimum.z * data.partitioningBBoxRatio) * data.subDiv.Z * data.partitioningBBoxRatio) / data.bbSize.z);\r\n        if (ox < 0 || ox > data.subDiv.max || oy < 0 || oy > data.subDiv.max || oz < 0 || oz > data.subDiv.max) {\r\n            return null;\r\n        }\r\n        return data.facetPartitioning[ox + data.subDiv.max * oy + data.subDiv.max * data.subDiv.max * oz];\r\n    }\r\n\r\n    /**\r\n     * Returns the closest mesh facet index at (x,y,z) World coordinates, null if not found\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @param projected sets as the (x,y,z) world projection on the facet\r\n     * @param checkFace if true (default false), only the facet \"facing\" to (x,y,z) or only the ones \"turning their backs\", according to the parameter \"facing\" are returned\r\n     * @param facing if facing and checkFace are true, only the facet \"facing\" to (x, y, z) are returned : positive dot (x, y, z) * facet position. If facing si false and checkFace is true, only the facet \"turning their backs\" to (x, y, z) are returned : negative dot (x, y, z) * facet position\r\n     * @returns the face index if found (or null instead)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getClosestFacetAtCoordinates(x: number, y: number, z: number, projected?: Vector3, checkFace: boolean = false, facing: boolean = true): Nullable<number> {\r\n        const world = this.getWorldMatrix();\r\n        const invMat = TmpVectors.Matrix[5];\r\n        world.invertToRef(invMat);\r\n        const invVect = TmpVectors.Vector3[8];\r\n        Vector3.TransformCoordinatesFromFloatsToRef(x, y, z, invMat, invVect); // transform (x,y,z) to coordinates in the mesh local space\r\n        const closest = this.getClosestFacetAtLocalCoordinates(invVect.x, invVect.y, invVect.z, projected, checkFace, facing);\r\n        if (projected) {\r\n            // transform the local computed projected vector to world coordinates\r\n            Vector3.TransformCoordinatesFromFloatsToRef(projected.x, projected.y, projected.z, world, projected);\r\n        }\r\n        return closest;\r\n    }\r\n\r\n    /**\r\n     * Returns the closest mesh facet index at (x,y,z) local coordinates, null if not found\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @param projected sets as the (x,y,z) local projection on the facet\r\n     * @param checkFace if true (default false), only the facet \"facing\" to (x,y,z) or only the ones \"turning their backs\", according to the parameter \"facing\" are returned\r\n     * @param facing if facing and checkFace are true, only the facet \"facing\" to (x, y, z) are returned : positive dot (x, y, z) * facet position. If facing si false and checkFace is true, only the facet \"turning their backs\" to (x, y, z) are returned : negative dot (x, y, z) * facet position\r\n     * @returns the face index if found (or null instead)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getClosestFacetAtLocalCoordinates(x: number, y: number, z: number, projected?: Vector3, checkFace: boolean = false, facing: boolean = true): Nullable<number> {\r\n        let closest = null;\r\n        let tmpx = 0.0;\r\n        let tmpy = 0.0;\r\n        let tmpz = 0.0;\r\n        let d = 0.0; // tmp dot facet normal * facet position\r\n        let t0 = 0.0;\r\n        let projx = 0.0;\r\n        let projy = 0.0;\r\n        let projz = 0.0;\r\n        // Get all the facets in the same partitioning block than (x, y, z)\r\n        const facetPositions = this.getFacetLocalPositions();\r\n        const facetNormals = this.getFacetLocalNormals();\r\n        const facetsInBlock = this.getFacetsAtLocalCoordinates(x, y, z);\r\n        if (!facetsInBlock) {\r\n            return null;\r\n        }\r\n        // Get the closest facet to (x, y, z)\r\n        let shortest = Number.MAX_VALUE; // init distance vars\r\n        let tmpDistance = shortest;\r\n        let fib; // current facet in the block\r\n        let norm; // current facet normal\r\n        let p0; // current facet barycenter position\r\n        // loop on all the facets in the current partitioning block\r\n        for (let idx = 0; idx < facetsInBlock.length; idx++) {\r\n            fib = facetsInBlock[idx];\r\n            norm = facetNormals[fib];\r\n            p0 = facetPositions[fib];\r\n\r\n            d = (x - p0.x) * norm.x + (y - p0.y) * norm.y + (z - p0.z) * norm.z;\r\n            if (!checkFace || (checkFace && facing && d >= 0.0) || (checkFace && !facing && d <= 0.0)) {\r\n                // compute (x,y,z) projection on the facet = (projx, projy, projz)\r\n                d = norm.x * p0.x + norm.y * p0.y + norm.z * p0.z;\r\n                t0 = -(norm.x * x + norm.y * y + norm.z * z - d) / (norm.x * norm.x + norm.y * norm.y + norm.z * norm.z);\r\n                projx = x + norm.x * t0;\r\n                projy = y + norm.y * t0;\r\n                projz = z + norm.z * t0;\r\n\r\n                tmpx = projx - x;\r\n                tmpy = projy - y;\r\n                tmpz = projz - z;\r\n                tmpDistance = tmpx * tmpx + tmpy * tmpy + tmpz * tmpz; // compute length between (x, y, z) and its projection on the facet\r\n                if (tmpDistance < shortest) {\r\n                    // just keep the closest facet to (x, y, z)\r\n                    shortest = tmpDistance;\r\n                    closest = fib;\r\n                    if (projected) {\r\n                        projected.x = projx;\r\n                        projected.y = projy;\r\n                        projected.z = projz;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return closest;\r\n    }\r\n\r\n    /**\r\n     * Returns the object \"parameter\" set with all the expected parameters for facetData computation by ComputeNormals()\r\n     * @returns the parameters\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetDataParameters(): any {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetParameters;\r\n    }\r\n\r\n    /**\r\n     * Disables the feature FacetData and frees the related memory\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public disableFacetData(): AbstractMesh {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (facetData.facetDataEnabled) {\r\n            facetData.facetDataEnabled = false;\r\n            facetData.facetPositions = [] as Vector3[];\r\n            facetData.facetNormals = [] as Vector3[];\r\n            facetData.facetPartitioning = new Array<number[]>();\r\n            facetData.facetParameters = {};\r\n            facetData.depthSortedIndices = new Uint32Array(0);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the AbstractMesh indices array\r\n     * @param indices defines the data source\r\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates new normals data for the mesh\r\n     * @param updatable defines if the normal vertex buffer must be flagged as updatable\r\n     * @returns the current mesh\r\n     */\r\n    public createNormals(updatable: boolean): AbstractMesh {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        const indices = this.getIndices();\r\n        let normals: FloatArray;\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            normals = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n        } else {\r\n            normals = [];\r\n        }\r\n\r\n        VertexData.ComputeNormals(positions, indices, normals, { useRightHandedSystem: this.getScene().useRightHandedSystem });\r\n        this.setVerticesData(VertexBuffer.NormalKind, normals, updatable);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Optimize the indices order so that we keep the faces with similar indices together\r\n     * @returns the current mesh\r\n     */\r\n    public async optimizeIndicesAsync(): Promise<AbstractMesh> {\r\n        const indices = this.getIndices();\r\n\r\n        if (!indices) {\r\n            return this;\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        const { OptimizeIndices } = await import(\"./mesh.vertexData.functions\");\r\n\r\n        OptimizeIndices(indices);\r\n\r\n        this.setIndices(indices, this.getTotalVertices());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Align the mesh with a normal\r\n     * @param normal defines the normal to use\r\n     * @param upDirection can be used to redefined the up vector to use (will use the (0, 1, 0) by default)\r\n     * @returns the current mesh\r\n     */\r\n    public alignWithNormal(normal: Vector3, upDirection?: Vector3): AbstractMesh {\r\n        if (!upDirection) {\r\n            upDirection = Axis.Y;\r\n        }\r\n\r\n        const axisX = TmpVectors.Vector3[0];\r\n        const axisZ = TmpVectors.Vector3[1];\r\n        Vector3.CrossToRef(upDirection, normal, axisZ);\r\n        Vector3.CrossToRef(normal, axisZ, axisX);\r\n\r\n        if (this.rotationQuaternion) {\r\n            Quaternion.RotationQuaternionFromAxisToRef(axisX, normal, axisZ, this.rotationQuaternion);\r\n        } else {\r\n            Vector3.RotationFromAxisToRef(axisX, normal, axisZ, this.rotation);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkOcclusionQuery(): boolean {\r\n        // Will be replaced by correct code if Occlusion queries are referenced\r\n        return false;\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Disables the mesh edge rendering mode\r\n     * @returns the currentAbstractMesh\r\n     */\r\n    disableEdgesRendering(): AbstractMesh {\r\n        throw _WarnImport(\"EdgesRenderer\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Enables the edge rendering mode on the mesh.\r\n     * This mode makes the mesh edges visible\r\n     * @param epsilon defines the maximal distance between two angles to detect a face\r\n     * @param checkVerticesInsteadOfIndices indicates that we should check vertex list directly instead of faces\r\n     * @param options options to the edge renderer\r\n     * @returns the currentAbstractMesh\r\n     * @see https://www.babylonjs-playground.com/#19O9TU#0\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    enableEdgesRendering(epsilon?: number, checkVerticesInsteadOfIndices?: boolean, options?: IEdgesRendererOptions): AbstractMesh {\r\n        throw _WarnImport(\"EdgesRenderer\");\r\n    }\r\n\r\n    /**\r\n     * This function returns all of the particle systems in the scene that use the mesh as an emitter.\r\n     * @returns an array of particle systems in the scene that use the mesh as an emitter\r\n     */\r\n    public getConnectedParticleSystems(): IParticleSystem[] {\r\n        return this._scene.particleSystems.filter((particleSystem) => particleSystem.emitter === this);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.AbstractMesh\", AbstractMesh);\r\n", "import { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { serialize } from \"../Misc/decorators\";\r\nimport type { IStencilState } from \"../States/IStencilState\";\r\n\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * Class that holds the different stencil states of a material\r\n * Usage example: https://playground.babylonjs.com/#CW5PRI#10\r\n */\r\nexport class MaterialStencilState implements IStencilState {\r\n    /**\r\n     * Creates a material stencil state instance\r\n     */\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Resets all the stencil states to default values\r\n     */\r\n    public reset() {\r\n        this.enabled = false;\r\n        this.mask = 0xff;\r\n\r\n        this.func = Constants.ALWAYS;\r\n        this.funcRef = 1;\r\n        this.funcMask = 0xff;\r\n\r\n        this.opStencilFail = Constants.KEEP;\r\n        this.opDepthFail = Constants.KEEP;\r\n        this.opStencilDepthPass = Constants.REPLACE;\r\n    }\r\n\r\n    private _func: number;\r\n    /**\r\n     * Gets or sets the stencil function\r\n     */\r\n    @serialize()\r\n    public get func(): number {\r\n        return this._func;\r\n    }\r\n\r\n    public set func(value: number) {\r\n        this._func = value;\r\n    }\r\n\r\n    private _funcRef: number;\r\n    /**\r\n     * Gets or sets the stencil function reference\r\n     */\r\n    @serialize()\r\n    public get funcRef(): number {\r\n        return this._funcRef;\r\n    }\r\n\r\n    public set funcRef(value: number) {\r\n        this._funcRef = value;\r\n    }\r\n\r\n    private _funcMask: number;\r\n    /**\r\n     * Gets or sets the stencil function mask\r\n     */\r\n    @serialize()\r\n    public get funcMask(): number {\r\n        return this._funcMask;\r\n    }\r\n\r\n    public set funcMask(value: number) {\r\n        this._funcMask = value;\r\n    }\r\n\r\n    private _opStencilFail: number;\r\n    /**\r\n     * Gets or sets the operation when the stencil test fails\r\n     */\r\n    @serialize()\r\n    public get opStencilFail(): number {\r\n        return this._opStencilFail;\r\n    }\r\n\r\n    public set opStencilFail(value: number) {\r\n        this._opStencilFail = value;\r\n    }\r\n\r\n    private _opDepthFail: number;\r\n    /**\r\n     * Gets or sets the operation when the depth test fails\r\n     */\r\n    @serialize()\r\n    public get opDepthFail(): number {\r\n        return this._opDepthFail;\r\n    }\r\n\r\n    public set opDepthFail(value: number) {\r\n        this._opDepthFail = value;\r\n    }\r\n\r\n    private _opStencilDepthPass: number;\r\n    /**\r\n     * Gets or sets the operation when the stencil+depth test succeeds\r\n     */\r\n    @serialize()\r\n    public get opStencilDepthPass(): number {\r\n        return this._opStencilDepthPass;\r\n    }\r\n\r\n    public set opStencilDepthPass(value: number) {\r\n        this._opStencilDepthPass = value;\r\n    }\r\n\r\n    private _mask: number;\r\n    /**\r\n     * Gets or sets the stencil mask\r\n     */\r\n    @serialize()\r\n    public get mask(): number {\r\n        return this._mask;\r\n    }\r\n\r\n    public set mask(value: number) {\r\n        this._mask = value;\r\n    }\r\n\r\n    private _enabled: boolean;\r\n    /**\r\n     * Enables or disables the stencil test\r\n     */\r\n    @serialize()\r\n    public get enabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public set enabled(value: boolean) {\r\n        this._enabled = value;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name, useful for serialization or dynamic coding.\r\n     * @returns \"MaterialStencilState\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"MaterialStencilState\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current configuration into another one.\r\n     * @param stencilState defines stencil state where to copy the info\r\n     */\r\n    public copyTo(stencilState: MaterialStencilState): void {\r\n        SerializationHelper.Clone(() => stencilState, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this stencil configuration.\r\n     * @returns - An object with the serialized config.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a stencil state configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { Effect } from \"./effect\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { MaterialDefines } from \"./materialDefines\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { IInspectable } from \"../Misc/iInspectable\";\r\nimport { Plane } from \"../Maths/math.plane\";\r\nimport type { ShadowDepthWrapper } from \"./shadowDepthWrapper\";\r\nimport type { IMaterialContext } from \"../Engines/IMaterialContext\";\r\nimport { DrawWrapper } from \"./drawWrapper\";\r\nimport { MaterialStencilState } from \"./materialStencilState\";\r\nimport { ScenePerformancePriority } from \"../scene\";\r\nimport type { Scene } from \"../scene\";\r\nimport type {\r\n    MaterialPluginDisposed,\r\n    MaterialPluginIsReadyForSubMesh,\r\n    MaterialPluginGetDefineNames,\r\n    MaterialPluginBindForSubMesh,\r\n    MaterialPluginGetActiveTextures,\r\n    MaterialPluginHasTexture,\r\n    MaterialPluginGetAnimatables,\r\n    MaterialPluginPrepareDefines,\r\n    MaterialPluginPrepareEffect,\r\n    MaterialPluginPrepareUniformBuffer,\r\n    MaterialPluginCreated,\r\n    MaterialPluginFillRenderTargetTextures,\r\n    MaterialPluginHasRenderTargetTextures,\r\n    MaterialPluginHardBindForSubMesh,\r\n} from \"./materialPluginEvent\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\nimport type { ShaderCustomProcessingFunction } from \"../Engines/Processors/shaderProcessingOptions\";\r\nimport type { IClipPlanesHolder } from \"../Misc/interfaces/iClipPlanesHolder\";\r\n\r\nimport type { PrePassRenderer } from \"../Rendering/prePassRenderer\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Animation } from \"../Animations/animation\";\r\nimport type { InstancedMesh } from \"../Meshes/instancedMesh\";\r\nimport { BindSceneUniformBuffer } from \"./materialHelper.functions\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { ShaderLanguage } from \"./shaderLanguage\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\n\r\ndeclare let BABYLON: any;\r\n\r\n/**\r\n * Options for compiling materials.\r\n */\r\nexport interface IMaterialCompilationOptions {\r\n    /**\r\n     * Defines whether clip planes are enabled.\r\n     */\r\n    clipPlane: boolean;\r\n\r\n    /**\r\n     * Defines whether instances are enabled.\r\n     */\r\n    useInstances: boolean;\r\n}\r\n\r\n/**\r\n * Options passed when calling customShaderNameResolve\r\n */\r\nexport interface ICustomShaderNameResolveOptions {\r\n    /**\r\n     * If provided, will be called two times with the vertex and fragment code so that this code can be updated before it is compiled by the GPU\r\n     */\r\n    processFinalCode?: Nullable<ShaderCustomProcessingFunction>;\r\n}\r\n\r\n/**\r\n * Base class for the main features of a material in Babylon.js\r\n */\r\nexport class Material implements IAnimatable, IClipPlanesHolder {\r\n    /**\r\n     * Returns the triangle fill mode\r\n     */\r\n    public static readonly TriangleFillMode = Constants.MATERIAL_TriangleFillMode;\r\n    /**\r\n     * Returns the wireframe mode\r\n     */\r\n    public static readonly WireFrameFillMode = Constants.MATERIAL_WireFrameFillMode;\r\n    /**\r\n     * Returns the point fill mode\r\n     */\r\n    public static readonly PointFillMode = Constants.MATERIAL_PointFillMode;\r\n    /**\r\n     * Returns the point list draw mode\r\n     */\r\n    public static readonly PointListDrawMode = Constants.MATERIAL_PointListDrawMode;\r\n    /**\r\n     * Returns the line list draw mode\r\n     */\r\n    public static readonly LineListDrawMode = Constants.MATERIAL_LineListDrawMode;\r\n    /**\r\n     * Returns the line loop draw mode\r\n     */\r\n    public static readonly LineLoopDrawMode = Constants.MATERIAL_LineLoopDrawMode;\r\n    /**\r\n     * Returns the line strip draw mode\r\n     */\r\n    public static readonly LineStripDrawMode = Constants.MATERIAL_LineStripDrawMode;\r\n    /**\r\n     * Returns the triangle strip draw mode\r\n     */\r\n    public static readonly TriangleStripDrawMode = Constants.MATERIAL_TriangleStripDrawMode;\r\n    /**\r\n     * Returns the triangle fan draw mode\r\n     */\r\n    public static readonly TriangleFanDrawMode = Constants.MATERIAL_TriangleFanDrawMode;\r\n\r\n    /**\r\n     * Stores the clock-wise side orientation\r\n     */\r\n    public static readonly ClockWiseSideOrientation = Constants.MATERIAL_ClockWiseSideOrientation;\r\n\r\n    /**\r\n     * Stores the counter clock-wise side orientation\r\n     */\r\n    public static readonly CounterClockWiseSideOrientation = Constants.MATERIAL_CounterClockWiseSideOrientation;\r\n\r\n    /**\r\n     * The dirty texture flag value\r\n     */\r\n    public static readonly TextureDirtyFlag = Constants.MATERIAL_TextureDirtyFlag;\r\n\r\n    /**\r\n     * The dirty light flag value\r\n     */\r\n    public static readonly LightDirtyFlag = Constants.MATERIAL_LightDirtyFlag;\r\n\r\n    /**\r\n     * The dirty fresnel flag value\r\n     */\r\n    public static readonly FresnelDirtyFlag = Constants.MATERIAL_FresnelDirtyFlag;\r\n\r\n    /**\r\n     * The dirty attribute flag value\r\n     */\r\n    public static readonly AttributesDirtyFlag = Constants.MATERIAL_AttributesDirtyFlag;\r\n\r\n    /**\r\n     * The dirty misc flag value\r\n     */\r\n    public static readonly MiscDirtyFlag = Constants.MATERIAL_MiscDirtyFlag;\r\n\r\n    /**\r\n     * The dirty prepass flag value\r\n     */\r\n    public static readonly PrePassDirtyFlag = Constants.MATERIAL_PrePassDirtyFlag;\r\n\r\n    /**\r\n     * The all dirty flag value\r\n     */\r\n    public static readonly AllDirtyFlag = Constants.MATERIAL_AllDirtyFlag;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: No transparency mode, Alpha channel is not use.\r\n     */\r\n    public static readonly MATERIAL_OPAQUE = 0;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\r\n     */\r\n    public static readonly MATERIAL_ALPHATEST = 1;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     */\r\n    public static readonly MATERIAL_ALPHABLEND = 2;\r\n\r\n    /**\r\n     * MaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     * They are also discarded below the alpha cutoff threshold to improve performances.\r\n     */\r\n    public static readonly MATERIAL_ALPHATESTANDBLEND = 3;\r\n\r\n    /**\r\n     * The Whiteout method is used to blend normals.\r\n     * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\r\n     */\r\n    public static readonly MATERIAL_NORMALBLENDMETHOD_WHITEOUT = 0;\r\n\r\n    /**\r\n     * The Reoriented Normal Mapping method is used to blend normals.\r\n     * Details of the algorithm can be found here: https://blog.selfshadow.com/publications/blending-in-detail/\r\n     */\r\n    public static readonly MATERIAL_NORMALBLENDMETHOD_RNM = 1;\r\n\r\n    /**\r\n     * Event observable which raises global events common to all materials (like MaterialPluginEvent.Created)\r\n     */\r\n    public static OnEventObservable = new Observable<Material>();\r\n\r\n    /**\r\n     * Custom callback helping to override the default shader used in the material.\r\n     */\r\n    public customShaderNameResolve: (\r\n        shaderName: string,\r\n        uniforms: string[],\r\n        uniformBuffers: string[],\r\n        samplers: string[],\r\n        defines: MaterialDefines | string[],\r\n        attributes?: string[],\r\n        options?: ICustomShaderNameResolveOptions\r\n    ) => string;\r\n\r\n    /**\r\n     * Custom shadow depth material to use for shadow rendering instead of the in-built one\r\n     */\r\n    public shadowDepthWrapper: Nullable<ShadowDepthWrapper> = null;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the material is allowed (if supported) to do shader hot swapping.\r\n     * This means that the material can keep using a previous shader while a new one is being compiled.\r\n     * This is mostly used when shader parallel compilation is supported (true by default)\r\n     */\r\n    public allowShaderHotSwapping = true;\r\n\r\n    /** Shader language used by the material */\r\n    protected _shaderLanguage = ShaderLanguage.GLSL;\r\n\r\n    protected _forceGLSL = false;\r\n\r\n    /** @internal */\r\n    public get _supportGlowLayer() {\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public set _glowModeEnabled(value: boolean) {\r\n        // Do nothing here\r\n    }\r\n\r\n    /**\r\n     * Gets the shader language used in this material.\r\n     */\r\n    public get shaderLanguage(): ShaderLanguage {\r\n        return this._shaderLanguage;\r\n    }\r\n\r\n    /**\r\n     * The ID of the material\r\n     */\r\n    @serialize()\r\n    public id: string;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the material\r\n     */\r\n    @serialize()\r\n    public uniqueId: number;\r\n\r\n    /** @internal */\r\n    public _loadedUniqueId: string;\r\n\r\n    /**\r\n     * The name of the material\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Gets or sets user defined metadata\r\n     */\r\n    @serialize()\r\n    public metadata: any = null;\r\n\r\n    /** @internal */\r\n    public _internalMetadata: any;\r\n\r\n    /**\r\n     * For internal use only. Please do not use.\r\n     */\r\n    public reservedDataStore: any = null;\r\n\r\n    /**\r\n     * Specifies if the ready state should be checked on each call\r\n     */\r\n    @serialize()\r\n    public checkReadyOnEveryCall = false;\r\n\r\n    /**\r\n     * Specifies if the ready state should be checked once\r\n     */\r\n    @serialize()\r\n    public checkReadyOnlyOnce = false;\r\n\r\n    /**\r\n     * The state of the material\r\n     */\r\n    @serialize()\r\n    public state = \"\";\r\n\r\n    /**\r\n     * If the material can be rendered to several textures with MRT extension\r\n     */\r\n    public get canRenderToMRT(): boolean {\r\n        // By default, shaders are not compatible with MRTs\r\n        // Base classes should override that if their shader supports MRT\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * The alpha value of the material\r\n     */\r\n    @serialize(\"alpha\")\r\n    protected _alpha = 1.0;\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    /**\r\n     * Sets the alpha value of the material\r\n     */\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n\r\n        const oldValue = this._alpha;\r\n        this._alpha = value;\r\n\r\n        // Only call dirty when there is a state change (no alpha / alpha)\r\n        if (oldValue === 1 || value === 1) {\r\n            this.markAsDirty(Material.MiscDirtyFlag + Material.PrePassDirtyFlag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the alpha value of the material\r\n     */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    /**\r\n     * Specifies if back face culling is enabled\r\n     */\r\n    @serialize(\"backFaceCulling\")\r\n    protected _backFaceCulling = true;\r\n\r\n    /**\r\n     * Sets the culling state (true to enable culling, false to disable)\r\n     */\r\n    public set backFaceCulling(value: boolean) {\r\n        if (this._backFaceCulling === value) {\r\n            return;\r\n        }\r\n        this._backFaceCulling = value;\r\n        this.markAsDirty(Material.TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the culling state\r\n     */\r\n    public get backFaceCulling(): boolean {\r\n        return this._backFaceCulling;\r\n    }\r\n\r\n    /**\r\n     * Specifies if back or front faces should be culled (when culling is enabled)\r\n     */\r\n    @serialize(\"cullBackFaces\")\r\n    protected _cullBackFaces = true;\r\n\r\n    /**\r\n     * Sets the type of faces that should be culled (true for back faces, false for front faces)\r\n     */\r\n    public set cullBackFaces(value: boolean) {\r\n        if (this._cullBackFaces === value) {\r\n            return;\r\n        }\r\n        this._cullBackFaces = value;\r\n        this.markAsDirty(Material.TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the type of faces that should be culled\r\n     */\r\n    public get cullBackFaces(): boolean {\r\n        return this._cullBackFaces;\r\n    }\r\n\r\n    private _blockDirtyMechanism = false;\r\n\r\n    /**\r\n     * Block the dirty-mechanism for this specific material\r\n     * When set to false after being true the material will be marked as dirty.\r\n     */\r\n    public get blockDirtyMechanism(): boolean {\r\n        return this._blockDirtyMechanism;\r\n    }\r\n\r\n    public set blockDirtyMechanism(value: boolean) {\r\n        if (this._blockDirtyMechanism === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockDirtyMechanism = value;\r\n\r\n        if (!value) {\r\n            this.markDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This allows you to modify the material without marking it as dirty after every change.\r\n     * This function should be used if you need to make more than one dirty-enabling change to the material - adding a texture, setting a new fill mode and so on.\r\n     * The callback will pass the material as an argument, so you can make your changes to it.\r\n     * @param callback the callback to be executed that will update the material\r\n     */\r\n    public atomicMaterialsUpdate(callback: (material: this) => void): void {\r\n        this.blockDirtyMechanism = true;\r\n        try {\r\n            callback(this);\r\n        } finally {\r\n            this.blockDirtyMechanism = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores the value for side orientation\r\n     */\r\n    @serialize()\r\n    public sideOrientation: Nullable<number> = null;\r\n\r\n    /**\r\n     * Callback triggered when the material is compiled\r\n     */\r\n    public onCompiled: Nullable<(effect: Effect) => void> = null;\r\n\r\n    /**\r\n     * Callback triggered when an error occurs\r\n     */\r\n    public onError: Nullable<(effect: Effect, errors: string) => void> = null;\r\n\r\n    /**\r\n     * Callback triggered to get the render target textures\r\n     */\r\n    public getRenderTargetTextures: Nullable<() => SmartArray<RenderTargetTexture>> = null;\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        this._eventInfo.hasRenderTargetTextures = false;\r\n        this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n        return this._eventInfo.hasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material should be serialized\r\n     */\r\n    public doNotSerialize = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _storeEffectOnSubMeshes = false;\r\n\r\n    /**\r\n     * Stores the animations for the material\r\n     */\r\n    public animations: Nullable<Array<Animation>> = null;\r\n\r\n    /**\r\n     * An event triggered when the material is disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Material>();\r\n\r\n    /**\r\n     * An observer which watches for dispose events\r\n     */\r\n    private _onDisposeObserver: Nullable<Observer<Material>> = null;\r\n    private _onUnBindObservable: Nullable<Observable<Material>> = null;\r\n\r\n    /**\r\n     * Called during a dispose event\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    private _onBindObservable: Nullable<Observable<AbstractMesh>>;\r\n\r\n    /**\r\n     * An event triggered when the material is bound\r\n     */\r\n    public get onBindObservable(): Observable<AbstractMesh> {\r\n        if (!this._onBindObservable) {\r\n            this._onBindObservable = new Observable<AbstractMesh>();\r\n        }\r\n\r\n        return this._onBindObservable;\r\n    }\r\n\r\n    /**\r\n     * An observer which watches for bind events\r\n     */\r\n    private _onBindObserver: Nullable<Observer<AbstractMesh>> = null;\r\n\r\n    /**\r\n     * Called during a bind event\r\n     */\r\n    public set onBind(callback: (Mesh: AbstractMesh) => void) {\r\n        if (this._onBindObserver) {\r\n            this.onBindObservable.remove(this._onBindObserver);\r\n        }\r\n        this._onBindObserver = this.onBindObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the material is unbound\r\n     */\r\n    public get onUnBindObservable(): Observable<Material> {\r\n        if (!this._onUnBindObservable) {\r\n            this._onUnBindObservable = new Observable<Material>();\r\n        }\r\n\r\n        return this._onUnBindObservable;\r\n    }\r\n\r\n    protected _onEffectCreatedObservable: Nullable<Observable<{ effect: Effect; subMesh: Nullable<SubMesh> }>>;\r\n\r\n    /**\r\n     * An event triggered when the effect is (re)created\r\n     */\r\n    public get onEffectCreatedObservable(): Observable<{ effect: Effect; subMesh: Nullable<SubMesh> }> {\r\n        if (!this._onEffectCreatedObservable) {\r\n            this._onEffectCreatedObservable = new Observable<{ effect: Effect; subMesh: Nullable<SubMesh> }>();\r\n        }\r\n\r\n        return this._onEffectCreatedObservable;\r\n    }\r\n\r\n    /**\r\n     * Stores the value of the alpha mode\r\n     */\r\n    @serialize(\"alphaMode\")\r\n    private _alphaMode: number = Constants.ALPHA_COMBINE;\r\n\r\n    /**\r\n     * Sets the value of the alpha mode.\r\n     *\r\n     * | Value | Type | Description |\r\n     * | --- | --- | --- |\r\n     * | 0 | ALPHA_DISABLE |   |\r\n     * | 1 | ALPHA_ADD |   |\r\n     * | 2 | ALPHA_COMBINE |   |\r\n     * | 3 | ALPHA_SUBTRACT |   |\r\n     * | 4 | ALPHA_MULTIPLY |   |\r\n     * | 5 | ALPHA_MAXIMIZED |   |\r\n     * | 6 | ALPHA_ONEONE |   |\r\n     * | 7 | ALPHA_PREMULTIPLIED |   |\r\n     * | 8 | ALPHA_PREMULTIPLIED_PORTERDUFF |   |\r\n     * | 9 | ALPHA_INTERPOLATE |   |\r\n     * | 10 | ALPHA_SCREENMODE |   |\r\n     *\r\n     */\r\n    public set alphaMode(value: number) {\r\n        if (this._alphaMode === value) {\r\n            return;\r\n        }\r\n        this._alphaMode = value;\r\n        this.markAsDirty(Material.TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the alpha mode\r\n     */\r\n    public get alphaMode(): number {\r\n        return this._alphaMode;\r\n    }\r\n\r\n    /**\r\n     * Stores the state of the need depth pre-pass value\r\n     */\r\n    @serialize()\r\n    private _needDepthPrePass = false;\r\n\r\n    /**\r\n     * Sets the need depth pre-pass value\r\n     */\r\n    public set needDepthPrePass(value: boolean) {\r\n        if (this._needDepthPrePass === value) {\r\n            return;\r\n        }\r\n        this._needDepthPrePass = value;\r\n        if (this._needDepthPrePass) {\r\n            this.checkReadyOnEveryCall = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the depth pre-pass value\r\n     */\r\n    public get needDepthPrePass(): boolean {\r\n        return this._needDepthPrePass;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public get isPrePassCapable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Specifies if depth writing should be disabled\r\n     */\r\n    @serialize()\r\n    public disableDepthWrite = false;\r\n\r\n    /**\r\n     * Specifies if color writing should be disabled\r\n     */\r\n    @serialize()\r\n    public disableColorWrite = false;\r\n\r\n    /**\r\n     * Specifies if depth writing should be forced\r\n     */\r\n    @serialize()\r\n    public forceDepthWrite = false;\r\n\r\n    /**\r\n     * Specifies the depth function that should be used. 0 means the default engine function\r\n     */\r\n    @serialize()\r\n    public depthFunction = 0;\r\n\r\n    /**\r\n     * Specifies if there should be a separate pass for culling\r\n     */\r\n    @serialize()\r\n    public separateCullingPass = false;\r\n\r\n    /**\r\n     * Stores the state specifying if fog should be enabled\r\n     */\r\n    @serialize(\"fogEnabled\")\r\n    private _fogEnabled = true;\r\n\r\n    /**\r\n     * Sets the state for enabling fog\r\n     */\r\n    public set fogEnabled(value: boolean) {\r\n        if (this._fogEnabled === value) {\r\n            return;\r\n        }\r\n        this._fogEnabled = value;\r\n        this.markAsDirty(Material.MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the fog enabled state\r\n     */\r\n    public get fogEnabled(): boolean {\r\n        return this._fogEnabled;\r\n    }\r\n\r\n    /**\r\n     * Stores the size of points\r\n     */\r\n    @serialize()\r\n    public pointSize = 1.0;\r\n\r\n    /**\r\n     * Stores the z offset Factor value\r\n     */\r\n    @serialize()\r\n    public zOffset = 0;\r\n\r\n    /**\r\n     * Stores the z offset Units value\r\n     */\r\n    @serialize()\r\n    public zOffsetUnits = 0;\r\n\r\n    public get wireframe(): boolean {\r\n        switch (this._fillMode) {\r\n            case Material.WireFrameFillMode:\r\n            case Material.LineListDrawMode:\r\n            case Material.LineLoopDrawMode:\r\n            case Material.LineStripDrawMode:\r\n                return true;\r\n        }\r\n\r\n        return this._scene.forceWireframe;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of wireframe mode\r\n     */\r\n    public set wireframe(value: boolean) {\r\n        this.fillMode = value ? Material.WireFrameFillMode : Material.TriangleFillMode;\r\n    }\r\n\r\n    /**\r\n     * Gets the value specifying if point clouds are enabled\r\n     */\r\n    @serialize()\r\n    public get pointsCloud(): boolean {\r\n        switch (this._fillMode) {\r\n            case Material.PointFillMode:\r\n            case Material.PointListDrawMode:\r\n                return true;\r\n        }\r\n\r\n        return this._scene.forcePointsCloud;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of point cloud mode\r\n     */\r\n    public set pointsCloud(value: boolean) {\r\n        this.fillMode = value ? Material.PointFillMode : Material.TriangleFillMode;\r\n    }\r\n\r\n    /**\r\n     * Gets the material fill mode\r\n     */\r\n    @serialize()\r\n    public get fillMode(): number {\r\n        return this._fillMode;\r\n    }\r\n\r\n    /**\r\n     * Sets the material fill mode\r\n     */\r\n    public set fillMode(value: number) {\r\n        if (this._fillMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._fillMode = value;\r\n        this.markAsDirty(Material.MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 1\r\n     */\r\n    public clipPlane: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 2\r\n     */\r\n    public clipPlane2: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 3\r\n     */\r\n    public clipPlane3: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 4\r\n     */\r\n    public clipPlane4: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 5\r\n     */\r\n    public clipPlane5: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 6\r\n     */\r\n    public clipPlane6: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gives access to the stencil properties of the material\r\n     */\r\n    public readonly stencil = new MaterialStencilState();\r\n\r\n    protected _useLogarithmicDepth: boolean;\r\n\r\n    /**\r\n     * In case the depth buffer does not allow enough depth precision for your scene (might be the case in large scenes)\r\n     * You can try switching to logarithmic depth.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/logarithmicDepthBuffer\r\n     */\r\n    @serialize()\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        const fragmentDepthSupported = this.getScene().getEngine().getCaps().fragmentDepthSupported;\r\n\r\n        if (value && !fragmentDepthSupported) {\r\n            Logger.Warn(\"Logarithmic depth has been requested for a material on a device that doesn't support it.\");\r\n        }\r\n\r\n        this._useLogarithmicDepth = value && fragmentDepthSupported;\r\n\r\n        this._markAllSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Stores the effects for the material\r\n     */\r\n    public _materialContext: IMaterialContext | undefined;\r\n\r\n    protected _drawWrapper: DrawWrapper;\r\n    /** @internal */\r\n    public _getDrawWrapper(): DrawWrapper {\r\n        return this._drawWrapper;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setDrawWrapper(drawWrapper: DrawWrapper) {\r\n        this._drawWrapper = drawWrapper;\r\n    }\r\n\r\n    /**\r\n     * Specifies if uniform buffers should be used\r\n     */\r\n    private _useUBO: boolean = false;\r\n\r\n    /**\r\n     * Stores a reference to the scene\r\n     */\r\n    private _scene: Scene;\r\n    protected _needToBindSceneUbo: boolean;\r\n\r\n    /**\r\n     * Stores the fill mode state\r\n     */\r\n    private _fillMode = Material.TriangleFillMode;\r\n\r\n    /**\r\n     * Specifies if the depth write state should be cached\r\n     */\r\n    private _cachedDepthWriteState: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the color write state should be cached\r\n     */\r\n    private _cachedColorWriteState: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the depth function state should be cached\r\n     */\r\n    private _cachedDepthFunctionState: number = 0;\r\n\r\n    /**\r\n     * Stores the uniform buffer\r\n     * @internal\r\n     */\r\n    public _uniformBuffer: UniformBuffer;\r\n\r\n    /** @internal */\r\n    public _indexInSceneMaterialArray = -1;\r\n\r\n    /** @internal */\r\n    public meshMap: Nullable<{ [id: string]: AbstractMesh | undefined }> = null;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<IAssetContainer> = null;\r\n\r\n    /** @internal */\r\n    public _dirtyCallbacks: { [code: number]: () => void };\r\n\r\n    /** @internal */\r\n    public _uniformBufferLayoutBuilt = false;\r\n\r\n    protected _eventInfo: MaterialPluginCreated &\r\n        MaterialPluginDisposed &\r\n        MaterialPluginHasTexture &\r\n        MaterialPluginIsReadyForSubMesh &\r\n        MaterialPluginGetDefineNames &\r\n        MaterialPluginPrepareEffect &\r\n        MaterialPluginPrepareDefines &\r\n        MaterialPluginPrepareUniformBuffer &\r\n        MaterialPluginBindForSubMesh &\r\n        MaterialPluginGetAnimatables &\r\n        MaterialPluginGetActiveTextures &\r\n        MaterialPluginFillRenderTargetTextures &\r\n        MaterialPluginHasRenderTargetTextures &\r\n        MaterialPluginHardBindForSubMesh = {} as any; // will be initialized before each event notification\r\n\r\n    /** @internal */\r\n    public _callbackPluginEventGeneric: (\r\n        id: number,\r\n        info:\r\n            | MaterialPluginGetActiveTextures\r\n            | MaterialPluginGetAnimatables\r\n            | MaterialPluginHasTexture\r\n            | MaterialPluginDisposed\r\n            | MaterialPluginGetDefineNames\r\n            | MaterialPluginPrepareEffect\r\n            | MaterialPluginPrepareUniformBuffer\r\n    ) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventIsReadyForSubMesh: (eventData: MaterialPluginIsReadyForSubMesh) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventPrepareDefines: (eventData: MaterialPluginPrepareDefines) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventPrepareDefinesBeforeAttributes: (eventData: MaterialPluginPrepareDefines) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventHardBindForSubMesh: (eventData: MaterialPluginHardBindForSubMesh) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventBindForSubMesh: (eventData: MaterialPluginBindForSubMesh) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventHasRenderTargetTextures: (eventData: MaterialPluginHasRenderTargetTextures) => void = () => void 0;\r\n    /** @internal */\r\n    public _callbackPluginEventFillRenderTargetTextures: (eventData: MaterialPluginFillRenderTargetTextures) => void = () => void 0;\r\n\r\n    /**\r\n     * Creates a material instance\r\n     * @param name defines the name of the material\r\n     * @param scene defines the scene to reference\r\n     * @param doNotAdd specifies if the material should be added to the scene\r\n     * @param forceGLSL Use the GLSL code generation for the shader (even on WebGPU). Default is false\r\n     */\r\n    constructor(name: string, scene?: Nullable<Scene>, doNotAdd?: boolean, forceGLSL = false) {\r\n        this.name = name;\r\n        const setScene = scene || EngineStore.LastCreatedScene;\r\n        if (!setScene) {\r\n            return;\r\n        }\r\n        this._scene = setScene;\r\n        this._dirtyCallbacks = {};\r\n        this._forceGLSL = forceGLSL;\r\n\r\n        this._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag] = this._markAllSubMeshesAsTexturesDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_LightDirtyFlag] = this._markAllSubMeshesAsLightsDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_FresnelDirtyFlag] = this._markAllSubMeshesAsFresnelDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_AttributesDirtyFlag] = this._markAllSubMeshesAsAttributesDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_MiscDirtyFlag] = this._markAllSubMeshesAsMiscDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_PrePassDirtyFlag] = this._markAllSubMeshesAsPrePassDirty.bind(this);\r\n        this._dirtyCallbacks[Constants.MATERIAL_AllDirtyFlag] = this._markAllSubMeshesAsAllDirty.bind(this);\r\n\r\n        this.id = name || Tools.RandomId();\r\n        this.uniqueId = this._scene.getUniqueId();\r\n        this._materialContext = this._scene.getEngine().createMaterialContext();\r\n        this._drawWrapper = new DrawWrapper(this._scene.getEngine(), false);\r\n        this._drawWrapper.materialContext = this._materialContext;\r\n\r\n        this._uniformBuffer = new UniformBuffer(this._scene.getEngine(), undefined, undefined, name);\r\n        this._useUBO = this.getScene().getEngine().supportsUniformBuffers;\r\n\r\n        this._createUniformBuffer();\r\n\r\n        if (!doNotAdd) {\r\n            this._scene.addMaterial(this);\r\n        }\r\n\r\n        if (this._scene.useMaterialMeshMap) {\r\n            this.meshMap = {};\r\n        }\r\n\r\n        Material.OnEventObservable.notifyObservers(this, MaterialPluginEvent.Created);\r\n    }\r\n\r\n    /** @internal */\r\n    public _createUniformBuffer() {\r\n        const engine = this.getScene().getEngine();\r\n\r\n        this._uniformBuffer?.dispose();\r\n\r\n        if (engine.isWebGPU && !this._forceGLSL) {\r\n            // Switch main UBO to non UBO to connect to leftovers UBO in webgpu\r\n            this._uniformBuffer = new UniformBuffer(engine, undefined, undefined, this.name, true);\r\n            this._shaderLanguage = ShaderLanguage.WGSL;\r\n        } else {\r\n            this._uniformBuffer = new UniformBuffer(this._scene.getEngine(), undefined, undefined, this.name);\r\n        }\r\n\r\n        this._uniformBufferLayoutBuilt = false;\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the current material\r\n     * @param fullDetails defines a boolean indicating which levels of logging is desired\r\n     * @returns a string with material information\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public toString(fullDetails?: boolean): string {\r\n        const ret = \"Name: \" + this.name;\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the material\r\n     * @returns a string with the class name of the material\r\n     */\r\n    public getClassName(): string {\r\n        return \"Material\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isMaterial() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Specifies if updates for the material been locked\r\n     */\r\n    public get isFrozen(): boolean {\r\n        return this.checkReadyOnlyOnce;\r\n    }\r\n\r\n    /**\r\n     * Locks updates for the material\r\n     */\r\n    public freeze(): void {\r\n        this.markDirty();\r\n        this.checkReadyOnlyOnce = true;\r\n    }\r\n\r\n    /**\r\n     * Unlocks updates for the material\r\n     */\r\n    public unfreeze(): void {\r\n        this.markDirty();\r\n        this.checkReadyOnlyOnce = false;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param useInstances specifies if instances should be used\r\n     * @returns a boolean indicating if the material is ready to be used\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isReady(mesh?: AbstractMesh, useInstances?: boolean): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        const defines = subMesh.materialDefines;\r\n        if (!defines) {\r\n            return false;\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        return this._eventInfo.isReadyForSubMesh;\r\n    }\r\n\r\n    /**\r\n     * Returns the material effect\r\n     * @returns the effect associated with the material\r\n     */\r\n    public getEffect(): Nullable<Effect> {\r\n        return this._drawWrapper.effect;\r\n    }\r\n\r\n    /**\r\n     * Returns the current scene\r\n     * @returns a Scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getEffectiveOrientation(mesh: Mesh): number {\r\n        return this.sideOrientation !== null ? this.sideOrientation : mesh.sideOrientation;\r\n    }\r\n\r\n    /**\r\n     * The transparency mode of the material.\r\n     */\r\n    protected _transparencyMode: Nullable<number> = null;\r\n\r\n    /**\r\n     * Gets the current transparency mode.\r\n     */\r\n    @serialize()\r\n    public get transparencyMode(): Nullable<number> {\r\n        return this._transparencyMode;\r\n    }\r\n\r\n    /**\r\n     * Sets the transparency mode of the material.\r\n     *\r\n     * | Value | Type                                | Description |\r\n     * | ----- | ----------------------------------- | ----------- |\r\n     * | 0     | OPAQUE                              |             |\r\n     * | 1     | ALPHATEST                           |             |\r\n     * | 2     | ALPHABLEND                          |             |\r\n     * | 3     | ALPHATESTANDBLEND                   |             |\r\n     *\r\n     */\r\n    public set transparencyMode(value: Nullable<number>) {\r\n        if (this._transparencyMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._transparencyMode = value;\r\n\r\n        this._markAllSubMeshesAsTexturesAndMiscDirty();\r\n    }\r\n\r\n    protected get _hasTransparencyMode(): boolean {\r\n        return this._transparencyMode != null;\r\n    }\r\n\r\n    protected get _transparencyModeIsBlend(): boolean {\r\n        return this._transparencyMode === Material.MATERIAL_ALPHABLEND || this._transparencyMode === Material.MATERIAL_ALPHATESTANDBLEND;\r\n    }\r\n\r\n    protected get _transparencyModeIsTest(): boolean {\r\n        return this._transparencyMode === Material.MATERIAL_ALPHATEST || this._transparencyMode === Material.MATERIAL_ALPHATESTANDBLEND;\r\n    }\r\n\r\n    /**\r\n     * Returns true if alpha blending should be disabled.\r\n     */\r\n    protected get _disableAlphaBlending(): boolean {\r\n        return this._transparencyMode === Material.MATERIAL_OPAQUE || this._transparencyMode === Material.MATERIAL_ALPHATEST;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha blend mode.\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     * @deprecated Please use needAlphaBlendingForMesh instead\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsBlend;\r\n        }\r\n\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this.alpha < 1.0;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the mesh will require alpha blending\r\n     * @param mesh defines the mesh to check\r\n     * @returns a boolean specifying if alpha blending is needed for the mesh\r\n     */\r\n    public needAlphaBlendingForMesh(mesh: AbstractMesh): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsBlend;\r\n        }\r\n\r\n        if (mesh.visibility < 1.0) {\r\n            return true;\r\n        }\r\n\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return mesh.hasVertexAlpha || this.needAlphaBlending();\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha test mode.\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     * @deprecated Please use needAlphaTestingForMesh instead\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsTest;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Specifies if material alpha testing should be turned on for the mesh\r\n     * @param mesh defines the mesh to check\r\n     * @returns a boolean specifying if alpha testing should be turned on for the mesh\r\n     */\r\n    public needAlphaTestingForMesh(mesh: AbstractMesh): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsTest;\r\n        }\r\n\r\n        return !this.needAlphaBlendingForMesh(mesh) && this.needAlphaTesting();\r\n    }\r\n\r\n    /**\r\n     * Gets the texture used for the alpha test\r\n     * @returns the texture to use for alpha testing\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it needs to be re-calculated\r\n     * @param forceMaterialDirty - Forces the material to be marked as dirty for all components (same as this.markAsDirty(Material.AllDirtyFlag)). You should use this flag if the material is frozen and you want to force a recompilation.\r\n     */\r\n    public markDirty(forceMaterialDirty = false): void {\r\n        const meshes = this.getScene().meshes;\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n            for (const subMesh of mesh.subMeshes) {\r\n                if (subMesh.getMaterial() !== this) {\r\n                    continue;\r\n                }\r\n\r\n                for (const drawWrapper of subMesh._drawWrappers) {\r\n                    if (!drawWrapper) {\r\n                        continue;\r\n                    }\r\n                    if (this._materialContext === drawWrapper.materialContext) {\r\n                        drawWrapper._wasPreviouslyReady = false;\r\n                        drawWrapper._wasPreviouslyUsingInstances = null;\r\n                        drawWrapper._forceRebindOnNextCall = forceMaterialDirty;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (forceMaterialDirty) {\r\n            this.markAsDirty(Material.AllDirtyFlag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preBind(effect?: Effect | DrawWrapper, overrideOrientation: Nullable<number> = null): boolean {\r\n        const engine = this._scene.getEngine();\r\n\r\n        const orientation = overrideOrientation == null ? this.sideOrientation : overrideOrientation;\r\n        const reverse = orientation === Material.ClockWiseSideOrientation;\r\n\r\n        engine.enableEffect(effect ? effect : this._getDrawWrapper());\r\n        engine.setState(\r\n            this.backFaceCulling,\r\n            this.zOffset,\r\n            false,\r\n            reverse,\r\n            this._scene._mirroredCameraPosition ? !this.cullBackFaces : this.cullBackFaces,\r\n            this.stencil,\r\n            this.zOffsetUnits\r\n        );\r\n\r\n        return reverse;\r\n    }\r\n\r\n    /**\r\n     * Binds the material to the mesh\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh to bind the material to\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bind(world: Matrix, mesh?: Mesh): void {}\r\n\r\n    /**\r\n     * Initializes the uniform buffer layout for the shader.\r\n     */\r\n    public buildUniformLayout(): void {\r\n        const ubo = this._uniformBuffer;\r\n\r\n        this._eventInfo.ubo = ubo;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareUniformBuffer, this._eventInfo);\r\n\r\n        ubo.create();\r\n\r\n        this._uniformBufferLayoutBuilt = true;\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to the material\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n        drawWrapper._forceRebindOnNextCall = false;\r\n    }\r\n\r\n    /**\r\n     * Binds the world matrix to the material\r\n     * @param world defines the world transformation matrix\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bindOnlyWorldMatrix(world: Matrix): void {}\r\n\r\n    /**\r\n     * Binds the view matrix to the effect\r\n     * @param effect defines the effect to bind the view matrix to\r\n     */\r\n    public bindView(effect: Effect): void {\r\n        if (!this._useUBO) {\r\n            effect.setMatrix(\"view\", this.getScene().getViewMatrix());\r\n        } else {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the view projection and projection matrices to the effect\r\n     * @param effect defines the effect to bind the view projection and projection matrices to\r\n     */\r\n    public bindViewProjection(effect: Effect): void {\r\n        if (!this._useUBO) {\r\n            effect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n            effect.setMatrix(\"projection\", this.getScene().getProjectionMatrix());\r\n        } else {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the view matrix to the effect\r\n     * @param effect defines the effect to bind the view matrix to\r\n     * @param variableName name of the shader variable that will hold the eye position\r\n     */\r\n    public bindEyePosition(effect: Effect, variableName?: string): void {\r\n        if (!this._useUBO) {\r\n            this._scene.bindEyePosition(effect, variableName);\r\n        } else {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes to execute after binding the material to a mesh\r\n     * @param mesh defines the rendered mesh\r\n     * @param effect defines the effect used to bind the material\r\n     * @param _subMesh defines the subMesh that the material has been bound for\r\n     */\r\n    protected _afterBind(mesh?: AbstractMesh, effect: Nullable<Effect> = null, _subMesh?: SubMesh): void {\r\n        this._scene._cachedMaterial = this;\r\n        if (this._needToBindSceneUbo) {\r\n            if (effect) {\r\n                this._needToBindSceneUbo = false;\r\n                BindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\r\n                this._scene.finalizeSceneUbo();\r\n            }\r\n        }\r\n        if (mesh) {\r\n            this._scene._cachedVisibility = mesh.visibility;\r\n        } else {\r\n            this._scene._cachedVisibility = 1;\r\n        }\r\n\r\n        if (this._onBindObservable && mesh) {\r\n            this._onBindObservable.notifyObservers(mesh);\r\n        }\r\n\r\n        if (this.disableDepthWrite) {\r\n            const engine = this._scene.getEngine();\r\n            this._cachedDepthWriteState = engine.getDepthWrite();\r\n            engine.setDepthWrite(false);\r\n        }\r\n\r\n        if (this.disableColorWrite) {\r\n            const engine = this._scene.getEngine();\r\n            this._cachedColorWriteState = engine.getColorWrite();\r\n            engine.setColorWrite(false);\r\n        }\r\n\r\n        if (this.depthFunction !== 0) {\r\n            const engine = this._scene.getEngine();\r\n            this._cachedDepthFunctionState = engine.getDepthFunction() || 0;\r\n            engine.setDepthFunction(this.depthFunction);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unbinds the material from the mesh\r\n     */\r\n    public unbind(): void {\r\n        if (this._onUnBindObservable) {\r\n            this._onUnBindObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (this.depthFunction !== 0) {\r\n            const engine = this._scene.getEngine();\r\n            engine.setDepthFunction(this._cachedDepthFunctionState);\r\n        }\r\n\r\n        if (this.disableDepthWrite) {\r\n            const engine = this._scene.getEngine();\r\n            engine.setDepthWrite(this._cachedDepthWriteState);\r\n        }\r\n\r\n        if (this.disableColorWrite) {\r\n            const engine = this._scene.getEngine();\r\n            engine.setColorWrite(this._cachedColorWriteState);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * @returns - Array of animatable textures.\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        this._eventInfo.animatables = [];\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetAnimatables, this._eventInfo);\r\n        return this._eventInfo.animatables;\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        this._eventInfo.activeTextures = [];\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetActiveTextures, this._eventInfo);\r\n        return this._eventInfo.activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        this._eventInfo.hasTexture = false;\r\n        this._eventInfo.texture = texture;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.HasTexture, this._eventInfo);\r\n        return this._eventInfo.hasTexture;\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public clone(name: string): Nullable<Material> {\r\n        return null;\r\n    }\r\n\r\n    protected _clonePlugins(targetMaterial: Material, rootUrl: string) {\r\n        const serializationObject: any = {};\r\n\r\n        // Create plugins in targetMaterial in case they don't exist\r\n        this._serializePlugins(serializationObject);\r\n\r\n        Material._ParsePlugins(serializationObject, targetMaterial, this._scene, rootUrl);\r\n\r\n        // Copy the properties of the current plugins to the cloned material's plugins\r\n        if (this.pluginManager) {\r\n            for (const plugin of this.pluginManager._plugins) {\r\n                const targetPlugin = targetMaterial.pluginManager!.getPlugin(plugin.name);\r\n                if (targetPlugin) {\r\n                    plugin.copyTo(targetPlugin);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the meshes bound to the material\r\n     * @returns an array of meshes bound to the material\r\n     */\r\n    public getBindedMeshes(): AbstractMesh[] {\r\n        if (this.meshMap) {\r\n            const result: AbstractMesh[] = [];\r\n            for (const meshId in this.meshMap) {\r\n                const mesh = this.meshMap[meshId];\r\n                if (mesh) {\r\n                    result.push(mesh);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            const meshes = this._scene.meshes;\r\n            return meshes.filter((mesh) => mesh.material === this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh defines the mesh associated with this material\r\n     * @param onCompiled defines a function to execute once the material is compiled\r\n     * @param options defines the options to configure the compilation\r\n     * @param onError defines a function to execute if the material fails compiling\r\n     */\r\n    public forceCompilation(\r\n        mesh: AbstractMesh,\r\n        onCompiled?: (material: Material) => void,\r\n        options?: Partial<IMaterialCompilationOptions>,\r\n        onError?: (reason: string) => void\r\n    ): void {\r\n        const localOptions = {\r\n            clipPlane: false,\r\n            useInstances: false,\r\n            ...options,\r\n        };\r\n\r\n        const scene = this.getScene();\r\n        const currentHotSwapingState = this.allowShaderHotSwapping;\r\n        this.allowShaderHotSwapping = false; // Turned off to let us evaluate the real compilation state\r\n\r\n        const checkReady = () => {\r\n            if (!this._scene || !this._scene.getEngine()) {\r\n                return;\r\n            }\r\n\r\n            const clipPlaneState = scene.clipPlane;\r\n\r\n            if (localOptions.clipPlane) {\r\n                scene.clipPlane = new Plane(0, 0, 0, 1);\r\n            }\r\n\r\n            if (this._storeEffectOnSubMeshes) {\r\n                let allDone = true,\r\n                    lastError = null;\r\n                if (mesh.subMeshes) {\r\n                    const tempSubMesh = new SubMesh(0, 0, 0, 0, 0, mesh, undefined, false, false);\r\n                    if (tempSubMesh.materialDefines) {\r\n                        tempSubMesh.materialDefines._renderId = -1;\r\n                    }\r\n                    if (!this.isReadyForSubMesh(mesh, tempSubMesh, localOptions.useInstances)) {\r\n                        if (tempSubMesh.effect && tempSubMesh.effect.getCompilationError() && tempSubMesh.effect.allFallbacksProcessed()) {\r\n                            lastError = tempSubMesh.effect.getCompilationError();\r\n                        } else {\r\n                            allDone = false;\r\n                            setTimeout(checkReady, 16);\r\n                        }\r\n                    }\r\n                }\r\n                if (allDone) {\r\n                    this.allowShaderHotSwapping = currentHotSwapingState;\r\n                    if (lastError) {\r\n                        if (onError) {\r\n                            onError(lastError);\r\n                        }\r\n                    }\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isReady()) {\r\n                    this.allowShaderHotSwapping = currentHotSwapingState;\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                } else {\r\n                    setTimeout(checkReady, 16);\r\n                }\r\n            }\r\n\r\n            if (localOptions.clipPlane) {\r\n                scene.clipPlane = clipPlaneState;\r\n            }\r\n        };\r\n\r\n        checkReady();\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh defines the mesh that will use this material\r\n     * @param options defines additional options for compiling the shaders\r\n     * @returns a promise that resolves when the compilation completes\r\n     */\r\n    public forceCompilationAsync(mesh: AbstractMesh, options?: Partial<IMaterialCompilationOptions>): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.forceCompilation(\r\n                mesh,\r\n                () => {\r\n                    resolve();\r\n                },\r\n                options,\r\n                (reason) => {\r\n                    reject(reason);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    private static readonly _AllDirtyCallBack = (defines: MaterialDefines) => defines.markAllAsDirty();\r\n    private static readonly _ImageProcessingDirtyCallBack = (defines: MaterialDefines) => defines.markAsImageProcessingDirty();\r\n    private static readonly _TextureDirtyCallBack = (defines: MaterialDefines) => defines.markAsTexturesDirty();\r\n    private static readonly _FresnelDirtyCallBack = (defines: MaterialDefines) => defines.markAsFresnelDirty();\r\n    private static readonly _MiscDirtyCallBack = (defines: MaterialDefines) => defines.markAsMiscDirty();\r\n    private static readonly _PrePassDirtyCallBack = (defines: MaterialDefines) => defines.markAsPrePassDirty();\r\n    private static readonly _LightsDirtyCallBack = (defines: MaterialDefines) => defines.markAsLightDirty();\r\n    private static readonly _AttributeDirtyCallBack = (defines: MaterialDefines) => defines.markAsAttributesDirty();\r\n\r\n    private static _FresnelAndMiscDirtyCallBack = (defines: MaterialDefines) => {\r\n        Material._FresnelDirtyCallBack(defines);\r\n        Material._MiscDirtyCallBack(defines);\r\n    };\r\n\r\n    private static _TextureAndMiscDirtyCallBack = (defines: MaterialDefines) => {\r\n        Material._TextureDirtyCallBack(defines);\r\n        Material._MiscDirtyCallBack(defines);\r\n    };\r\n\r\n    private static readonly _DirtyCallbackArray: Array<(defines: MaterialDefines) => void> = [];\r\n    private static readonly _RunDirtyCallBacks = (defines: MaterialDefines) => {\r\n        for (const cb of Material._DirtyCallbackArray) {\r\n            cb(defines);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Marks a define in the material to indicate that it needs to be re-computed\r\n     * @param flag defines a flag used to determine which parts of the material have to be marked as dirty\r\n     */\r\n    public markAsDirty(flag: number): void {\r\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        Material._DirtyCallbackArray.length = 0;\r\n\r\n        if (flag & Material.TextureDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._TextureDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.LightDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._LightsDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.FresnelDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._FresnelDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.AttributesDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._AttributeDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.MiscDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._MiscDirtyCallBack);\r\n        }\r\n\r\n        if (flag & Material.PrePassDirtyFlag) {\r\n            Material._DirtyCallbackArray.push(Material._PrePassDirtyCallBack);\r\n        }\r\n\r\n        if (Material._DirtyCallbackArray.length) {\r\n            this._markAllSubMeshesAsDirty(Material._RunDirtyCallBacks);\r\n        }\r\n\r\n        this.getScene().resetCachedMaterial();\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache for all submeshes that are using this material\r\n     */\r\n    public resetDrawCache(): void {\r\n        const meshes = this.getScene().meshes;\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n            for (const subMesh of mesh.subMeshes) {\r\n                if (subMesh.getMaterial() !== this) {\r\n                    continue;\r\n                }\r\n\r\n                subMesh.resetDrawCache();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks all submeshes of a material to indicate that their material defines need to be re-calculated\r\n     * @param func defines a function which checks material defines against the submeshes\r\n     */\r\n    protected _markAllSubMeshesAsDirty(func: (defines: MaterialDefines) => void) {\r\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        const meshes = this.getScene().meshes;\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n            for (const subMesh of mesh.subMeshes) {\r\n                // We want to skip the submeshes which are not using this material or which have not yet rendered at least once\r\n                if (subMesh.getMaterial(false) !== this) {\r\n                    continue;\r\n                }\r\n\r\n                for (const drawWrapper of subMesh._drawWrappers) {\r\n                    if (!drawWrapper || !drawWrapper.defines || !(drawWrapper.defines as MaterialDefines).markAllAsDirty) {\r\n                        continue;\r\n                    }\r\n                    if (this._materialContext === drawWrapper.materialContext) {\r\n                        func(drawWrapper.defines as MaterialDefines);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates that the scene should check if the rendering now needs a prepass\r\n     */\r\n    protected _markScenePrePassDirty() {\r\n        if (this.getScene().blockMaterialDirtyMechanism || this._blockDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        const prePassRenderer = this.getScene().enablePrePassRenderer();\r\n        if (prePassRenderer) {\r\n            prePassRenderer.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates that we need to re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsAllDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._AllDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that image processing needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsImageProcessingDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._ImageProcessingDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that textures need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsTexturesDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._TextureDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that fresnel needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsFresnelDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._FresnelDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that fresnel and misc need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsFresnelAndMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._FresnelAndMiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that lights need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsLightsDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._LightsDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that attributes need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsAttributesDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._AttributeDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that misc needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that prepass needs to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsPrePassDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._MiscDirtyCallBack);\r\n    }\r\n\r\n    /**\r\n     * Indicates that textures and misc need to be re-calculated for all submeshes\r\n     */\r\n    protected _markAllSubMeshesAsTexturesAndMiscDirty() {\r\n        this._markAllSubMeshesAsDirty(Material._TextureAndMiscDirtyCallBack);\r\n    }\r\n\r\n    protected _checkScenePerformancePriority() {\r\n        if (this._scene.performancePriority !== ScenePerformancePriority.BackwardCompatible) {\r\n            this.checkReadyOnlyOnce = true;\r\n            // re-set the flag when the perf priority changes\r\n            const observer = this._scene.onScenePerformancePriorityChangedObservable.addOnce(() => {\r\n                this.checkReadyOnlyOnce = false;\r\n            });\r\n            // if this material is disposed before the scene is disposed, cleanup the observer\r\n            this.onDisposeObservable.add(() => {\r\n                this._scene.onScenePerformancePriorityChangedObservable.remove(observer);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     * @param prePassRenderer defines the prepass renderer to setup.\r\n     * @returns true if the pre pass is needed.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setPrePassRenderer(prePassRenderer: PrePassRenderer): boolean {\r\n        // Do Nothing by default\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param _forceDisposeEffect kept for backward compat. We reference count the effect now.\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\r\n     */\r\n    public dispose(_forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean): void {\r\n        const scene = this.getScene();\r\n        // Animations\r\n        scene.stopAnimation(this);\r\n        scene.freeProcessedMaterials();\r\n\r\n        // Remove from scene\r\n        scene.removeMaterial(this);\r\n\r\n        this._eventInfo.forceDisposeTextures = forceDisposeTextures;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.Disposed, this._eventInfo);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.materials.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.materials.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        if (notBoundToMesh !== true) {\r\n            // Remove from meshes\r\n            if (this.meshMap) {\r\n                for (const meshId in this.meshMap) {\r\n                    const mesh = this.meshMap[meshId];\r\n                    this._disposeMeshResources(mesh);\r\n                }\r\n            } else {\r\n                const meshes = scene.meshes;\r\n                for (const mesh of meshes) {\r\n                    this._disposeMeshResources(mesh);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._uniformBuffer.dispose();\r\n\r\n        // Shader are kept in cache for further use but we can get rid of this by using forceDisposeEffect\r\n        if (this._drawWrapper.effect) {\r\n            if (!this._storeEffectOnSubMeshes) {\r\n                this._drawWrapper.effect.dispose();\r\n            }\r\n\r\n            this._drawWrapper.effect = null;\r\n        }\r\n\r\n        this.metadata = null;\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n\r\n        this.onDisposeObservable.clear();\r\n        if (this._onBindObservable) {\r\n            this._onBindObservable.clear();\r\n        }\r\n\r\n        if (this._onUnBindObservable) {\r\n            this._onUnBindObservable.clear();\r\n        }\r\n\r\n        if (this._onEffectCreatedObservable) {\r\n            this._onEffectCreatedObservable.clear();\r\n        }\r\n\r\n        if (this._eventInfo) {\r\n            this._eventInfo = {} as any;\r\n        }\r\n    }\r\n\r\n    private _disposeMeshResources(mesh: AbstractMesh | undefined) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const geometry = (<Mesh>mesh).geometry;\r\n        const materialForRenderPass = mesh._internalAbstractMeshDataInfo._materialForRenderPass;\r\n        if (this._storeEffectOnSubMeshes) {\r\n            if (mesh.subMeshes && materialForRenderPass) {\r\n                for (const subMesh of mesh.subMeshes) {\r\n                    const drawWrappers = subMesh._drawWrappers;\r\n                    for (let renderPassIndex = 0; renderPassIndex < drawWrappers.length; renderPassIndex++) {\r\n                        const effect = drawWrappers[renderPassIndex]?.effect;\r\n                        if (!effect) {\r\n                            continue;\r\n                        }\r\n                        const material = materialForRenderPass[renderPassIndex];\r\n                        if (material === this) {\r\n                            geometry?._releaseVertexArrayObject(effect);\r\n                            subMesh._removeDrawWrapper(renderPassIndex, true, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            geometry?._releaseVertexArrayObject(this._drawWrapper.effect);\r\n        }\r\n\r\n        if (mesh.material === this && !(mesh as InstancedMesh).sourceMesh) {\r\n            mesh.material = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes this material\r\n     * @returns the serialized material object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n\r\n        serializationObject.stencil = this.stencil.serialize();\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        this._serializePlugins(serializationObject);\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    protected _serializePlugins(serializationObject: any) {\r\n        serializationObject.plugins = {};\r\n\r\n        if (this.pluginManager) {\r\n            for (const plugin of this.pluginManager._plugins) {\r\n                if (!plugin.doNotSerialize) {\r\n                    serializationObject.plugins[plugin.getClassName()] = plugin.serialize();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a material from parsed material data\r\n     * @param parsedMaterial defines parsed material data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures\r\n     * @returns a new material\r\n     */\r\n    public static Parse(parsedMaterial: any, scene: Scene, rootUrl: string): Nullable<Material> {\r\n        if (!parsedMaterial.customType) {\r\n            parsedMaterial.customType = \"BABYLON.StandardMaterial\";\r\n        } else if (parsedMaterial.customType === \"BABYLON.PBRMaterial\" && parsedMaterial.overloadedAlbedo) {\r\n            parsedMaterial.customType = \"BABYLON.LegacyPBRMaterial\";\r\n            if (!BABYLON.LegacyPBRMaterial) {\r\n                Logger.Error(\"Your scene is trying to load a legacy version of the PBRMaterial, please, include it from the materials library.\");\r\n                return null;\r\n            }\r\n        }\r\n\r\n        const materialType = Tools.Instantiate(parsedMaterial.customType);\r\n        const material = materialType.Parse(parsedMaterial, scene, rootUrl);\r\n        material._loadedUniqueId = parsedMaterial.uniqueId;\r\n\r\n        return material;\r\n    }\r\n\r\n    protected static _ParsePlugins(serializationObject: any, material: Material, scene: Scene, rootUrl: string) {\r\n        if (!serializationObject.plugins) {\r\n            return;\r\n        }\r\n\r\n        for (const pluginClassName in serializationObject.plugins) {\r\n            const pluginData = serializationObject.plugins[pluginClassName];\r\n\r\n            let plugin = material.pluginManager?.getPlugin(pluginData.name);\r\n\r\n            if (!plugin) {\r\n                const pluginClassType = Tools.Instantiate(\"BABYLON.\" + pluginClassName);\r\n                if (pluginClassType) {\r\n                    plugin = new pluginClassType(material);\r\n                }\r\n            }\r\n\r\n            plugin?.parse(pluginData, scene, rootUrl);\r\n        }\r\n    }\r\n}\r\n", "import type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { ISceneComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport type { Layer } from \"./layer\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\n\r\n/**\r\n * Defines the layer scene component responsible to manage any layers\r\n * in a given scene.\r\n */\r\nexport class LayerSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_LAYER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    private _engine: AbstractEngine;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene?: Scene) {\r\n        this.scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this.scene) {\r\n            return;\r\n        }\r\n        this._engine = this.scene.getEngine();\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeCameraDrawStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERADRAW_LAYER, this, this._drawCameraBackground);\r\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LAYER, this, this._drawCameraForegroundWithPostProcessing);\r\n        this.scene._afterCameraPostProcessStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERAPOSTPROCESS_LAYER, this, this._drawCameraForegroundWithoutPostProcessing);\r\n\r\n        this.scene._beforeRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_LAYER, this, this._drawRenderTargetBackground);\r\n        this.scene._afterRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_AFTERRENDERTARGETDRAW_LAYER, this, this._drawRenderTargetForegroundWithPostProcessing);\r\n        this.scene._afterRenderTargetPostProcessStage.registerStep(\r\n            SceneComponentConstants.STEP_AFTERRENDERTARGETPOSTPROCESS_LAYER,\r\n            this,\r\n            this._drawRenderTargetForegroundWithoutPostProcessing\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        const layers = this.scene.layers;\r\n\r\n        for (const layer of layers) {\r\n            layer._rebuild();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const layers = this.scene.layers;\r\n\r\n        while (layers.length) {\r\n            layers[0].dispose();\r\n        }\r\n    }\r\n\r\n    private _draw(predicate: (layer: Layer) => boolean): void {\r\n        const layers = this.scene.layers;\r\n\r\n        if (layers.length) {\r\n            this._engine.setDepthBuffer(false);\r\n            for (const layer of layers) {\r\n                if (predicate(layer)) {\r\n                    layer.render();\r\n                }\r\n            }\r\n            this._engine.setDepthBuffer(true);\r\n        }\r\n    }\r\n\r\n    private _drawCameraPredicate(layer: Layer, isBackground: boolean, applyPostProcess: boolean, cameraLayerMask: number): boolean {\r\n        return (\r\n            !layer.renderOnlyInRenderTargetTextures &&\r\n            layer.isBackground === isBackground &&\r\n            layer.applyPostProcess === applyPostProcess &&\r\n            (layer.layerMask & cameraLayerMask) !== 0\r\n        );\r\n    }\r\n\r\n    private _drawCameraBackground(camera: Camera): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawCameraPredicate(layer, true, true, camera.layerMask);\r\n        });\r\n    }\r\n\r\n    private _drawCameraForegroundWithPostProcessing(camera: Camera): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawCameraPredicate(layer, false, true, camera.layerMask);\r\n        });\r\n    }\r\n\r\n    private _drawCameraForegroundWithoutPostProcessing(camera: Camera): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawCameraPredicate(layer, false, false, camera.layerMask);\r\n        });\r\n    }\r\n\r\n    private _drawRenderTargetPredicate(layer: Layer, isBackground: boolean, applyPostProcess: boolean, cameraLayerMask: number, renderTargetTexture: RenderTargetTexture): boolean {\r\n        return (\r\n            layer.renderTargetTextures.length > 0 &&\r\n            layer.isBackground === isBackground &&\r\n            layer.applyPostProcess === applyPostProcess &&\r\n            layer.renderTargetTextures.indexOf(renderTargetTexture) > -1 &&\r\n            (layer.layerMask & cameraLayerMask) !== 0\r\n        );\r\n    }\r\n\r\n    private _drawRenderTargetBackground(renderTarget: RenderTargetTexture): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawRenderTargetPredicate(layer, true, true, this.scene.activeCamera!.layerMask, renderTarget);\r\n        });\r\n    }\r\n\r\n    private _drawRenderTargetForegroundWithPostProcessing(renderTarget: RenderTargetTexture): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawRenderTargetPredicate(layer, false, true, this.scene.activeCamera!.layerMask, renderTarget);\r\n        });\r\n    }\r\n\r\n    private _drawRenderTargetForegroundWithoutPostProcessing(renderTarget: RenderTargetTexture): void {\r\n        this._draw((layer: Layer) => {\r\n            return this._drawRenderTargetPredicate(layer, false, false, this.scene.activeCamera!.layerMask, renderTarget);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    public addFromContainer(container: IAssetContainer): void {\r\n        if (!container.layers) {\r\n            return;\r\n        }\r\n        container.layers.forEach((layer) => {\r\n            this.scene.layers.push(layer);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    public removeFromContainer(container: IAssetContainer, dispose = false): void {\r\n        if (!container.layers) {\r\n            return;\r\n        }\r\n        container.layers.forEach((layer) => {\r\n            const index = this.scene.layers.indexOf(layer);\r\n            if (index !== -1) {\r\n                this.scene.layers.splice(index, 1);\r\n            }\r\n            if (dispose) {\r\n                layer.dispose();\r\n            }\r\n        });\r\n    }\r\n}\r\n", "import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { LayerSceneComponent } from \"./layerSceneComponent\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { DrawWrapper } from \"../Materials/drawWrapper\";\r\n\r\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\r\n\r\n/**\r\n * This represents a full screen 2d layer.\r\n * This can be useful to display a picture in the  background of your scene for instance.\r\n * @see https://www.babylonjs-playground.com/#08A2BS#1\r\n */\r\nexport class Layer {\r\n    /**\r\n     * Force all the layers to compile to glsl even on WebGPU engines.\r\n     * False by default. This is mostly meant for backward compatibility.\r\n     */\r\n    public static ForceGLSL = false;\r\n    /**\r\n     * Define the texture the layer should display.\r\n     */\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Is the layer in background or foreground.\r\n     */\r\n    public isBackground: boolean;\r\n\r\n    private _applyPostProcess: boolean = true;\r\n    /**\r\n     * Determines if the layer is drawn before (true) or after (false) post-processing.\r\n     * If the layer is background, it is always before.\r\n     */\r\n    public set applyPostProcess(value: boolean) {\r\n        this._applyPostProcess = value;\r\n    }\r\n    public get applyPostProcess(): boolean {\r\n        return this.isBackground || this._applyPostProcess;\r\n    }\r\n\r\n    /**\r\n     * Define the color of the layer (instead of texture).\r\n     */\r\n    public color: Color4;\r\n\r\n    /**\r\n     * Define the scale of the layer in order to zoom in out of the texture.\r\n     */\r\n    public scale = new Vector2(1, 1);\r\n\r\n    /**\r\n     * Define an offset for the layer in order to shift the texture.\r\n     */\r\n    public offset = new Vector2(0, 0);\r\n\r\n    /**\r\n     * Define the alpha blending mode used in the layer in case the texture or color has an alpha.\r\n     */\r\n    public alphaBlendingMode = Constants.ALPHA_COMBINE;\r\n\r\n    /**\r\n     * Define if the layer should alpha test or alpha blend with the rest of the scene.\r\n     * Alpha test will not mix with the background color in case of transparency.\r\n     * It will either use the texture color or the background depending on the alpha value of the current pixel.\r\n     */\r\n    public alphaTest: boolean;\r\n\r\n    /**\r\n     * Define a mask to restrict the layer to only some of the scene cameras.\r\n     */\r\n    public layerMask: number = 0x0fffffff;\r\n\r\n    /**\r\n     * Define the list of render target the layer is visible into.\r\n     */\r\n    public renderTargetTextures: RenderTargetTexture[] = [];\r\n\r\n    /**\r\n     * Define if the layer is only used in renderTarget or if it also\r\n     * renders in the main frame buffer of the canvas.\r\n     */\r\n    public renderOnlyInRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Define if the colors of the layer should be generated in linear space (default: false)\r\n     */\r\n    public convertToLinearSpace = false;\r\n\r\n    /**\r\n     * Define if the layer is enabled (ie. should be displayed). Default: true\r\n     */\r\n    public isEnabled = true;\r\n\r\n    private _scene: Scene;\r\n    private _vertexBuffers: { [key: string]: Nullable<VertexBuffer> } = {};\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _drawWrapper: DrawWrapper;\r\n    private _previousDefines: string;\r\n\r\n    /**\r\n     * An event triggered when the layer is disposed.\r\n     */\r\n    public onDisposeObservable = new Observable<Layer>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onDisposeObservable existed.\r\n     * The set callback will be triggered when the layer has been disposed.\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the scene\r\n     */\r\n    public onBeforeRenderObservable = new Observable<Layer>();\r\n\r\n    private _onBeforeRenderObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onBeforeRenderObservable existed.\r\n     * The set callback will be triggered just before rendering the layer.\r\n     */\r\n    public set onBeforeRender(callback: () => void) {\r\n        if (this._onBeforeRenderObserver) {\r\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        }\r\n        this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the scene\r\n     */\r\n    public onAfterRenderObservable = new Observable<Layer>();\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onAfterRenderObservable existed.\r\n     * The set callback will be triggered just after rendering the layer.\r\n     */\r\n    public set onAfterRender(callback: () => void) {\r\n        if (this._onAfterRenderObserver) {\r\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        }\r\n        this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\r\n    }\r\n\r\n    /** Shader language used by the material */\r\n    private _shaderLanguage = ShaderLanguage.GLSL;\r\n\r\n    /**\r\n     * Gets the shader language used in this material.\r\n     */\r\n    public get shaderLanguage(): ShaderLanguage {\r\n        return this._shaderLanguage;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new layer.\r\n     * This represents a full screen 2d layer.\r\n     * This can be useful to display a picture in the  background of your scene for instance.\r\n     * @see https://www.babylonjs-playground.com/#08A2BS#1\r\n     * @param name Define the name of the layer in the scene\r\n     * @param imgUrl Define the url of the texture to display in the layer\r\n     * @param scene Define the scene the layer belongs to\r\n     * @param isBackground Defines whether the layer is displayed in front or behind the scene\r\n     * @param color Defines a color for the layer\r\n     * @param forceGLSL Use the GLSL code generation for the shader (even on WebGPU). Default is false\r\n     */\r\n    constructor(\r\n        /**\r\n         * Define the name of the layer.\r\n         */\r\n        public name: string,\r\n        imgUrl: Nullable<string>,\r\n        scene: Nullable<Scene>,\r\n        isBackground?: boolean,\r\n        color?: Color4,\r\n        forceGLSL = false\r\n    ) {\r\n        this.texture = imgUrl ? new Texture(imgUrl, scene, true) : null;\r\n        this.isBackground = isBackground === undefined ? true : isBackground;\r\n        this.color = color === undefined ? new Color4(1, 1, 1, 1) : color;\r\n\r\n        this._scene = <Scene>(scene || EngineStore.LastCreatedScene);\r\n        const engine = this._scene.getEngine();\r\n        if (engine.isWebGPU && !forceGLSL && !Layer.ForceGLSL) {\r\n            this._shaderLanguage = ShaderLanguage.WGSL;\r\n        }\r\n\r\n        let layerComponent = this._scene._getComponent(SceneComponentConstants.NAME_LAYER) as LayerSceneComponent;\r\n        if (!layerComponent) {\r\n            layerComponent = new LayerSceneComponent(this._scene);\r\n            this._scene._addComponent(layerComponent);\r\n        }\r\n        this._scene.layers.push(this);\r\n\r\n        this._drawWrapper = new DrawWrapper(engine);\r\n\r\n        // VBO\r\n        const vertices = [];\r\n        vertices.push(1, 1);\r\n        vertices.push(-1, 1);\r\n        vertices.push(-1, -1);\r\n        vertices.push(1, -1);\r\n\r\n        const vertexBuffer = new VertexBuffer(engine, vertices, VertexBuffer.PositionKind, false, false, 2);\r\n        this._vertexBuffers[VertexBuffer.PositionKind] = vertexBuffer;\r\n\r\n        this._createIndexBuffer();\r\n    }\r\n\r\n    private _shadersLoaded = false;\r\n\r\n    private _createIndexBuffer(): void {\r\n        const engine = this._scene.getEngine();\r\n\r\n        // Indices\r\n        const indices = [];\r\n        indices.push(0);\r\n        indices.push(1);\r\n        indices.push(2);\r\n\r\n        indices.push(0);\r\n        indices.push(2);\r\n        indices.push(3);\r\n\r\n        this._indexBuffer = engine.createIndexBuffer(indices);\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        const vb = this._vertexBuffers[VertexBuffer.PositionKind];\r\n\r\n        if (vb) {\r\n            vb._rebuild();\r\n        }\r\n\r\n        this._createIndexBuffer();\r\n    }\r\n\r\n    /**\r\n     * Checks if the layer is ready to be rendered\r\n     * @returns true if the layer is ready. False otherwise.\r\n     */\r\n    public isReady() {\r\n        const engine = this._scene.getEngine();\r\n\r\n        let defines = \"\";\r\n\r\n        if (this.alphaTest) {\r\n            defines = \"#define ALPHATEST\";\r\n        }\r\n\r\n        if (this.texture) {\r\n            if (this.texture.gammaSpace) {\r\n                if (this.convertToLinearSpace) {\r\n                    defines += \"\\n#define CONVERT_TO_LINEAR\";\r\n                }\r\n            } else if (!this.convertToLinearSpace) {\r\n                defines += \"\\n#define CONVERT_TO_GAMMA\";\r\n            }\r\n        }\r\n\r\n        if (this._previousDefines !== defines) {\r\n            this._previousDefines = defines;\r\n            this._drawWrapper.effect = engine.createEffect(\r\n                \"layer\",\r\n                [VertexBuffer.PositionKind],\r\n                [\"textureMatrix\", \"color\", \"scale\", \"offset\"],\r\n                [\"textureSampler\"],\r\n                defines,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                this._shaderLanguage,\r\n                this._shadersLoaded\r\n                    ? undefined\r\n                    : async () => {\r\n                          if (this._shaderLanguage === ShaderLanguage.WGSL) {\r\n                              await Promise.all([import(\"../ShadersWGSL/layer.vertex\"), import(\"../ShadersWGSL/layer.fragment\")]);\r\n                          } else {\r\n                              await Promise.all([import(\"../Shaders/layer.vertex\"), import(\"../Shaders/layer.fragment\")]);\r\n                          }\r\n                          this._shadersLoaded = true;\r\n                      }\r\n            );\r\n        }\r\n\r\n        const currentEffect = this._drawWrapper.effect;\r\n\r\n        return !!currentEffect?.isReady() && (!this.texture || this.texture.isReady());\r\n    }\r\n\r\n    /**\r\n     * Renders the layer in the scene.\r\n     */\r\n    public render(): void {\r\n        if (!this.isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        // Check\r\n        if (!this.isReady()) {\r\n            return;\r\n        }\r\n\r\n        const currentEffect = this._drawWrapper.effect!;\r\n\r\n        this.onBeforeRenderObservable.notifyObservers(this);\r\n\r\n        // Render\r\n        engine.enableEffect(this._drawWrapper);\r\n        engine.setState(false);\r\n\r\n        // Texture\r\n        if (this.texture) {\r\n            currentEffect.setTexture(\"textureSampler\", this.texture);\r\n            currentEffect.setMatrix(\"textureMatrix\", this.texture.getTextureMatrix());\r\n        }\r\n\r\n        // Color\r\n        currentEffect.setFloat4(\"color\", this.color.r, this.color.g, this.color.b, this.color.a);\r\n\r\n        // Scale / offset\r\n        currentEffect.setVector2(\"offset\", this.offset);\r\n        currentEffect.setVector2(\"scale\", this.scale);\r\n\r\n        // VBOs\r\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, currentEffect);\r\n\r\n        // Draw order\r\n        if (!this.alphaTest) {\r\n            engine.setAlphaMode(this.alphaBlendingMode);\r\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n            engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n        } else {\r\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n        }\r\n\r\n        this.onAfterRenderObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Disposes and releases the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (vertexBuffer) {\r\n            vertexBuffer.dispose();\r\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\r\n        }\r\n\r\n        if (this._indexBuffer) {\r\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\r\n            this._indexBuffer = null;\r\n        }\r\n\r\n        if (this.texture) {\r\n            this.texture.dispose();\r\n            this.texture = null;\r\n        }\r\n\r\n        // Clean RTT list\r\n        this.renderTargetTextures = [];\r\n\r\n        // Remove from scene\r\n        const index = this._scene.layers.indexOf(this);\r\n        this._scene.layers.splice(index, 1);\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n\r\n        this.onDisposeObservable.clear();\r\n        this.onAfterRenderObservable.clear();\r\n        this.onBeforeRenderObservable.clear();\r\n    }\r\n}\r\n", "// eslint-disable-next-line import/no-internal-modules\r\nimport type { Nullable, FrameGraphContext, IFrameGraphPass, FrameGraphTask } from \"core/index\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class FrameGraphPass<T extends FrameGraphContext> implements IFrameGraphPass {\r\n    private _executeFunc: (context: T) => void;\r\n\r\n    public disabled = false;\r\n\r\n    constructor(\r\n        public name: string,\r\n        protected readonly _parentTask: FrameGraphTask,\r\n        protected readonly _context: T\r\n    ) {}\r\n\r\n    public setExecuteFunc(func: (context: T) => void) {\r\n        this._executeFunc = func;\r\n    }\r\n\r\n    public _execute() {\r\n        if (!this.disabled) {\r\n            this._executeFunc(this._context);\r\n        }\r\n    }\r\n\r\n    public _isValid(): Nullable<string> {\r\n        return this._executeFunc !== undefined ? null : \"Execute function is not set (call setExecuteFunc to set it)\";\r\n    }\r\n}\r\n", "// eslint-disable-next-line import/no-internal-modules\r\nimport type { Nullable, AbstractEngine, IFrameGraphPass, FrameGraphContext, FrameGraphObjectList, FrameGraphTask } from \"core/index\";\r\nimport { FrameGraphPass } from \"./pass\";\r\n\r\n/**\r\n * Cull pass used to filter objects that are not visible.\r\n */\r\nexport class FrameGraphCullPass extends FrameGraphPass<FrameGraphContext> {\r\n    protected readonly _engine: AbstractEngine;\r\n    protected _objectList: FrameGraphObjectList;\r\n\r\n    /**\r\n     * Checks if a pass is a cull pass.\r\n     * @param pass The pass to check.\r\n     * @returns True if the pass is a cull pass, else false.\r\n     */\r\n    public static IsCullPass(pass: IFrameGraphPass): pass is FrameGraphCullPass {\r\n        return (pass as FrameGraphCullPass).setObjectList !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets the object list used by the cull pass.\r\n     */\r\n    public get objectList(): FrameGraphObjectList {\r\n        return this._objectList;\r\n    }\r\n\r\n    /**\r\n     * Sets the object list to use for culling.\r\n     * @param objectList The object list to use for culling.\r\n     */\r\n    public setObjectList(objectList: FrameGraphObjectList) {\r\n        this._objectList = objectList;\r\n    }\r\n\r\n    /** @internal */\r\n    constructor(name: string, parentTask: FrameGraphTask, context: FrameGraphContext, engine: AbstractEngine) {\r\n        super(name, parentTask, context);\r\n        this._engine = engine;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _isValid(): Nullable<string> {\r\n        const errMsg = super._isValid();\r\n        return errMsg ? errMsg : this._objectList !== undefined ? null : \"Object list is not set (call setObjectList to set it)\";\r\n    }\r\n}\r\n", "// eslint-disable-next-line import/no-internal-modules\r\nimport type { Nullable, FrameGraphRenderContext, AbstractEngine, IFrameGraphPass, FrameGraphTextureHandle, FrameGraphTask, FrameGraphRenderTarget } from \"core/index\";\r\nimport { FrameGraphPass } from \"./pass\";\r\n\r\n/**\r\n * Render pass used to render objects.\r\n */\r\nexport class FrameGraphRenderPass extends FrameGraphPass<FrameGraphRenderContext> {\r\n    protected readonly _engine: AbstractEngine;\r\n    protected _renderTarget: FrameGraphTextureHandle | FrameGraphTextureHandle[] | undefined;\r\n    protected _renderTargetDepth: FrameGraphTextureHandle | undefined;\r\n    protected _frameGraphRenderTarget: FrameGraphRenderTarget | undefined;\r\n    protected _dependencies: Set<FrameGraphTextureHandle> = new Set();\r\n\r\n    /**\r\n     * Checks if a pass is a render pass.\r\n     * @param pass The pass to check.\r\n     * @returns True if the pass is a render pass, else false.\r\n     */\r\n    public static IsRenderPass(pass: IFrameGraphPass): pass is FrameGraphRenderPass {\r\n        return (pass as FrameGraphRenderPass).setRenderTarget !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets the render target(s) used by the render pass.\r\n     */\r\n    public get renderTarget(): FrameGraphTextureHandle | FrameGraphTextureHandle[] | undefined {\r\n        return this._renderTarget;\r\n    }\r\n\r\n    /**\r\n     * Gets the render target depth used by the render pass.\r\n     */\r\n    public get renderTargetDepth(): FrameGraphTextureHandle | undefined {\r\n        return this._renderTargetDepth;\r\n    }\r\n\r\n    /** @internal */\r\n    constructor(name: string, parentTask: FrameGraphTask, context: FrameGraphRenderContext, engine: AbstractEngine) {\r\n        super(name, parentTask, context);\r\n        this._engine = engine;\r\n    }\r\n\r\n    /**\r\n     * Sets the render target(s) to use for rendering.\r\n     * @param renderTargetHandle The render target to use for rendering, or an array of render targets to use for multi render target rendering.\r\n     */\r\n    public setRenderTarget(renderTargetHandle?: FrameGraphTextureHandle | FrameGraphTextureHandle[]) {\r\n        this._renderTarget = renderTargetHandle;\r\n    }\r\n\r\n    /**\r\n     * Sets the render target depth to use for rendering.\r\n     * @param renderTargetHandle The render target depth to use for rendering.\r\n     */\r\n    public setRenderTargetDepth(renderTargetHandle?: FrameGraphTextureHandle) {\r\n        this._renderTargetDepth = renderTargetHandle;\r\n    }\r\n\r\n    /**\r\n     * Adds dependencies to the render pass.\r\n     * @param dependencies The dependencies to add.\r\n     */\r\n    public addDependencies(dependencies: FrameGraphTextureHandle | FrameGraphTextureHandle[]) {\r\n        if (Array.isArray(dependencies)) {\r\n            for (const dependency of dependencies) {\r\n                this._dependencies.add(dependency);\r\n            }\r\n        } else {\r\n            this._dependencies.add(dependencies);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collects the dependencies of the render pass.\r\n     * @param dependencies The set of dependencies to update.\r\n     */\r\n    public collectDependencies(dependencies: Set<FrameGraphTextureHandle>): void {\r\n        const iterator = this._dependencies.keys();\r\n        for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n            dependencies.add(key.value);\r\n        }\r\n\r\n        if (this._renderTarget) {\r\n            if (Array.isArray(this._renderTarget)) {\r\n                for (const handle of this._renderTarget) {\r\n                    if (handle !== undefined) {\r\n                        dependencies.add(handle);\r\n                    }\r\n                }\r\n            } else {\r\n                dependencies.add(this._renderTarget);\r\n            }\r\n        }\r\n\r\n        if (this._renderTargetDepth) {\r\n            dependencies.add(this._renderTargetDepth);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _execute() {\r\n        this._frameGraphRenderTarget = this._frameGraphRenderTarget || this._context.createRenderTarget(this.name, this._renderTarget, this._renderTargetDepth);\r\n\r\n        this._context.bindRenderTarget(this._frameGraphRenderTarget, `frame graph render pass - ${this.name}`);\r\n\r\n        super._execute();\r\n\r\n        this._context._flushDebugMessages();\r\n    }\r\n\r\n    /** @internal */\r\n    public override _isValid(): Nullable<string> {\r\n        const errMsg = super._isValid();\r\n        return errMsg\r\n            ? errMsg\r\n            : this._renderTarget !== undefined || this.renderTargetDepth !== undefined\r\n              ? null\r\n              : \"Render target and render target depth cannot both be undefined.\";\r\n    }\r\n}\r\n", "// eslint-disable-next-line import/no-internal-modules\r\nimport type { FrameGraph, FrameGraphObjectList, IFrameGraphPass, Nullable, FrameGraphTextureHandle, InternalTexture, FrameGraphRenderContext } from \"core/index\";\r\nimport { FrameGraphCullPass } from \"./Passes/cullPass\";\r\nimport { FrameGraphRenderPass } from \"./Passes/renderPass\";\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\n/**\r\n * Represents a task in a frame graph.\r\n * @experimental\r\n */\r\nexport abstract class FrameGraphTask {\r\n    protected readonly _frameGraph: FrameGraph;\r\n\r\n    private readonly _passes: IFrameGraphPass[] = [];\r\n    private readonly _passesDisabled: IFrameGraphPass[] = [];\r\n\r\n    // Note: must be a getter/setter even if there's no specific processing, otherwise inherited classes can't make it a getter/setter!\r\n    // Same thing for the disabled property\r\n    protected _name: string;\r\n\r\n    /**\r\n     * The name of the task.\r\n     */\r\n    public get name() {\r\n        return this._name;\r\n    }\r\n\r\n    public set name(value: string) {\r\n        this._name = value;\r\n    }\r\n\r\n    protected _disabled = false;\r\n\r\n    /**\r\n     * Whether the task is disabled.\r\n     */\r\n    public get disabled() {\r\n        return this._disabled;\r\n    }\r\n\r\n    public set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the render passes of the task.\r\n     */\r\n    public get passes() {\r\n        return this._passes;\r\n    }\r\n\r\n    /**\r\n     * Gets the disabled render passes of the task.\r\n     */\r\n    public get passesDisabled() {\r\n        return this._passesDisabled;\r\n    }\r\n\r\n    /**\r\n     * The (texture) dependencies of the task (optional).\r\n     */\r\n    public dependencies?: Set<FrameGraphTextureHandle>;\r\n\r\n    /**\r\n     * Records the task in the frame graph. Use this function to add content (render passes, ...) to the task.\r\n     */\r\n    public abstract record(): void;\r\n\r\n    /**\r\n     * An observable that is triggered after the textures have been allocated.\r\n     */\r\n    public onTexturesAllocatedObservable: Observable<FrameGraphRenderContext> = new Observable();\r\n\r\n    /**\r\n     * Checks if the task is ready to be executed.\r\n     * @returns True if the task is ready to be executed, else false.\r\n     */\r\n    public isReady(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the task.\r\n     */\r\n    public dispose() {\r\n        this._reset();\r\n        this.onTexturesAllocatedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Constructs a new frame graph task.\r\n     * @param name The name of the task.\r\n     * @param frameGraph The frame graph this task is associated with.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph) {\r\n        this.name = name;\r\n        this._frameGraph = frameGraph;\r\n        this._reset();\r\n    }\r\n\r\n    /** @internal */\r\n    public _reset() {\r\n        this._passes.length = 0;\r\n        this._passesDisabled.length = 0;\r\n    }\r\n\r\n    /** @internal */\r\n    public _addPass(pass: IFrameGraphPass, disabled: boolean) {\r\n        if (disabled) {\r\n            this._passesDisabled.push(pass);\r\n        } else {\r\n            this._passes.push(pass);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkTask() {\r\n        let outputTexture: Nullable<Nullable<InternalTexture>[]> = null;\r\n        let outputDepthTexture: Nullable<InternalTexture> = null;\r\n        let outputObjectList: FrameGraphObjectList | undefined;\r\n\r\n        for (const pass of this._passes!) {\r\n            const errMsg = pass._isValid();\r\n            if (errMsg) {\r\n                throw new Error(`Pass \"${pass.name}\" is not valid. ${errMsg}`);\r\n            }\r\n            if (FrameGraphRenderPass.IsRenderPass(pass)) {\r\n                const handles = Array.isArray(pass.renderTarget) ? pass.renderTarget : [pass.renderTarget];\r\n                outputTexture = [];\r\n                for (const handle of handles) {\r\n                    if (handle !== undefined) {\r\n                        outputTexture.push(this._frameGraph.textureManager.getTextureFromHandle(handle));\r\n                    }\r\n                }\r\n                outputDepthTexture = pass.renderTargetDepth !== undefined ? this._frameGraph.textureManager.getTextureFromHandle(pass.renderTargetDepth) : null;\r\n            } else if (FrameGraphCullPass.IsCullPass(pass)) {\r\n                outputObjectList = pass.objectList;\r\n            }\r\n        }\r\n\r\n        let disabledOutputTexture: Nullable<Nullable<InternalTexture>[]> = null;\r\n        let disabledOutputTextureHandle: (FrameGraphTextureHandle | undefined)[] = [];\r\n        let disabledOutputDepthTexture: Nullable<InternalTexture> = null;\r\n        let disabledOutputObjectList: FrameGraphObjectList | undefined;\r\n\r\n        for (const pass of this._passesDisabled!) {\r\n            const errMsg = pass._isValid();\r\n            if (errMsg) {\r\n                throw new Error(`Pass \"${pass.name}\" is not valid. ${errMsg}`);\r\n            }\r\n            if (FrameGraphRenderPass.IsRenderPass(pass)) {\r\n                const handles = Array.isArray(pass.renderTarget) ? pass.renderTarget : [pass.renderTarget];\r\n                disabledOutputTexture = [];\r\n                for (const handle of handles) {\r\n                    if (handle !== undefined) {\r\n                        disabledOutputTexture.push(this._frameGraph.textureManager.getTextureFromHandle(handle));\r\n                    }\r\n                }\r\n                disabledOutputTextureHandle = handles;\r\n                disabledOutputDepthTexture = pass.renderTargetDepth !== undefined ? this._frameGraph.textureManager.getTextureFromHandle(pass.renderTargetDepth) : null;\r\n            } else if (FrameGraphCullPass.IsCullPass(pass)) {\r\n                disabledOutputObjectList = pass.objectList;\r\n            }\r\n        }\r\n\r\n        if (this._passesDisabled.length > 0) {\r\n            if (!this._checkSameRenderTarget(outputTexture, disabledOutputTexture)) {\r\n                let ok = true;\r\n                for (const handle of disabledOutputTextureHandle) {\r\n                    if (handle !== undefined && !this._frameGraph.textureManager.isHistoryTexture(handle)) {\r\n                        ok = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!ok) {\r\n                    throw new Error(`The output texture of the task \"${this.name}\" is different when it is enabled or disabled.`);\r\n                }\r\n            }\r\n            if (outputDepthTexture !== disabledOutputDepthTexture) {\r\n                throw new Error(`The output depth texture of the task \"${this.name}\" is different when it is enabled or disabled.`);\r\n            }\r\n            if (outputObjectList !== disabledOutputObjectList) {\r\n                throw new Error(`The output object list of the task \"${this.name}\" is different when it is enabled or disabled.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _getPasses(): IFrameGraphPass[] {\r\n        return this.disabled && this._passesDisabled.length > 0 ? this._passesDisabled : this._passes;\r\n    }\r\n\r\n    private _checkSameRenderTarget(src: Nullable<Nullable<InternalTexture>[]>, dst: Nullable<Nullable<InternalTexture>[]>) {\r\n        if (src === null || dst === null) {\r\n            return src === dst;\r\n        }\r\n\r\n        if (src.length !== dst.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < src.length; i++) {\r\n            if (src[i] !== dst[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n", "// eslint-disable-next-line import/no-internal-modules\r\nimport type { Color4, Scene, FrameGraphTextureHandle, Camera, FrameGraphObjectList, IShadowLight, FrameGraphShadowGeneratorTask, FrameGraphObjectRendererTask } from \"core/index\";\r\n\r\n/**\r\n * Interface used to configure the node render graph editor\r\n */\r\nexport interface INodeRenderGraphEditorOptions {\r\n    /** Define the URL to load node editor script from */\r\n    editorURL?: string;\r\n    /** Additional configuration for the FGE */\r\n    nodeRenderGraphEditorConfig?: {\r\n        backgroundColor?: Color4;\r\n        hostScene?: Scene;\r\n    };\r\n}\r\n\r\n/**\r\n * Options that can be passed to the node render graph build method\r\n */\r\nexport interface INodeRenderGraphCreateOptions {\r\n    /** If true, textures created by the node render graph will be visible in the inspector, for easier debugging (default: false) */\r\n    debugTextures?: boolean;\r\n    /** Rebuild the node render graph when the screen is resized (default: true) */\r\n    rebuildGraphOnEngineResize?: boolean;\r\n    /** Defines if the build should log activity (default: false) */\r\n    verbose?: boolean;\r\n    /** Defines if the autoConfigure method should be called when initializing blocks (default: false) */\r\n    autoConfigure?: boolean;\r\n    /** If true, external inputs like object lists and cameras will be filled with default values, taken from the scene. Note that external textures are not concerned (default: true). */\r\n    autoFillExternalInputs?: boolean;\r\n}\r\n\r\n/**\r\n * Defines the kind of connection point for node render graph nodes\r\n */\r\nexport enum NodeRenderGraphBlockConnectionPointTypes {\r\n    /** General purpose texture */\r\n    Texture = 0x00000001,\r\n    /** Back buffer color texture */\r\n    TextureBackBuffer = 0x00000002,\r\n    /** Back buffer depth/stencil attachment */\r\n    TextureBackBufferDepthStencilAttachment = 0x00000004,\r\n    /** Depth/stencil attachment */\r\n    TextureDepthStencilAttachment = 0x00000008,\r\n    /** Depth (in view space) geometry texture */\r\n    TextureViewDepth = 0x00000010,\r\n    /** Normal (in view space) geometry texture */\r\n    TextureViewNormal = 0x00000020,\r\n    /** Albedo geometry texture */\r\n    TextureAlbedo = 0x00000040,\r\n    /** Reflectivity geometry texture */\r\n    TextureReflectivity = 0x00000080,\r\n    /** Position (in world space) geometry texture */\r\n    TextureWorldPosition = 0x00000100,\r\n    /** Velocity geometry texture */\r\n    TextureVelocity = 0x00000200,\r\n    /** Irradiance geometry texture */\r\n    TextureIrradiance = 0x00000400,\r\n    /** Albedo (sqrt) geometry texture */\r\n    TextureAlbedoSqrt = 0x00000800,\r\n    /** Depth (in screen space) geometry texture */\r\n    TextureScreenDepth = 0x00001000,\r\n    /** Normal (in world space) geometry texture */\r\n    TextureWorldNormal = 0x00002000,\r\n    /** Position (in local space) geometry texture */\r\n    TextureLocalPosition = 0x00004000,\r\n    /** Linear velocity geometry texture */\r\n    TextureLinearVelocity = 0x00008000,\r\n\r\n    /** Bit field for all textures but back buffer depth/stencil */\r\n    TextureAllButBackBufferDepthStencil = 0x000ffffb,\r\n    /** Bit field for all textures but back buffer color and depth/stencil */\r\n    TextureAllButBackBuffer = 0x000ffff9,\r\n    /** Bit field for all textures */\r\n    TextureAll = 0x000fffff,\r\n\r\n    /** Resource container */\r\n    ResourceContainer = 0x00100000,\r\n    /** Shadow generator */\r\n    ShadowGenerator = 0x00200000,\r\n    /** Light */\r\n    ShadowLight = 0x00400000,\r\n    /** Camera */\r\n    Camera = 0x01000000,\r\n    /** List of objects (meshes, particle systems, sprites) */\r\n    ObjectList = 0x02000000,\r\n\r\n    /** Detect type based on connection */\r\n    AutoDetect = 0x10000000,\r\n    /** Output type that will be defined by input type */\r\n    BasedOnInput = 0x20000000,\r\n    /** Undefined */\r\n    Undefined = 0x40000000,\r\n    /** Custom object */\r\n    Object = 0x80000000,\r\n    /** Bitmask of all types */\r\n    All = 0xffffffff,\r\n}\r\n\r\n/**\r\n * Enum used to define the compatibility state between two connection points\r\n */\r\nexport const enum NodeRenderGraphConnectionPointCompatibilityStates {\r\n    /** Points are compatibles */\r\n    Compatible,\r\n    /** Points are incompatible because of their types */\r\n    TypeIncompatible,\r\n    /** Points are incompatible because they are in the same hierarchy **/\r\n    HierarchyIssue,\r\n}\r\n\r\n/**\r\n * Defines the direction of a connection point\r\n */\r\nexport const enum NodeRenderGraphConnectionPointDirection {\r\n    /** Input */\r\n    Input,\r\n    /** Output */\r\n    Output,\r\n}\r\n\r\n/**\r\n * Defines the type of a connection point value\r\n */\r\nexport type NodeRenderGraphBlockConnectionPointValueType =\r\n    | FrameGraphTextureHandle\r\n    | Camera\r\n    | FrameGraphObjectList\r\n    | IShadowLight\r\n    | FrameGraphShadowGeneratorTask\r\n    | FrameGraphObjectRendererTask;\r\n", "import type {\r\n    Nullable,\r\n    NodeRenderGraphBlock,\r\n    NodeRenderGraphBlockConnectionPointValueType,\r\n    NodeRenderGraphInputBlock,\r\n    IShadowLight,\r\n    FrameGraphShadowGeneratorTask,\r\n    // eslint-disable-next-line import/no-internal-modules\r\n} from \"core/index\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { NodeRenderGraphBlockConnectionPointTypes, NodeRenderGraphConnectionPointCompatibilityStates, NodeRenderGraphConnectionPointDirection } from \"./Types/nodeRenderGraphTypes\";\r\n\r\n/**\r\n * Defines a connection point for a block\r\n */\r\nexport class NodeRenderGraphConnectionPoint {\r\n    private readonly _ownerBlock: NodeRenderGraphBlock;\r\n    private _connectedPoint: Nullable<NodeRenderGraphConnectionPoint> = null;\r\n\r\n    /** @internal */\r\n    public _acceptedConnectionPointType: Nullable<NodeRenderGraphConnectionPoint> = null;\r\n\r\n    private _endpoints = new Array<NodeRenderGraphConnectionPoint>();\r\n    private readonly _direction: NodeRenderGraphConnectionPointDirection;\r\n    private _type = NodeRenderGraphBlockConnectionPointTypes.Undefined;\r\n\r\n    /** @internal */\r\n    public _linkedConnectionSource: Nullable<NodeRenderGraphConnectionPoint> = null;\r\n\r\n    /** @internal */\r\n    public _isMainLinkSource = false;\r\n\r\n    /** @internal */\r\n    public _typeConnectionSource: Nullable<NodeRenderGraphConnectionPoint | (() => NodeRenderGraphConnectionPoint)> = null;\r\n\r\n    /** @internal */\r\n    public _defaultConnectionPointType: Nullable<NodeRenderGraphBlockConnectionPointTypes> = null;\r\n\r\n    /** Gets the direction of the point */\r\n    public get direction() {\r\n        return this._direction;\r\n    }\r\n\r\n    /**\r\n     * Checks if the value is a texture handle\r\n     * @param value The value to check\r\n     * @returns True if the value is a texture handle\r\n     */\r\n    public static IsTextureHandle(value: NodeRenderGraphBlockConnectionPointValueType | undefined): boolean {\r\n        return value !== undefined && Number.isFinite(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if the value is a shadow generator task\r\n     * @param value The value to check\r\n     * @returns True if the value is a shadow generator\r\n     */\r\n    public static IsShadowGenerator(value: NodeRenderGraphBlockConnectionPointValueType | undefined): boolean {\r\n        return value !== undefined && (value as FrameGraphShadowGeneratorTask).mapSize !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Checks if the value is a shadow light\r\n     * @param value The value to check\r\n     * @returns True if the value is a shadow light\r\n     */\r\n    public static IsShadowLight(value: NodeRenderGraphBlockConnectionPointValueType | undefined): boolean {\r\n        return value !== undefined && (value as IShadowLight).setShadowProjectionMatrix !== undefined;\r\n    }\r\n\r\n    /**\r\n     * The value stored in this connection point\r\n     */\r\n    public value: NodeRenderGraphBlockConnectionPointValueType | undefined;\r\n\r\n    /** Indicates that this connection point needs dual validation before being connected to another point */\r\n    public needDualDirectionValidation: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets the additional types supported by this connection point\r\n     */\r\n    public acceptedConnectionPointTypes: NodeRenderGraphBlockConnectionPointTypes[] = [];\r\n\r\n    /**\r\n     * Gets or sets the additional types excluded by this connection point\r\n     */\r\n    public excludedConnectionPointTypes: NodeRenderGraphBlockConnectionPointTypes[] = [];\r\n\r\n    /**\r\n     * Observable triggered when this point is connected\r\n     */\r\n    public onConnectionObservable = new Observable<NodeRenderGraphConnectionPoint>();\r\n\r\n    /**\r\n     * Observable triggered when this point is disconnected\r\n     */\r\n    public onDisconnectionObservable = new Observable<NodeRenderGraphConnectionPoint>();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is exposed on a frame\r\n     */\r\n    public isExposedOnFrame: boolean = false;\r\n\r\n    /**\r\n     * Gets or sets number indicating the position that the port is exposed to on a frame\r\n     */\r\n    public exposedPortPosition: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the connection point type (default is Undefined)\r\n     */\r\n    public get type(): NodeRenderGraphBlockConnectionPointTypes {\r\n        if (this._type === NodeRenderGraphBlockConnectionPointTypes.AutoDetect) {\r\n            if (this._ownerBlock.isInput) {\r\n                return (this._ownerBlock as NodeRenderGraphInputBlock).type;\r\n            }\r\n\r\n            if (this._connectedPoint) {\r\n                return this._connectedPoint.type;\r\n            }\r\n\r\n            if (this._linkedConnectionSource) {\r\n                if (this._linkedConnectionSource.isConnected) {\r\n                    return this._linkedConnectionSource.type;\r\n                }\r\n                if (this._linkedConnectionSource._defaultConnectionPointType) {\r\n                    return this._linkedConnectionSource._defaultConnectionPointType;\r\n                }\r\n            }\r\n\r\n            if (this._defaultConnectionPointType) {\r\n                return this._defaultConnectionPointType;\r\n            }\r\n        }\r\n\r\n        if (this._type === NodeRenderGraphBlockConnectionPointTypes.BasedOnInput) {\r\n            if (this._typeConnectionSource) {\r\n                const typeConnectionSource = typeof this._typeConnectionSource === \"function\" ? this._typeConnectionSource() : this._typeConnectionSource;\r\n                if (!typeConnectionSource.isConnected) {\r\n                    return this._defaultConnectionPointType ?? typeConnectionSource.type;\r\n                }\r\n                return typeConnectionSource._connectedPoint!.type;\r\n            } else if (this._defaultConnectionPointType) {\r\n                return this._defaultConnectionPointType;\r\n            }\r\n        }\r\n\r\n        return this._type;\r\n    }\r\n\r\n    public set type(value: NodeRenderGraphBlockConnectionPointTypes) {\r\n        this._type = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the connection point name\r\n     */\r\n    public name: string;\r\n\r\n    /**\r\n     * Gets or sets the connection point display name\r\n     */\r\n    public displayName: string;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point can be omitted\r\n     */\r\n    public isOptional: boolean;\r\n\r\n    /**\r\n     * Gets a boolean indicating that the current point is connected to another NodeRenderGraphBlock\r\n     */\r\n    public get isConnected(): boolean {\r\n        return this.connectedPoint !== null || this.hasEndpoints;\r\n    }\r\n\r\n    /** Get the other side of the connection (if any) */\r\n    public get connectedPoint(): Nullable<NodeRenderGraphConnectionPoint> {\r\n        return this._connectedPoint;\r\n    }\r\n\r\n    /** Get the block that owns this connection point */\r\n    public get ownerBlock(): NodeRenderGraphBlock {\r\n        return this._ownerBlock;\r\n    }\r\n\r\n    /** Get the block connected on the other side of this connection (if any) */\r\n    public get sourceBlock(): Nullable<NodeRenderGraphBlock> {\r\n        if (!this._connectedPoint) {\r\n            return null;\r\n        }\r\n\r\n        return this._connectedPoint.ownerBlock;\r\n    }\r\n\r\n    /** Get the block connected on the endpoints of this connection (if any) */\r\n    public get connectedBlocks(): Array<NodeRenderGraphBlock> {\r\n        if (this._endpoints.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        return this._endpoints.map((e) => e.ownerBlock);\r\n    }\r\n\r\n    /** Gets the list of connected endpoints */\r\n    public get endpoints() {\r\n        return this._endpoints;\r\n    }\r\n\r\n    /** Gets a boolean indicating if that output point is connected to at least one input */\r\n    public get hasEndpoints(): boolean {\r\n        return this._endpoints && this._endpoints.length > 0;\r\n    }\r\n\r\n    /** Get the inner type (ie AutoDetect for instance instead of the inferred one) */\r\n    public get innerType() {\r\n        if (this._linkedConnectionSource && !this._isMainLinkSource && this._linkedConnectionSource.isConnected) {\r\n            return this.type;\r\n        }\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Creates a block suitable to be used as an input for this input point.\r\n     * If null is returned, a block based on the point type will be created.\r\n     * @returns The returned string parameter is the name of the output point of NodeRenderGraphBlock (first parameter of the returned array) that can be connected to the input\r\n     */\r\n    public createCustomInputBlock(): Nullable<[NodeRenderGraphBlock, string]> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection point\r\n     * @param name defines the connection point name\r\n     * @param ownerBlock defines the block hosting this connection point\r\n     * @param direction defines the direction of the connection point\r\n     */\r\n    public constructor(name: string, ownerBlock: NodeRenderGraphBlock, direction: NodeRenderGraphConnectionPointDirection) {\r\n        this._ownerBlock = ownerBlock;\r\n        this.name = name;\r\n        this._direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name e.g. \"NodeRenderGraphConnectionPoint\"\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"NodeRenderGraphConnectionPoint\";\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current point can be connected to another point\r\n     * @param connectionPoint defines the other connection point\r\n     * @returns a boolean\r\n     */\r\n    public canConnectTo(connectionPoint: NodeRenderGraphConnectionPoint) {\r\n        return this.checkCompatibilityState(connectionPoint) === NodeRenderGraphConnectionPointCompatibilityStates.Compatible;\r\n    }\r\n\r\n    /**\r\n     * Gets a number indicating if the current point can be connected to another point\r\n     * @param connectionPoint defines the other connection point\r\n     * @returns a number defining the compatibility state\r\n     */\r\n    public checkCompatibilityState(connectionPoint: NodeRenderGraphConnectionPoint): NodeRenderGraphConnectionPointCompatibilityStates {\r\n        const ownerBlock = this._ownerBlock;\r\n        const otherBlock = connectionPoint.ownerBlock;\r\n\r\n        if (this.type !== connectionPoint.type && connectionPoint.innerType !== NodeRenderGraphBlockConnectionPointTypes.AutoDetect) {\r\n            // Accepted types\r\n            if (connectionPoint.acceptedConnectionPointTypes && connectionPoint.acceptedConnectionPointTypes.indexOf(this.type) !== -1) {\r\n                return NodeRenderGraphConnectionPointCompatibilityStates.Compatible;\r\n            } else {\r\n                return NodeRenderGraphConnectionPointCompatibilityStates.TypeIncompatible;\r\n            }\r\n        }\r\n\r\n        // Excluded\r\n        if (connectionPoint.excludedConnectionPointTypes && connectionPoint.excludedConnectionPointTypes.indexOf(this.type) !== -1) {\r\n            return NodeRenderGraphConnectionPointCompatibilityStates.TypeIncompatible;\r\n        }\r\n\r\n        // Check hierarchy\r\n        let targetBlock = otherBlock;\r\n        let sourceBlock = ownerBlock;\r\n        if (this.direction === NodeRenderGraphConnectionPointDirection.Input) {\r\n            targetBlock = ownerBlock;\r\n            sourceBlock = otherBlock;\r\n        }\r\n\r\n        if (targetBlock.isAnAncestorOf(sourceBlock)) {\r\n            return NodeRenderGraphConnectionPointCompatibilityStates.HierarchyIssue;\r\n        }\r\n\r\n        return NodeRenderGraphConnectionPointCompatibilityStates.Compatible;\r\n    }\r\n\r\n    /**\r\n     * Connect this point to another connection point\r\n     * @param connectionPoint defines the other connection point\r\n     * @param ignoreConstraints defines if the system will ignore connection type constraints (default is false)\r\n     * @returns the current connection point\r\n     */\r\n    public connectTo(connectionPoint: NodeRenderGraphConnectionPoint, ignoreConstraints = false): NodeRenderGraphConnectionPoint {\r\n        if (!ignoreConstraints && !this.canConnectTo(connectionPoint)) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"Cannot connect these two connectors.\";\r\n        }\r\n\r\n        this._endpoints.push(connectionPoint);\r\n        connectionPoint._connectedPoint = this;\r\n\r\n        this.onConnectionObservable.notifyObservers(connectionPoint);\r\n        connectionPoint.onConnectionObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disconnect this point from one of his endpoint\r\n     * @param endpoint defines the other connection point\r\n     * @returns the current connection point\r\n     */\r\n    public disconnectFrom(endpoint: NodeRenderGraphConnectionPoint): NodeRenderGraphConnectionPoint {\r\n        const index = this._endpoints.indexOf(endpoint);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._endpoints.splice(index, 1);\r\n        endpoint._connectedPoint = null;\r\n\r\n        this.onDisconnectionObservable.notifyObservers(endpoint);\r\n        endpoint.onDisconnectionObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Fills the list of excluded connection point types with all types other than those passed in the parameter\r\n     * @param mask Types (ORed values of NodeRenderGraphBlockConnectionPointTypes) that are allowed, and thus will not be pushed to the excluded list\r\n     */\r\n    public addExcludedConnectionPointFromAllowedTypes(mask: number): void {\r\n        let bitmask = 0;\r\n        let val = 2 ** bitmask;\r\n        // Note: don't use 1 << bitmask instead of 2 ** bitmask, as it will cause an infinite loop because 1 << 31 is negative!\r\n        while (val < NodeRenderGraphBlockConnectionPointTypes.All) {\r\n            if (!(mask & val)) {\r\n                this.excludedConnectionPointTypes.push(val);\r\n            }\r\n            bitmask++;\r\n            val = 2 ** bitmask;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds accepted connection point types\r\n     * @param mask Types (ORed values of NodeRenderGraphBlockConnectionPointTypes) that are allowed to connect to this point\r\n     */\r\n    public addAcceptedConnectionPointTypes(mask: number): void {\r\n        let bitmask = 0;\r\n        let val = 2 ** bitmask;\r\n        // Note: don't use 1 << bitmask instead of 2 ** bitmask, as it will cause an infinite loop because 1 << 31 is negative!\r\n        while (val < NodeRenderGraphBlockConnectionPointTypes.All) {\r\n            if (mask & val && this.acceptedConnectionPointTypes.indexOf(val) === -1) {\r\n                this.acceptedConnectionPointTypes.push(val);\r\n            }\r\n            bitmask++;\r\n            val = 2 ** bitmask;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes this point in a JSON representation\r\n     * @param isInput defines if the connection point is an input (default is true)\r\n     * @returns the serialized point object\r\n     */\r\n    public serialize(isInput = true): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.displayName = this.displayName;\r\n\r\n        if (isInput && this.connectedPoint) {\r\n            serializationObject.inputName = this.name;\r\n            serializationObject.targetBlockId = this.connectedPoint.ownerBlock.uniqueId;\r\n            serializationObject.targetConnectionName = this.connectedPoint.name;\r\n            serializationObject.isExposedOnFrame = true;\r\n            serializationObject.exposedPortPosition = this.exposedPortPosition;\r\n        }\r\n\r\n        if (this.isExposedOnFrame || this.exposedPortPosition >= 0) {\r\n            serializationObject.isExposedOnFrame = true;\r\n            serializationObject.exposedPortPosition = this.exposedPortPosition;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Release resources\r\n     */\r\n    public dispose() {\r\n        this.onConnectionObservable.clear();\r\n        this.onDisconnectionObservable.clear();\r\n    }\r\n}\r\n", "import type {\r\n    NodeRenderGraphBuildState,\r\n    Nullable,\r\n    NodeRenderGraphInputBlock,\r\n    AbstractEngine,\r\n    Scene,\r\n    FrameGraphTask,\r\n    FrameGraph,\r\n    NodeRenderGraphResourceContainerBlock,\r\n    FrameGraphTextureHandle,\r\n    // eslint-disable-next-line import/no-internal-modules\r\n} from \"core/index\";\r\nimport { GetClass } from \"../../Misc/typeStore\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { UniqueIdGenerator } from \"../../Misc/uniqueIdGenerator\";\r\nimport { NodeRenderGraphBlockConnectionPointTypes, NodeRenderGraphConnectionPointDirection } from \"./Types/nodeRenderGraphTypes\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { NodeRenderGraphConnectionPoint } from \"./nodeRenderGraphBlockConnectionPoint\";\r\n\r\n/**\r\n * Defines a block that can be used inside a node render graph\r\n */\r\nexport class NodeRenderGraphBlock {\r\n    private _name = \"\";\r\n    private _buildId: number;\r\n    protected _isInput = false;\r\n    protected _isTeleportOut = false;\r\n    protected _isTeleportIn = false;\r\n    protected _isDebug = false;\r\n    protected _isUnique = false;\r\n    protected _scene: Scene;\r\n    protected _engine: AbstractEngine;\r\n    protected _frameGraph: FrameGraph;\r\n    protected _frameGraphTask?: FrameGraphTask;\r\n\r\n    /**\r\n     * Gets or sets the disable flag of the task associated with this block\r\n     */\r\n    public get disabled() {\r\n        return !!this._frameGraphTask?.disabled;\r\n    }\r\n\r\n    public set disabled(value: boolean) {\r\n        if (this._frameGraphTask) {\r\n            this._frameGraphTask.disabled = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the frame graph task associated with this block\r\n     */\r\n    public get task() {\r\n        return this._frameGraphTask;\r\n    }\r\n\r\n    /**\r\n     * Gets an observable raised when the block is built\r\n     */\r\n    public onBuildObservable = new Observable<NodeRenderGraphBlock>();\r\n\r\n    /** @internal */\r\n    public _inputs = new Array<NodeRenderGraphConnectionPoint>();\r\n\r\n    /** @internal */\r\n    public _outputs = new Array<NodeRenderGraphConnectionPoint>();\r\n\r\n    /** @internal */\r\n    public _codeVariableName = \"\";\r\n\r\n    /** @internal */\r\n    public _additionalConstructionParameters: Nullable<unknown[]> = null;\r\n\r\n    /**\r\n     * Gets the list of input points\r\n     */\r\n    public get inputs(): NodeRenderGraphConnectionPoint[] {\r\n        return this._inputs;\r\n    }\r\n\r\n    /** Gets the list of output points */\r\n    public get outputs(): NodeRenderGraphConnectionPoint[] {\r\n        return this._outputs;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets or set the name of the block\r\n     */\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    public set name(value: string) {\r\n        this._name = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this block is an input\r\n     */\r\n    public get isInput(): boolean {\r\n        return this._isInput;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this block is a teleport out\r\n     */\r\n    public get isTeleportOut(): boolean {\r\n        return this._isTeleportOut;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this block is a teleport in\r\n     */\r\n    public get isTeleportIn(): boolean {\r\n        return this._isTeleportIn;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this block is a debug block\r\n     */\r\n    public get isDebug(): boolean {\r\n        return this._isDebug;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that this block can only be used once per node render graph\r\n     */\r\n    public get isUnique() {\r\n        return this._isUnique;\r\n    }\r\n\r\n    /**\r\n     * A free comment about the block\r\n     */\r\n    @serialize(\"comment\")\r\n    public comments: string;\r\n\r\n    /** Gets or sets a boolean indicating that this input can be edited from a collapsed frame */\r\n    public visibleOnFrame = false;\r\n\r\n    /**\r\n     * Gets the current class name e.g. \"NodeRenderGraphBlock\"\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"NodeRenderGraphBlock\";\r\n    }\r\n\r\n    protected _inputRename(name: string) {\r\n        return name;\r\n    }\r\n\r\n    protected _outputRename(name: string) {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current block is an ancestor of a given block\r\n     * @param block defines the potential descendant block to check\r\n     * @returns true if block is a descendant\r\n     */\r\n    public isAnAncestorOf(block: NodeRenderGraphBlock): boolean {\r\n        for (const output of this._outputs) {\r\n            if (!output.hasEndpoints) {\r\n                continue;\r\n            }\r\n\r\n            for (const endpoint of output.endpoints) {\r\n                if (endpoint.ownerBlock === block) {\r\n                    return true;\r\n                }\r\n\r\n                if (endpoint.ownerBlock.isAnAncestorOf(block)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current block is an ancestor of a given type\r\n     * @param type defines the potential type to check\r\n     * @returns true if block is a descendant\r\n     */\r\n    public isAnAncestorOfType(type: string): boolean {\r\n        if (this.getClassName() === type) {\r\n            return true;\r\n        }\r\n\r\n        for (const output of this._outputs) {\r\n            if (!output.hasEndpoints) {\r\n                continue;\r\n            }\r\n\r\n            for (const endpoint of output.endpoints) {\r\n                if (endpoint.ownerBlock.isAnAncestorOfType(type)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get the first descendant using a predicate\r\n     * @param predicate defines the predicate to check\r\n     * @returns descendant or null if none found\r\n     */\r\n    public getDescendantOfPredicate(predicate: (block: NodeRenderGraphBlock) => boolean): Nullable<NodeRenderGraphBlock> {\r\n        if (predicate(this)) {\r\n            return this;\r\n        }\r\n\r\n        for (const output of this._outputs) {\r\n            if (!output.hasEndpoints) {\r\n                continue;\r\n            }\r\n\r\n            for (const endpoint of output.endpoints) {\r\n                const descendant = endpoint.ownerBlock.getDescendantOfPredicate(predicate);\r\n                if (descendant) {\r\n                    return descendant;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Creates a new NodeRenderGraphBlock\r\n     * @param name defines the block name\r\n     * @param frameGraph defines the hosting frame graph\r\n     * @param scene defines the hosting scene\r\n     * @param _additionalConstructionParameters defines additional parameters to pass to the block constructor\r\n     */\r\n    public constructor(name: string, frameGraph: FrameGraph, scene: Scene, ..._additionalConstructionParameters: unknown[]) {\r\n        this._name = name;\r\n        this._frameGraph = frameGraph;\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this.uniqueId = UniqueIdGenerator.UniqueId;\r\n    }\r\n\r\n    /**\r\n     * Register a new input. Must be called inside a block constructor\r\n     * @param name defines the connection point name\r\n     * @param type defines the connection point type\r\n     * @param isOptional defines a boolean indicating that this input can be omitted\r\n     * @param point an already created connection point. If not provided, create a new one\r\n     * @returns the current block\r\n     */\r\n    public registerInput(name: string, type: NodeRenderGraphBlockConnectionPointTypes, isOptional: boolean = false, point?: NodeRenderGraphConnectionPoint) {\r\n        point = point ?? new NodeRenderGraphConnectionPoint(name, this, NodeRenderGraphConnectionPointDirection.Input);\r\n        point.type = type;\r\n        point.isOptional = isOptional;\r\n\r\n        this._inputs.push(point);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Register a new output. Must be called inside a block constructor\r\n     * @param name defines the connection point name\r\n     * @param type defines the connection point type\r\n     * @param point an already created connection point. If not provided, create a new one\r\n     * @returns the current block\r\n     */\r\n    public registerOutput(name: string, type: NodeRenderGraphBlockConnectionPointTypes, point?: NodeRenderGraphConnectionPoint) {\r\n        point = point ?? new NodeRenderGraphConnectionPoint(name, this, NodeRenderGraphConnectionPointDirection.Output);\r\n        point.type = type;\r\n\r\n        this._outputs.push(point);\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _addDependenciesInput() {\r\n        this.registerInput(\"dependencies\", NodeRenderGraphBlockConnectionPointTypes.Texture, true);\r\n\r\n        const dependencies = this.getInputByName(\"dependencies\")!;\r\n\r\n        dependencies.addAcceptedConnectionPointTypes(\r\n            NodeRenderGraphBlockConnectionPointTypes.TextureAllButBackBuffer |\r\n                NodeRenderGraphBlockConnectionPointTypes.ResourceContainer |\r\n                NodeRenderGraphBlockConnectionPointTypes.ShadowGenerator\r\n        );\r\n\r\n        return dependencies;\r\n    }\r\n\r\n    protected _buildBlock(_state: NodeRenderGraphBuildState) {\r\n        // Empty. Must be defined by child nodes\r\n    }\r\n\r\n    protected _customBuildStep(_state: NodeRenderGraphBuildState): void {\r\n        // Must be implemented by children\r\n    }\r\n\r\n    protected _propagateInputValueToOutput(inputConnectionPoint: NodeRenderGraphConnectionPoint, outputConnectionPoint: NodeRenderGraphConnectionPoint) {\r\n        if (inputConnectionPoint.connectedPoint) {\r\n            outputConnectionPoint.value = inputConnectionPoint.connectedPoint.value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Build the current node and generate the vertex data\r\n     * @param state defines the current generation state\r\n     * @returns true if already built\r\n     */\r\n    public build(state: NodeRenderGraphBuildState): boolean {\r\n        if (this._buildId === state.buildId) {\r\n            return true;\r\n        }\r\n\r\n        this._buildId = state.buildId;\r\n\r\n        // Check if \"parent\" blocks are compiled\r\n        for (const input of this._inputs) {\r\n            if (!input.connectedPoint) {\r\n                if (!input.isOptional) {\r\n                    // Emit a warning\r\n                    state._notConnectedNonOptionalInputs.push(input);\r\n                }\r\n                continue;\r\n            }\r\n\r\n            const block = input.connectedPoint.ownerBlock;\r\n            if (block && block !== this) {\r\n                block.build(state);\r\n            }\r\n        }\r\n\r\n        this._customBuildStep(state);\r\n\r\n        // Logs\r\n        if (state.verbose) {\r\n            Logger.Log(`Building ${this.name} [${this.getClassName()}]`);\r\n        }\r\n\r\n        if (this._frameGraphTask) {\r\n            this._frameGraphTask.name = this.name;\r\n        }\r\n\r\n        this._buildBlock(state);\r\n\r\n        if (this._frameGraphTask) {\r\n            this._frameGraphTask.dependencies = undefined;\r\n\r\n            const dependenciesConnectedPoint = this.getInputByName(\"dependencies\")?.connectedPoint;\r\n            if (dependenciesConnectedPoint) {\r\n                if (dependenciesConnectedPoint.type === NodeRenderGraphBlockConnectionPointTypes.ResourceContainer) {\r\n                    const container = dependenciesConnectedPoint.ownerBlock as NodeRenderGraphResourceContainerBlock;\r\n                    for (let i = 0; i < container.inputs.length; i++) {\r\n                        const input = container.inputs[i];\r\n                        if (input.connectedPoint && input.connectedPoint.value !== undefined && NodeRenderGraphConnectionPoint.IsTextureHandle(input.connectedPoint.value)) {\r\n                            this._frameGraphTask.dependencies = this._frameGraphTask.dependencies || new Set();\r\n                            this._frameGraphTask.dependencies.add(input.connectedPoint.value as FrameGraphTextureHandle);\r\n                        }\r\n                    }\r\n                } else if (NodeRenderGraphConnectionPoint.IsTextureHandle(dependenciesConnectedPoint.value)) {\r\n                    this._frameGraphTask.dependencies = this._frameGraphTask.dependencies || new Set();\r\n                    this._frameGraphTask.dependencies.add(dependenciesConnectedPoint.value as FrameGraphTextureHandle);\r\n                }\r\n            }\r\n            this._frameGraph.addTask(this._frameGraphTask);\r\n        }\r\n\r\n        this.onBuildObservable.notifyObservers(this);\r\n\r\n        return false;\r\n    }\r\n\r\n    protected _linkConnectionTypes(inputIndex0: number, inputIndex1: number, looseCoupling = false) {\r\n        if (looseCoupling) {\r\n            this._inputs[inputIndex1]._acceptedConnectionPointType = this._inputs[inputIndex0];\r\n        } else {\r\n            this._inputs[inputIndex0]._linkedConnectionSource = this._inputs[inputIndex1];\r\n            this._inputs[inputIndex0]._isMainLinkSource = true;\r\n        }\r\n\r\n        this._inputs[inputIndex1]._linkedConnectionSource = this._inputs[inputIndex0];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     */\r\n    public initialize() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Lets the block try to connect some inputs automatically\r\n     */\r\n    public autoConfigure() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Find an input by its name\r\n     * @param name defines the name of the input to look for\r\n     * @returns the input or null if not found\r\n     */\r\n    public getInputByName(name: string) {\r\n        const filter = this._inputs.filter((e) => e.name === name);\r\n\r\n        if (filter.length) {\r\n            return filter[0];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Find an output by its name\r\n     * @param name defines the name of the output to look for\r\n     * @returns the output or null if not found\r\n     */\r\n    public getOutputByName(name: string) {\r\n        const filter = this._outputs.filter((e) => e.name === name);\r\n\r\n        if (filter.length) {\r\n            return filter[0];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.customType = \"BABYLON.\" + this.getClassName();\r\n        serializationObject.id = this.uniqueId;\r\n        serializationObject.name = this.name;\r\n        serializationObject.visibleOnFrame = this.visibleOnFrame;\r\n        serializationObject.disabled = this.disabled;\r\n        if (this._additionalConstructionParameters) {\r\n            serializationObject.additionalConstructionParameters = this._additionalConstructionParameters;\r\n        }\r\n\r\n        serializationObject.inputs = [];\r\n        serializationObject.outputs = [];\r\n\r\n        for (const input of this.inputs) {\r\n            serializationObject.inputs.push(input.serialize());\r\n        }\r\n\r\n        for (const output of this.outputs) {\r\n            serializationObject.outputs.push(output.serialize(false));\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _deserialize(serializationObject: any) {\r\n        this._name = serializationObject.name;\r\n        this.comments = serializationObject.comments;\r\n        this.visibleOnFrame = serializationObject.visibleOnFrame;\r\n        this.disabled = serializationObject.disabled;\r\n\r\n        this._deserializePortDisplayNamesAndExposedOnFrame(serializationObject);\r\n    }\r\n\r\n    private _deserializePortDisplayNamesAndExposedOnFrame(serializationObject: any) {\r\n        const serializedInputs = serializationObject.inputs;\r\n        const serializedOutputs = serializationObject.outputs;\r\n\r\n        if (serializedInputs) {\r\n            serializedInputs.forEach((port: any) => {\r\n                const input = this.inputs.find((i) => i.name === port.name);\r\n                if (!input) {\r\n                    return;\r\n                }\r\n                if (port.displayName) {\r\n                    input.displayName = port.displayName;\r\n                }\r\n                if (port.isExposedOnFrame) {\r\n                    input.isExposedOnFrame = port.isExposedOnFrame;\r\n                    input.exposedPortPosition = port.exposedPortPosition;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (serializedOutputs) {\r\n            serializedOutputs.forEach((port: any, i: number) => {\r\n                if (port.displayName) {\r\n                    this.outputs[i].displayName = port.displayName;\r\n                }\r\n                if (port.isExposedOnFrame) {\r\n                    this.outputs[i].isExposedOnFrame = port.isExposedOnFrame;\r\n                    this.outputs[i].exposedPortPosition = port.exposedPortPosition;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const variableName = this._codeVariableName;\r\n        return `${variableName}.visibleOnFrame = ${this.visibleOnFrame};\\n${variableName}.disabled = ${this.disabled};\\n`;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _dumpCodeForOutputConnections(alreadyDumped: NodeRenderGraphBlock[]) {\r\n        let codeString = \"\";\r\n\r\n        if (alreadyDumped.indexOf(this) !== -1) {\r\n            return codeString;\r\n        }\r\n\r\n        alreadyDumped.push(this);\r\n\r\n        for (const input of this.inputs) {\r\n            if (!input.isConnected) {\r\n                continue;\r\n            }\r\n\r\n            const connectedOutput = input.connectedPoint!;\r\n            const connectedBlock = connectedOutput.ownerBlock;\r\n\r\n            codeString += connectedBlock._dumpCodeForOutputConnections(alreadyDumped);\r\n            codeString += `${connectedBlock._codeVariableName}.${connectedBlock._outputRename(connectedOutput.name)}.connectTo(${this._codeVariableName}.${this._inputRename(\r\n                input.name\r\n            )});\\n`;\r\n        }\r\n\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _dumpCode(uniqueNames: string[], alreadyDumped: NodeRenderGraphBlock[]) {\r\n        alreadyDumped.push(this);\r\n\r\n        // Get unique name\r\n        const nameAsVariableName = this.name.replace(/[^A-Za-z_]+/g, \"\");\r\n        this._codeVariableName = nameAsVariableName || `${this.getClassName()}_${this.uniqueId}`;\r\n\r\n        if (uniqueNames.indexOf(this._codeVariableName) !== -1) {\r\n            let index = 0;\r\n            do {\r\n                index++;\r\n                this._codeVariableName = nameAsVariableName + index;\r\n            } while (uniqueNames.indexOf(this._codeVariableName) !== -1);\r\n        }\r\n\r\n        uniqueNames.push(this._codeVariableName);\r\n\r\n        // Declaration\r\n        let codeString = `\\n// ${this.getClassName()}\\n`;\r\n        if (this.comments) {\r\n            codeString += `// ${this.comments}\\n`;\r\n        }\r\n        const className = this.getClassName();\r\n        if (className === \"RenderGraphInputBlock\") {\r\n            const block = this as unknown as NodeRenderGraphInputBlock;\r\n            const blockType = block.type;\r\n\r\n            codeString += `var ${this._codeVariableName} = new BABYLON.NodeRenderGraphInputBlock(\"${this.name}\", nodeRenderGraph.frameGraph, scene, BABYLON.NodeRenderGraphBlockConnectionPointTypes.${NodeRenderGraphBlockConnectionPointTypes[blockType]});\\n`;\r\n        } else {\r\n            if (this._additionalConstructionParameters) {\r\n                codeString += `var ${this._codeVariableName} = new BABYLON.${className}(\"${this.name}\", nodeRenderGraph.frameGraph, scene, ...${JSON.stringify(this._additionalConstructionParameters)});\\n`;\r\n            } else {\r\n                codeString += `var ${this._codeVariableName} = new BABYLON.${className}(\"${this.name}\", nodeRenderGraph.frameGraph, scene);\\n`;\r\n            }\r\n        }\r\n\r\n        // Properties\r\n        codeString += this._dumpPropertiesCode() + \"\\n\";\r\n\r\n        // Inputs\r\n        for (const input of this.inputs) {\r\n            if (!input.isConnected) {\r\n                continue;\r\n            }\r\n\r\n            const connectedOutput = input.connectedPoint!;\r\n            const connectedBlock = connectedOutput.ownerBlock;\r\n\r\n            if (alreadyDumped.indexOf(connectedBlock) === -1) {\r\n                codeString += connectedBlock._dumpCode(uniqueNames, alreadyDumped);\r\n            }\r\n        }\r\n\r\n        // Outputs\r\n        for (const output of this.outputs) {\r\n            if (!output.hasEndpoints) {\r\n                continue;\r\n            }\r\n\r\n            for (const endpoint of output.endpoints) {\r\n                const connectedBlock = endpoint.ownerBlock;\r\n                if (connectedBlock && alreadyDumped.indexOf(connectedBlock) === -1) {\r\n                    codeString += connectedBlock._dumpCode(uniqueNames, alreadyDumped);\r\n                }\r\n            }\r\n        }\r\n\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Clone the current block to a new identical block\r\n     * @returns a copy of the current block\r\n     */\r\n    public clone() {\r\n        const serializationObject = this.serialize();\r\n        const blockType: typeof NodeRenderGraphBlock = GetClass(serializationObject.customType);\r\n\r\n        if (blockType) {\r\n            const additionalConstructionParameters = serializationObject.additionalConstructionParameters;\r\n            const block: NodeRenderGraphBlock = additionalConstructionParameters\r\n                ? new blockType(\"\", this._frameGraph, this._scene, ...additionalConstructionParameters)\r\n                : new blockType(\"\", this._frameGraph, this._scene);\r\n            block._deserialize(serializationObject);\r\n            return block;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Release resources\r\n     */\r\n    public dispose() {\r\n        for (const input of this.inputs) {\r\n            input.dispose();\r\n        }\r\n\r\n        for (const output of this.outputs) {\r\n            output.dispose();\r\n        }\r\n\r\n        this._frameGraphTask?.dispose();\r\n        this._frameGraphTask = undefined as any;\r\n\r\n        this.onBuildObservable.clear();\r\n    }\r\n}\r\n", "import { serialize, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { DeepImmutable, Nullable } from \"../types\";\r\nimport type { CameraInputsManager } from \"./cameraInputsManager\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3, Quaternion } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { ICullable } from \"../Culling/boundingInfo\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { Viewport } from \"../Maths/math.viewport\";\r\nimport { Frustum } from \"../Maths/math.frustum\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport type { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { FreeCamera } from \"./freeCamera\";\r\nimport type { TargetCamera } from \"./targetCamera\";\r\nimport type { Ray } from \"../Culling/ray\";\r\nimport type { ArcRotateCamera } from \"./arcRotateCamera\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\n\r\n/**\r\n * Oblique projection values\r\n */\r\nexport interface IObliqueParams {\r\n    /** The angle of the plane */\r\n    angle: number;\r\n    /** The length of the plane */\r\n    length: number;\r\n    /** The offset of the plane */\r\n    offset: number;\r\n}\r\n\r\n/**\r\n * This is the base class of all the camera used in the application.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n */\r\nexport class Camera extends Node {\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _CreateDefaultParsedCamera = (name: string, scene: Scene): Camera => {\r\n        throw _WarnImport(\"UniversalCamera\");\r\n    };\r\n\r\n    /**\r\n     * This is the default projection mode used by the cameras.\r\n     * It helps recreating a feeling of perspective and better appreciate depth.\r\n     * This is the best way to simulate real life cameras.\r\n     */\r\n    public static readonly PERSPECTIVE_CAMERA = Constants.PERSPECTIVE_CAMERA;\r\n    /**\r\n     * This helps creating camera with an orthographic mode.\r\n     * Orthographic is commonly used in engineering as a means to produce object specifications that communicate dimensions unambiguously, each line of 1 unit length (cm, meter..whatever) will appear to have the same length everywhere on the drawing. This allows the drafter to dimension only a subset of lines and let the reader know that other lines of that length on the drawing are also that length in reality. Every parallel line in the drawing is also parallel in the object.\r\n     */\r\n    public static readonly ORTHOGRAPHIC_CAMERA = Constants.ORTHOGRAPHIC_CAMERA;\r\n\r\n    /**\r\n     * This is the default FOV mode for perspective cameras.\r\n     * This setting aligns the upper and lower bounds of the viewport to the upper and lower bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_VERTICAL_FIXED = Constants.FOVMODE_VERTICAL_FIXED;\r\n    /**\r\n     * This setting aligns the left and right bounds of the viewport to the left and right bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_HORIZONTAL_FIXED = Constants.FOVMODE_HORIZONTAL_FIXED;\r\n\r\n    /**\r\n     * This specifies there is no need for a camera rig.\r\n     * Basically only one eye is rendered corresponding to the camera.\r\n     */\r\n    public static readonly RIG_MODE_NONE = Constants.RIG_MODE_NONE;\r\n    /**\r\n     * Simulates a camera Rig with one blue eye and one red eye.\r\n     * This can be use with 3d blue and red glasses.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_ANAGLYPH = Constants.RIG_MODE_STEREOSCOPIC_ANAGLYPH;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL = Constants.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a none parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED = Constants.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered over under each other.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_OVERUNDER = Constants.RIG_MODE_STEREOSCOPIC_OVERUNDER;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered on successive lines interlaced for passive 3d monitors.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_INTERLACED = Constants.RIG_MODE_STEREOSCOPIC_INTERLACED;\r\n    /**\r\n     * Defines that both eyes of the camera should be renderered in a VR mode (carbox).\r\n     */\r\n    public static readonly RIG_MODE_VR = Constants.RIG_MODE_VR;\r\n    /**\r\n     * Custom rig mode allowing rig cameras to be populated manually with any number of cameras\r\n     */\r\n    public static readonly RIG_MODE_CUSTOM = Constants.RIG_MODE_CUSTOM;\r\n\r\n    /**\r\n     * Defines if by default attaching controls should prevent the default javascript event to continue.\r\n     */\r\n    public static ForceAttachControlToAlwaysPreventDefault = false;\r\n\r\n    /**\r\n     * Define the input manager associated with the camera.\r\n     */\r\n    public inputs: CameraInputsManager<Camera>;\r\n\r\n    /** @internal */\r\n    @serializeAsVector3(\"position\")\r\n    public _position = Vector3.Zero();\r\n\r\n    /**\r\n     * Define the current local position of the camera in the scene\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(newPosition: Vector3) {\r\n        this._position = newPosition;\r\n    }\r\n\r\n    @serializeAsVector3(\"upVector\")\r\n    protected _upVector = Vector3.Up();\r\n\r\n    /**\r\n     * The vector the camera should consider as up.\r\n     * (default is Vector3(0, 1, 0) aka Vector3.Up())\r\n     */\r\n    public set upVector(vec: Vector3) {\r\n        this._upVector = vec;\r\n    }\r\n\r\n    public get upVector() {\r\n        return this._upVector;\r\n    }\r\n\r\n    /**\r\n     * Object containing oblique projection values (only used with ORTHOGRAPHIC_CAMERA)\r\n     */\r\n    public oblique: Nullable<IObliqueParams> = null;\r\n\r\n    /**\r\n     * The screen area in scene units squared\r\n     */\r\n    public get screenArea(): number {\r\n        let x = 0;\r\n        let y = 0;\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            if (this.fovMode === Camera.FOVMODE_VERTICAL_FIXED) {\r\n                y = this.minZ * 2 * Math.tan(this.fov / 2);\r\n                x = this.getEngine().getAspectRatio(this) * y;\r\n            } else {\r\n                x = this.minZ * 2 * Math.tan(this.fov / 2);\r\n                y = x / this.getEngine().getAspectRatio(this);\r\n            }\r\n        } else {\r\n            const halfWidth = this.getEngine().getRenderWidth() / 2.0;\r\n            const halfHeight = this.getEngine().getRenderHeight() / 2.0;\r\n\r\n            x = (this.orthoRight ?? halfWidth) - (this.orthoLeft ?? -halfWidth);\r\n            y = (this.orthoTop ?? halfHeight) - (this.orthoBottom ?? -halfHeight);\r\n        }\r\n\r\n        return x * y;\r\n    }\r\n\r\n    private _orthoLeft: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the left side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoLeft(value: Nullable<number>) {\r\n        this._orthoLeft = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoLeft = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoLeft(): Nullable<number> {\r\n        return this._orthoLeft;\r\n    }\r\n\r\n    private _orthoRight: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the right side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoRight(value: Nullable<number>) {\r\n        this._orthoRight = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoRight = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoRight(): Nullable<number> {\r\n        return this._orthoRight;\r\n    }\r\n\r\n    private _orthoBottom: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the bottom side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoBottom(value: Nullable<number>) {\r\n        this._orthoBottom = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoBottom = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoBottom(): Nullable<number> {\r\n        return this._orthoBottom;\r\n    }\r\n\r\n    private _orthoTop: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the top side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoTop(value: Nullable<number>) {\r\n        this._orthoTop = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoTop = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoTop(): Nullable<number> {\r\n        return this._orthoTop;\r\n    }\r\n\r\n    /**\r\n     * Field Of View is set in Radians. (default is 0.8)\r\n     */\r\n    @serialize()\r\n    public fov = 0.8;\r\n\r\n    /**\r\n     * Projection plane tilt around the X axis (horizontal), set in Radians. (default is 0)\r\n     * Can be used to make vertical lines in world space actually vertical on the screen.\r\n     * See https://forum.babylonjs.com/t/add-vertical-shift-to-3ds-max-exporter-babylon-cameras/17480\r\n     */\r\n    @serialize()\r\n    public projectionPlaneTilt = 0;\r\n\r\n    /**\r\n     * Define the minimum distance the camera can see from.\r\n     * This is important to note that the depth buffer are not infinite and the closer it starts\r\n     * the more your scene might encounter depth fighting issue.\r\n     */\r\n    @serialize()\r\n    public minZ = 1;\r\n\r\n    /**\r\n     * Define the maximum distance the camera can see to.\r\n     * This is important to note that the depth buffer are not infinite and the further it end\r\n     * the more your scene might encounter depth fighting issue.\r\n     */\r\n    @serialize()\r\n    public maxZ = 10000.0;\r\n\r\n    /**\r\n     * Define the default inertia of the camera.\r\n     * This helps giving a smooth feeling to the camera movement.\r\n     */\r\n    @serialize()\r\n    public inertia = 0.9;\r\n\r\n    private _mode = Camera.PERSPECTIVE_CAMERA;\r\n\r\n    /**\r\n     * Define the mode of the camera (Camera.PERSPECTIVE_CAMERA or Camera.ORTHOGRAPHIC_CAMERA)\r\n     */\r\n    set mode(mode: number) {\r\n        this._mode = mode;\r\n\r\n        // Pass the mode down to the rig cameras\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.mode = mode;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    get mode(): number {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Define whether the camera is intermediate.\r\n     * This is useful to not present the output directly to the screen in case of rig without post process for instance\r\n     */\r\n    public isIntermediate = false;\r\n\r\n    /**\r\n     * Define the viewport of the camera.\r\n     * This correspond to the portion of the screen the camera will render to in normalized 0 to 1 unit.\r\n     */\r\n    public viewport = new Viewport(0, 0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Restricts the camera to viewing objects with the same layerMask.\r\n     * A camera with a layerMask of 1 will render mesh.layerMask & camera.layerMask!== 0\r\n     */\r\n    @serialize()\r\n    public layerMask: number = 0x0fffffff;\r\n\r\n    /**\r\n     * fovMode sets the camera frustum bounds to the viewport bounds. (default is FOVMODE_VERTICAL_FIXED)\r\n     */\r\n    @serialize()\r\n    public fovMode: number = Camera.FOVMODE_VERTICAL_FIXED;\r\n\r\n    /**\r\n     * Rig mode of the camera.\r\n     * This is useful to create the camera with two \"eyes\" instead of one to create VR or stereoscopic scenes.\r\n     * This is normally controlled byt the camera themselves as internal use.\r\n     */\r\n    @serialize()\r\n    public cameraRigMode = Camera.RIG_MODE_NONE;\r\n\r\n    /**\r\n     * Defines the distance between both \"eyes\" in case of a RIG\r\n     */\r\n    @serialize()\r\n    public interaxialDistance: number;\r\n\r\n    /**\r\n     * Defines if stereoscopic rendering is done side by side or over under.\r\n     */\r\n    @serialize()\r\n    public isStereoscopicSideBySide: boolean;\r\n\r\n    /**\r\n     * Defines the list of custom render target which are rendered to and then used as the input to this camera's render. Eg. display another camera view on a TV in the main scene\r\n     * This is pretty helpful if you wish to make a camera render to a texture you could reuse somewhere\r\n     * else in the scene. (Eg. security camera)\r\n     *\r\n     * To change the final output target of the camera, camera.outputRenderTarget should be used instead (eg. webXR renders to a render target corresponding to an HMD)\r\n     */\r\n    public customRenderTargets: RenderTargetTexture[] = [];\r\n    /**\r\n     * When set, the camera will render to this render target instead of the default canvas\r\n     *\r\n     * If the desire is to use the output of a camera as a texture in the scene consider using camera.customRenderTargets instead\r\n     */\r\n    public outputRenderTarget: Nullable<RenderTargetTexture> = null;\r\n\r\n    /**\r\n     * Observable triggered when the camera view matrix has changed.\r\n     * Beware of reentrance! Some methods like Camera.getViewMatrix and Camera.getWorldMatrix can trigger the onViewMatrixChangedObservable\r\n     * observable, so using them inside an observer will require additional logic to avoid a stack overflow error.\r\n     */\r\n    public onViewMatrixChangedObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when the camera Projection matrix has changed.\r\n     */\r\n    public onProjectionMatrixChangedObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when the inputs have been processed.\r\n     */\r\n    public onAfterCheckInputsObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when reset has been called and applied to the camera.\r\n     */\r\n    public onRestoreStateObservable = new Observable<Camera>();\r\n\r\n    /**\r\n     * Is this camera a part of a rig system?\r\n     */\r\n    public isRigCamera: boolean = false;\r\n\r\n    /**\r\n     * If isRigCamera set to true this will be set with the parent camera.\r\n     * The parent camera is not (!) necessarily the .parent of this camera (like in the case of XR)\r\n     */\r\n    public rigParent?: Camera;\r\n\r\n    /**\r\n     * Render pass id used by the camera to render into the main framebuffer\r\n     */\r\n    public renderPassId: number;\r\n\r\n    private _hasMoved = false;\r\n\r\n    /**\r\n     * Gets a flag indicating that the camera has moved in some way since the last call to Camera.update()\r\n     */\r\n    public get hasMoved() {\r\n        return this._hasMoved;\r\n    }\r\n\r\n    /** @internal */\r\n    public _cameraRigParams: any;\r\n    /** @internal */\r\n    public _rigCameras = new Array<Camera>();\r\n    /** @internal */\r\n    public _rigPostProcess: Nullable<PostProcess>;\r\n\r\n    /** @internal */\r\n    public _skipRendering = false;\r\n\r\n    /** @internal */\r\n    public _projectionMatrix = new Matrix();\r\n\r\n    /** @internal */\r\n    public _postProcesses = new Array<Nullable<PostProcess>>();\r\n\r\n    /** @internal */\r\n    public _activeMeshes = new SmartArray<AbstractMesh>(256);\r\n\r\n    protected _globalPosition = Vector3.Zero();\r\n\r\n    /** @internal */\r\n    public _computedViewMatrix = Matrix.Identity();\r\n    private _doNotComputeProjectionMatrix = false;\r\n    private _transformMatrix = Matrix.Zero();\r\n    /** @internal */\r\n    public _frustumPlanes: Plane[];\r\n    private _refreshFrustumPlanes = true;\r\n    private _storedFov: number;\r\n    private _stateStored: boolean;\r\n    private _absoluteRotation: Quaternion = Quaternion.Identity();\r\n\r\n    /**\r\n     * Instantiates a new camera object.\r\n     * This should not be used directly but through the inherited cameras: ArcRotate, Free...\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n     * @param name Defines the name of the camera in the scene\r\n     * @param position Defines the position of the camera\r\n     * @param scene Defines the scene the camera belongs too\r\n     * @param setActiveOnSceneIfNoneActive Defines if the camera should be set as active after creation if no other camera have been defined in the scene\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, setActiveOnSceneIfNoneActive = true) {\r\n        super(name, scene, false);\r\n\r\n        this.getScene().addCamera(this);\r\n\r\n        if (setActiveOnSceneIfNoneActive && !this.getScene().activeCamera) {\r\n            this.getScene().activeCamera = this;\r\n        }\r\n\r\n        this.position = position;\r\n        this.renderPassId = this.getScene().getEngine().createRenderPassId(`Camera ${name}`);\r\n    }\r\n\r\n    /**\r\n     * Store current camera state (fov, position, etc..)\r\n     * @returns the camera\r\n     */\r\n    public storeState(): Camera {\r\n        this._stateStored = true;\r\n        this._storedFov = this.fov;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns true if a state has been stored by calling storeState method.\r\n     * @returns true if state has been stored.\r\n     */\r\n    public hasStateStored(): boolean {\r\n        return !!this._stateStored;\r\n    }\r\n    /**\r\n     * Restores the camera state values if it has been stored. You must call storeState() first\r\n     * @returns true if restored and false otherwise\r\n     */\r\n    protected _restoreStateValues(): boolean {\r\n        if (!this._stateStored) {\r\n            return false;\r\n        }\r\n\r\n        this.fov = this._storedFov;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Restored camera state. You must call storeState() first.\r\n     * @returns true if restored and false otherwise\r\n     */\r\n    public restoreState(): boolean {\r\n        if (this._restoreStateValues()) {\r\n            this.onRestoreStateObservable.notifyObservers(this);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the camera.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"Camera\";\r\n    }\r\n\r\n    /** @internal */\r\n    public readonly _isCamera = true;\r\n\r\n    /**\r\n     * Gets a string representation of the camera useful for debug purpose.\r\n     * @param fullDetails Defines that a more verbose level of logging is required\r\n     * @returns the string representation\r\n     */\r\n    public override toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name;\r\n        ret += \", type: \" + this.getClassName();\r\n        if (this.animations) {\r\n            for (let i = 0; i < this.animations.length; i++) {\r\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Automatically tilts the projection plane, using `projectionPlaneTilt`, to correct the perspective effect on vertical lines.\r\n     */\r\n    public applyVerticalCorrection() {\r\n        const rot = this.absoluteRotation.toEulerAngles();\r\n\r\n        this.projectionPlaneTilt = this._scene.useRightHandedSystem ? -rot.x : rot.x;\r\n    }\r\n\r\n    /**\r\n     * Gets the current world space position of the camera.\r\n     */\r\n    public get globalPosition(): Vector3 {\r\n        return this._globalPosition;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of active meshes this frame (meshes no culled or excluded by lod s in the frame)\r\n     * @returns the active meshe list\r\n     */\r\n    public getActiveMeshes(): SmartArray<AbstractMesh> {\r\n        return this._activeMeshes;\r\n    }\r\n\r\n    /**\r\n     * Check whether a mesh is part of the current active mesh list of the camera\r\n     * @param mesh Defines the mesh to check\r\n     * @returns true if active, false otherwise\r\n     */\r\n    public isActiveMesh(mesh: Mesh): boolean {\r\n        return this._activeMeshes.indexOf(mesh) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Is this camera ready to be used/rendered\r\n     * @param completeCheck defines if a complete check (including post processes) has to be done (false by default)\r\n     * @returns true if the camera is ready\r\n     */\r\n    public override isReady(completeCheck = false): boolean {\r\n        if (completeCheck) {\r\n            for (const pp of this._postProcesses) {\r\n                if (pp && !pp.isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return super.isReady(completeCheck);\r\n    }\r\n\r\n    /** @internal */\r\n    public override _initCache() {\r\n        super._initCache();\r\n\r\n        this._cache.position = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cache.upVector = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\r\n        this._cache.mode = undefined;\r\n        this._cache.minZ = undefined;\r\n        this._cache.maxZ = undefined;\r\n\r\n        this._cache.fov = undefined;\r\n        this._cache.fovMode = undefined;\r\n        this._cache.aspectRatio = undefined;\r\n\r\n        this._cache.orthoLeft = undefined;\r\n        this._cache.orthoRight = undefined;\r\n        this._cache.orthoBottom = undefined;\r\n        this._cache.orthoTop = undefined;\r\n        this._cache.obliqueAngle = undefined;\r\n        this._cache.obliqueLength = undefined;\r\n        this._cache.obliqueOffset = undefined;\r\n        this._cache.renderWidth = undefined;\r\n        this._cache.renderHeight = undefined;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _updateCache(ignoreParentClass?: boolean): void {\r\n        if (!ignoreParentClass) {\r\n            super._updateCache();\r\n        }\r\n\r\n        this._cache.position.copyFrom(this.position);\r\n        this._cache.upVector.copyFrom(this.upVector);\r\n    }\r\n\r\n    /** @internal */\r\n    public override _isSynchronized(): boolean {\r\n        return this._isSynchronizedViewMatrix() && this._isSynchronizedProjectionMatrix();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronizedViewMatrix(): boolean {\r\n        if (!super._isSynchronized()) {\r\n            return false;\r\n        }\r\n\r\n        return this._cache.position.equals(this.position) && this._cache.upVector.equals(this.upVector) && this.isSynchronizedWithParent();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronizedProjectionMatrix(): boolean {\r\n        let isSynchronized = this._cache.mode === this.mode && this._cache.minZ === this.minZ && this._cache.maxZ === this.maxZ;\r\n\r\n        if (!isSynchronized) {\r\n            return false;\r\n        }\r\n\r\n        const engine = this.getEngine();\r\n\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            isSynchronized =\r\n                this._cache.fov === this.fov &&\r\n                this._cache.fovMode === this.fovMode &&\r\n                this._cache.aspectRatio === engine.getAspectRatio(this) &&\r\n                this._cache.projectionPlaneTilt === this.projectionPlaneTilt;\r\n        } else {\r\n            isSynchronized =\r\n                this._cache.orthoLeft === this.orthoLeft &&\r\n                this._cache.orthoRight === this.orthoRight &&\r\n                this._cache.orthoBottom === this.orthoBottom &&\r\n                this._cache.orthoTop === this.orthoTop &&\r\n                this._cache.renderWidth === engine.getRenderWidth() &&\r\n                this._cache.renderHeight === engine.getRenderHeight();\r\n\r\n            if (this.oblique) {\r\n                isSynchronized =\r\n                    isSynchronized &&\r\n                    this._cache.obliqueAngle === this.oblique.angle &&\r\n                    this._cache.obliqueLength === this.oblique.length &&\r\n                    this._cache.obliqueOffset === this.oblique.offset;\r\n            }\r\n        }\r\n\r\n        return isSynchronized;\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     * BACK COMPAT SIGNATURE ONLY.\r\n     */\r\n    public attachControl(ignored: any, noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * This function is here because typescript removes the typing of the last function.\r\n     * @param _ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param _noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(_ignored?: any, _noPreventDefault?: boolean): void {}\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     */\r\n    public detachControl(ignored?: any): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * This function is here because typescript removes the typing of the last function.\r\n     * @param _ignored defines an ignored parameter kept for backward compatibility.\r\n     */\r\n    public detachControl(_ignored?: any): void {}\r\n\r\n    /**\r\n     * Update the camera state according to the different inputs gathered during the frame.\r\n     */\r\n    public update(): void {\r\n        this._hasMoved = false;\r\n        this._checkInputs();\r\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            this._updateRigCameras();\r\n        }\r\n\r\n        // Attempt to update the camera's view and projection matrices.\r\n        // This call is being made because these matrices are no longer being updated\r\n        // as a part of the picking ray process (in addition to scene.render).\r\n        this.getViewMatrix();\r\n        this.getProjectionMatrix();\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkInputs(): void {\r\n        this.onAfterCheckInputsObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @internal */\r\n    public get rigCameras(): Camera[] {\r\n        return this._rigCameras;\r\n    }\r\n\r\n    /**\r\n     * Gets the post process used by the rig cameras\r\n     */\r\n    public get rigPostProcess(): Nullable<PostProcess> {\r\n        return this._rigPostProcess;\r\n    }\r\n\r\n    /**\r\n     * Internal, gets the first post process.\r\n     * @returns the first post process to be run on this camera.\r\n     */\r\n    public _getFirstPostProcess(): Nullable<PostProcess> {\r\n        for (let ppIndex = 0; ppIndex < this._postProcesses.length; ppIndex++) {\r\n            if (this._postProcesses[ppIndex] !== null) {\r\n                return this._postProcesses[ppIndex];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _cascadePostProcessesToRigCams(): void {\r\n        // invalidate framebuffer\r\n        const firstPostProcess = this._getFirstPostProcess();\r\n        if (firstPostProcess) {\r\n            firstPostProcess.markTextureDirty();\r\n        }\r\n\r\n        // glue the rigPostProcess to the end of the user postprocesses & assign to each sub-camera\r\n        for (let i = 0, len = this._rigCameras.length; i < len; i++) {\r\n            const cam = this._rigCameras[i];\r\n            const rigPostProcess = cam._rigPostProcess;\r\n\r\n            // for VR rig, there does not have to be a post process\r\n            if (rigPostProcess) {\r\n                const isPass = rigPostProcess.getEffectName() === \"pass\";\r\n                if (isPass) {\r\n                    // any rig which has a PassPostProcess for rig[0], cannot be isIntermediate when there are also user postProcesses\r\n                    cam.isIntermediate = this._postProcesses.length === 0;\r\n                }\r\n                cam._postProcesses = this._postProcesses.slice(0).concat(rigPostProcess);\r\n                rigPostProcess.markTextureDirty();\r\n            } else {\r\n                cam._postProcesses = this._postProcesses.slice(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach a post process to the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#attach-postprocess\r\n     * @param postProcess The post process to attach to the camera\r\n     * @param insertAt The position of the post process in case several of them are in use in the scene\r\n     * @returns the position the post process has been inserted at\r\n     */\r\n    public attachPostProcess(postProcess: PostProcess, insertAt: Nullable<number> = null): number {\r\n        if (!postProcess.isReusable() && this._postProcesses.indexOf(postProcess) > -1) {\r\n            Logger.Error(\"You're trying to reuse a post process not defined as reusable.\");\r\n            return 0;\r\n        }\r\n\r\n        if (insertAt == null || insertAt < 0) {\r\n            this._postProcesses.push(postProcess);\r\n        } else if (this._postProcesses[insertAt] === null) {\r\n            this._postProcesses[insertAt] = postProcess;\r\n        } else {\r\n            this._postProcesses.splice(insertAt, 0, postProcess);\r\n        }\r\n        this._cascadePostProcessesToRigCams(); // also ensures framebuffer invalidated\r\n\r\n        // Update prePass\r\n        if (this._scene.prePassRenderer) {\r\n            this._scene.prePassRenderer.markAsDirty();\r\n        }\r\n\r\n        return this._postProcesses.indexOf(postProcess);\r\n    }\r\n\r\n    /**\r\n     * Detach a post process to the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#attach-postprocess\r\n     * @param postProcess The post process to detach from the camera\r\n     */\r\n    public detachPostProcess(postProcess: PostProcess): void {\r\n        const idx = this._postProcesses.indexOf(postProcess);\r\n        if (idx !== -1) {\r\n            this._postProcesses[idx] = null;\r\n        }\r\n\r\n        // Update prePass\r\n        if (this._scene.prePassRenderer) {\r\n            this._scene.prePassRenderer.markAsDirty();\r\n        }\r\n\r\n        this._cascadePostProcessesToRigCams(); // also ensures framebuffer invalidated\r\n    }\r\n\r\n    /**\r\n     * Gets the current world matrix of the camera\r\n     * @returns the world matrix\r\n     */\r\n    public override getWorldMatrix(): Matrix {\r\n        if (this._isSynchronizedViewMatrix()) {\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        // Getting the view matrix will also compute the world matrix.\r\n        this.getViewMatrix();\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getViewMatrix(): Matrix {\r\n        return Matrix.Identity();\r\n    }\r\n\r\n    /**\r\n     * Gets the current view matrix of the camera.\r\n     * @param force forces the camera to recompute the matrix without looking at the cached state\r\n     * @returns the view matrix\r\n     */\r\n    public getViewMatrix(force?: boolean): Matrix {\r\n        if (!force && this._isSynchronizedViewMatrix()) {\r\n            return this._computedViewMatrix;\r\n        }\r\n\r\n        this._hasMoved = true;\r\n\r\n        this.updateCache();\r\n        this._computedViewMatrix = this._getViewMatrix();\r\n\r\n        this._currentRenderId = this.getScene().getRenderId();\r\n        this._childUpdateId++;\r\n\r\n        this._refreshFrustumPlanes = true;\r\n\r\n        if (this._cameraRigParams && this._cameraRigParams.vrPreViewMatrix) {\r\n            this._computedViewMatrix.multiplyToRef(this._cameraRigParams.vrPreViewMatrix, this._computedViewMatrix);\r\n        }\r\n\r\n        // Notify parent camera if rig camera is changed\r\n        if (this.parent && (this.parent as Camera).onViewMatrixChangedObservable) {\r\n            (this.parent as Camera).onViewMatrixChangedObservable.notifyObservers(this.parent as Camera);\r\n        }\r\n\r\n        this.onViewMatrixChangedObservable.notifyObservers(this);\r\n\r\n        this._computedViewMatrix.invertToRef(this._worldMatrix);\r\n\r\n        return this._computedViewMatrix;\r\n    }\r\n\r\n    /**\r\n     * Freeze the projection matrix.\r\n     * It will prevent the cache check of the camera projection compute and can speed up perf\r\n     * if no parameter of the camera are meant to change\r\n     * @param projection Defines manually a projection if necessary\r\n     */\r\n    public freezeProjectionMatrix(projection?: Matrix): void {\r\n        this._doNotComputeProjectionMatrix = true;\r\n        if (projection !== undefined) {\r\n            this._projectionMatrix = projection;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unfreeze the projection matrix if it has previously been freezed by freezeProjectionMatrix.\r\n     */\r\n    public unfreezeProjectionMatrix(): void {\r\n        this._doNotComputeProjectionMatrix = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the current projection matrix of the camera.\r\n     * @param force forces the camera to recompute the matrix without looking at the cached state\r\n     * @returns the projection matrix\r\n     */\r\n    public getProjectionMatrix(force?: boolean): Matrix {\r\n        if (this._doNotComputeProjectionMatrix || (!force && this._isSynchronizedProjectionMatrix())) {\r\n            return this._projectionMatrix;\r\n        }\r\n\r\n        // Cache\r\n        this._cache.mode = this.mode;\r\n        this._cache.minZ = this.minZ;\r\n        this._cache.maxZ = this.maxZ;\r\n\r\n        // Matrix\r\n        this._refreshFrustumPlanes = true;\r\n\r\n        const engine = this.getEngine();\r\n        const scene = this.getScene();\r\n        const reverseDepth = engine.useReverseDepthBuffer;\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            this._cache.fov = this.fov;\r\n            this._cache.fovMode = this.fovMode;\r\n            this._cache.aspectRatio = engine.getAspectRatio(this);\r\n            this._cache.projectionPlaneTilt = this.projectionPlaneTilt;\r\n\r\n            if (this.minZ <= 0) {\r\n                this.minZ = 0.1;\r\n            }\r\n\r\n            let getProjectionMatrix: (\r\n                fov: number,\r\n                aspect: number,\r\n                znear: number,\r\n                zfar: number,\r\n                result: Matrix,\r\n                isVerticalFovFixed: boolean,\r\n                halfZRange: boolean,\r\n                projectionPlaneTilt: number,\r\n                reverseDepthBufferMode: boolean\r\n            ) => void;\r\n            if (scene.useRightHandedSystem) {\r\n                getProjectionMatrix = Matrix.PerspectiveFovRHToRef;\r\n            } else {\r\n                getProjectionMatrix = Matrix.PerspectiveFovLHToRef;\r\n            }\r\n\r\n            getProjectionMatrix(\r\n                this.fov,\r\n                engine.getAspectRatio(this),\r\n                reverseDepth ? this.maxZ : this.minZ,\r\n                reverseDepth ? this.minZ : this.maxZ,\r\n                this._projectionMatrix,\r\n                this.fovMode === Camera.FOVMODE_VERTICAL_FIXED,\r\n                engine.isNDCHalfZRange,\r\n                this.projectionPlaneTilt,\r\n                reverseDepth\r\n            );\r\n        } else {\r\n            const halfWidth = engine.getRenderWidth() / 2.0;\r\n            const halfHeight = engine.getRenderHeight() / 2.0;\r\n            if (scene.useRightHandedSystem) {\r\n                if (this.oblique) {\r\n                    Matrix.ObliqueOffCenterRHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this.oblique.length,\r\n                        this.oblique.angle,\r\n                        this._computeObliqueDistance(this.oblique.offset),\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                } else {\r\n                    Matrix.OrthoOffCenterRHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                }\r\n            } else {\r\n                if (this.oblique) {\r\n                    Matrix.ObliqueOffCenterLHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this.oblique.length,\r\n                        this.oblique.angle,\r\n                        this._computeObliqueDistance(this.oblique.offset),\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                } else {\r\n                    Matrix.OrthoOffCenterLHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                }\r\n            }\r\n\r\n            this._cache.orthoLeft = this.orthoLeft;\r\n            this._cache.orthoRight = this.orthoRight;\r\n            this._cache.orthoBottom = this.orthoBottom;\r\n            this._cache.orthoTop = this.orthoTop;\r\n            this._cache.obliqueAngle = this.oblique?.angle;\r\n            this._cache.obliqueLength = this.oblique?.length;\r\n            this._cache.obliqueOffset = this.oblique?.offset;\r\n            this._cache.renderWidth = engine.getRenderWidth();\r\n            this._cache.renderHeight = engine.getRenderHeight();\r\n        }\r\n\r\n        this.onProjectionMatrixChangedObservable.notifyObservers(this);\r\n\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix (ie. the multiplication of view by projection matrices)\r\n     * @returns a Matrix\r\n     */\r\n    public getTransformationMatrix(): Matrix {\r\n        this._computedViewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\r\n        return this._transformMatrix;\r\n    }\r\n\r\n    private _computeObliqueDistance(offset: number): number {\r\n        const arcRotateCamera = this as Camera as ArcRotateCamera;\r\n        const targetCamera = this as Camera as TargetCamera;\r\n        return (arcRotateCamera.radius || (targetCamera.target ? Vector3.Distance(this.position, targetCamera.target) : this.position.length())) + offset;\r\n    }\r\n\r\n    /** @internal */\r\n    public _updateFrustumPlanes(): void {\r\n        if (!this._refreshFrustumPlanes) {\r\n            return;\r\n        }\r\n\r\n        this.getTransformationMatrix();\r\n\r\n        if (!this._frustumPlanes) {\r\n            this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\r\n        } else {\r\n            Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\r\n        }\r\n\r\n        this._refreshFrustumPlanes = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * This checks the bounding box center. See isCompletelyInFrustum for a full bounding check\r\n     * @param target The object to check\r\n     * @param checkRigCameras If the rig cameras should be checked (eg. with VR camera both eyes should be checked) (Default: false)\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isInFrustum(target: ICullable, checkRigCameras = false): boolean {\r\n        this._updateFrustumPlanes();\r\n\r\n        if (checkRigCameras && this.rigCameras.length > 0) {\r\n            let result = false;\r\n            this.rigCameras.forEach((cam) => {\r\n                cam._updateFrustumPlanes();\r\n                result = result || target.isInFrustum(cam._frustumPlanes);\r\n            });\r\n            return result;\r\n        } else {\r\n            return target.isInFrustum(this._frustumPlanes);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param target The object to check\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isCompletelyInFrustum(target: ICullable): boolean {\r\n        this._updateFrustumPlanes();\r\n\r\n        return target.isCompletelyInFrustum(this._frustumPlanes);\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Gets a ray in the forward direction from the camera.\r\n     * @param length Defines the length of the ray to create\r\n     * @param transform Defines the transform to apply to the ray, by default the world matrix is used to create a workd space ray\r\n     * @param origin Defines the start point of the ray which defaults to the camera position\r\n     * @returns the forward ray\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getForwardRay(length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Gets a ray in the forward direction from the camera.\r\n     * @param refRay the ray to (re)use when setting the values\r\n     * @param length Defines the length of the ray to create\r\n     * @param transform Defines the transform to apply to the ray, by default the world matrx is used to create a workd space ray\r\n     * @param origin Defines the start point of the ray which defaults to the camera position\r\n     * @returns the forward ray\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getForwardRayToRef(refRay: Ray, length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        // Observables\r\n        this.onViewMatrixChangedObservable.clear();\r\n        this.onProjectionMatrixChangedObservable.clear();\r\n        this.onAfterCheckInputsObservable.clear();\r\n        this.onRestoreStateObservable.clear();\r\n\r\n        // Inputs\r\n        if (this.inputs) {\r\n            this.inputs.clear();\r\n        }\r\n\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        // Remove from scene\r\n        this.getScene().removeCamera(this);\r\n        while (this._rigCameras.length > 0) {\r\n            const camera = this._rigCameras.pop();\r\n            if (camera) {\r\n                camera.dispose();\r\n            }\r\n        }\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.cameras.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.cameras.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        // Postprocesses\r\n        if (this._rigPostProcess) {\r\n            this._rigPostProcess.dispose(this);\r\n            this._rigPostProcess = null;\r\n            this._postProcesses.length = 0;\r\n        } else if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            this._rigPostProcess = null;\r\n            this._postProcesses.length = 0;\r\n        } else {\r\n            let i = this._postProcesses.length;\r\n            while (--i >= 0) {\r\n                const postProcess = this._postProcesses[i];\r\n                if (postProcess) {\r\n                    postProcess.dispose(this);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Render targets\r\n        let i = this.customRenderTargets.length;\r\n        while (--i >= 0) {\r\n            this.customRenderTargets[i].dispose();\r\n        }\r\n        this.customRenderTargets.length = 0;\r\n\r\n        // Active Meshes\r\n        this._activeMeshes.dispose();\r\n\r\n        this.getScene().getEngine().releaseRenderPassId(this.renderPassId);\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /** @internal */\r\n    public _isLeftCamera = false;\r\n    /**\r\n     * Gets the left camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get isLeftCamera(): boolean {\r\n        return this._isLeftCamera;\r\n    }\r\n\r\n    /** @internal */\r\n    public _isRightCamera = false;\r\n    /**\r\n     * Gets the right camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get isRightCamera(): boolean {\r\n        return this._isRightCamera;\r\n    }\r\n\r\n    /**\r\n     * Gets the left camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get leftCamera(): Nullable<FreeCamera> {\r\n        if (this._rigCameras.length < 1) {\r\n            return null;\r\n        }\r\n        return <FreeCamera>this._rigCameras[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the right camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get rightCamera(): Nullable<FreeCamera> {\r\n        if (this._rigCameras.length < 2) {\r\n            return null;\r\n        }\r\n        return <FreeCamera>this._rigCameras[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the left camera target of a rig setup in case of Rigged Camera\r\n     * @returns the target position\r\n     */\r\n    public getLeftTarget(): Nullable<Vector3> {\r\n        if (this._rigCameras.length < 1) {\r\n            return null;\r\n        }\r\n        return (<TargetCamera>this._rigCameras[0]).getTarget();\r\n    }\r\n\r\n    /**\r\n     * Gets the right camera target of a rig setup in case of Rigged Camera\r\n     * @returns the target position\r\n     */\r\n    public getRightTarget(): Nullable<Vector3> {\r\n        if (this._rigCameras.length < 2) {\r\n            return null;\r\n        }\r\n        return (<TargetCamera>this._rigCameras[1]).getTarget();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setCameraRigMode(mode: number, rigParams: any): void {\r\n        if (this.cameraRigMode === mode) {\r\n            return;\r\n        }\r\n\r\n        while (this._rigCameras.length > 0) {\r\n            const camera = this._rigCameras.pop();\r\n\r\n            if (camera) {\r\n                camera.dispose();\r\n            }\r\n        }\r\n        this.cameraRigMode = mode;\r\n        this._cameraRigParams = {};\r\n        //we have to implement stereo camera calcultating left and right viewpoints from interaxialDistance and target,\r\n        //not from a given angle as it is now, but until that complete code rewriting provisional stereoHalfAngle value is introduced\r\n        this._cameraRigParams.interaxialDistance = rigParams.interaxialDistance || 0.0637;\r\n        this._cameraRigParams.stereoHalfAngle = Tools.ToRadians(this._cameraRigParams.interaxialDistance / 0.0637);\r\n\r\n        // create the rig cameras, unless none\r\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            const leftCamera = this.createRigCamera(this.name + \"_L\", 0);\r\n            if (leftCamera) {\r\n                leftCamera._isLeftCamera = true;\r\n            }\r\n            const rightCamera = this.createRigCamera(this.name + \"_R\", 1);\r\n            if (rightCamera) {\r\n                rightCamera._isRightCamera = true;\r\n            }\r\n            if (leftCamera && rightCamera) {\r\n                this._rigCameras.push(leftCamera);\r\n                this._rigCameras.push(rightCamera);\r\n            }\r\n        }\r\n\r\n        this._setRigMode(rigParams);\r\n\r\n        this._cascadePostProcessesToRigCams();\r\n        this.update();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _setRigMode(rigParams: any) {\r\n        // no-op\r\n    }\r\n\r\n    /** @internal */\r\n    public _getVRProjectionMatrix(): Matrix {\r\n        Matrix.PerspectiveFovLHToRef(\r\n            this._cameraRigParams.vrMetrics.aspectRatioFov,\r\n            this._cameraRigParams.vrMetrics.aspectRatio,\r\n            this.minZ,\r\n            this.maxZ,\r\n            this._cameraRigParams.vrWorkMatrix,\r\n            true,\r\n            this.getEngine().isNDCHalfZRange\r\n        );\r\n        this._cameraRigParams.vrWorkMatrix.multiplyToRef(this._cameraRigParams.vrHMatrix, this._projectionMatrix);\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setCameraRigParameter(name: string, value: any) {\r\n        if (!this._cameraRigParams) {\r\n            this._cameraRigParams = {};\r\n        }\r\n        this._cameraRigParams[name] = value;\r\n        //provisionnally:\r\n        if (name === \"interaxialDistance\") {\r\n            this._cameraRigParams.stereoHalfAngle = Tools.ToRadians(value / 0.0637);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * needs to be overridden by children so sub has required properties to be copied\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public createRigCamera(name: string, cameraIndex: number): Nullable<Camera> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * May need to be overridden by children\r\n     * @internal\r\n     */\r\n    public _updateRigCameras() {\r\n        for (let i = 0; i < this._rigCameras.length; i++) {\r\n            this._rigCameras[i].minZ = this.minZ;\r\n            this._rigCameras[i].maxZ = this.maxZ;\r\n            this._rigCameras[i].fov = this.fov;\r\n            this._rigCameras[i].upVector.copyFrom(this.upVector);\r\n        }\r\n\r\n        // only update viewport when ANAGLYPH\r\n        if (this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH) {\r\n            this._rigCameras[0].viewport = this._rigCameras[1].viewport = this.viewport;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _setupInputs() {}\r\n\r\n    /**\r\n     * Serialiaze the camera setup to a json representation\r\n     * @returns the JSON representation\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        // Type\r\n        serializationObject.type = this.getClassName();\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        if (this.inputs) {\r\n            this.inputs.serialize(serializationObject);\r\n        }\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        serializationObject.isEnabled = this.isEnabled();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Clones the current camera.\r\n     * @param name The cloned camera name\r\n     * @param newParent The cloned camera's new parent (none by default)\r\n     * @returns the cloned camera\r\n     */\r\n    public override clone(name: string, newParent: Nullable<Node> = null): Camera {\r\n        const camera = SerializationHelper.Clone(\r\n            Camera.GetConstructorFromName(this.getClassName(), name, this.getScene(), this.interaxialDistance, this.isStereoscopicSideBySide),\r\n            this\r\n        );\r\n        camera.name = name;\r\n        camera.parent = newParent;\r\n\r\n        this.onClonedObservable.notifyObservers(camera);\r\n\r\n        return camera;\r\n    }\r\n\r\n    /**\r\n     * Gets the direction of the camera relative to a given local axis.\r\n     * @param localAxis Defines the reference axis to provide a relative direction.\r\n     * @returns the direction\r\n     */\r\n    public getDirection(localAxis: DeepImmutable<Vector3>): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getDirectionToRef(localAxis, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the current camera absolute rotation\r\n     */\r\n    public get absoluteRotation(): Quaternion {\r\n        this.getWorldMatrix().decompose(undefined, this._absoluteRotation);\r\n\r\n        return this._absoluteRotation;\r\n    }\r\n\r\n    /**\r\n     * Gets the direction of the camera relative to a given local axis into a passed vector.\r\n     * @param localAxis Defines the reference axis to provide a relative direction.\r\n     * @param result Defines the vector to store the result in\r\n     */\r\n    public getDirectionToRef(localAxis: DeepImmutable<Vector3>, result: Vector3): void {\r\n        Vector3.TransformNormalToRef(localAxis, this.getWorldMatrix(), result);\r\n    }\r\n\r\n    /**\r\n     * Gets a camera constructor for a given camera type\r\n     * @param type The type of the camera to construct (should be equal to one of the camera class name)\r\n     * @param name The name of the camera the result will be able to instantiate\r\n     * @param scene The scene the result will construct the camera in\r\n     * @param interaxial_distance In case of stereoscopic setup, the distance between both eyes\r\n     * @param isStereoscopicSideBySide In case of stereoscopic setup, should the sereo be side b side\r\n     * @returns a factory method to construct the camera\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    static GetConstructorFromName(type: string, name: string, scene: Scene, interaxial_distance: number = 0, isStereoscopicSideBySide: boolean = true): () => Camera {\r\n        const constructorFunc = Node.Construct(type, name, scene, {\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            interaxial_distance: interaxial_distance,\r\n            isStereoscopicSideBySide: isStereoscopicSideBySide,\r\n        });\r\n\r\n        if (constructorFunc) {\r\n            return <() => Camera>constructorFunc;\r\n        }\r\n\r\n        // Default to universal camera\r\n        return () => Camera._CreateDefaultParsedCamera(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Compute the world  matrix of the camera.\r\n     * @returns the camera world matrix\r\n     */\r\n    public override computeWorldMatrix(): Matrix {\r\n        return this.getWorldMatrix();\r\n    }\r\n\r\n    /**\r\n     * Parse a JSON and creates the camera from the parsed information\r\n     * @param parsedCamera The JSON to parse\r\n     * @param scene The scene to instantiate the camera in\r\n     * @returns the newly constructed camera\r\n     */\r\n    public static Parse(parsedCamera: any, scene: Scene): Camera {\r\n        const type = parsedCamera.type;\r\n        const construct = Camera.GetConstructorFromName(type, parsedCamera.name, scene, parsedCamera.interaxial_distance, parsedCamera.isStereoscopicSideBySide);\r\n\r\n        const camera = SerializationHelper.Parse(construct, parsedCamera, scene);\r\n\r\n        // Parent\r\n        if (parsedCamera.parentId !== undefined) {\r\n            camera._waitingParentId = parsedCamera.parentId;\r\n        }\r\n\r\n        // Parent instance index\r\n        if (parsedCamera.parentInstanceIndex !== undefined) {\r\n            camera._waitingParentInstanceIndex = parsedCamera.parentInstanceIndex;\r\n        }\r\n\r\n        //If camera has an input manager, let it parse inputs settings\r\n        if (camera.inputs) {\r\n            camera.inputs.parse(parsedCamera);\r\n\r\n            camera._setupInputs();\r\n        }\r\n\r\n        if (parsedCamera.upVector) {\r\n            camera.upVector = Vector3.FromArray(parsedCamera.upVector); // need to force the upVector\r\n        }\r\n\r\n        if ((<any>camera).setPosition) {\r\n            // need to force position\r\n            camera.position.copyFromFloats(0, 0, 0);\r\n            (<any>camera).setPosition(Vector3.FromArray(parsedCamera.position));\r\n        }\r\n\r\n        // Target\r\n        if (parsedCamera.target) {\r\n            if ((<any>camera).setTarget) {\r\n                (<any>camera).setTarget(Vector3.FromArray(parsedCamera.target));\r\n            }\r\n        }\r\n\r\n        // Apply 3d rig, when found\r\n        if (parsedCamera.cameraRigMode) {\r\n            const rigParams = parsedCamera.interaxial_distance ? { interaxialDistance: parsedCamera.interaxial_distance } : {};\r\n            camera.setCameraRigMode(parsedCamera.cameraRigMode, rigParams);\r\n        }\r\n\r\n        // Animations\r\n        if (parsedCamera.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedCamera.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedCamera.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    camera.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(camera, parsedCamera, scene);\r\n        }\r\n\r\n        if (parsedCamera.autoAnimate) {\r\n            scene.beginAnimation(camera, parsedCamera.autoAnimateFrom, parsedCamera.autoAnimateTo, parsedCamera.autoAnimateLoop, parsedCamera.autoAnimateSpeed || 1.0);\r\n        }\r\n\r\n        // Check if isEnabled is defined to be back compatible with prior serialized versions.\r\n        if (parsedCamera.isEnabled !== undefined) {\r\n            camera.setEnabled(parsedCamera.isEnabled);\r\n        }\r\n\r\n        return camera;\r\n    }\r\n\r\n    /** @internal */\r\n    public _calculateHandednessMultiplier(): number {\r\n        let handednessMultiplier = this.getScene().useRightHandedSystem ? -1 : 1;\r\n        if (this.parent && this.parent._getWorldMatrixDeterminant() < 0) {\r\n            handednessMultiplier *= -1;\r\n        }\r\n\r\n        return handednessMultiplier;\r\n    }\r\n}\r\n", "import { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Class used to represent data loading progression\r\n */\r\nexport class SceneLoaderFlags {\r\n    // Flags\r\n    private static _ForceFullSceneLoadingForIncremental = false;\r\n    private static _ShowLoadingScreen = true;\r\n    private static _CleanBoneMatrixWeights = false;\r\n    private static _LoggingLevel = Constants.SCENELOADER_NO_LOGGING;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if entire scene must be loaded even if scene contains incremental data\r\n     */\r\n    public static get ForceFullSceneLoadingForIncremental() {\r\n        return SceneLoaderFlags._ForceFullSceneLoadingForIncremental;\r\n    }\r\n\r\n    public static set ForceFullSceneLoadingForIncremental(value: boolean) {\r\n        SceneLoaderFlags._ForceFullSceneLoadingForIncremental = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if loading screen must be displayed while loading a scene\r\n     */\r\n    public static get ShowLoadingScreen(): boolean {\r\n        return SceneLoaderFlags._ShowLoadingScreen;\r\n    }\r\n\r\n    public static set ShowLoadingScreen(value: boolean) {\r\n        SceneLoaderFlags._ShowLoadingScreen = value;\r\n    }\r\n\r\n    /**\r\n     * Defines the current logging level (while loading the scene)\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static get loggingLevel(): number {\r\n        return SceneLoaderFlags._LoggingLevel;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static set loggingLevel(value: number) {\r\n        SceneLoaderFlags._LoggingLevel = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set a boolean indicating if matrix weights must be cleaned upon loading\r\n     */\r\n    public static get CleanBoneMatrixWeights(): boolean {\r\n        return SceneLoaderFlags._CleanBoneMatrixWeights;\r\n    }\r\n\r\n    public static set CleanBoneMatrixWeights(value: boolean) {\r\n        SceneLoaderFlags._CleanBoneMatrixWeights = value;\r\n    }\r\n}\r\n", "import type { Nullable, FloatArray, DataArray, IndicesArray } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { IGetSetVerticesData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { extractMinAndMax } from \"../Maths/math.functions\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { useOpenGLOrientationForUV } from \"../Compat/compatibilityOptions\";\r\n\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Buffer } from \"../Buffers/buffer\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { CopyFloatData } from \"../Buffers/bufferUtils\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\n\r\n/**\r\n * Class used to store geometry data (vertex buffers + index buffer)\r\n */\r\nexport class Geometry implements IGetSetVerticesData {\r\n    // Members\r\n    /**\r\n     * Gets or sets the ID of the geometry\r\n     */\r\n    public id: string;\r\n    /**\r\n     * Gets or sets the unique ID of the geometry\r\n     */\r\n    public uniqueId: number;\r\n    /**\r\n     * Gets the delay loading state of the geometry (none by default which means not delayed)\r\n     */\r\n    public delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n    /**\r\n     * Gets the file containing the data to load when running in delay load state\r\n     */\r\n    public delayLoadingFile: Nullable<string>;\r\n    /**\r\n     * Callback called when the geometry is updated\r\n     */\r\n    public onGeometryUpdated: (geometry: Geometry, kind?: string) => void;\r\n\r\n    // Private\r\n    private _scene: Scene;\r\n    private _engine: AbstractEngine;\r\n    private _meshes: Mesh[];\r\n    private _totalVertices = 0;\r\n    private _totalIndices?: number;\r\n    /** @internal */\r\n    public _loadedUniqueId: string;\r\n    /** @internal */\r\n    public _indices: IndicesArray;\r\n    /** @internal */\r\n    public _vertexBuffers: { [key: string]: VertexBuffer };\r\n    private _isDisposed = false;\r\n    private _extend: { minimum: Vector3; maximum: Vector3 };\r\n    private _boundingBias: Vector2;\r\n    /** @internal */\r\n    public _delayInfo: Array<string>;\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _indexBufferIsUpdatable = false;\r\n    /** @internal */\r\n    public _boundingInfo: Nullable<BoundingInfo>;\r\n    /** @internal */\r\n    public _delayLoadingFunction: Nullable<(any: any, geometry: Geometry) => void>;\r\n    /** @internal */\r\n    public _softwareSkinningFrameId: number;\r\n    private _vertexArrayObjects: { [key: string]: WebGLVertexArrayObject };\r\n    private _updatable: boolean;\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _positions: Nullable<Vector3[]>;\r\n    private _positionsCache: Vector3[] = [];\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<IAssetContainer> = null;\r\n\r\n    /**\r\n     *  Gets or sets the Bias Vector to apply on the bounding elements (box/sphere), the max extend is computed as v += v * bias.x + bias.y, the min is computed as v -= v * bias.x + bias.y\r\n     */\r\n    public get boundingBias(): Vector2 {\r\n        return this._boundingBias;\r\n    }\r\n\r\n    /**\r\n     *  Gets or sets the Bias Vector to apply on the bounding elements (box/sphere), the max extend is computed as v += v * bias.x + bias.y, the min is computed as v -= v * bias.x + bias.y\r\n     */\r\n    public set boundingBias(value: Vector2) {\r\n        if (this._boundingBias) {\r\n            this._boundingBias.copyFrom(value);\r\n        } else {\r\n            this._boundingBias = value.clone();\r\n        }\r\n\r\n        this._updateBoundingInfo(true, null);\r\n    }\r\n\r\n    /**\r\n     * Static function used to attach a new empty geometry to a mesh\r\n     * @param mesh defines the mesh to attach the geometry to\r\n     * @returns the new Geometry\r\n     */\r\n    public static CreateGeometryForMesh(mesh: Mesh): Geometry {\r\n        const geometry = new Geometry(Geometry.RandomId(), mesh.getScene());\r\n\r\n        geometry.applyToMesh(mesh);\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /** Get the list of meshes using this geometry */\r\n    public get meshes(): Mesh[] {\r\n        return this._meshes;\r\n    }\r\n\r\n    /**\r\n     * If set to true (false by default), the bounding info applied to the meshes sharing this geometry will be the bounding info defined at the class level\r\n     * and won't be computed based on the vertex positions (which is what we get when useBoundingInfoFromGeometry = false)\r\n     */\r\n    public useBoundingInfoFromGeometry = false;\r\n\r\n    /**\r\n     * Creates a new geometry\r\n     * @param id defines the unique ID\r\n     * @param scene defines the hosting scene\r\n     * @param vertexData defines the VertexData used to get geometry data\r\n     * @param updatable defines if geometry must be updatable (false by default)\r\n     * @param mesh defines the mesh that will be associated with the geometry\r\n     */\r\n    constructor(id: string, scene?: Scene, vertexData?: VertexData, updatable: boolean = false, mesh: Nullable<Mesh> = null) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n        this.id = id;\r\n        this.uniqueId = this._scene.getUniqueId();\r\n        this._engine = this._scene.getEngine();\r\n        this._meshes = [];\r\n        //Init vertex buffer cache\r\n        this._vertexBuffers = {};\r\n        this._indices = [];\r\n        this._updatable = updatable;\r\n\r\n        // vertexData\r\n        if (vertexData) {\r\n            this.setAllVerticesData(vertexData, updatable);\r\n        } else {\r\n            this._totalVertices = 0;\r\n        }\r\n\r\n        if (this._engine.getCaps().vertexArrayObject) {\r\n            this._vertexArrayObjects = {};\r\n        }\r\n\r\n        // applyToMesh\r\n        if (mesh) {\r\n            this.applyToMesh(mesh);\r\n            mesh.computeWorldMatrix(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current extend of the geometry\r\n     */\r\n    public get extend(): { minimum: Vector3; maximum: Vector3 } {\r\n        return this._extend;\r\n    }\r\n\r\n    /**\r\n     * Gets the hosting scene\r\n     * @returns the hosting Scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets the hosting engine\r\n     * @returns the hosting Engine\r\n     */\r\n    public getEngine(): AbstractEngine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * Defines if the geometry is ready to use\r\n     * @returns true if the geometry is ready to be used\r\n     */\r\n    public isReady(): boolean {\r\n        return this.delayLoadState === Constants.DELAYLOADSTATE_LOADED || this.delayLoadState === Constants.DELAYLOADSTATE_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating that the geometry should not be serialized\r\n     */\r\n    public get doNotSerialize(): boolean {\r\n        for (let index = 0; index < this._meshes.length; index++) {\r\n            if (!this._meshes[index].doNotSerialize) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        if (this._vertexArrayObjects) {\r\n            this._vertexArrayObjects = {};\r\n        }\r\n\r\n        // Index buffer\r\n        if (this._meshes.length !== 0 && this._indices) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, this._updatable, \"Geometry_\" + this.id + \"_IndexBuffer\");\r\n        }\r\n\r\n        // Vertex buffers\r\n        const buffers = new Set<Buffer>();\r\n        for (const key in this._vertexBuffers) {\r\n            buffers.add(this._vertexBuffers[key].getWrapperBuffer());\r\n        }\r\n\r\n        buffers.forEach((buffer) => {\r\n            buffer._rebuild();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Affects all geometry data in one call\r\n     * @param vertexData defines the geometry data\r\n     * @param updatable defines if the geometry must be flagged as updatable (false as default)\r\n     */\r\n    public setAllVerticesData(vertexData: VertexData, updatable?: boolean): void {\r\n        vertexData.applyToGeometry(this, updatable);\r\n        this._notifyUpdate();\r\n    }\r\n\r\n    /**\r\n     * Set specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the vertex data to use\r\n     * @param updatable defines if the vertex must be flagged as updatable (false as default)\r\n     * @param stride defines the stride to use (0 by default). This value is deduced from the kind value if not specified\r\n     */\r\n    public setVerticesData(kind: string, data: FloatArray, updatable: boolean = false, stride?: number): void {\r\n        if (updatable && Array.isArray(data)) {\r\n            // to avoid converting to Float32Array at each draw call in engine.updateDynamicVertexBuffer, we make the conversion a single time here\r\n            data = new Float32Array(data);\r\n        }\r\n        const buffer = new VertexBuffer(this._engine, data, kind, {\r\n            updatable,\r\n            postponeInternalCreation: this._meshes.length === 0,\r\n            stride,\r\n            label: \"Geometry_\" + this.id + \"_\" + kind,\r\n        });\r\n        this.setVerticesBuffer(buffer);\r\n    }\r\n\r\n    /**\r\n     * Removes a specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     */\r\n    public removeVerticesData(kind: string) {\r\n        if (this._vertexBuffers[kind]) {\r\n            this._vertexBuffers[kind].dispose();\r\n            delete this._vertexBuffers[kind];\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            this._disposeVertexArrayObjects();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Affect a vertex buffer to the geometry. the vertexBuffer.getKind() function is used to determine where to store the data\r\n     * @param buffer defines the vertex buffer to use\r\n     * @param totalVertices defines the total number of vertices for position kind (could be null)\r\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\r\n     */\r\n    public setVerticesBuffer(buffer: VertexBuffer, totalVertices: Nullable<number> = null, disposeExistingBuffer = true): void {\r\n        const kind = buffer.getKind();\r\n        if (this._vertexBuffers[kind] && disposeExistingBuffer) {\r\n            this._vertexBuffers[kind].dispose();\r\n        }\r\n\r\n        if (buffer._buffer) {\r\n            buffer._buffer._increaseReferences();\r\n        }\r\n\r\n        this._vertexBuffers[kind] = buffer;\r\n        const meshes = this._meshes;\r\n        const numOfMeshes = meshes.length;\r\n\r\n        if (kind === VertexBuffer.PositionKind) {\r\n            this._totalVertices = totalVertices ?? buffer._maxVerticesCount;\r\n\r\n            this._updateExtend(buffer.getFloatData(this._totalVertices));\r\n            this._resetPointsArrayCache();\r\n\r\n            // this._extend can be empty if buffer.getFloatData(this._totalVertices) returned null\r\n            const minimum = (this._extend && this._extend.minimum) || new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n            const maximum = (this._extend && this._extend.maximum) || new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\r\n            for (let index = 0; index < numOfMeshes; index++) {\r\n                const mesh = meshes[index];\r\n                mesh.buildBoundingInfo(minimum, maximum);\r\n                mesh._createGlobalSubMesh(mesh.isUnIndexed);\r\n                mesh.computeWorldMatrix(true);\r\n                mesh.synchronizeInstances();\r\n            }\r\n        }\r\n\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    /**\r\n     * Update a specific vertex buffer\r\n     * This function will directly update the underlying DataBuffer according to the passed numeric array or Float32Array\r\n     * It will do nothing if the buffer is not updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the data to use\r\n     * @param offset defines the offset in the target buffer where to store the data\r\n     * @param useBytes set to true if the offset is in bytes\r\n     */\r\n    public updateVerticesDataDirectly(kind: string, data: DataArray, offset: number, useBytes: boolean = false): void {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n\r\n        if (!vertexBuffer) {\r\n            return;\r\n        }\r\n\r\n        vertexBuffer.updateDirectly(data, offset, useBytes);\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    /**\r\n     * Update a specific vertex buffer\r\n     * This function will create a new buffer if the current one is not updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the data to use\r\n     * @param updateExtends defines if the geometry extends must be recomputed (false by default)\r\n     */\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends: boolean = false): void {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n\r\n        if (!vertexBuffer) {\r\n            return;\r\n        }\r\n\r\n        vertexBuffer.update(data);\r\n\r\n        if (kind === VertexBuffer.PositionKind) {\r\n            this._updateBoundingInfo(updateExtends, data);\r\n        }\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    private _updateBoundingInfo(updateExtends: boolean, data: Nullable<FloatArray>) {\r\n        if (updateExtends) {\r\n            this._updateExtend(data);\r\n        }\r\n\r\n        this._resetPointsArrayCache();\r\n\r\n        if (updateExtends) {\r\n            const meshes = this._meshes;\r\n            for (const mesh of meshes) {\r\n                if (mesh.hasBoundingInfo) {\r\n                    mesh.getBoundingInfo().reConstruct(this._extend.minimum, this._extend.maximum);\r\n                } else {\r\n                    mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\r\n                }\r\n\r\n                const subMeshes = mesh.subMeshes;\r\n                for (const subMesh of subMeshes) {\r\n                    subMesh.refreshBoundingInfo();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(\r\n        effect: Nullable<Effect>,\r\n        indexToBind?: Nullable<DataBuffer>,\r\n        overrideVertexBuffers?: { [kind: string]: Nullable<VertexBuffer> },\r\n        overrideVertexArrayObjects?: { [key: string]: WebGLVertexArrayObject }\r\n    ): void {\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        if (indexToBind === undefined) {\r\n            indexToBind = this._indexBuffer;\r\n        }\r\n        const vbs = this.getVertexBuffers();\r\n\r\n        if (!vbs) {\r\n            return;\r\n        }\r\n\r\n        if (indexToBind != this._indexBuffer || (!this._vertexArrayObjects && !overrideVertexArrayObjects)) {\r\n            this._engine.bindBuffers(vbs, indexToBind, effect, overrideVertexBuffers);\r\n            return;\r\n        }\r\n\r\n        const vaos = overrideVertexArrayObjects ? overrideVertexArrayObjects : this._vertexArrayObjects;\r\n        const engine = this._engine as ThinEngine;\r\n\r\n        // Using VAO\r\n        if (!vaos[effect.key]) {\r\n            vaos[effect.key] = engine.recordVertexArrayObject(vbs, indexToBind, effect, overrideVertexBuffers);\r\n        }\r\n\r\n        engine.bindVertexArrayObject(vaos[effect.key], indexToBind);\r\n    }\r\n\r\n    /**\r\n     * Gets total number of vertices\r\n     * @returns the total number of vertices\r\n     */\r\n    public getTotalVertices(): number {\r\n        if (!this.isReady()) {\r\n            return 0;\r\n        }\r\n\r\n        return this._totalVertices;\r\n    }\r\n\r\n    /**\r\n     * Gets a specific vertex data attached to this geometry. Float data is constructed if the vertex buffer data cannot be returned directly.\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns a float array containing vertex data\r\n     */\r\n    public getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray> {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n        if (!vertexBuffer) {\r\n            return null;\r\n        }\r\n\r\n        return vertexBuffer.getFloatData(this._totalVertices, forceCopy || (copyWhenShared && this._meshes.length !== 1));\r\n    }\r\n\r\n    /**\r\n     * Copies the requested vertex data kind into the given vertex data map. Float data is constructed if the map doesn't have the data.\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param vertexData defines the map that stores the resulting data\r\n     */\r\n    public copyVerticesData(kind: string, vertexData: { [kind: string]: Float32Array }): void {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n        if (!vertexBuffer) {\r\n            return;\r\n        }\r\n\r\n        vertexData[kind] ||= new Float32Array(this._totalVertices * vertexBuffer.getSize());\r\n        const data = vertexBuffer.getData();\r\n        if (data) {\r\n            CopyFloatData(\r\n                data,\r\n                vertexBuffer.getSize(),\r\n                vertexBuffer.type,\r\n                vertexBuffer.byteOffset,\r\n                vertexBuffer.byteStride,\r\n                vertexBuffer.normalized,\r\n                this._totalVertices,\r\n                vertexData[kind]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns true if the vertex buffer with the specified kind is updatable\r\n     */\r\n    public isVertexBufferUpdatable(kind: string): boolean {\r\n        const vb = this._vertexBuffers[kind];\r\n\r\n        if (!vb) {\r\n            return false;\r\n        }\r\n\r\n        return vb.isUpdatable();\r\n    }\r\n\r\n    /**\r\n     * Gets a specific vertex buffer\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns a VertexBuffer\r\n     */\r\n    public getVertexBuffer(kind: string): Nullable<VertexBuffer> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._vertexBuffers[kind];\r\n    }\r\n\r\n    /**\r\n     * Returns all vertex buffers\r\n     * @returns an object holding all vertex buffers indexed by kind\r\n     */\r\n    public getVertexBuffers(): Nullable<{ [key: string]: VertexBuffer }> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._vertexBuffers;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if specific vertex buffer is present\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns true if data is present\r\n     */\r\n    public isVerticesDataPresent(kind: string): boolean {\r\n        if (!this._vertexBuffers) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        return this._vertexBuffers[kind] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all attached data kinds (Position, normal, etc...)\r\n     * @returns a list of string containing all kinds\r\n     */\r\n    public getVerticesDataKinds(): string[] {\r\n        const result = [];\r\n        let kind;\r\n        if (!this._vertexBuffers && this._delayInfo) {\r\n            for (kind in this._delayInfo) {\r\n                result.push(kind);\r\n            }\r\n        } else {\r\n            for (kind in this._vertexBuffers) {\r\n                result.push(kind);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Update index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param offset defines the offset in the target buffer where to store the data\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     */\r\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): void {\r\n        if (!this._indexBuffer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._indexBufferIsUpdatable) {\r\n            this.setIndices(indices, null, true);\r\n        } else {\r\n            const needToUpdateSubMeshes = indices.length !== this._indices.length;\r\n\r\n            if (!gpuMemoryOnly) {\r\n                this._indices = indices.slice();\r\n            }\r\n            this._engine.updateDynamicIndexBuffer(this._indexBuffer, indices, offset);\r\n            if (needToUpdateSubMeshes) {\r\n                for (const mesh of this._meshes) {\r\n                    mesh._createGlobalSubMesh(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the index buffer for this geometry.\r\n     * @param indexBuffer Defines the index buffer to use for this geometry\r\n     * @param totalVertices Defines the total number of vertices used by the buffer\r\n     * @param totalIndices Defines the total number of indices in the index buffer\r\n     */\r\n    public setIndexBuffer(indexBuffer: DataBuffer, totalVertices: number, totalIndices: number): void {\r\n        this._indices = [];\r\n        this._indexBufferIsUpdatable = false;\r\n        this._indexBuffer = indexBuffer;\r\n        this._totalVertices = totalVertices;\r\n        this._totalIndices = totalIndices;\r\n\r\n        indexBuffer.is32Bits ||= this._totalIndices > 65535;\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._createGlobalSubMesh(true);\r\n            mesh.synchronizeInstances();\r\n        }\r\n\r\n        this._notifyUpdate();\r\n    }\r\n\r\n    /**\r\n     * Creates a new index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param totalVertices defines the total number of vertices (could be null)\r\n     * @param updatable defines if the index buffer must be flagged as updatable (false by default)\r\n     * @param dontForceSubMeshRecreation defines a boolean indicating that we don't want to force the recreation of sub-meshes if we don't have to (false by default)\r\n     */\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null, updatable: boolean = false, dontForceSubMeshRecreation = false): void {\r\n        if (this._indexBuffer) {\r\n            this._engine._releaseBuffer(this._indexBuffer);\r\n        }\r\n\r\n        this._indices = indices;\r\n        this._indexBufferIsUpdatable = updatable;\r\n        if (this._meshes.length !== 0 && this._indices) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, updatable, \"Geometry_\" + this.id + \"_IndexBuffer\");\r\n        }\r\n\r\n        if (totalVertices != undefined) {\r\n            // including null and undefined\r\n            this._totalVertices = totalVertices;\r\n        }\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._createGlobalSubMesh(!dontForceSubMeshRecreation);\r\n            mesh.synchronizeInstances();\r\n        }\r\n\r\n        this._notifyUpdate();\r\n    }\r\n\r\n    /**\r\n     * Return the total number of indices\r\n     * @returns the total number of indices\r\n     */\r\n    public getTotalIndices(): number {\r\n        if (!this.isReady()) {\r\n            return 0;\r\n        }\r\n        return this._totalIndices !== undefined ? this._totalIndices : this._indices.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the index buffer array\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the index buffer array\r\n     */\r\n    public getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        const orig = this._indices;\r\n        if (!forceCopy && (!copyWhenShared || this._meshes.length === 1)) {\r\n            return orig;\r\n        } else {\r\n            return orig.slice();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the index buffer\r\n     * @returns the index buffer\r\n     */\r\n    public getIndexBuffer(): Nullable<DataBuffer> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._indexBuffer;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _releaseVertexArrayObject(effect: Nullable<Effect> = null) {\r\n        if (!effect || !this._vertexArrayObjects) {\r\n            return;\r\n        }\r\n\r\n        if (this._vertexArrayObjects[effect.key]) {\r\n            (this._engine as ThinEngine).releaseVertexArrayObject(this._vertexArrayObjects[effect.key]);\r\n            delete this._vertexArrayObjects[effect.key];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the associated resources for a specific mesh\r\n     * @param mesh defines the source mesh\r\n     * @param shouldDispose defines if the geometry must be disposed if there is no more mesh pointing to it\r\n     */\r\n    public releaseForMesh(mesh: Mesh, shouldDispose?: boolean): void {\r\n        const meshes = this._meshes;\r\n        const index = meshes.indexOf(mesh);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        meshes.splice(index, 1);\r\n\r\n        if (this._vertexArrayObjects) {\r\n            mesh._invalidateInstanceVertexArrayObject();\r\n        }\r\n\r\n        mesh._geometry = null;\r\n\r\n        if (meshes.length === 0 && shouldDispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply current geometry to a given mesh\r\n     * @param mesh defines the mesh to apply geometry to\r\n     */\r\n    public applyToMesh(mesh: Mesh): void {\r\n        if (mesh._geometry === this) {\r\n            return;\r\n        }\r\n\r\n        const previousGeometry = mesh._geometry;\r\n        if (previousGeometry) {\r\n            previousGeometry.releaseForMesh(mesh);\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            mesh._invalidateInstanceVertexArrayObject();\r\n        }\r\n\r\n        const meshes = this._meshes;\r\n\r\n        // must be done before setting vertexBuffers because of mesh._createGlobalSubMesh()\r\n        mesh._geometry = this;\r\n        mesh._internalAbstractMeshDataInfo._positions = null;\r\n\r\n        this._scene.pushGeometry(this);\r\n\r\n        meshes.push(mesh);\r\n\r\n        if (this.isReady()) {\r\n            this._applyToMesh(mesh);\r\n        } else if (this._boundingInfo) {\r\n            mesh.setBoundingInfo(this._boundingInfo);\r\n        }\r\n    }\r\n\r\n    private _updateExtend(data: Nullable<FloatArray> = null) {\r\n        if (this.useBoundingInfoFromGeometry && this._boundingInfo) {\r\n            this._extend = {\r\n                minimum: this._boundingInfo.minimum.clone(),\r\n                maximum: this._boundingInfo.maximum.clone(),\r\n            };\r\n        } else {\r\n            if (!data) {\r\n                data = this.getVerticesData(VertexBuffer.PositionKind)!;\r\n                // This can happen if the buffer comes from a Hardware Buffer where\r\n                // The data have not been uploaded by Babylon. (ex: Compute Shaders and Storage Buffers)\r\n                if (!data) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this._extend = extractMinAndMax(data, 0, this._totalVertices, this.boundingBias, 3);\r\n        }\r\n    }\r\n\r\n    private _applyToMesh(mesh: Mesh): void {\r\n        const numOfMeshes = this._meshes.length;\r\n\r\n        // vertexBuffers\r\n        for (const kind in this._vertexBuffers) {\r\n            if (numOfMeshes === 1) {\r\n                this._vertexBuffers[kind].create();\r\n            }\r\n\r\n            if (kind === VertexBuffer.PositionKind) {\r\n                if (!this._extend) {\r\n                    this._updateExtend();\r\n                }\r\n                mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\r\n\r\n                mesh._createGlobalSubMesh(mesh.isUnIndexed);\r\n\r\n                //bounding info was just created again, world matrix should be applied again.\r\n                mesh._updateBoundingInfo();\r\n            }\r\n        }\r\n\r\n        // indexBuffer\r\n        if (numOfMeshes === 1 && this._indices && this._indices.length > 0) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, this._updatable, \"Geometry_\" + this.id + \"_IndexBuffer\");\r\n        }\r\n\r\n        // morphTargets\r\n        mesh._syncGeometryWithMorphTargetManager();\r\n\r\n        // instances\r\n        mesh.synchronizeInstances();\r\n    }\r\n\r\n    private _notifyUpdate(kind?: string) {\r\n        if (this.onGeometryUpdated) {\r\n            this.onGeometryUpdated(this, kind);\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            this._disposeVertexArrayObjects();\r\n        }\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._markSubMeshesAsAttributesDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load the geometry if it was flagged as delay loaded\r\n     * @param scene defines the hosting scene\r\n     * @param onLoaded defines a callback called when the geometry is loaded\r\n     */\r\n    public load(scene: Scene, onLoaded?: () => void): void {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return;\r\n        }\r\n\r\n        if (this.isReady()) {\r\n            if (onLoaded) {\r\n                onLoaded();\r\n            }\r\n            return;\r\n        }\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_LOADING;\r\n\r\n        this._queueLoad(scene, onLoaded);\r\n    }\r\n\r\n    private _queueLoad(scene: Scene, onLoaded?: () => void): void {\r\n        if (!this.delayLoadingFile) {\r\n            return;\r\n        }\r\n\r\n        scene.addPendingData(this);\r\n        scene._loadFile(\r\n            this.delayLoadingFile,\r\n            (data) => {\r\n                if (!this._delayLoadingFunction) {\r\n                    return;\r\n                }\r\n\r\n                this._delayLoadingFunction(JSON.parse(data as string), this);\r\n\r\n                this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n                this._delayInfo = [];\r\n\r\n                scene.removePendingData(this);\r\n\r\n                const meshes = this._meshes;\r\n                const numOfMeshes = meshes.length;\r\n                for (let index = 0; index < numOfMeshes; index++) {\r\n                    this._applyToMesh(meshes[index]);\r\n                }\r\n\r\n                if (onLoaded) {\r\n                    onLoaded();\r\n                }\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Invert the geometry to move from a right handed system to a left handed one.\r\n     */\r\n    public toLeftHanded(): void {\r\n        // Flip faces\r\n        const tIndices = this.getIndices(false);\r\n        if (tIndices != null && tIndices.length > 0) {\r\n            for (let i = 0; i < tIndices.length; i += 3) {\r\n                const tTemp = tIndices[i + 0];\r\n                tIndices[i + 0] = tIndices[i + 2];\r\n                tIndices[i + 2] = tTemp;\r\n            }\r\n            this.setIndices(tIndices);\r\n        }\r\n\r\n        // Negate position.z\r\n        const tPositions = this.getVerticesData(VertexBuffer.PositionKind, false);\r\n        if (tPositions != null && tPositions.length > 0) {\r\n            for (let i = 0; i < tPositions.length; i += 3) {\r\n                tPositions[i + 2] = -tPositions[i + 2];\r\n            }\r\n            this.setVerticesData(VertexBuffer.PositionKind, tPositions, false);\r\n        }\r\n\r\n        // Negate normal.z\r\n        const tNormals = this.getVerticesData(VertexBuffer.NormalKind, false);\r\n        if (tNormals != null && tNormals.length > 0) {\r\n            for (let i = 0; i < tNormals.length; i += 3) {\r\n                tNormals[i + 2] = -tNormals[i + 2];\r\n            }\r\n            this.setVerticesData(VertexBuffer.NormalKind, tNormals, false);\r\n        }\r\n    }\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _resetPointsArrayCache(): void {\r\n        this._positions = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        if (this._positions) {\r\n            return true;\r\n        }\r\n\r\n        const data = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!data || data.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        for (let index = this._positionsCache.length * 3, arrayIdx = this._positionsCache.length; index < data.length; index += 3, ++arrayIdx) {\r\n            this._positionsCache[arrayIdx] = Vector3.FromArray(data, index);\r\n        }\r\n\r\n        for (let index = 0, arrayIdx = 0; index < data.length; index += 3, ++arrayIdx) {\r\n            this._positionsCache[arrayIdx].set(data[0 + index], data[1 + index], data[2 + index]);\r\n        }\r\n\r\n        // just in case the number of positions was reduced, splice the array\r\n        this._positionsCache.length = data.length / 3;\r\n\r\n        this._positions = this._positionsCache;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating if the geometry is disposed\r\n     * @returns true if the geometry was disposed\r\n     */\r\n    public isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    private _disposeVertexArrayObjects(): void {\r\n        if (this._vertexArrayObjects) {\r\n            for (const kind in this._vertexArrayObjects) {\r\n                (this._engine as ThinEngine).releaseVertexArrayObject(this._vertexArrayObjects[kind]);\r\n            }\r\n            this._vertexArrayObjects = {}; // Will trigger a rebuild of the VAO if supported\r\n\r\n            const meshes = this._meshes;\r\n            const numOfMeshes = meshes.length;\r\n            for (let index = 0; index < numOfMeshes; index++) {\r\n                meshes[index]._invalidateInstanceVertexArrayObject();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Free all associated resources\r\n     */\r\n    public dispose(): void {\r\n        const meshes = this._meshes;\r\n        const numOfMeshes = meshes.length;\r\n        let index: number;\r\n        for (index = 0; index < numOfMeshes; index++) {\r\n            this.releaseForMesh(meshes[index]);\r\n        }\r\n        this._meshes.length = 0;\r\n\r\n        this._disposeVertexArrayObjects();\r\n\r\n        for (const kind in this._vertexBuffers) {\r\n            this._vertexBuffers[kind].dispose();\r\n        }\r\n        this._vertexBuffers = {};\r\n        this._totalVertices = 0;\r\n\r\n        if (this._indexBuffer) {\r\n            this._engine._releaseBuffer(this._indexBuffer);\r\n        }\r\n        this._indexBuffer = null;\r\n        this._indices = [];\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n        this.delayLoadingFile = null;\r\n        this._delayLoadingFunction = null;\r\n        this._delayInfo = [];\r\n\r\n        this._boundingInfo = null;\r\n\r\n        this._scene.removeGeometry(this);\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.geometries.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.geometries.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * Clone the current geometry into a new geometry\r\n     * @param id defines the unique ID of the new geometry\r\n     * @returns a new geometry object\r\n     */\r\n    public copy(id: string): Geometry {\r\n        const vertexData = new VertexData();\r\n\r\n        vertexData.indices = [];\r\n\r\n        const indices = this.getIndices();\r\n        if (indices) {\r\n            for (let index = 0; index < indices.length; index++) {\r\n                (<number[]>vertexData.indices).push(indices[index]);\r\n            }\r\n        }\r\n\r\n        let updatable = false;\r\n        let stopChecking = false;\r\n        let kind;\r\n        for (kind in this._vertexBuffers) {\r\n            // using slice() to make a copy of the array and not just reference it\r\n            const data = this.getVerticesData(kind);\r\n\r\n            if (data) {\r\n                if (data instanceof Float32Array) {\r\n                    vertexData.set(new Float32Array(<Float32Array>data), kind);\r\n                } else {\r\n                    vertexData.set((<number[]>data).slice(0), kind);\r\n                }\r\n                if (!stopChecking) {\r\n                    const vb = this.getVertexBuffer(kind);\r\n\r\n                    if (vb) {\r\n                        updatable = vb.isUpdatable();\r\n                        stopChecking = !updatable;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const geometry = new Geometry(id, this._scene, vertexData, updatable);\r\n\r\n        geometry.delayLoadState = this.delayLoadState;\r\n        geometry.delayLoadingFile = this.delayLoadingFile;\r\n        geometry._delayLoadingFunction = this._delayLoadingFunction;\r\n\r\n        for (kind in this._delayInfo) {\r\n            geometry._delayInfo = geometry._delayInfo || [];\r\n            geometry._delayInfo.push(kind);\r\n        }\r\n\r\n        // Bounding info\r\n        geometry._boundingInfo = new BoundingInfo(this._extend.minimum, this._extend.maximum);\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * Serialize the current geometry info (and not the vertices data) into a JSON object\r\n     * @returns a JSON representation of the current geometry data (without the vertices data)\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.updatable = this._updatable;\r\n\r\n        if (Tags && Tags.HasTags(this)) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    private _toNumberArray(origin: Nullable<Float32Array | IndicesArray>): number[] {\r\n        if (Array.isArray(origin)) {\r\n            return origin;\r\n        } else {\r\n            return Array.prototype.slice.call(origin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release any memory retained by the cached data on the Geometry.\r\n     *\r\n     * Call this function to reduce memory footprint of the mesh.\r\n     * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\r\n     */\r\n    public clearCachedData(): void {\r\n        this._indices = [];\r\n        this._resetPointsArrayCache();\r\n\r\n        for (const vbName in this._vertexBuffers) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._vertexBuffers, vbName)) {\r\n                continue;\r\n            }\r\n            this._vertexBuffers[vbName]._buffer._data = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serialize all vertices data into a JSON object\r\n     * @returns a JSON representation of the current geometry data\r\n     */\r\n    public serializeVerticeData(): any {\r\n        const serializationObject = this.serialize();\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            serializationObject.positions = this._toNumberArray(this.getVerticesData(VertexBuffer.PositionKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\r\n                serializationObject.positions._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            serializationObject.normals = this._toNumberArray(this.getVerticesData(VertexBuffer.NormalKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\r\n                serializationObject.normals._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            serializationObject.tangents = this._toNumberArray(this.getVerticesData(VertexBuffer.TangentKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.TangentKind)) {\r\n                serializationObject.tangents._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            serializationObject.uvs = this._toNumberArray(this.getVerticesData(VertexBuffer.UVKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UVKind)) {\r\n                serializationObject.uvs._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n            serializationObject.uvs2 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV2Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV2Kind)) {\r\n                serializationObject.uvs2._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV3Kind)) {\r\n            serializationObject.uvs3 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV3Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV3Kind)) {\r\n                serializationObject.uvs3._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV4Kind)) {\r\n            serializationObject.uvs4 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV4Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV4Kind)) {\r\n                serializationObject.uvs4._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV5Kind)) {\r\n            serializationObject.uvs5 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV5Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV5Kind)) {\r\n                serializationObject.uvs5._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV6Kind)) {\r\n            serializationObject.uvs6 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV6Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV6Kind)) {\r\n                serializationObject.uvs6._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            serializationObject.colors = this._toNumberArray(this.getVerticesData(VertexBuffer.ColorKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.ColorKind)) {\r\n                serializationObject.colors._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            serializationObject.matricesIndices = this._toNumberArray(this.getVerticesData(VertexBuffer.MatricesIndicesKind));\r\n            serializationObject.matricesIndices._isExpanded = true;\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.MatricesIndicesKind)) {\r\n                serializationObject.matricesIndices._updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            serializationObject.matricesWeights = this._toNumberArray(this.getVerticesData(VertexBuffer.MatricesWeightsKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.MatricesWeightsKind)) {\r\n                serializationObject.matricesWeights._updatable = true;\r\n            }\r\n        }\r\n\r\n        serializationObject.indices = this._toNumberArray(this.getIndices());\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Extracts a clone of a mesh geometry\r\n     * @param mesh defines the source mesh\r\n     * @param id defines the unique ID of the new geometry object\r\n     * @returns the new geometry object\r\n     */\r\n    public static ExtractFromMesh(mesh: Mesh, id: string): Nullable<Geometry> {\r\n        const geometry = mesh._geometry;\r\n\r\n        if (!geometry) {\r\n            return null;\r\n        }\r\n\r\n        return geometry.copy(id);\r\n    }\r\n\r\n    /**\r\n     * You should now use Tools.RandomId(), this method is still here for legacy reasons.\r\n     * Implementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#answer-2117523\r\n     * Be aware Math.random() could cause collisions, but:\r\n     * \"All but 6 of the 128 bits of the ID are randomly generated, which means that for any two ids, there's a 1 in 2^^122 (or 5.3x10^^36) chance they'll collide\"\r\n     * @returns a string containing a new GUID\r\n     */\r\n    public static RandomId(): string {\r\n        return Tools.RandomId();\r\n    }\r\n\r\n    private static _GetGeometryByLoadedUniqueId(uniqueId: string, scene: Scene) {\r\n        for (let index = 0; index < scene.geometries.length; index++) {\r\n            if (scene.geometries[index]._loadedUniqueId === uniqueId) {\r\n                return scene.geometries[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _ImportGeometry(parsedGeometry: any, mesh: Mesh): void {\r\n        const scene = mesh.getScene();\r\n\r\n        // Geometry\r\n        const geometryUniqueId = parsedGeometry.geometryUniqueId;\r\n        const geometryId = parsedGeometry.geometryId;\r\n        if (geometryUniqueId || geometryId) {\r\n            const geometry = geometryUniqueId ? this._GetGeometryByLoadedUniqueId(geometryUniqueId, scene) : scene.getGeometryById(geometryId);\r\n            if (geometry) {\r\n                geometry.applyToMesh(mesh);\r\n            }\r\n        } else if (parsedGeometry instanceof ArrayBuffer) {\r\n            const binaryInfo = mesh._binaryInfo;\r\n\r\n            if (binaryInfo.positionsAttrDesc && binaryInfo.positionsAttrDesc.count > 0) {\r\n                const positionsData = new Float32Array(parsedGeometry, binaryInfo.positionsAttrDesc.offset, binaryInfo.positionsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.PositionKind, positionsData, false);\r\n            }\r\n\r\n            if (binaryInfo.normalsAttrDesc && binaryInfo.normalsAttrDesc.count > 0) {\r\n                const normalsData = new Float32Array(parsedGeometry, binaryInfo.normalsAttrDesc.offset, binaryInfo.normalsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.NormalKind, normalsData, false);\r\n            }\r\n\r\n            if (binaryInfo.tangetsAttrDesc && binaryInfo.tangetsAttrDesc.count > 0) {\r\n                const tangentsData = new Float32Array(parsedGeometry, binaryInfo.tangetsAttrDesc.offset, binaryInfo.tangetsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.TangentKind, tangentsData, false);\r\n            }\r\n\r\n            if (binaryInfo.uvsAttrDesc && binaryInfo.uvsAttrDesc.count > 0) {\r\n                const uvsData = new Float32Array(parsedGeometry, binaryInfo.uvsAttrDesc.offset, binaryInfo.uvsAttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvsData.length; index += 2) {\r\n                        uvsData[index] = 1 - uvsData[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UVKind, uvsData, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs2AttrDesc && binaryInfo.uvs2AttrDesc.count > 0) {\r\n                const uvs2Data = new Float32Array(parsedGeometry, binaryInfo.uvs2AttrDesc.offset, binaryInfo.uvs2AttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs2Data.length; index += 2) {\r\n                        uvs2Data[index] = 1 - uvs2Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV2Kind, uvs2Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs3AttrDesc && binaryInfo.uvs3AttrDesc.count > 0) {\r\n                const uvs3Data = new Float32Array(parsedGeometry, binaryInfo.uvs3AttrDesc.offset, binaryInfo.uvs3AttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs3Data.length; index += 2) {\r\n                        uvs3Data[index] = 1 - uvs3Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV3Kind, uvs3Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs4AttrDesc && binaryInfo.uvs4AttrDesc.count > 0) {\r\n                const uvs4Data = new Float32Array(parsedGeometry, binaryInfo.uvs4AttrDesc.offset, binaryInfo.uvs4AttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs4Data.length; index += 2) {\r\n                        uvs4Data[index] = 1 - uvs4Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV4Kind, uvs4Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs5AttrDesc && binaryInfo.uvs5AttrDesc.count > 0) {\r\n                const uvs5Data = new Float32Array(parsedGeometry, binaryInfo.uvs5AttrDesc.offset, binaryInfo.uvs5AttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs5Data.length; index += 2) {\r\n                        uvs5Data[index] = 1 - uvs5Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV5Kind, uvs5Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs6AttrDesc && binaryInfo.uvs6AttrDesc.count > 0) {\r\n                const uvs6Data = new Float32Array(parsedGeometry, binaryInfo.uvs6AttrDesc.offset, binaryInfo.uvs6AttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs6Data.length; index += 2) {\r\n                        uvs6Data[index] = 1 - uvs6Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV6Kind, uvs6Data, false);\r\n            }\r\n\r\n            if (binaryInfo.colorsAttrDesc && binaryInfo.colorsAttrDesc.count > 0) {\r\n                const colorsData = new Float32Array(parsedGeometry, binaryInfo.colorsAttrDesc.offset, binaryInfo.colorsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.ColorKind, colorsData, false, binaryInfo.colorsAttrDesc.stride);\r\n            }\r\n\r\n            if (binaryInfo.matricesIndicesAttrDesc && binaryInfo.matricesIndicesAttrDesc.count > 0) {\r\n                const matricesIndicesData = new Int32Array(parsedGeometry, binaryInfo.matricesIndicesAttrDesc.offset, binaryInfo.matricesIndicesAttrDesc.count);\r\n                const floatIndices = [];\r\n                for (let i = 0; i < matricesIndicesData.length; i++) {\r\n                    const index = matricesIndicesData[i];\r\n                    floatIndices.push(index & 0x000000ff);\r\n                    floatIndices.push((index & 0x0000ff00) >> 8);\r\n                    floatIndices.push((index & 0x00ff0000) >> 16);\r\n                    floatIndices.push((index >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, floatIndices, false);\r\n            }\r\n\r\n            if (binaryInfo.matricesIndicesExtraAttrDesc && binaryInfo.matricesIndicesExtraAttrDesc.count > 0) {\r\n                const matricesIndicesData = new Int32Array(parsedGeometry, binaryInfo.matricesIndicesExtraAttrDesc.offset, binaryInfo.matricesIndicesExtraAttrDesc.count);\r\n                const floatIndices = [];\r\n                for (let i = 0; i < matricesIndicesData.length; i++) {\r\n                    const index = matricesIndicesData[i];\r\n                    floatIndices.push(index & 0x000000ff);\r\n                    floatIndices.push((index & 0x0000ff00) >> 8);\r\n                    floatIndices.push((index & 0x00ff0000) >> 16);\r\n                    floatIndices.push((index >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, floatIndices, false);\r\n            }\r\n\r\n            if (binaryInfo.matricesWeightsAttrDesc && binaryInfo.matricesWeightsAttrDesc.count > 0) {\r\n                const matricesWeightsData = new Float32Array(parsedGeometry, binaryInfo.matricesWeightsAttrDesc.offset, binaryInfo.matricesWeightsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsData, false);\r\n            }\r\n\r\n            if (binaryInfo.indicesAttrDesc && binaryInfo.indicesAttrDesc.count > 0) {\r\n                const indicesData = new Int32Array(parsedGeometry, binaryInfo.indicesAttrDesc.offset, binaryInfo.indicesAttrDesc.count);\r\n                mesh.setIndices(indicesData, null);\r\n            }\r\n\r\n            if (binaryInfo.subMeshesAttrDesc && binaryInfo.subMeshesAttrDesc.count > 0) {\r\n                const subMeshesData = new Int32Array(parsedGeometry, binaryInfo.subMeshesAttrDesc.offset, binaryInfo.subMeshesAttrDesc.count * 5);\r\n\r\n                mesh.subMeshes = [];\r\n                for (let i = 0; i < binaryInfo.subMeshesAttrDesc.count; i++) {\r\n                    const materialIndex = subMeshesData[i * 5 + 0];\r\n                    const verticesStart = subMeshesData[i * 5 + 1];\r\n                    const verticesCount = subMeshesData[i * 5 + 2];\r\n                    const indexStart = subMeshesData[i * 5 + 3];\r\n                    const indexCount = subMeshesData[i * 5 + 4];\r\n\r\n                    SubMesh.AddToMesh(materialIndex, verticesStart, verticesCount, indexStart, indexCount, <AbstractMesh>mesh);\r\n                }\r\n            }\r\n        } else if (parsedGeometry.positions && parsedGeometry.normals && parsedGeometry.indices) {\r\n            mesh.setVerticesData(VertexBuffer.PositionKind, parsedGeometry.positions, parsedGeometry.positions._updatable);\r\n\r\n            mesh.setVerticesData(VertexBuffer.NormalKind, parsedGeometry.normals, parsedGeometry.normals._updatable);\r\n\r\n            if (parsedGeometry.tangents) {\r\n                mesh.setVerticesData(VertexBuffer.TangentKind, parsedGeometry.tangents, parsedGeometry.tangents._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs) {\r\n                mesh.setVerticesData(VertexBuffer.UVKind, parsedGeometry.uvs, parsedGeometry.uvs._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs2) {\r\n                mesh.setVerticesData(VertexBuffer.UV2Kind, parsedGeometry.uvs2, parsedGeometry.uvs2._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs3) {\r\n                mesh.setVerticesData(VertexBuffer.UV3Kind, parsedGeometry.uvs3, parsedGeometry.uvs3._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs4) {\r\n                mesh.setVerticesData(VertexBuffer.UV4Kind, parsedGeometry.uvs4, parsedGeometry.uvs4._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs5) {\r\n                mesh.setVerticesData(VertexBuffer.UV5Kind, parsedGeometry.uvs5, parsedGeometry.uvs5._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs6) {\r\n                mesh.setVerticesData(VertexBuffer.UV6Kind, parsedGeometry.uvs6, parsedGeometry.uvs6._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.colors) {\r\n                mesh.setVerticesData(VertexBuffer.ColorKind, Color4.CheckColors4(parsedGeometry.colors, parsedGeometry.positions.length / 3), parsedGeometry.colors._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.matricesIndices) {\r\n                if (!parsedGeometry.matricesIndices._isExpanded) {\r\n                    const floatIndices = [];\r\n\r\n                    for (let i = 0; i < parsedGeometry.matricesIndices.length; i++) {\r\n                        const matricesIndex = parsedGeometry.matricesIndices[i];\r\n\r\n                        floatIndices.push(matricesIndex & 0x000000ff);\r\n                        floatIndices.push((matricesIndex & 0x0000ff00) >> 8);\r\n                        floatIndices.push((matricesIndex & 0x00ff0000) >> 16);\r\n                        floatIndices.push((matricesIndex >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                    }\r\n\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, floatIndices, parsedGeometry.matricesIndices._updatable);\r\n                } else {\r\n                    delete parsedGeometry.matricesIndices._isExpanded;\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, parsedGeometry.matricesIndices, parsedGeometry.matricesIndices._updatable);\r\n                }\r\n            }\r\n\r\n            if (parsedGeometry.matricesIndicesExtra) {\r\n                if (!parsedGeometry.matricesIndicesExtra._isExpanded) {\r\n                    const floatIndices = [];\r\n\r\n                    for (let i = 0; i < parsedGeometry.matricesIndicesExtra.length; i++) {\r\n                        const matricesIndex = parsedGeometry.matricesIndicesExtra[i];\r\n\r\n                        floatIndices.push(matricesIndex & 0x000000ff);\r\n                        floatIndices.push((matricesIndex & 0x0000ff00) >> 8);\r\n                        floatIndices.push((matricesIndex & 0x00ff0000) >> 16);\r\n                        floatIndices.push((matricesIndex >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                    }\r\n\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, floatIndices, parsedGeometry.matricesIndicesExtra._updatable);\r\n                } else {\r\n                    delete parsedGeometry.matricesIndices._isExpanded;\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, parsedGeometry.matricesIndicesExtra, parsedGeometry.matricesIndicesExtra._updatable);\r\n                }\r\n            }\r\n\r\n            if (parsedGeometry.matricesWeights) {\r\n                Geometry._CleanMatricesWeights(parsedGeometry, mesh);\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsKind, parsedGeometry.matricesWeights, parsedGeometry.matricesWeights._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.matricesWeightsExtra) {\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsExtraKind, parsedGeometry.matricesWeightsExtra, parsedGeometry.matricesWeights._updatable);\r\n            }\r\n\r\n            mesh.setIndices(parsedGeometry.indices, null);\r\n        }\r\n\r\n        // SubMeshes\r\n        if (parsedGeometry.subMeshes) {\r\n            mesh.subMeshes = [];\r\n            for (let subIndex = 0; subIndex < parsedGeometry.subMeshes.length; subIndex++) {\r\n                const parsedSubMesh = parsedGeometry.subMeshes[subIndex];\r\n\r\n                SubMesh.AddToMesh(\r\n                    parsedSubMesh.materialIndex,\r\n                    parsedSubMesh.verticesStart,\r\n                    parsedSubMesh.verticesCount,\r\n                    parsedSubMesh.indexStart,\r\n                    parsedSubMesh.indexCount,\r\n                    <AbstractMesh>mesh\r\n                );\r\n            }\r\n        }\r\n\r\n        // Flat shading\r\n        if (mesh._shouldGenerateFlatShading) {\r\n            mesh.convertToFlatShadedMesh();\r\n            mesh._shouldGenerateFlatShading = false;\r\n        }\r\n\r\n        // Update\r\n        mesh.computeWorldMatrix(true);\r\n\r\n        scene.onMeshImportedObservable.notifyObservers(<AbstractMesh>mesh);\r\n    }\r\n\r\n    private static _CleanMatricesWeights(parsedGeometry: any, mesh: Mesh): void {\r\n        const epsilon: number = 1e-3;\r\n        if (!SceneLoaderFlags.CleanBoneMatrixWeights) {\r\n            return;\r\n        }\r\n        let noInfluenceBoneIndex = 0.0;\r\n        if (parsedGeometry.skeletonId > -1) {\r\n            const skeleton = mesh.getScene().getLastSkeletonById(parsedGeometry.skeletonId);\r\n\r\n            if (!skeleton) {\r\n                return;\r\n            }\r\n            noInfluenceBoneIndex = skeleton.bones.length;\r\n        } else {\r\n            return;\r\n        }\r\n        const matricesIndices = <FloatArray>mesh.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesIndicesExtra = <FloatArray>mesh.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\r\n        const matricesWeights = parsedGeometry.matricesWeights;\r\n        const matricesWeightsExtra = parsedGeometry.matricesWeightsExtra;\r\n        const influencers = parsedGeometry.numBoneInfluencer;\r\n        const size = matricesWeights.length;\r\n\r\n        for (let i = 0; i < size; i += 4) {\r\n            let weight = 0.0;\r\n            let firstZeroWeight = -1;\r\n            for (let j = 0; j < 4; j++) {\r\n                const w = matricesWeights[i + j];\r\n                weight += w;\r\n                if (w < epsilon && firstZeroWeight < 0) {\r\n                    firstZeroWeight = j;\r\n                }\r\n            }\r\n            if (matricesWeightsExtra) {\r\n                for (let j = 0; j < 4; j++) {\r\n                    const w = matricesWeightsExtra[i + j];\r\n                    weight += w;\r\n                    if (w < epsilon && firstZeroWeight < 0) {\r\n                        firstZeroWeight = j + 4;\r\n                    }\r\n                }\r\n            }\r\n            if (firstZeroWeight < 0 || firstZeroWeight > influencers - 1) {\r\n                firstZeroWeight = influencers - 1;\r\n            }\r\n            if (weight > epsilon) {\r\n                const mweight = 1.0 / weight;\r\n                for (let j = 0; j < 4; j++) {\r\n                    matricesWeights[i + j] *= mweight;\r\n                }\r\n                if (matricesWeightsExtra) {\r\n                    for (let j = 0; j < 4; j++) {\r\n                        matricesWeightsExtra[i + j] *= mweight;\r\n                    }\r\n                }\r\n            } else {\r\n                if (firstZeroWeight >= 4) {\r\n                    matricesWeightsExtra[i + firstZeroWeight - 4] = 1.0 - weight;\r\n                    matricesIndicesExtra[i + firstZeroWeight - 4] = noInfluenceBoneIndex;\r\n                } else {\r\n                    matricesWeights[i + firstZeroWeight] = 1.0 - weight;\r\n                    matricesIndices[i + firstZeroWeight] = noInfluenceBoneIndex;\r\n                }\r\n            }\r\n        }\r\n\r\n        mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, matricesIndices);\r\n        if (parsedGeometry.matricesWeightsExtra) {\r\n            mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, matricesIndicesExtra);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new geometry from persisted data (Using .babylon file format)\r\n     * @param parsedVertexData defines the persisted data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root url to use to load assets (like delayed data)\r\n     * @returns the new geometry object\r\n     */\r\n    public static Parse(parsedVertexData: any, scene: Scene, rootUrl: string): Nullable<Geometry> {\r\n        const geometry = new Geometry(parsedVertexData.id, scene, undefined, parsedVertexData.updatable);\r\n        geometry._loadedUniqueId = parsedVertexData.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(geometry, parsedVertexData.tags);\r\n        }\r\n\r\n        if (parsedVertexData.delayLoadingFile) {\r\n            geometry.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            geometry.delayLoadingFile = rootUrl + parsedVertexData.delayLoadingFile;\r\n            geometry._boundingInfo = new BoundingInfo(Vector3.FromArray(parsedVertexData.boundingBoxMinimum), Vector3.FromArray(parsedVertexData.boundingBoxMaximum));\r\n\r\n            geometry._delayInfo = [];\r\n            if (parsedVertexData.hasUVs) {\r\n                geometry._delayInfo.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs2) {\r\n                geometry._delayInfo.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs3) {\r\n                geometry._delayInfo.push(VertexBuffer.UV3Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs4) {\r\n                geometry._delayInfo.push(VertexBuffer.UV4Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs5) {\r\n                geometry._delayInfo.push(VertexBuffer.UV5Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs6) {\r\n                geometry._delayInfo.push(VertexBuffer.UV6Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasColors) {\r\n                geometry._delayInfo.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasMatricesIndices) {\r\n                geometry._delayInfo.push(VertexBuffer.MatricesIndicesKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasMatricesWeights) {\r\n                geometry._delayInfo.push(VertexBuffer.MatricesWeightsKind);\r\n            }\r\n\r\n            geometry._delayLoadingFunction = VertexData.ImportVertexData;\r\n        } else {\r\n            VertexData.ImportVertexData(parsedVertexData, geometry);\r\n        }\r\n\r\n        scene.pushGeometry(geometry, true);\r\n\r\n        return geometry;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * A multi-material is used to apply different materials to different parts of the same object without the need of\r\n * separate meshes. This can be use to improve performances.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n */\r\nexport class MultiMaterial extends Material {\r\n    private _subMaterials: Nullable<Material>[];\r\n    /** @internal */\r\n    public _waitingSubMaterialsUniqueIds: string[] = [];\r\n\r\n    /**\r\n     * Gets or Sets the list of Materials used within the multi material.\r\n     * They need to be ordered according to the submeshes order in the associated mesh\r\n     */\r\n    public get subMaterials(): Nullable<Material>[] {\r\n        return this._subMaterials;\r\n    }\r\n\r\n    public set subMaterials(value: Nullable<Material>[]) {\r\n        this._subMaterials = value;\r\n        this._hookArray(value);\r\n    }\r\n\r\n    /**\r\n     * Function used to align with Node.getChildren()\r\n     * @returns the list of Materials used within the multi material\r\n     */\r\n    public getChildren(): Nullable<Material>[] {\r\n        return this.subMaterials;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new Multi Material\r\n     * A multi-material is used to apply different materials to different parts of the same object without the need of\r\n     * separate meshes. This can be use to improve performances.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n     * @param name Define the name in the scene\r\n     * @param scene Define the scene the material belongs to\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene, true);\r\n\r\n        this.getScene().addMultiMaterial(this);\r\n\r\n        this.subMaterials = [] as Material[];\r\n\r\n        this._storeEffectOnSubMeshes = true; // multimaterial is considered like a push material\r\n    }\r\n\r\n    private _hookArray(array: Nullable<Material>[]): void {\r\n        const oldPush = array.push;\r\n        array.push = (...items: Nullable<Material>[]) => {\r\n            const result = oldPush.apply(array, items);\r\n\r\n            this._markAllSubMeshesAsTexturesDirty();\r\n\r\n            return result;\r\n        };\r\n\r\n        const oldSplice = array.splice;\r\n        array.splice = (index: number, deleteCount?: number) => {\r\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\r\n\r\n            this._markAllSubMeshesAsTexturesDirty();\r\n\r\n            return deleted;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get one of the submaterial by its index in the submaterials array\r\n     * @param index The index to look the sub material at\r\n     * @returns The Material if the index has been defined\r\n     */\r\n    public getSubMaterial(index: number): Nullable<Material> {\r\n        if (index < 0 || index >= this.subMaterials.length) {\r\n            return this.getScene().defaultMaterial;\r\n        }\r\n\r\n        return this.subMaterials[index];\r\n    }\r\n\r\n    /**\r\n     * Get the list of active textures for the whole sub materials list.\r\n     * @returns All the textures that will be used during the rendering\r\n     */\r\n    public override getActiveTextures(): BaseTexture[] {\r\n        return super.getActiveTextures().concat(\r\n            ...this.subMaterials.map((subMaterial) => {\r\n                if (subMaterial) {\r\n                    return subMaterial.getActiveTextures();\r\n                } else {\r\n                    return [];\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies if any sub-materials of this multi-material use a given texture.\r\n     * @param texture Defines the texture to check against this multi-material's sub-materials.\r\n     * @returns A boolean specifying if any sub-material of this multi-material uses the texture.\r\n     */\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        for (let i = 0; i < this.subMaterials.length; i++) {\r\n            if (this.subMaterials[i]?.hasTexture(texture)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"MultiMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"MultiMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Checks if the material is ready to render the requested sub mesh\r\n     * @param mesh Define the mesh the submesh belongs to\r\n     * @param subMesh Define the sub mesh to look readiness for\r\n     * @param useInstances Define whether or not the material is used with instances\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        for (let index = 0; index < this.subMaterials.length; index++) {\r\n            const subMaterial = this.subMaterials[index];\r\n            if (subMaterial) {\r\n                if (subMaterial._storeEffectOnSubMeshes) {\r\n                    if (!subMaterial.isReadyForSubMesh(mesh, subMesh, useInstances)) {\r\n                        return false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!subMaterial.isReady(mesh)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clones the current material and its related sub materials\r\n     * @param name Define the name of the newly cloned material\r\n     * @param cloneChildren Define if submaterial will be cloned or shared with the parent instance\r\n     * @returns the cloned material\r\n     */\r\n    public override clone(name: string, cloneChildren?: boolean): MultiMaterial {\r\n        const newMultiMaterial = new MultiMaterial(name, this.getScene());\r\n\r\n        for (let index = 0; index < this.subMaterials.length; index++) {\r\n            let subMaterial: Nullable<Material> = null;\r\n            const current = this.subMaterials[index];\r\n            if (cloneChildren && current) {\r\n                subMaterial = current.clone(name + \"-\" + current.name);\r\n            } else {\r\n                subMaterial = this.subMaterials[index];\r\n            }\r\n            newMultiMaterial.subMaterials.push(subMaterial);\r\n        }\r\n\r\n        return newMultiMaterial;\r\n    }\r\n\r\n    /**\r\n     * Serializes the materials into a JSON representation.\r\n     * @returns the JSON representation\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        if (Tags) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n        serializationObject.materialsUniqueIds = [];\r\n        serializationObject.materials = [];\r\n\r\n        for (let matIndex = 0; matIndex < this.subMaterials.length; matIndex++) {\r\n            const subMat = this.subMaterials[matIndex];\r\n\r\n            if (subMat) {\r\n                serializationObject.materialsUniqueIds.push(subMat.uniqueId);\r\n                serializationObject.materials.push(subMat.id);\r\n            } else {\r\n                serializationObject.materialsUniqueIds.push(null);\r\n                serializationObject.materials.push(null);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Dispose the material and release its associated resources\r\n     * @param forceDisposeEffect Define if we want to force disposing the associated effect (if false the shader is not released and could be reuse later on)\r\n     * @param forceDisposeTextures Define if we want to force disposing the associated textures (if false, they will not be disposed and can still be use elsewhere in the app)\r\n     * @param forceDisposeChildren Define if we want to force disposing the associated submaterials (if false, they will not be disposed and can still be use elsewhere in the app)\r\n     */\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, forceDisposeChildren?: boolean): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        if (forceDisposeChildren) {\r\n            for (let index = 0; index < this.subMaterials.length; index++) {\r\n                const subMaterial = this.subMaterials[index];\r\n                if (subMaterial) {\r\n                    subMaterial.dispose(forceDisposeEffect, forceDisposeTextures);\r\n                }\r\n            }\r\n        }\r\n\r\n        const index = scene.multiMaterials.indexOf(this);\r\n        if (index >= 0) {\r\n            scene.multiMaterials.splice(index, 1);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n\r\n    /**\r\n     * Creates a MultiMaterial from parsed MultiMaterial data.\r\n     * @param parsedMultiMaterial defines parsed MultiMaterial data.\r\n     * @param scene defines the hosting scene\r\n     * @returns a new MultiMaterial\r\n     */\r\n    public static ParseMultiMaterial(parsedMultiMaterial: any, scene: Scene): MultiMaterial {\r\n        const multiMaterial = new MultiMaterial(parsedMultiMaterial.name, scene);\r\n\r\n        multiMaterial.id = parsedMultiMaterial.id;\r\n        multiMaterial._loadedUniqueId = parsedMultiMaterial.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(multiMaterial, parsedMultiMaterial.tags);\r\n        }\r\n\r\n        if (parsedMultiMaterial.materialsUniqueIds) {\r\n            multiMaterial._waitingSubMaterialsUniqueIds = parsedMultiMaterial.materialsUniqueIds;\r\n        } else {\r\n            parsedMultiMaterial.materials.forEach((subMatId: string) => multiMaterial.subMaterials.push(scene.getLastMaterialById(subMatId)));\r\n        }\r\n\r\n        return multiMaterial;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MultiMaterial\", MultiMaterial);\r\n", "import type { Mesh } from \"./mesh\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Class used to represent a specific level of detail of a mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n */\r\nexport class MeshLODLevel {\r\n    /**\r\n     * Creates a new LOD level\r\n     * @param distanceOrScreenCoverage defines either the distance or the screen coverage where this level should start being displayed\r\n     * @param mesh defines the mesh to use to render this level\r\n     */\r\n    constructor(\r\n        /** Either distance from the center of the object to show this level or the screen coverage if `useLODScreenCoverage` is set to `true` on the mesh*/\r\n        public distanceOrScreenCoverage: number,\r\n        /** Defines the mesh to use to render this level */\r\n        public mesh: Nullable<Mesh>\r\n    ) {}\r\n}\r\n", "/* eslint-disable jsdoc/require-returns-check */\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Tools, AsyncLoop } from \"../Misc/tools\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { DeepCopier } from \"../Misc/deepCopier\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport type { Coroutine } from \"../Misc/coroutine\";\r\nimport { runCoroutineSync, runCoroutineAsync, createYieldingScheduler } from \"../Misc/coroutine\";\r\nimport type { Nullable, FloatArray, IndicesArray } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { ScenePerformancePriority } from \"../scene\";\r\nimport type { Vector4 } from \"../Maths/math.vector\";\r\nimport { Quaternion, Matrix, Vector3, Vector2 } from \"../Maths/math.vector\";\r\nimport type { Color4 } from \"../Maths/math.color\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Node } from \"../node\";\r\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer\";\r\nimport type { IGetSetVerticesData } from \"./mesh.vertexData\";\r\nimport { VertexData } from \"./mesh.vertexData\";\r\n\r\nimport { Geometry } from \"./geometry\";\r\nimport type { IMeshDataOptions } from \"./abstractMesh\";\r\nimport { AbstractMesh } from \"./abstractMesh\";\r\nimport { SubMesh } from \"./subMesh\";\r\nimport type { BoundingSphere } from \"../Culling/boundingSphere\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { MultiMaterial } from \"../Materials/multiMaterial\";\r\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { GetClass, RegisterClass } from \"../Misc/typeStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { MeshLODLevel } from \"./meshLODLevel\";\r\nimport type { Path3D } from \"../Maths/math.path\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport type { TransformNode } from \"./transformNode\";\r\nimport type { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport type { PhysicsEngine as PhysicsEngineV1 } from \"../Physics/v1/physicsEngine\";\r\n\r\nimport type { GoldbergMesh } from \"./goldbergMesh\";\r\nimport type { InstancedMesh } from \"./instancedMesh\";\r\nimport type { IPhysicsEnabledObject, PhysicsImpostor } from \"../Physics/v1/physicsImpostor\";\r\nimport type { ICreateCapsuleOptions } from \"./Builders/capsuleBuilder\";\r\nimport type { LinesMesh } from \"./linesMesh\";\r\nimport type { GroundMesh } from \"./groundMesh\";\r\nimport type { DataBuffer } from \"core/Buffers/dataBuffer\";\r\nimport type { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class _CreationDataStorage {\r\n    public closePath?: boolean;\r\n    public closeArray?: boolean;\r\n    public idx: number[];\r\n    public dashSize: number;\r\n    public gapSize: number;\r\n    public path3D: Path3D;\r\n    public pathArray: Vector3[][];\r\n    public arc: number;\r\n    public radius: number;\r\n    public cap: number;\r\n    public tessellation: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _InstanceDataStorage {\r\n    public visibleInstances: any = {};\r\n    public batchCache = new _InstancesBatch();\r\n    public batchCacheReplacementModeInFrozenMode = new _InstancesBatch();\r\n    public instancesBufferSize = 32 * 16 * 4; // let's start with a maximum of 32 instances\r\n    public instancesBuffer: Nullable<Buffer>;\r\n    public instancesPreviousBuffer: Nullable<Buffer>;\r\n    public instancesData: Float32Array;\r\n    public instancesPreviousData: Float32Array;\r\n    public overridenInstanceCount: number;\r\n    public isFrozen: boolean;\r\n    public forceMatrixUpdates: boolean;\r\n    public previousBatch: Nullable<_InstancesBatch>;\r\n    public hardwareInstancedRendering: boolean;\r\n    public sideOrientation: number;\r\n    public manualUpdate: boolean;\r\n    public previousManualUpdate: boolean;\r\n    public previousRenderId: number;\r\n    public masterMeshPreviousWorldMatrix: Nullable<Matrix>;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class _InstancesBatch {\r\n    public mustReturn = false;\r\n    public visibleInstances = new Array<Nullable<Array<InstancedMesh>>>();\r\n    public renderSelf: boolean[] = [];\r\n    public hardwareInstancedRendering: boolean[] = [];\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _ThinInstanceDataStorage {\r\n    public instancesCount: number = 0;\r\n    public matrixBuffer: Nullable<Buffer> = null;\r\n    public previousMatrixBuffer: Nullable<Buffer> = null;\r\n    public matrixBufferSize = 32 * 16; // let's start with a maximum of 32 thin instances\r\n    public matrixData: Nullable<Float32Array> = null;\r\n    public previousMatrixData: Nullable<Float32Array>;\r\n    public boundingVectors: Array<Vector3> = [];\r\n    public worldMatrices: Nullable<Matrix[]> = null;\r\n    public masterMeshPreviousWorldMatrix: Nullable<Matrix>;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _InternalMeshDataInfo {\r\n    // Events\r\n    public _onBeforeRenderObservable: Nullable<Observable<Mesh>>;\r\n    public _onBeforeBindObservable: Nullable<Observable<Mesh>>;\r\n    public _onAfterRenderObservable: Nullable<Observable<Mesh>>;\r\n    public _onBeforeDrawObservable: Nullable<Observable<Mesh>>;\r\n    public _onBetweenPassObservable: Nullable<Observable<SubMesh>>;\r\n\r\n    public _areNormalsFrozen: boolean = false; // Will be used by ribbons mainly\r\n    public _sourcePositions: Nullable<Float32Array>; // Will be used to save original positions when using software skinning\r\n    public _sourceNormals: Nullable<Float32Array>; // Will be used to save original normals when using software skinning\r\n\r\n    // Will be used to save a source mesh reference, If any\r\n    public _source: Nullable<Mesh> = null;\r\n    // Will be used to for fast cloned mesh lookup\r\n    public meshMap: Nullable<{ [id: string]: Mesh | undefined }> = null;\r\n\r\n    public _preActivateId: number = -1;\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public _LODLevels = new Array<MeshLODLevel>();\r\n    /** Alternative definition of LOD level, using screen coverage instead of distance */\r\n    public _useLODScreenCoverage: boolean = false;\r\n    public _checkReadinessObserver: Nullable<Observer<Scene>>;\r\n\r\n    public _onMeshReadyObserverAdded: (observer: Observer<Mesh>) => void;\r\n\r\n    public _effectiveMaterial: Nullable<Material> = null;\r\n\r\n    public _forcedInstanceCount: number = 0;\r\n\r\n    public _overrideRenderingFillMode: Nullable<number> = null;\r\n\r\n    public _sideOrientation: number;\r\n}\r\n\r\n/**\r\n * Options used to clone a mesh\r\n */\r\nexport interface MeshCloneOptions {\r\n    /** The parent of the mesh, if it has one */\r\n    parent?: Nullable<Node>;\r\n\r\n    /** Skips cloning child meshes of source (default: false. When false, achieved by calling a clone(), also passing False. This will make creation of children, recursive. */\r\n    doNotCloneChildren?: boolean;\r\n\r\n    /** Includes cloning mesh physics impostor (default: true) */\r\n    clonePhysicsImpostor?: boolean;\r\n\r\n    /** Includes cloning thin instances (default: false) */\r\n    cloneThinInstances?: boolean;\r\n}\r\n\r\n/**\r\n * Options used to create a mesh\r\n */\r\nexport interface MeshCreationOptions extends MeshCloneOptions {\r\n    /** An optional Mesh from which the new mesh will be cloned from (geometry will be shared) */\r\n    source?: Nullable<Mesh>;\r\n}\r\n\r\nconst meshCreationOptions: MeshCreationOptions = {\r\n    source: null,\r\n    parent: null,\r\n    doNotCloneChildren: false,\r\n    clonePhysicsImpostor: true,\r\n    cloneThinInstances: false,\r\n};\r\n\r\n/**\r\n * Class used to represent renderable models\r\n */\r\nexport class Mesh extends AbstractMesh implements IGetSetVerticesData {\r\n    // Consts\r\n\r\n    /**\r\n     * Mesh side orientation : usually the external or front surface\r\n     */\r\n    public static readonly FRONTSIDE = VertexData.FRONTSIDE;\r\n\r\n    /**\r\n     * Mesh side orientation : usually the internal or back surface\r\n     */\r\n    public static readonly BACKSIDE = VertexData.BACKSIDE;\r\n    /**\r\n     * Mesh side orientation : both internal and external or front and back surfaces\r\n     */\r\n    public static readonly DOUBLESIDE = VertexData.DOUBLESIDE;\r\n    /**\r\n     * Mesh side orientation : by default, `FRONTSIDE`\r\n     */\r\n    public static readonly DEFAULTSIDE = VertexData.DEFAULTSIDE;\r\n    /**\r\n     * Mesh cap setting : no cap\r\n     */\r\n    public static readonly NO_CAP = 0;\r\n    /**\r\n     * Mesh cap setting : one cap at the beginning of the mesh\r\n     */\r\n    public static readonly CAP_START = 1;\r\n    /**\r\n     * Mesh cap setting : one cap at the end of the mesh\r\n     */\r\n    public static readonly CAP_END = 2;\r\n    /**\r\n     * Mesh cap setting : two caps, one at the beginning  and one at the end of the mesh\r\n     */\r\n    public static readonly CAP_ALL = 3;\r\n    /**\r\n     * Mesh pattern setting : no flip or rotate\r\n     */\r\n    public static readonly NO_FLIP = 0;\r\n    /**\r\n     * Mesh pattern setting : flip (reflect in y axis) alternate tiles on each row or column\r\n     */\r\n    public static readonly FLIP_TILE = 1;\r\n    /**\r\n     * Mesh pattern setting : rotate (180degs) alternate tiles on each row or column\r\n     */\r\n    public static readonly ROTATE_TILE = 2;\r\n    /**\r\n     * Mesh pattern setting : flip (reflect in y axis) all tiles on alternate rows\r\n     */\r\n    public static readonly FLIP_ROW = 3;\r\n    /**\r\n     * Mesh pattern setting : rotate (180degs) all tiles on alternate rows\r\n     */\r\n    public static readonly ROTATE_ROW = 4;\r\n    /**\r\n     * Mesh pattern setting : flip and rotate alternate tiles on each row or column\r\n     */\r\n    public static readonly FLIP_N_ROTATE_TILE = 5;\r\n    /**\r\n     * Mesh pattern setting : rotate pattern and rotate\r\n     */\r\n    public static readonly FLIP_N_ROTATE_ROW = 6;\r\n    /**\r\n     * Mesh tile positioning : part tiles same on left/right or top/bottom\r\n     */\r\n    public static readonly CENTER = 0;\r\n    /**\r\n     * Mesh tile positioning : part tiles on left\r\n     */\r\n    public static readonly LEFT = 1;\r\n    /**\r\n     * Mesh tile positioning : part tiles on right\r\n     */\r\n    public static readonly RIGHT = 2;\r\n    /**\r\n     * Mesh tile positioning : part tiles on top\r\n     */\r\n    public static readonly TOP = 3;\r\n    /**\r\n     * Mesh tile positioning : part tiles on bottom\r\n     */\r\n    public static readonly BOTTOM = 4;\r\n\r\n    /**\r\n     * Indicates that the instanced meshes should be sorted from back to front before rendering if their material is transparent\r\n     */\r\n    public static INSTANCEDMESH_SORT_TRANSPARENT = false;\r\n\r\n    /**\r\n     * Gets the default side orientation.\r\n     * @param orientation the orientation to value to attempt to get\r\n     * @returns the default orientation\r\n     * @internal\r\n     */\r\n    public static _GetDefaultSideOrientation(orientation?: number): number {\r\n        return orientation || Mesh.FRONTSIDE; // works as Mesh.FRONTSIDE is 0\r\n    }\r\n\r\n    // Internal data\r\n    private _internalMeshDataInfo = new _InternalMeshDataInfo();\r\n\r\n    /**\r\n     * Determines if the LOD levels are intended to be calculated using screen coverage (surface area ratio) instead of distance.\r\n     */\r\n    public get useLODScreenCoverage() {\r\n        return this._internalMeshDataInfo._useLODScreenCoverage;\r\n    }\r\n\r\n    public set useLODScreenCoverage(value: boolean) {\r\n        this._internalMeshDataInfo._useLODScreenCoverage = value;\r\n        this._sortLODLevels();\r\n    }\r\n\r\n    /**\r\n     * Will notify when the mesh is completely ready, including materials.\r\n     * Observers added to this observable will be removed once triggered\r\n     */\r\n    public onMeshReadyObservable: Observable<Mesh>;\r\n\r\n    public override get computeBonesUsingShaders(): boolean {\r\n        return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\r\n    }\r\n    public override set computeBonesUsingShaders(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\r\n            return;\r\n        }\r\n\r\n        if (value && this._internalMeshDataInfo._sourcePositions) {\r\n            // switch from software to GPU computation: we need to reset the vertex and normal buffers that have been updated by the software process\r\n            this.setVerticesData(VertexBuffer.PositionKind, this._internalMeshDataInfo._sourcePositions, true);\r\n            if (this._internalMeshDataInfo._sourceNormals) {\r\n                this.setVerticesData(VertexBuffer.NormalKind, this._internalMeshDataInfo._sourceNormals, true);\r\n            }\r\n\r\n            this._internalMeshDataInfo._sourcePositions = null;\r\n            this._internalMeshDataInfo._sourceNormals = null;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the mesh\r\n     */\r\n    public get onBeforeRenderObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeRenderObservable) {\r\n            this._internalMeshDataInfo._onBeforeRenderObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeRenderObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered before binding the mesh\r\n     */\r\n    public get onBeforeBindObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeBindObservable) {\r\n            this._internalMeshDataInfo._onBeforeBindObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeBindObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the mesh\r\n     */\r\n    public get onAfterRenderObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onAfterRenderObservable) {\r\n            this._internalMeshDataInfo._onAfterRenderObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onAfterRenderObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggeredbetween rendering pass when using separateCullingPass = true\r\n     */\r\n    public get onBetweenPassObservable(): Observable<SubMesh> {\r\n        if (!this._internalMeshDataInfo._onBetweenPassObservable) {\r\n            this._internalMeshDataInfo._onBetweenPassObservable = new Observable<SubMesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBetweenPassObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered before drawing the mesh\r\n     */\r\n    public get onBeforeDrawObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeDrawObservable) {\r\n            this._internalMeshDataInfo._onBeforeDrawObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeDrawObservable;\r\n    }\r\n\r\n    private _onBeforeDrawObserver: Nullable<Observer<Mesh>>;\r\n\r\n    /**\r\n     * Sets a callback to call before drawing the mesh. It is recommended to use onBeforeDrawObservable instead\r\n     */\r\n    public set onBeforeDraw(callback: () => void) {\r\n        if (this._onBeforeDrawObserver) {\r\n            this.onBeforeDrawObservable.remove(this._onBeforeDrawObserver);\r\n        }\r\n        this._onBeforeDrawObserver = this.onBeforeDrawObservable.add(callback);\r\n    }\r\n\r\n    public override get hasInstances(): boolean {\r\n        return this.instances.length > 0;\r\n    }\r\n\r\n    public override get hasThinInstances(): boolean {\r\n        return (this.forcedInstanceCount || this._thinInstanceDataStorage.instancesCount || 0) > 0;\r\n    }\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Gets the delay loading state of the mesh (when delay loading is turned on)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/incrementalLoading\r\n     */\r\n    public delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n\r\n    /**\r\n     * Gets the list of instances created from this mesh\r\n     * it is not supposed to be modified manually.\r\n     * Note also that the order of the InstancedMesh wihin the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     */\r\n    public instances: InstancedMesh[] = [];\r\n\r\n    /**\r\n     * Gets the file containing delay loading data for this mesh\r\n     */\r\n    public delayLoadingFile: string;\r\n\r\n    /** @internal */\r\n    public _binaryInfo: any;\r\n\r\n    /**\r\n     * User defined function used to change how LOD level selection is done\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     */\r\n    public onLODLevelSelection: (distance: number, mesh: Mesh, selectedLevel: Nullable<Mesh>) => void;\r\n\r\n    // Private\r\n    /** @internal */\r\n    public _creationDataStorage: Nullable<_CreationDataStorage> = null;\r\n\r\n    /** @internal */\r\n    public _geometry: Nullable<Geometry> = null;\r\n    /** @internal */\r\n    public _delayInfo: Array<string>;\r\n    /** @internal */\r\n    public _delayLoadingFunction: (any: any, mesh: Mesh) => void;\r\n\r\n    /**\r\n     * Gets or sets the forced number of instances to display.\r\n     * If 0 (default value), the number of instances is not forced and depends on the draw type\r\n     * (regular / instance / thin instances mesh)\r\n     */\r\n    public get forcedInstanceCount(): number {\r\n        return this._internalMeshDataInfo._forcedInstanceCount;\r\n    }\r\n\r\n    public set forcedInstanceCount(count: number) {\r\n        this._internalMeshDataInfo._forcedInstanceCount = count;\r\n    }\r\n\r\n    /** @internal */\r\n    public _instanceDataStorage = new _InstanceDataStorage();\r\n\r\n    /** @internal */\r\n    public _thinInstanceDataStorage = new _ThinInstanceDataStorage();\r\n\r\n    /** @internal */\r\n    public _shouldGenerateFlatShading: boolean = false;\r\n\r\n    // Use by builder only to know what orientation were the mesh build in.\r\n    /** @internal */\r\n    public _originalBuilderSideOrientation: number = Mesh.DEFAULTSIDE;\r\n\r\n    /**\r\n     * Use this property to change the original side orientation defined at construction time\r\n     * Material.sideOrientation will override this value if set\r\n     * User will still be able to change the material sideOrientation afterwards if they really need it\r\n     */\r\n    public get sideOrientation(): number {\r\n        return this._internalMeshDataInfo._sideOrientation;\r\n    }\r\n\r\n    public set sideOrientation(value: number) {\r\n        this._internalMeshDataInfo._sideOrientation = value;\r\n\r\n        this._internalAbstractMeshDataInfo._sideOrientationHint =\r\n            (this._scene.useRightHandedSystem && value === Constants.MATERIAL_CounterClockWiseSideOrientation) ||\r\n            (!this._scene.useRightHandedSystem && value === Constants.MATERIAL_ClockWiseSideOrientation);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Please use sideOrientation instead.\r\n     * @see https://doc.babylonjs.com/breaking-changes#7110\r\n     */\r\n    public get overrideMaterialSideOrientation() {\r\n        return this.sideOrientation;\r\n    }\r\n\r\n    public set overrideMaterialSideOrientation(value: number) {\r\n        this.sideOrientation = value;\r\n        if (this.material) {\r\n            this.material.sideOrientation = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this property to override the Material's fillMode value\r\n     */\r\n    public get overrideRenderingFillMode(): Nullable<number> {\r\n        return this._internalMeshDataInfo._overrideRenderingFillMode;\r\n    }\r\n\r\n    public set overrideRenderingFillMode(fillMode: Nullable<number>) {\r\n        this._internalMeshDataInfo._overrideRenderingFillMode = fillMode;\r\n    }\r\n\r\n    public override get material(): Nullable<Material> {\r\n        return this._internalAbstractMeshDataInfo._material;\r\n    }\r\n\r\n    public override set material(value: Nullable<Material>) {\r\n        if (value && ((this.material && this.material.sideOrientation === null) || this._internalAbstractMeshDataInfo._sideOrientationHint)) {\r\n            value.sideOrientation = null;\r\n        }\r\n        this._setMaterial(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating whether to render ignoring the active camera's max z setting. (false by default)\r\n     * You should not mix meshes that have this property set to true with meshes that have it set to false if they all write\r\n     * to the depth buffer, because the z-values are not comparable in the two cases and you will get rendering artifacts if you do.\r\n     * You can set the property to true for meshes that do not write to the depth buffer, or set the same value (either false or true) otherwise.\r\n     * Note this will reduce performance when set to true.\r\n     */\r\n    public ignoreCameraMaxZ = false;\r\n\r\n    /**\r\n     * Gets the source mesh (the one used to clone this one from)\r\n     */\r\n    public get source(): Nullable<Mesh> {\r\n        return this._internalMeshDataInfo._source;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of clones of this mesh\r\n     * The scene must have been constructed with useClonedMeshMap=true for this to work!\r\n     * Note that useClonedMeshMap=true is the default setting\r\n     */\r\n    public get cloneMeshMap(): Nullable<{ [id: string]: Mesh | undefined }> {\r\n        return this._internalMeshDataInfo.meshMap;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh does not use index buffer\r\n     */\r\n    public get isUnIndexed(): boolean {\r\n        return this._unIndexed;\r\n    }\r\n\r\n    public set isUnIndexed(value: boolean) {\r\n        if (this._unIndexed !== value) {\r\n            this._unIndexed = value;\r\n            this._markSubMeshesAsAttributesDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the array buffer used to store the instanced buffer used for instances' world matrices */\r\n    public get worldMatrixInstancedBuffer(): Float32Array {\r\n        return this._instanceDataStorage.instancesData;\r\n    }\r\n\r\n    /** Gets the array buffer used to store the instanced buffer used for instances' previous world matrices */\r\n    public get previousWorldMatrixInstancedBuffer(): Float32Array {\r\n        return this._instanceDataStorage.instancesPreviousData;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\r\n    public get manualUpdateOfWorldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.manualUpdate;\r\n    }\r\n\r\n    public set manualUpdateOfWorldMatrixInstancedBuffer(value: boolean) {\r\n        this._instanceDataStorage.manualUpdate = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\r\n    public get manualUpdateOfPreviousWorldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.previousManualUpdate;\r\n    }\r\n\r\n    public set manualUpdateOfPreviousWorldMatrixInstancedBuffer(value: boolean) {\r\n        this._instanceDataStorage.previousManualUpdate = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices must be performed in all cases (and notably even in frozen mode) */\r\n    public get forceWorldMatrixInstancedBufferUpdate() {\r\n        return this._instanceDataStorage.forceMatrixUpdates;\r\n    }\r\n\r\n    public set forceWorldMatrixInstancedBufferUpdate(value: boolean) {\r\n        this._instanceDataStorage.forceMatrixUpdates = value;\r\n    }\r\n\r\n    protected _copySource(source: Mesh, doNotCloneChildren?: boolean, clonePhysicsImpostor: boolean = true, cloneThinInstances: boolean = false): void {\r\n        const scene = this.getScene();\r\n        // Geometry\r\n        if (source._geometry) {\r\n            source._geometry.applyToMesh(this);\r\n        }\r\n\r\n        // Deep copy\r\n        DeepCopier.DeepCopy(\r\n            source,\r\n            this,\r\n            [\r\n                \"name\",\r\n                \"material\",\r\n                \"skeleton\",\r\n                \"instances\",\r\n                \"parent\",\r\n                \"uniqueId\",\r\n                \"source\",\r\n                \"metadata\",\r\n                \"morphTargetManager\",\r\n                \"hasInstances\",\r\n                \"worldMatrixInstancedBuffer\",\r\n                \"previousWorldMatrixInstancedBuffer\",\r\n                \"hasLODLevels\",\r\n                \"geometry\",\r\n                \"isBlocked\",\r\n                \"areNormalsFrozen\",\r\n                \"facetNb\",\r\n                \"isFacetDataEnabled\",\r\n                \"lightSources\",\r\n                \"useBones\",\r\n                \"isAnInstance\",\r\n                \"collider\",\r\n                \"edgesRenderer\",\r\n                \"forward\",\r\n                \"up\",\r\n                \"right\",\r\n                \"absolutePosition\",\r\n                \"absoluteScaling\",\r\n                \"absoluteRotationQuaternion\",\r\n                \"isWorldMatrixFrozen\",\r\n                \"nonUniformScaling\",\r\n                \"behaviors\",\r\n                \"worldMatrixFromCache\",\r\n                \"hasThinInstances\",\r\n                \"cloneMeshMap\",\r\n                \"hasBoundingInfo\",\r\n                \"physicsBody\",\r\n                \"physicsImpostor\",\r\n            ],\r\n            [\"_poseMatrix\"]\r\n        );\r\n\r\n        // Source mesh\r\n        this._internalMeshDataInfo._source = source;\r\n        if (scene.useClonedMeshMap) {\r\n            if (!source._internalMeshDataInfo.meshMap) {\r\n                source._internalMeshDataInfo.meshMap = {};\r\n            }\r\n            source._internalMeshDataInfo.meshMap[this.uniqueId] = this;\r\n        }\r\n\r\n        // Construction Params\r\n        // Clone parameters allowing mesh to be updated in case of parametric shapes.\r\n        this._originalBuilderSideOrientation = source._originalBuilderSideOrientation;\r\n        this._creationDataStorage = source._creationDataStorage;\r\n\r\n        // Animation ranges\r\n        if (source._ranges) {\r\n            const ranges = source._ranges;\r\n            for (const name in ranges) {\r\n                if (!Object.prototype.hasOwnProperty.call(ranges, name)) {\r\n                    continue;\r\n                }\r\n\r\n                if (!ranges[name]) {\r\n                    continue;\r\n                }\r\n\r\n                this.createAnimationRange(name, ranges[name]!.from, ranges[name]!.to);\r\n            }\r\n        }\r\n\r\n        // Metadata\r\n        if (source.metadata && source.metadata.clone) {\r\n            this.metadata = source.metadata.clone();\r\n        } else {\r\n            this.metadata = source.metadata;\r\n        }\r\n        this._internalMetadata = source._internalMetadata;\r\n\r\n        // Tags\r\n        if (Tags && Tags.HasTags(source)) {\r\n            Tags.AddTagsTo(this, Tags.GetTags(source, true));\r\n        }\r\n\r\n        // Enabled. We shouldn't need to check the source's ancestors, as this mesh\r\n        // will have the same ones.\r\n        this.setEnabled(source.isEnabled(false));\r\n\r\n        // Parent\r\n        this.parent = source.parent;\r\n\r\n        // Pivot\r\n        this.setPivotMatrix(source.getPivotMatrix(), this._postMultiplyPivotMatrix);\r\n\r\n        this.id = this.name + \".\" + source.id;\r\n\r\n        // Material\r\n        this.material = source.material;\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            const directDescendants = source.getDescendants(true);\r\n            for (let index = 0; index < directDescendants.length; index++) {\r\n                const child = directDescendants[index];\r\n\r\n                if ((<any>child)._isMesh) {\r\n                    meshCreationOptions.parent = this;\r\n                    meshCreationOptions.doNotCloneChildren = doNotCloneChildren;\r\n                    meshCreationOptions.clonePhysicsImpostor = clonePhysicsImpostor;\r\n                    meshCreationOptions.cloneThinInstances = cloneThinInstances;\r\n                    (<Mesh>child).clone(this.name + \".\" + child.name, meshCreationOptions);\r\n                } else if ((<any>child).clone) {\r\n                    (<any>child).clone(this.name + \".\" + child.name, this);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Morphs\r\n        if (source.morphTargetManager) {\r\n            this.morphTargetManager = source.morphTargetManager;\r\n        }\r\n\r\n        // Physics clone\r\n        if (scene.getPhysicsEngine) {\r\n            const physicsEngine = scene.getPhysicsEngine();\r\n            if (clonePhysicsImpostor && physicsEngine) {\r\n                if (physicsEngine.getPluginVersion() === 1) {\r\n                    const impostor = (physicsEngine as PhysicsEngineV1).getImpostorForPhysicsObject(source);\r\n                    if (impostor) {\r\n                        this.physicsImpostor = impostor.clone(this);\r\n                    }\r\n                } else if (physicsEngine.getPluginVersion() === 2) {\r\n                    if (source.physicsBody) {\r\n                        source.physicsBody.clone(this);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Particles\r\n        for (let index = 0; index < scene.particleSystems.length; index++) {\r\n            const system = scene.particleSystems[index];\r\n\r\n            if (system.emitter === source) {\r\n                system.clone(system.name, this);\r\n            }\r\n        }\r\n\r\n        // Skeleton\r\n        this.skeleton = source.skeleton;\r\n\r\n        // Thin instances\r\n        if (cloneThinInstances) {\r\n            if (source._thinInstanceDataStorage.matrixData) {\r\n                this.thinInstanceSetBuffer(\r\n                    \"matrix\",\r\n                    new Float32Array(source._thinInstanceDataStorage.matrixData),\r\n                    16,\r\n                    !source._thinInstanceDataStorage.matrixBuffer!.isUpdatable()\r\n                );\r\n                this._thinInstanceDataStorage.matrixBufferSize = source._thinInstanceDataStorage.matrixBufferSize;\r\n                this._thinInstanceDataStorage.instancesCount = source._thinInstanceDataStorage.instancesCount;\r\n            } else {\r\n                this._thinInstanceDataStorage.matrixBufferSize = source._thinInstanceDataStorage.matrixBufferSize;\r\n            }\r\n\r\n            if (source._userThinInstanceBuffersStorage) {\r\n                const userThinInstance = source._userThinInstanceBuffersStorage;\r\n                for (const kind in userThinInstance.data) {\r\n                    this.thinInstanceSetBuffer(\r\n                        kind,\r\n                        new Float32Array(userThinInstance.data[kind]),\r\n                        userThinInstance.strides[kind],\r\n                        !userThinInstance.vertexBuffers?.[kind]?.isUpdatable()\r\n                    );\r\n                    this._userThinInstanceBuffersStorage.sizes[kind] = userThinInstance.sizes[kind];\r\n                }\r\n            }\r\n        }\r\n\r\n        this.refreshBoundingInfo(true, true);\r\n        this.computeWorldMatrix(true);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * @param name The value used by scene.getMeshByName() to do a lookup.\r\n     * @param scene The scene to add this mesh to.\r\n     * @param options Options used to create the mesh\r\n     */\r\n    constructor(name: string, scene?: Nullable<Scene>, options?: MeshCreationOptions);\r\n\r\n    /**\r\n     * Constructor\r\n     * @param name The value used by scene.getMeshByName() to do a lookup.\r\n     * @param scene The scene to add this mesh to.\r\n     * @param parent The parent of this mesh, if it has one\r\n     * @param source An optional Mesh from which geometry is shared, cloned.\r\n     * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\r\n     *                  When false, achieved by calling a clone(), also passing False.\r\n     *                  This will make creation of children, recursive.\r\n     * @param clonePhysicsImpostor When cloning, include cloning mesh physics impostor, default True.\r\n     */\r\n    constructor(name: string, scene?: Nullable<Scene>, parent?: Nullable<Node>, source?: Nullable<Mesh>, doNotCloneChildren?: boolean, clonePhysicsImpostor?: boolean);\r\n\r\n    /** @internal */\r\n    constructor(\r\n        name: string,\r\n        scene: Nullable<Scene> = null,\r\n        parentOrOptions: Nullable<Node> | MeshCreationOptions = null,\r\n        source: Nullable<Mesh> = null,\r\n        doNotCloneChildren?: boolean,\r\n        clonePhysicsImpostor: boolean = true\r\n    ) {\r\n        super(name, scene);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (this._scene.useRightHandedSystem) {\r\n            this.sideOrientation = Constants.MATERIAL_ClockWiseSideOrientation;\r\n        } else {\r\n            this.sideOrientation = Constants.MATERIAL_CounterClockWiseSideOrientation;\r\n        }\r\n\r\n        this._onBeforeDraw = (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => {\r\n            if (isInstance && effectiveMaterial) {\r\n                if (this._uniformBuffer) {\r\n                    this.transferToEffect(world);\r\n                } else {\r\n                    effectiveMaterial.bindOnlyWorldMatrix(world);\r\n                }\r\n            }\r\n        };\r\n\r\n        let parent: Nullable<Node> = null;\r\n        let cloneThinInstances = false;\r\n\r\n        if (parentOrOptions && (parentOrOptions as Node)._addToSceneRootNodes === undefined) {\r\n            const options = parentOrOptions as MeshCreationOptions;\r\n\r\n            parent = options.parent ?? null;\r\n            source = options.source ?? null;\r\n            doNotCloneChildren = options.doNotCloneChildren ?? false;\r\n            clonePhysicsImpostor = options.clonePhysicsImpostor ?? true;\r\n            cloneThinInstances = options.cloneThinInstances ?? false;\r\n        } else {\r\n            parent = parentOrOptions as Nullable<Node>;\r\n        }\r\n\r\n        if (source) {\r\n            this._copySource(source, doNotCloneChildren, clonePhysicsImpostor, cloneThinInstances);\r\n        }\r\n\r\n        // Parent\r\n        if (parent !== null) {\r\n            this.parent = parent;\r\n        }\r\n\r\n        this._instanceDataStorage.hardwareInstancedRendering = this.getEngine().getCaps().instancedArrays;\r\n\r\n        this._internalMeshDataInfo._onMeshReadyObserverAdded = (observer: Observer<Mesh>) => {\r\n            // only notify once! then unregister the observer\r\n            observer.unregisterOnNextCall = true;\r\n            if (this.isReady(true)) {\r\n                this.onMeshReadyObservable.notifyObservers(this);\r\n            } else {\r\n                if (!this._internalMeshDataInfo._checkReadinessObserver) {\r\n                    this._internalMeshDataInfo._checkReadinessObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n                        // check for complete readiness\r\n                        if (this.isReady(true)) {\r\n                            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\r\n                            this._internalMeshDataInfo._checkReadinessObserver = null;\r\n                            this.onMeshReadyObservable.notifyObservers(this);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onMeshReadyObservable = new Observable(this._internalMeshDataInfo._onMeshReadyObserverAdded);\r\n\r\n        if (source) {\r\n            source.onClonedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    public override instantiateHierarchy(\r\n        newParent: Nullable<TransformNode> = null,\r\n        options?: { doNotInstantiate: boolean | ((node: TransformNode) => boolean) },\r\n        onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void\r\n    ): Nullable<TransformNode> {\r\n        const instance =\r\n            this.getTotalVertices() === 0 || (options && options.doNotInstantiate && (options.doNotInstantiate === true || options.doNotInstantiate(this)))\r\n                ? this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true)\r\n                : this.createInstance(\"instance of \" + (this.name || this.id));\r\n\r\n        instance.parent = newParent || this.parent;\r\n        instance.position = this.position.clone();\r\n        instance.scaling = this.scaling.clone();\r\n        if (this.rotationQuaternion) {\r\n            instance.rotationQuaternion = this.rotationQuaternion.clone();\r\n        } else {\r\n            instance.rotation = this.rotation.clone();\r\n        }\r\n\r\n        if (onNewNodeCreated) {\r\n            onNewNodeCreated(this, instance);\r\n        }\r\n\r\n        for (const child of this.getChildTransformNodes(true)) {\r\n            // instancedMesh should have a different sourced mesh\r\n            if (child.getClassName() === \"InstancedMesh\" && instance.getClassName() === \"Mesh\" && (child as InstancedMesh).sourceMesh === this) {\r\n                (child as InstancedMesh).instantiateHierarchy(\r\n                    instance,\r\n                    {\r\n                        doNotInstantiate: (options && options.doNotInstantiate) || false,\r\n                        newSourcedMesh: instance as Mesh,\r\n                    },\r\n                    onNewNodeCreated\r\n                );\r\n            } else {\r\n                child.instantiateHierarchy(instance, options, onNewNodeCreated);\r\n            }\r\n        }\r\n\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"Mesh\".\r\n     */\r\n    public override getClassName(): string {\r\n        return \"Mesh\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isMesh() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns a description of this mesh\r\n     * @param fullDetails define if full details about this mesh must be used\r\n     * @returns a descriptive string representing this mesh\r\n     */\r\n    public override toString(fullDetails?: boolean): string {\r\n        let ret = super.toString(fullDetails);\r\n        ret += \", n vertices: \" + this.getTotalVertices();\r\n        ret += \", parent: \" + (this._waitingParentId ? this._waitingParentId : this.parent ? this.parent.name : \"NONE\");\r\n\r\n        if (this.animations) {\r\n            for (let i = 0; i < this.animations.length; i++) {\r\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\r\n            }\r\n        }\r\n\r\n        if (fullDetails) {\r\n            if (this._geometry) {\r\n                const ib = this.getIndices();\r\n                const vb = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n                if (vb && ib) {\r\n                    ret += \", flat shading: \" + (vb.length / 3 === ib.length ? \"YES\" : \"NO\");\r\n                }\r\n            } else {\r\n                ret += \", flat shading: UNKNOWN\";\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _unBindEffect() {\r\n        super._unBindEffect();\r\n\r\n        for (const instance of this.instances) {\r\n            instance._unBindEffect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has LOD\r\n     */\r\n    public get hasLODLevels(): boolean {\r\n        return this._internalMeshDataInfo._LODLevels.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of MeshLODLevel associated with the current mesh\r\n     * @returns an array of MeshLODLevel\r\n     */\r\n    public getLODLevels(): MeshLODLevel[] {\r\n        return this._internalMeshDataInfo._LODLevels;\r\n    }\r\n\r\n    private _sortLODLevels(): void {\r\n        const sortingOrderFactor = this._internalMeshDataInfo._useLODScreenCoverage ? -1 : 1;\r\n        this._internalMeshDataInfo._LODLevels.sort((a, b) => {\r\n            if (a.distanceOrScreenCoverage < b.distanceOrScreenCoverage) {\r\n                return sortingOrderFactor;\r\n            }\r\n            if (a.distanceOrScreenCoverage > b.distanceOrScreenCoverage) {\r\n                return -sortingOrderFactor;\r\n            }\r\n\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add a mesh as LOD level triggered at the given distance.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param distanceOrScreenCoverage Either distance from the center of the object to show this level or the screen coverage if `useScreenCoverage` is set to `true`.\r\n     * If screen coverage, value is a fraction of the screen's total surface, between 0 and 1.\r\n     * Example Playground for distance https://playground.babylonjs.com/#QE7KM#197\r\n     * Example Playground for screen coverage https://playground.babylonjs.com/#QE7KM#196\r\n     * @param mesh The mesh to be added as LOD level (can be null)\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public addLODLevel(distanceOrScreenCoverage: number, mesh: Nullable<Mesh>): Mesh {\r\n        if (mesh && mesh._masterMesh) {\r\n            Logger.Warn(\"You cannot use a mesh as LOD level twice\");\r\n            return this;\r\n        }\r\n\r\n        const level = new MeshLODLevel(distanceOrScreenCoverage, mesh);\r\n        this._internalMeshDataInfo._LODLevels.push(level);\r\n\r\n        if (mesh) {\r\n            mesh._masterMesh = this;\r\n        }\r\n\r\n        this._sortLODLevels();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the LOD level mesh at the passed distance or null if not found.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param distance The distance from the center of the object to show this level\r\n     * @returns a Mesh or `null`\r\n     */\r\n    public getLODLevelAtDistance(distance: number): Nullable<Mesh> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            const level = internalDataInfo._LODLevels[index];\r\n\r\n            if (level.distanceOrScreenCoverage === distance) {\r\n                return level.mesh;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Remove a mesh from the LOD array\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param mesh defines the mesh to be removed\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public removeLODLevel(mesh: Nullable<Mesh>): Mesh {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            if (internalDataInfo._LODLevels[index].mesh === mesh) {\r\n                internalDataInfo._LODLevels.splice(index, 1);\r\n                if (mesh) {\r\n                    mesh._masterMesh = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._sortLODLevels();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the registered LOD mesh distant from the parameter `camera` position if any, else returns the current mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param camera defines the camera to use to compute distance\r\n     * @param boundingSphere defines a custom bounding sphere to use instead of the one from this mesh\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public override getLOD(camera: Camera, boundingSphere?: BoundingSphere): Nullable<AbstractMesh> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        if (!internalDataInfo._LODLevels || internalDataInfo._LODLevels.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        const bSphere = boundingSphere || this.getBoundingInfo().boundingSphere;\r\n\r\n        const distanceToCamera = camera.mode === Camera.ORTHOGRAPHIC_CAMERA ? camera.minZ : bSphere.centerWorld.subtract(camera.globalPosition).length();\r\n        let compareValue = distanceToCamera;\r\n        let compareSign = 1;\r\n\r\n        if (internalDataInfo._useLODScreenCoverage) {\r\n            const screenArea = camera.screenArea;\r\n            let meshArea = (bSphere.radiusWorld * camera.minZ) / distanceToCamera;\r\n            meshArea = meshArea * meshArea * Math.PI;\r\n            compareValue = meshArea / screenArea;\r\n            compareSign = -1;\r\n        }\r\n\r\n        if (compareSign * internalDataInfo._LODLevels[internalDataInfo._LODLevels.length - 1].distanceOrScreenCoverage > compareSign * compareValue) {\r\n            if (this.onLODLevelSelection) {\r\n                this.onLODLevelSelection(compareValue, this, this);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            const level = internalDataInfo._LODLevels[index];\r\n\r\n            if (compareSign * level.distanceOrScreenCoverage < compareSign * compareValue) {\r\n                if (level.mesh) {\r\n                    if (level.mesh.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\r\n                        level.mesh._checkDelayState();\r\n                        return this;\r\n                    }\r\n\r\n                    if (level.mesh.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n                        return this;\r\n                    }\r\n\r\n                    level.mesh._preActivate();\r\n                    level.mesh._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\r\n                }\r\n\r\n                if (this.onLODLevelSelection) {\r\n                    this.onLODLevelSelection(compareValue, this, level.mesh);\r\n                }\r\n\r\n                return level.mesh;\r\n            }\r\n        }\r\n\r\n        if (this.onLODLevelSelection) {\r\n            this.onLODLevelSelection(compareValue, this, this);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh internal Geometry object\r\n     */\r\n    public get geometry(): Nullable<Geometry> {\r\n        return this._geometry;\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of vertices within the mesh geometry or zero if the mesh has no geometry.\r\n     * @returns the total number of vertices\r\n     */\r\n    public override getTotalVertices(): number {\r\n        if (this._geometry === null || this._geometry === undefined) {\r\n            return 0;\r\n        }\r\n        return this._geometry.getTotalVertices();\r\n    }\r\n\r\n    /**\r\n     * Returns the content of an associated vertex buffer\r\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param copyWhenShared defines a boolean indicating that if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one\r\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a FloatArray or null if the mesh has no geometry or no vertex buffer for this kind.\r\n     */\r\n    public override getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean, bypassInstanceData?: boolean): Nullable<FloatArray> {\r\n        if (!this._geometry) {\r\n            return null;\r\n        }\r\n        let data = bypassInstanceData\r\n            ? undefined\r\n            : this._userInstancedBuffersStorage?.vertexBuffers[kind]?.getFloatData(\r\n                  this.instances.length + 1, // +1 because the master mesh is not included in the instances array\r\n                  forceCopy || (copyWhenShared && this._geometry.meshes.length !== 1)\r\n              );\r\n        if (!data) {\r\n            data = this._geometry.getVerticesData(kind, copyWhenShared, forceCopy);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public override copyVerticesData(kind: string, vertexData: { [kind: string]: Float32Array }): void {\r\n        if (this._geometry) {\r\n            this._geometry.copyVerticesData(kind, vertexData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh VertexBuffer object from the requested `kind`\r\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.NormalKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a FloatArray or null if the mesh has no vertex buffer for this kind.\r\n     */\r\n    public getVertexBuffer(kind: string, bypassInstanceData?: boolean): Nullable<VertexBuffer> {\r\n        if (!this._geometry) {\r\n            return null;\r\n        }\r\n\r\n        return (bypassInstanceData ? undefined : this._userInstancedBuffersStorage?.vertexBuffers[kind]) ?? this._geometry.getVertexBuffer(kind);\r\n    }\r\n\r\n    /**\r\n     * Tests if a specific vertex buffer is associated with this mesh\r\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.NormalKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a boolean\r\n     */\r\n    public override isVerticesDataPresent(kind: string, bypassInstanceData?: boolean): boolean {\r\n        if (!this._geometry) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        return (!bypassInstanceData && this._userInstancedBuffersStorage?.vertexBuffers[kind] !== undefined) || this._geometry.isVerticesDataPresent(kind);\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable.\r\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a boolean\r\n     */\r\n    public isVertexBufferUpdatable(kind: string, bypassInstanceData?: boolean): boolean {\r\n        if (!this._geometry) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        if (!bypassInstanceData) {\r\n            const buffer = this._userInstancedBuffersStorage?.vertexBuffers[kind];\r\n            if (buffer) {\r\n                return buffer.isUpdatable();\r\n            }\r\n        }\r\n        return this._geometry.isVertexBufferUpdatable(kind);\r\n    }\r\n\r\n    /**\r\n     * Returns a string which contains the list of existing `kinds` of Vertex Data associated with this mesh.\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns an array of strings\r\n     */\r\n    public getVerticesDataKinds(bypassInstanceData?: boolean): string[] {\r\n        if (!this._geometry) {\r\n            const result: string[] = [];\r\n            if (this._delayInfo) {\r\n                this._delayInfo.forEach(function (kind) {\r\n                    result.push(kind);\r\n                });\r\n            }\r\n            return result;\r\n        }\r\n        const kinds = this._geometry.getVerticesDataKinds();\r\n        if (!bypassInstanceData && this._userInstancedBuffersStorage) {\r\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\r\n                if (kinds.indexOf(kind) === -1) {\r\n                    kinds.push(kind);\r\n                }\r\n            }\r\n        }\r\n        return kinds;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the numner of indices or zero if the mesh has no geometry.\r\n     */\r\n    public override getTotalIndices(): number {\r\n        if (!this._geometry) {\r\n            return 0;\r\n        }\r\n        return this._geometry.getTotalIndices();\r\n    }\r\n\r\n    /**\r\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\r\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the indices array or an empty array if the mesh has no geometry\r\n     */\r\n    public override getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray> {\r\n        if (!this._geometry) {\r\n            return [];\r\n        }\r\n        return this._geometry.getIndices(copyWhenShared, forceCopy);\r\n    }\r\n\r\n    public override get isBlocked(): boolean {\r\n        return this._masterMesh !== null && this._masterMesh !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Determine if the current mesh is ready to be rendered\r\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\r\n     * @param forceInstanceSupport will check if the mesh will be ready when used with instances (false by default)\r\n     * @returns true if all associated assets are ready (material, textures, shaders)\r\n     */\r\n    public override isReady(completeCheck = false, forceInstanceSupport = false): boolean {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.isReady(completeCheck)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.subMeshes || this.subMeshes.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        if (!completeCheck) {\r\n            return true;\r\n        }\r\n\r\n        const engine = this.getEngine();\r\n        const scene = this.getScene();\r\n        const hardwareInstancedRendering = forceInstanceSupport || (engine.getCaps().instancedArrays && (this.instances.length > 0 || this.hasThinInstances));\r\n\r\n        this.computeWorldMatrix();\r\n\r\n        const mat = this.material || scene.defaultMaterial;\r\n        if (mat) {\r\n            if (mat._storeEffectOnSubMeshes) {\r\n                for (const subMesh of this.subMeshes) {\r\n                    const effectiveMaterial = subMesh.getMaterial();\r\n                    if (effectiveMaterial) {\r\n                        if (effectiveMaterial._storeEffectOnSubMeshes) {\r\n                            if (!effectiveMaterial.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\r\n                                return false;\r\n                            }\r\n                        } else {\r\n                            if (!effectiveMaterial.isReady(this, hardwareInstancedRendering)) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (!mat.isReady(this, hardwareInstancedRendering)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Shadows\r\n        const currentRenderPassId = engine.currentRenderPassId;\r\n        for (const light of this.lightSources) {\r\n            const generators = light.getShadowGenerators();\r\n\r\n            if (!generators) {\r\n                continue;\r\n            }\r\n\r\n            const iterator = generators.values();\r\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                const generator = key.value;\r\n                if (generator && (!generator.getShadowMap()?.renderList || (generator.getShadowMap()?.renderList && generator.getShadowMap()?.renderList?.indexOf(this) !== -1))) {\r\n                    const shadowMap = generator.getShadowMap()!;\r\n                    const renderPassIds = shadowMap.renderPassIds ?? [engine.currentRenderPassId];\r\n                    for (let p = 0; p < renderPassIds.length; ++p) {\r\n                        engine.currentRenderPassId = renderPassIds[p];\r\n                        for (const subMesh of this.subMeshes) {\r\n                            if (!generator.isReady(subMesh, hardwareInstancedRendering, subMesh.getMaterial()?.needAlphaBlendingForMesh(this) ?? false)) {\r\n                                engine.currentRenderPassId = currentRenderPassId;\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    engine.currentRenderPassId = currentRenderPassId;\r\n                }\r\n            }\r\n        }\r\n\r\n        // LOD\r\n        for (const lod of this._internalMeshDataInfo._LODLevels) {\r\n            if (lod.mesh && !lod.mesh.isReady(hardwareInstancedRendering)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the normals aren't to be recomputed on next mesh `positions` array update. This property is pertinent only for updatable parametric shapes.\r\n     */\r\n    public get areNormalsFrozen(): boolean {\r\n        return this._internalMeshDataInfo._areNormalsFrozen;\r\n    }\r\n\r\n    /**\r\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It prevents the mesh normals from being recomputed on next `positions` array update.\r\n     * @returns the current mesh\r\n     */\r\n    public freezeNormals(): Mesh {\r\n        this._internalMeshDataInfo._areNormalsFrozen = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It reactivates the mesh normals computation if it was previously frozen\r\n     * @returns the current mesh\r\n     */\r\n    public unfreezeNormals(): Mesh {\r\n        this._internalMeshDataInfo._areNormalsFrozen = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a value overriding the instance count. Only applicable when custom instanced InterleavedVertexBuffer are used rather than InstancedMeshs\r\n     */\r\n    public set overridenInstanceCount(count: number) {\r\n        this._instanceDataStorage.overridenInstanceCount = count;\r\n    }\r\n\r\n    // Methods\r\n    /** @internal */\r\n    public override _preActivate(): Mesh {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        const sceneRenderId = this.getScene().getRenderId();\r\n        if (internalDataInfo._preActivateId === sceneRenderId) {\r\n            return this;\r\n        }\r\n\r\n        internalDataInfo._preActivateId = sceneRenderId;\r\n        this._instanceDataStorage.visibleInstances = null;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _preActivateForIntermediateRendering(renderId: number): Mesh {\r\n        if (this._instanceDataStorage.visibleInstances) {\r\n            this._instanceDataStorage.visibleInstances.intermediateDefaultRenderId = renderId;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerInstanceForRenderId(instance: InstancedMesh, renderId: number): Mesh {\r\n        if (!this._instanceDataStorage.visibleInstances) {\r\n            this._instanceDataStorage.visibleInstances = {\r\n                defaultRenderId: renderId,\r\n                selfDefaultRenderId: this._renderId,\r\n            };\r\n        }\r\n\r\n        if (!this._instanceDataStorage.visibleInstances[renderId]) {\r\n            if (this._instanceDataStorage.previousRenderId !== undefined && this._instanceDataStorage.isFrozen) {\r\n                this._instanceDataStorage.visibleInstances[this._instanceDataStorage.previousRenderId] = null;\r\n            }\r\n            this._instanceDataStorage.previousRenderId = renderId;\r\n            this._instanceDataStorage.visibleInstances[renderId] = new Array<InstancedMesh>();\r\n        }\r\n\r\n        this._instanceDataStorage.visibleInstances[renderId].push(instance);\r\n        return this;\r\n    }\r\n\r\n    protected override _afterComputeWorldMatrix(): void {\r\n        super._afterComputeWorldMatrix();\r\n\r\n        if (!this.hasThinInstances) {\r\n            return;\r\n        }\r\n\r\n        if (!this.doNotSyncBoundingInfo) {\r\n            this.thinInstanceRefreshBoundingInfo(false);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _postActivate(): void {\r\n        if (this.edgesShareWithInstances && this.edgesRenderer && this.edgesRenderer.isEnabled && this._renderingGroup) {\r\n            this._renderingGroup._edgesRenderers.pushNoDuplicate(this.edgesRenderer);\r\n            this.edgesRenderer.customInstances.push(this.getWorldMatrix());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param applySkeletonOrOptions defines whether to apply the skeleton before computing the bounding info or a set of options\r\n     * @param applyMorph defines whether to apply the morph target before computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public override refreshBoundingInfo(applySkeletonOrOptions: boolean | IMeshDataOptions = false, applyMorph: boolean = false): Mesh {\r\n        if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\r\n            return this;\r\n        }\r\n\r\n        let options: IMeshDataOptions;\r\n        if (typeof applySkeletonOrOptions === \"object\") {\r\n            options = applySkeletonOrOptions;\r\n        } else {\r\n            options = {\r\n                applySkeleton: applySkeletonOrOptions,\r\n                applyMorph: applyMorph,\r\n            };\r\n        }\r\n\r\n        const bias = this.geometry ? this.geometry.boundingBias : null;\r\n        this._refreshBoundingInfo(this._getData(options, null, VertexBuffer.PositionKind), bias);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _createGlobalSubMesh(force: boolean): Nullable<SubMesh> {\r\n        const totalVertices = this.getTotalVertices();\r\n        if (!totalVertices || !this.getIndices()) {\r\n            return null;\r\n        }\r\n\r\n        // Check if we need to recreate the submeshes\r\n        if (this.subMeshes && this.subMeshes.length > 0) {\r\n            const ib = this.getIndices();\r\n\r\n            if (!ib) {\r\n                return null;\r\n            }\r\n\r\n            const totalIndices = ib.length;\r\n            let needToRecreate = false;\r\n\r\n            if (force) {\r\n                needToRecreate = true;\r\n            } else {\r\n                for (const submesh of this.subMeshes) {\r\n                    if (submesh.indexStart + submesh.indexCount > totalIndices) {\r\n                        needToRecreate = true;\r\n                        break;\r\n                    }\r\n\r\n                    if (submesh.verticesStart + submesh.verticesCount > totalVertices) {\r\n                        needToRecreate = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!needToRecreate) {\r\n                return this.subMeshes[0];\r\n            }\r\n        }\r\n\r\n        this.releaseSubMeshes();\r\n        return new SubMesh(0, 0, totalVertices, 0, this.getTotalIndices() || totalVertices, this); // getTotalIndices() can be zero if the mesh is unindexed\r\n    }\r\n\r\n    /**\r\n     * This function will subdivide the mesh into multiple submeshes\r\n     * @param count defines the expected number of submeshes\r\n     */\r\n    public subdivide(count: number): void {\r\n        if (count < 1) {\r\n            return;\r\n        }\r\n\r\n        const totalIndices = this.getTotalIndices();\r\n        let subdivisionSize = (totalIndices / count) | 0;\r\n        let offset = 0;\r\n\r\n        // Ensure that subdivisionSize is a multiple of 3\r\n        while (subdivisionSize % 3 !== 0) {\r\n            subdivisionSize++;\r\n        }\r\n\r\n        this.releaseSubMeshes();\r\n        for (let index = 0; index < count; index++) {\r\n            if (offset >= totalIndices) {\r\n                break;\r\n            }\r\n\r\n            SubMesh.CreateFromIndices(0, offset, index === count - 1 ? totalIndices - offset : subdivisionSize, this, undefined, false);\r\n\r\n            offset += subdivisionSize;\r\n        }\r\n\r\n        this.refreshBoundingInfo();\r\n        this.synchronizeInstances();\r\n    }\r\n\r\n    /**\r\n     * Copy a FloatArray into a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\r\n     * @param stride defines the data stride size (can be null)\r\n     * @returns the current mesh\r\n     */\r\n    public override setVerticesData(kind: string, data: FloatArray, updatable: boolean = false, stride?: number): AbstractMesh {\r\n        if (!this._geometry) {\r\n            const vertexData = new VertexData();\r\n            vertexData.set(data, kind);\r\n\r\n            const scene = this.getScene();\r\n\r\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\r\n        } else {\r\n            this._geometry.setVerticesData(kind, data, updatable, stride);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Delete a vertex buffer associated with this mesh\r\n     * @param kind defines which buffer to delete (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     */\r\n    public removeVerticesData(kind: string) {\r\n        if (!this._geometry) {\r\n            return;\r\n        }\r\n\r\n        this._geometry.removeVerticesData(kind);\r\n    }\r\n\r\n    /**\r\n     * Flags an associated vertex buffer as updatable\r\n     * @param kind defines which buffer to use (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\r\n     */\r\n    public markVerticesDataAsUpdatable(kind: string, updatable = true) {\r\n        const vb = this.getVertexBuffer(kind);\r\n\r\n        if (!vb || vb.isUpdatable() === updatable) {\r\n            return;\r\n        }\r\n\r\n        this.setVerticesData(kind, <FloatArray>this.getVerticesData(kind), updatable);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh global Vertex Buffer\r\n     * @param buffer defines the buffer to use\r\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\r\n     * @returns the current mesh\r\n     */\r\n    public setVerticesBuffer(buffer: VertexBuffer, disposeExistingBuffer = true): Mesh {\r\n        if (!this._geometry) {\r\n            this._geometry = Geometry.CreateGeometryForMesh(this);\r\n        }\r\n\r\n        this._geometry.setVerticesBuffer(buffer, null, disposeExistingBuffer);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\r\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\r\n     * @returns the current mesh\r\n     */\r\n    public override updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): AbstractMesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n        if (!makeItUnique) {\r\n            this._geometry.updateVerticesData(kind, data, updateExtends);\r\n        } else {\r\n            this.makeGeometryUnique();\r\n            this.updateVerticesData(kind, data, updateExtends, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This method updates the vertex positions of an updatable mesh according to the `positionFunction` returned values.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#other-shapes-updatemeshpositions\r\n     * @param positionFunction is a simple JS function what is passed the mesh `positions` array. It doesn't need to return anything\r\n     * @param computeNormals is a boolean (default true) to enable/disable the mesh normal recomputation after the vertex position update\r\n     * @returns the current mesh\r\n     */\r\n    public updateMeshPositions(positionFunction: (data: FloatArray) => void, computeNormals: boolean = true): Mesh {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        if (!positions) {\r\n            return this;\r\n        }\r\n\r\n        positionFunction(positions);\r\n        this.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\r\n\r\n        if (computeNormals) {\r\n            const indices = this.getIndices();\r\n            const normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            if (!normals) {\r\n                return this;\r\n            }\r\n\r\n            VertexData.ComputeNormals(positions, indices, normals);\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a un-shared specific occurence of the geometry for the mesh.\r\n     * @returns the current mesh\r\n     */\r\n    public makeGeometryUnique(): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        if (this._geometry.meshes.length === 1) {\r\n            return this;\r\n        }\r\n\r\n        const oldGeometry = this._geometry;\r\n        const geometry = this._geometry.copy(Geometry.RandomId());\r\n        oldGeometry.releaseForMesh(this, true);\r\n        geometry.applyToMesh(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the index buffer of this mesh.\r\n     * @param indexBuffer Defines the index buffer to use for this mesh\r\n     * @param totalVertices Defines the total number of vertices used by the buffer\r\n     * @param totalIndices Defines the total number of indices in the index buffer\r\n     */\r\n    public setIndexBuffer(indexBuffer: DataBuffer, totalVertices: number, totalIndices: number): void {\r\n        let geometry = this._geometry;\r\n        if (!geometry) {\r\n            geometry = new Geometry(Geometry.RandomId(), this.getScene(), undefined, undefined, this);\r\n        }\r\n        geometry.setIndexBuffer(indexBuffer, totalVertices, totalIndices);\r\n    }\r\n\r\n    /**\r\n     * Set the index buffer of this mesh\r\n     * @param indices defines the source data\r\n     * @param totalVertices defines the total number of vertices referenced by this index data (can be null)\r\n     * @param updatable defines if the updated index buffer must be flagged as updatable (default is false)\r\n     * @param dontForceSubMeshRecreation defines a boolean indicating that we don't want to force the recreation of sub-meshes if we don't have to (false by default)\r\n     * @returns the current mesh\r\n     */\r\n    public override setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null, updatable: boolean = false, dontForceSubMeshRecreation = false): AbstractMesh {\r\n        if (!this._geometry) {\r\n            const vertexData = new VertexData();\r\n            vertexData.indices = indices;\r\n\r\n            const scene = this.getScene();\r\n\r\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\r\n        } else {\r\n            this._geometry.setIndices(indices, totalVertices, updatable, dontForceSubMeshRecreation);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the current index buffer\r\n     * @param indices defines the source data\r\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     * @returns the current mesh\r\n     */\r\n    public override updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): AbstractMesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        this._geometry.updateIndices(indices, offset, gpuMemoryOnly);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Invert the geometry to move from a right handed system to a left handed one.\r\n     * @returns the current mesh\r\n     */\r\n    public toLeftHanded(): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n        this._geometry.toLeftHanded();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(subMesh: SubMesh, effect: Effect, fillMode: number, allowInstancedRendering = true): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        const engine = this.getScene().getEngine();\r\n\r\n        // Wireframe\r\n        let indexToBind;\r\n        if (this._unIndexed) {\r\n            switch (this._getRenderingFillMode(fillMode)) {\r\n                case Material.WireFrameFillMode:\r\n                    indexToBind = subMesh._getLinesIndexBuffer(<IndicesArray>this.getIndices(), engine);\r\n                    break;\r\n                default:\r\n                    indexToBind = null;\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (this._getRenderingFillMode(fillMode)) {\r\n                case Material.PointFillMode:\r\n                    indexToBind = null;\r\n                    break;\r\n                case Material.WireFrameFillMode:\r\n                    indexToBind = subMesh._getLinesIndexBuffer(<IndicesArray>this.getIndices(), engine);\r\n                    break;\r\n                default:\r\n                case Material.TriangleFillMode:\r\n                    indexToBind = this._geometry.getIndexBuffer();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return this._bindDirect(effect, indexToBind, allowInstancedRendering);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bindDirect(effect: Effect, indexToBind: Nullable<DataBuffer>, allowInstancedRendering = true): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        // Morph targets\r\n        if (this.morphTargetManager && this.morphTargetManager.isUsingTextureForTargets) {\r\n            this.morphTargetManager._bind(effect);\r\n        }\r\n\r\n        // VBOs\r\n        if (!allowInstancedRendering || !this._userInstancedBuffersStorage || this.hasThinInstances) {\r\n            this._geometry._bind(effect, indexToBind);\r\n        } else {\r\n            this._geometry._bind(effect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(subMesh: SubMesh, fillMode: number, instancesCount?: number): Mesh {\r\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\r\n            return this;\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onBeforeDrawObservable) {\r\n            this._internalMeshDataInfo._onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        if ((this._unIndexed && fillMode !== Material.WireFrameFillMode) || fillMode == Material.PointFillMode) {\r\n            // or triangles as points\r\n            engine.drawArraysType(fillMode, subMesh.verticesStart, subMesh.verticesCount, this.forcedInstanceCount || instancesCount);\r\n        } else if (fillMode == Material.WireFrameFillMode) {\r\n            // Triangles as wireframe\r\n            engine.drawElementsType(fillMode, 0, subMesh._linesIndexCount, this.forcedInstanceCount || instancesCount);\r\n        } else {\r\n            engine.drawElementsType(fillMode, subMesh.indexStart, subMesh.indexCount, this.forcedInstanceCount || instancesCount);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Registers for this mesh a javascript function called just before the rendering process\r\n     * @param func defines the function to call before rendering this mesh\r\n     * @returns the current mesh\r\n     */\r\n    public registerBeforeRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onBeforeRenderObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes a previously registered javascript function called before the rendering\r\n     * @param func defines the function to remove\r\n     * @returns the current mesh\r\n     */\r\n    public unregisterBeforeRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onBeforeRenderObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Registers for this mesh a javascript function called just after the rendering is complete\r\n     * @param func defines the function to call after rendering this mesh\r\n     * @returns the current mesh\r\n     */\r\n    public registerAfterRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onAfterRenderObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes a previously registered javascript function called after the rendering.\r\n     * @param func defines the function to remove\r\n     * @returns the current mesh\r\n     */\r\n    public unregisterAfterRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onAfterRenderObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getInstancesRenderList(subMeshId: number, isReplacementMode: boolean = false): _InstancesBatch {\r\n        if (this._instanceDataStorage.isFrozen) {\r\n            if (isReplacementMode) {\r\n                this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.hardwareInstancedRendering[subMeshId] = false;\r\n                this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.renderSelf[subMeshId] = true;\r\n                return this._instanceDataStorage.batchCacheReplacementModeInFrozenMode;\r\n            }\r\n            if (this._instanceDataStorage.previousBatch) {\r\n                return this._instanceDataStorage.previousBatch;\r\n            }\r\n        }\r\n        const scene = this.getScene();\r\n        const isInIntermediateRendering = scene._isInIntermediateRendering();\r\n        const onlyForInstances = isInIntermediateRendering\r\n            ? this._internalAbstractMeshDataInfo._onlyForInstancesIntermediate\r\n            : this._internalAbstractMeshDataInfo._onlyForInstances;\r\n        const batchCache = this._instanceDataStorage.batchCache;\r\n        batchCache.mustReturn = false;\r\n        batchCache.renderSelf[subMeshId] = isReplacementMode || (!onlyForInstances && this.isEnabled() && this.isVisible);\r\n        batchCache.visibleInstances[subMeshId] = null;\r\n\r\n        if (this._instanceDataStorage.visibleInstances && !isReplacementMode) {\r\n            const visibleInstances = this._instanceDataStorage.visibleInstances;\r\n            const currentRenderId = scene.getRenderId();\r\n            const defaultRenderId = isInIntermediateRendering ? visibleInstances.intermediateDefaultRenderId : visibleInstances.defaultRenderId;\r\n            batchCache.visibleInstances[subMeshId] = visibleInstances[currentRenderId];\r\n\r\n            if (!batchCache.visibleInstances[subMeshId] && defaultRenderId) {\r\n                batchCache.visibleInstances[subMeshId] = visibleInstances[defaultRenderId];\r\n            }\r\n        }\r\n        batchCache.hardwareInstancedRendering[subMeshId] =\r\n            !isReplacementMode &&\r\n            this._instanceDataStorage.hardwareInstancedRendering &&\r\n            batchCache.visibleInstances[subMeshId] !== null &&\r\n            batchCache.visibleInstances[subMeshId] !== undefined;\r\n        this._instanceDataStorage.previousBatch = batchCache;\r\n\r\n        return batchCache;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderWithInstances(subMesh: SubMesh, fillMode: number, batch: _InstancesBatch, effect: Effect, engine: AbstractEngine): Mesh {\r\n        const visibleInstances = batch.visibleInstances[subMesh._id];\r\n        const visibleInstanceCount = visibleInstances ? visibleInstances.length : 0;\r\n\r\n        const instanceStorage = this._instanceDataStorage;\r\n        const currentInstancesBufferSize = instanceStorage.instancesBufferSize;\r\n        let instancesBuffer = instanceStorage.instancesBuffer;\r\n        let instancesPreviousBuffer = instanceStorage.instancesPreviousBuffer;\r\n        const matricesCount = visibleInstanceCount + 1;\r\n        const bufferSize = matricesCount * 16 * 4;\r\n\r\n        while (instanceStorage.instancesBufferSize < bufferSize) {\r\n            instanceStorage.instancesBufferSize *= 2;\r\n        }\r\n\r\n        if (!instanceStorage.instancesData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\r\n            instanceStorage.instancesData = new Float32Array(instanceStorage.instancesBufferSize / 4);\r\n        }\r\n        if ((this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousData) || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\r\n            instanceStorage.instancesPreviousData = new Float32Array(instanceStorage.instancesBufferSize / 4);\r\n        }\r\n\r\n        let offset = 0;\r\n        let instancesCount = 0;\r\n\r\n        const renderSelf = batch.renderSelf[subMesh._id];\r\n\r\n        const needUpdateBuffer =\r\n            !instancesBuffer ||\r\n            currentInstancesBufferSize !== instanceStorage.instancesBufferSize ||\r\n            (this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousBuffer);\r\n\r\n        if (!this._instanceDataStorage.manualUpdate && (!instanceStorage.isFrozen || needUpdateBuffer)) {\r\n            const world = this.getWorldMatrix();\r\n            if (renderSelf) {\r\n                if (this._scene.needsPreviousWorldMatrices) {\r\n                    if (!instanceStorage.masterMeshPreviousWorldMatrix) {\r\n                        instanceStorage.masterMeshPreviousWorldMatrix = world.clone();\r\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                    } else {\r\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                        instanceStorage.masterMeshPreviousWorldMatrix.copyFrom(world);\r\n                    }\r\n                }\r\n                world.copyToArray(instanceStorage.instancesData, offset);\r\n                offset += 16;\r\n                instancesCount++;\r\n            }\r\n\r\n            if (visibleInstances) {\r\n                if (Mesh.INSTANCEDMESH_SORT_TRANSPARENT && this._scene.activeCamera && subMesh.getMaterial()?.needAlphaBlendingForMesh(subMesh.getRenderingMesh())) {\r\n                    const cameraPosition = this._scene.activeCamera.globalPosition;\r\n                    for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\r\n                        const instanceMesh = visibleInstances[instanceIndex];\r\n                        instanceMesh._distanceToCamera = Vector3.Distance(instanceMesh.getBoundingInfo().boundingSphere.centerWorld, cameraPosition);\r\n                    }\r\n                    visibleInstances.sort((m1, m2) => {\r\n                        return m1._distanceToCamera > m2._distanceToCamera ? -1 : m1._distanceToCamera < m2._distanceToCamera ? 1 : 0;\r\n                    });\r\n                }\r\n                for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\r\n                    const instance = visibleInstances[instanceIndex];\r\n                    const matrix = instance.getWorldMatrix();\r\n                    matrix.copyToArray(instanceStorage.instancesData, offset);\r\n\r\n                    if (this._scene.needsPreviousWorldMatrices) {\r\n                        if (!instance._previousWorldMatrix) {\r\n                            instance._previousWorldMatrix = matrix.clone();\r\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                        } else {\r\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                            instance._previousWorldMatrix.copyFrom(matrix);\r\n                        }\r\n                    }\r\n\r\n                    offset += 16;\r\n                    instancesCount++;\r\n                }\r\n            }\r\n        } else {\r\n            instancesCount = (renderSelf ? 1 : 0) + visibleInstanceCount;\r\n        }\r\n\r\n        if (needUpdateBuffer) {\r\n            if (instancesBuffer) {\r\n                instancesBuffer.dispose();\r\n            }\r\n\r\n            if (instancesPreviousBuffer) {\r\n                instancesPreviousBuffer.dispose();\r\n            }\r\n\r\n            instancesBuffer = new Buffer(engine, instanceStorage.instancesData, true, 16, false, true);\r\n            instanceStorage.instancesBuffer = instancesBuffer;\r\n            if (!this._userInstancedBuffersStorage) {\r\n                this._userInstancedBuffersStorage = {\r\n                    data: {},\r\n                    vertexBuffers: {},\r\n                    strides: {},\r\n                    sizes: {},\r\n                    vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined,\r\n                };\r\n            }\r\n\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world0\"] = instancesBuffer.createVertexBuffer(\"world0\", 0, 4);\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world1\"] = instancesBuffer.createVertexBuffer(\"world1\", 4, 4);\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world2\"] = instancesBuffer.createVertexBuffer(\"world2\", 8, 4);\r\n            this._userInstancedBuffersStorage.vertexBuffers[\"world3\"] = instancesBuffer.createVertexBuffer(\"world3\", 12, 4);\r\n\r\n            if (this._scene.needsPreviousWorldMatrices) {\r\n                instancesPreviousBuffer = new Buffer(engine, instanceStorage.instancesPreviousData, true, 16, false, true);\r\n                instanceStorage.instancesPreviousBuffer = instancesPreviousBuffer;\r\n\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld0\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld0\", 0, 4);\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld1\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld1\", 4, 4);\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld2\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld2\", 8, 4);\r\n                this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld3\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld3\", 12, 4);\r\n            }\r\n            this._invalidateInstanceVertexArrayObject();\r\n        } else {\r\n            if (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) {\r\n                instancesBuffer!.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\r\n                if (this._scene.needsPreviousWorldMatrices && (!this._instanceDataStorage.manualUpdate || this._instanceDataStorage.previousManualUpdate)) {\r\n                    instancesPreviousBuffer!.updateDirectly(instanceStorage.instancesPreviousData, 0, instancesCount);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._processInstancedBuffers(visibleInstances, renderSelf);\r\n\r\n        // Stats\r\n        this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\r\n\r\n        // Draw\r\n        if (engine._currentDrawContext) {\r\n            engine._currentDrawContext.useInstancing = true;\r\n        }\r\n        this._bind(subMesh, effect, fillMode);\r\n        this._draw(subMesh, fillMode, instancesCount);\r\n\r\n        // Write current matrices as previous matrices in case of manual update\r\n        // Default behaviour when previous matrices are not specified explicitly\r\n        // Will break if instances number/order changes\r\n        if (\r\n            this._scene.needsPreviousWorldMatrices &&\r\n            !needUpdateBuffer &&\r\n            this._instanceDataStorage.manualUpdate &&\r\n            (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) &&\r\n            !this._instanceDataStorage.previousManualUpdate\r\n        ) {\r\n            instancesPreviousBuffer!.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\r\n        }\r\n\r\n        engine.unbindInstanceAttributes();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderWithThinInstances(subMesh: SubMesh, fillMode: number, effect: Effect, engine: AbstractEngine) {\r\n        // Stats\r\n        const instancesCount = this._thinInstanceDataStorage?.instancesCount ?? 0;\r\n\r\n        this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\r\n\r\n        // Draw\r\n        if (engine._currentDrawContext) {\r\n            engine._currentDrawContext.useInstancing = true;\r\n        }\r\n        this._bind(subMesh, effect, fillMode);\r\n        this._draw(subMesh, fillMode, instancesCount);\r\n\r\n        // Write current matrices as previous matrices\r\n        // Default behaviour when previous matrices are not specified explicitly\r\n        // Will break if instances number/order changes\r\n        if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData && this._thinInstanceDataStorage.matrixData) {\r\n            if (!this._thinInstanceDataStorage.previousMatrixBuffer) {\r\n                this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", this._thinInstanceDataStorage.matrixData, false);\r\n            } else {\r\n                this._thinInstanceDataStorage.previousMatrixBuffer!.updateDirectly(this._thinInstanceDataStorage.matrixData, 0, instancesCount);\r\n            }\r\n        }\r\n\r\n        engine.unbindInstanceAttributes();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _processInstancedBuffers(visibleInstances: Nullable<InstancedMesh[]>, renderSelf: boolean) {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processRendering(\r\n        renderingMesh: AbstractMesh,\r\n        subMesh: SubMesh,\r\n        effect: Effect,\r\n        fillMode: number,\r\n        batch: _InstancesBatch,\r\n        hardwareInstancedRendering: boolean,\r\n        onBeforeDraw: (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => void,\r\n        effectiveMaterial?: Material\r\n    ): Mesh {\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n        fillMode = this._getRenderingFillMode(fillMode);\r\n\r\n        if (hardwareInstancedRendering && subMesh.getRenderingMesh().hasThinInstances) {\r\n            this._renderWithThinInstances(subMesh, fillMode, effect, engine);\r\n            return this;\r\n        }\r\n\r\n        if (hardwareInstancedRendering) {\r\n            this._renderWithInstances(subMesh, fillMode, batch, effect, engine);\r\n        } else {\r\n            if (engine._currentDrawContext) {\r\n                engine._currentDrawContext.useInstancing = false;\r\n            }\r\n\r\n            let instanceCount = 0;\r\n            if (batch.renderSelf[subMesh._id]) {\r\n                // Draw\r\n                if (onBeforeDraw) {\r\n                    onBeforeDraw(false, renderingMesh.getWorldMatrix(), effectiveMaterial);\r\n                }\r\n                instanceCount++;\r\n\r\n                this._draw(subMesh, fillMode, this._instanceDataStorage.overridenInstanceCount);\r\n            }\r\n\r\n            const visibleInstancesForSubMesh = batch.visibleInstances[subMesh._id];\r\n\r\n            if (visibleInstancesForSubMesh) {\r\n                const visibleInstanceCount = visibleInstancesForSubMesh.length;\r\n                instanceCount += visibleInstanceCount;\r\n\r\n                // Stats\r\n                for (let instanceIndex = 0; instanceIndex < visibleInstanceCount; instanceIndex++) {\r\n                    const instance = visibleInstancesForSubMesh[instanceIndex];\r\n\r\n                    // World\r\n                    const world = instance.getWorldMatrix();\r\n                    if (onBeforeDraw) {\r\n                        onBeforeDraw(true, world, effectiveMaterial);\r\n                    }\r\n                    // Draw\r\n                    this._draw(subMesh, fillMode);\r\n                }\r\n            }\r\n\r\n            // Stats\r\n            scene._activeIndices.addCount(subMesh.indexCount * instanceCount, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _rebuild(dispose = false): void {\r\n        if (this._instanceDataStorage.instancesBuffer) {\r\n            // Dispose instance buffer to be recreated in _renderWithInstances when rendered\r\n            if (dispose) {\r\n                this._instanceDataStorage.instancesBuffer.dispose();\r\n            }\r\n            this._instanceDataStorage.instancesBuffer = null;\r\n        }\r\n        if (this._userInstancedBuffersStorage) {\r\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\r\n                const buffer = this._userInstancedBuffersStorage.vertexBuffers[kind];\r\n                if (buffer) {\r\n                    // Dispose instance buffer to be recreated in _renderWithInstances when rendered\r\n                    if (dispose) {\r\n                        buffer.dispose();\r\n                    }\r\n                    this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\r\n                }\r\n            }\r\n            if (this._userInstancedBuffersStorage.vertexArrayObjects) {\r\n                this._userInstancedBuffersStorage.vertexArrayObjects = {};\r\n            }\r\n        }\r\n        this._internalMeshDataInfo._effectiveMaterial = null;\r\n        super._rebuild(dispose);\r\n    }\r\n\r\n    /** @internal */\r\n    public override _freeze() {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        // Prepare batches\r\n        for (let index = 0; index < this.subMeshes.length; index++) {\r\n            this._getInstancesRenderList(index);\r\n        }\r\n\r\n        this._internalMeshDataInfo._effectiveMaterial = null;\r\n        this._instanceDataStorage.isFrozen = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _unFreeze() {\r\n        this._instanceDataStorage.isFrozen = false;\r\n        this._instanceDataStorage.previousBatch = null;\r\n    }\r\n\r\n    /**\r\n     * Triggers the draw call for the mesh (or a submesh), for a specific render pass id\r\n     * @param renderPassId defines the render pass id to use to draw the mesh / submesh. If not provided, use the current renderPassId of the engine.\r\n     * @param enableAlphaMode defines if alpha mode can be changed (default: false)\r\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering (default: undefined)\r\n     * @param subMesh defines the subMesh to render. If not provided, draw all mesh submeshes (default: undefined)\r\n     * @param checkFrustumCulling defines if frustum culling must be checked (default: true). If you know the mesh is in the frustum (or if you don't care!), you can pass false to optimize.\r\n     * @returns the current mesh\r\n     */\r\n    public renderWithRenderPassId(renderPassId?: number, enableAlphaMode?: boolean, effectiveMeshReplacement?: AbstractMesh, subMesh?: SubMesh, checkFrustumCulling = true) {\r\n        const engine = this._scene.getEngine();\r\n        const currentRenderPassId = engine.currentRenderPassId;\r\n\r\n        if (renderPassId !== undefined) {\r\n            engine.currentRenderPassId = renderPassId;\r\n        }\r\n\r\n        if (subMesh) {\r\n            if (!checkFrustumCulling || (checkFrustumCulling && subMesh.isInFrustum(this._scene._frustumPlanes))) {\r\n                this.render(subMesh, !!enableAlphaMode, effectiveMeshReplacement);\r\n            }\r\n        } else {\r\n            for (let s = 0; s < this.subMeshes.length; s++) {\r\n                const subMesh = this.subMeshes[s];\r\n                if (!checkFrustumCulling || (checkFrustumCulling && subMesh.isInFrustum(this._scene._frustumPlanes))) {\r\n                    this.render(subMesh, !!enableAlphaMode, effectiveMeshReplacement);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (renderPassId !== undefined) {\r\n            engine.currentRenderPassId = currentRenderPassId;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Render a complete mesh by going through all submeshes\r\n     * @returns the current mesh\r\n     * #5SPY1V#2: simple test\r\n     * #5SPY1V#5: perf test\r\n     */\r\n    public directRender(): Mesh {\r\n        if (!this.subMeshes) {\r\n            return this;\r\n        }\r\n\r\n        for (const submesh of this.subMeshes) {\r\n            this.render(submesh, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Triggers the draw call for the mesh. Usually, you don't need to call this method by your own because the mesh rendering is handled by the scene rendering manager\r\n     * @param subMesh defines the subMesh to render\r\n     * @param enableAlphaMode defines if alpha mode can be changed\r\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering\r\n     * @returns the current mesh\r\n     */\r\n    public render(subMesh: SubMesh, enableAlphaMode: boolean, effectiveMeshReplacement?: AbstractMesh): Mesh {\r\n        const scene = this.getScene();\r\n\r\n        if (this._internalAbstractMeshDataInfo._isActiveIntermediate) {\r\n            this._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n        } else {\r\n            this._internalAbstractMeshDataInfo._isActive = false;\r\n        }\r\n\r\n        const numActiveCameras = scene.activeCameras?.length ?? 0;\r\n        const canCheckOcclusionQuery = (numActiveCameras > 1 && scene.activeCamera === scene.activeCameras![0]) || numActiveCameras <= 1;\r\n\r\n        if (canCheckOcclusionQuery && this._checkOcclusionQuery() && !this._occlusionDataStorage.forceRenderingWhenOccluded) {\r\n            return this;\r\n        }\r\n\r\n        // Managing instances\r\n        const batch = this._getInstancesRenderList(subMesh._id, !!effectiveMeshReplacement);\r\n\r\n        if (batch.mustReturn) {\r\n            return this;\r\n        }\r\n\r\n        // Checking geometry state\r\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\r\n            return this;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n        let oldCameraMaxZ = 0;\r\n        let oldCamera: Nullable<Camera> = null;\r\n        if (this.ignoreCameraMaxZ && scene.activeCamera && !scene._isInIntermediateRendering()) {\r\n            oldCameraMaxZ = scene.activeCamera.maxZ;\r\n            oldCamera = scene.activeCamera;\r\n            scene.activeCamera.maxZ = 0;\r\n            scene.updateTransformMatrix(true);\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onBeforeRenderObservable) {\r\n            this._internalMeshDataInfo._onBeforeRenderObservable.notifyObservers(this);\r\n        }\r\n\r\n        const renderingMesh = subMesh.getRenderingMesh();\r\n        const hardwareInstancedRendering =\r\n            batch.hardwareInstancedRendering[subMesh._id] ||\r\n            renderingMesh.hasThinInstances ||\r\n            (!!this._userInstancedBuffersStorage && !subMesh.getMesh()._internalAbstractMeshDataInfo._actAsRegularMesh);\r\n        const instanceDataStorage = this._instanceDataStorage;\r\n\r\n        const material = subMesh.getMaterial();\r\n        if (!material) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // Material\r\n        if (!instanceDataStorage.isFrozen || !this._internalMeshDataInfo._effectiveMaterial || this._internalMeshDataInfo._effectiveMaterial !== material) {\r\n            if (material._storeEffectOnSubMeshes) {\r\n                if (!material.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\r\n                    if (oldCamera) {\r\n                        oldCamera.maxZ = oldCameraMaxZ;\r\n                        scene.updateTransformMatrix(true);\r\n                    }\r\n                    return this;\r\n                }\r\n            } else if (!material.isReady(this, hardwareInstancedRendering)) {\r\n                if (oldCamera) {\r\n                    oldCamera.maxZ = oldCameraMaxZ;\r\n                    scene.updateTransformMatrix(true);\r\n                }\r\n                return this;\r\n            }\r\n\r\n            this._internalMeshDataInfo._effectiveMaterial = material;\r\n        } else if (\r\n            (material._storeEffectOnSubMeshes && !subMesh._drawWrapper?._wasPreviouslyReady) ||\r\n            (!material._storeEffectOnSubMeshes && !material._getDrawWrapper()._wasPreviouslyReady)\r\n        ) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // Alpha mode\r\n        if (enableAlphaMode) {\r\n            engine.setAlphaMode(this._internalMeshDataInfo._effectiveMaterial.alphaMode);\r\n        }\r\n\r\n        let drawWrapper: Nullable<DrawWrapper>;\r\n        if (this._internalMeshDataInfo._effectiveMaterial._storeEffectOnSubMeshes) {\r\n            drawWrapper = subMesh._drawWrapper;\r\n        } else {\r\n            drawWrapper = this._internalMeshDataInfo._effectiveMaterial._getDrawWrapper();\r\n        }\r\n\r\n        const effect = drawWrapper?.effect ?? null;\r\n\r\n        for (const step of scene._beforeRenderingMeshStage) {\r\n            step.action(this, subMesh, batch, effect);\r\n        }\r\n\r\n        if (!drawWrapper || !effect) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        const effectiveMesh = effectiveMeshReplacement || this;\r\n\r\n        let sideOrientation: Nullable<number>;\r\n\r\n        if (\r\n            !instanceDataStorage.isFrozen &&\r\n            (this._internalMeshDataInfo._effectiveMaterial.backFaceCulling ||\r\n                this._internalMeshDataInfo._effectiveMaterial.sideOrientation !== null ||\r\n                (this._internalMeshDataInfo._effectiveMaterial as any).twoSidedLighting)\r\n        ) {\r\n            // Note: if two sided lighting is enabled, we need to ensure that the normal will point in the right direction even if the determinant of the world matrix is negative\r\n            const mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\r\n            sideOrientation = this._internalMeshDataInfo._effectiveMaterial._getEffectiveOrientation(this);\r\n\r\n            if (mainDeterminant < 0) {\r\n                sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n            }\r\n            instanceDataStorage.sideOrientation = sideOrientation!;\r\n        } else {\r\n            sideOrientation = instanceDataStorage.sideOrientation;\r\n        }\r\n\r\n        const reverse = this._internalMeshDataInfo._effectiveMaterial._preBind(drawWrapper, sideOrientation);\r\n\r\n        if (this._internalMeshDataInfo._effectiveMaterial.forceDepthWrite) {\r\n            engine.setDepthWrite(true);\r\n        }\r\n\r\n        // Bind\r\n        const effectiveMaterial = this._internalMeshDataInfo._effectiveMaterial;\r\n        const fillMode = effectiveMaterial.fillMode;\r\n\r\n        if (this._internalMeshDataInfo._onBeforeBindObservable) {\r\n            this._internalMeshDataInfo._onBeforeBindObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (!hardwareInstancedRendering) {\r\n            // Binding will be done later because we need to add more info to the VB\r\n            this._bind(subMesh, effect, fillMode, false);\r\n        }\r\n\r\n        const world = effectiveMesh.getWorldMatrix();\r\n        if (effectiveMaterial._storeEffectOnSubMeshes) {\r\n            effectiveMaterial.bindForSubMesh(world, this, subMesh);\r\n        } else {\r\n            effectiveMaterial.bind(world, this);\r\n        }\r\n\r\n        if (!effectiveMaterial.backFaceCulling && effectiveMaterial.separateCullingPass) {\r\n            engine.setState(true, effectiveMaterial.zOffset, false, !reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\r\n            this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\r\n            engine.setState(true, effectiveMaterial.zOffset, false, reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\r\n\r\n            if (this._internalMeshDataInfo._onBetweenPassObservable) {\r\n                this._internalMeshDataInfo._onBetweenPassObservable.notifyObservers(subMesh);\r\n            }\r\n        }\r\n\r\n        // Draw\r\n        this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\r\n\r\n        // Unbind\r\n        this._internalMeshDataInfo._effectiveMaterial.unbind();\r\n\r\n        for (const step of scene._afterRenderingMeshStage) {\r\n            step.action(this, subMesh, batch, effect);\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onAfterRenderObservable) {\r\n            this._internalMeshDataInfo._onAfterRenderObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (oldCamera) {\r\n            oldCamera.maxZ = oldCameraMaxZ;\r\n            scene.updateTransformMatrix(true);\r\n        }\r\n\r\n        if (scene.performancePriority === ScenePerformancePriority.Aggressive && !instanceDataStorage.isFrozen) {\r\n            this._freeze();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _onBeforeDraw: (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => void;\r\n\r\n    /**\r\n     *   Renormalize the mesh and patch it up if there are no weights\r\n     *   Similar to normalization by adding the weights compute the reciprocal and multiply all elements, this wil ensure that everything adds to 1.\r\n     *   However in the case of zero weights then we set just a single influence to 1.\r\n     *   We check in the function for extra's present and if so we use the normalizeSkinWeightsWithExtras rather than the FourWeights version.\r\n     */\r\n    public cleanMatrixWeights(): void {\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\r\n                this._normalizeSkinWeightsAndExtra();\r\n            } else {\r\n                this._normalizeSkinFourWeights();\r\n            }\r\n        }\r\n    }\r\n\r\n    // faster 4 weight version.\r\n    private _normalizeSkinFourWeights(): void {\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        const numWeights = matricesWeights.length;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            // accumulate weights\r\n            const t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                matricesWeights[a] = 1;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                matricesWeights[a] *= recip;\r\n                matricesWeights[a + 1] *= recip;\r\n                matricesWeights[a + 2] *= recip;\r\n                matricesWeights[a + 3] *= recip;\r\n            }\r\n        }\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\r\n    }\r\n    // handle special case of extra verts.  (in theory gltf can handle 12 influences)\r\n    private _normalizeSkinWeightsAndExtra(): void {\r\n        const matricesWeightsExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        const numWeights = matricesWeights.length;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            // accumulate weights\r\n            let t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\r\n            t += matricesWeightsExtra[a] + matricesWeightsExtra[a + 1] + matricesWeightsExtra[a + 2] + matricesWeightsExtra[a + 3];\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                matricesWeights[a] = 1;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                matricesWeights[a] *= recip;\r\n                matricesWeights[a + 1] *= recip;\r\n                matricesWeights[a + 2] *= recip;\r\n                matricesWeights[a + 3] *= recip;\r\n                // same goes for extras\r\n                matricesWeightsExtra[a] *= recip;\r\n                matricesWeightsExtra[a + 1] *= recip;\r\n                matricesWeightsExtra[a + 2] *= recip;\r\n                matricesWeightsExtra[a + 3] *= recip;\r\n            }\r\n        }\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsExtra);\r\n    }\r\n\r\n    /**\r\n     * ValidateSkinning is used to determine that a mesh has valid skinning data along with skin metrics, if missing weights,\r\n     * or not normalized it is returned as invalid mesh the string can be used for console logs, or on screen messages to let\r\n     * the user know there was an issue with importing the mesh\r\n     * @returns a validation object with skinned, valid and report string\r\n     */\r\n    public validateSkinning(): { skinned: boolean; valid: boolean; report: string } {\r\n        const matricesWeightsExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        if (matricesWeights === null || this.skeleton == null) {\r\n            return { skinned: false, valid: true, report: \"not skinned\" };\r\n        }\r\n\r\n        const numWeights = matricesWeights.length;\r\n        let numberNotSorted: number = 0;\r\n        let missingWeights: number = 0;\r\n        let maxUsedWeights: number = 0;\r\n        let numberNotNormalized: number = 0;\r\n        const numInfluences: number = matricesWeightsExtra === null ? 4 : 8;\r\n        const usedWeightCounts: number[] = [];\r\n        for (let a = 0; a <= numInfluences; a++) {\r\n            usedWeightCounts[a] = 0;\r\n        }\r\n        const toleranceEpsilon: number = 0.001;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            let lastWeight: number = matricesWeights[a];\r\n            let t = lastWeight;\r\n            let usedWeights: number = t === 0 ? 0 : 1;\r\n\r\n            for (let b = 1; b < numInfluences; b++) {\r\n                const d = b < 4 ? matricesWeights[a + b] : matricesWeightsExtra[a + b - 4];\r\n                if (d > lastWeight) {\r\n                    numberNotSorted++;\r\n                }\r\n                if (d !== 0) {\r\n                    usedWeights++;\r\n                }\r\n                t += d;\r\n                lastWeight = d;\r\n            }\r\n            // count the buffer weights usage\r\n            usedWeightCounts[usedWeights]++;\r\n\r\n            // max influences\r\n            if (usedWeights > maxUsedWeights) {\r\n                maxUsedWeights = usedWeights;\r\n            }\r\n\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                missingWeights++;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                let tolerance = 0;\r\n                for (let b = 0; b < numInfluences; b++) {\r\n                    if (b < 4) {\r\n                        tolerance += Math.abs(matricesWeights[a + b] - matricesWeights[a + b] * recip);\r\n                    } else {\r\n                        tolerance += Math.abs(matricesWeightsExtra[a + b - 4] - matricesWeightsExtra[a + b - 4] * recip);\r\n                    }\r\n                }\r\n                // arbitrary epsilon value for dictating not normalized\r\n                if (tolerance > toleranceEpsilon) {\r\n                    numberNotNormalized++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // validate bone indices are in range of the skeleton\r\n        const numBones: number = this.skeleton.bones.length;\r\n        const matricesIndices = <FloatArray>this.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesIndicesExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\r\n        let numBadBoneIndices: number = 0;\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            for (let b = 0; b < numInfluences; b++) {\r\n                const index = b < 4 ? matricesIndices[a + b] : matricesIndicesExtra[a + b - 4];\r\n                if (index >= numBones || index < 0) {\r\n                    numBadBoneIndices++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // log mesh stats\r\n        const output =\r\n            \"Number of Weights = \" +\r\n            numWeights / 4 +\r\n            \"\\nMaximum influences = \" +\r\n            maxUsedWeights +\r\n            \"\\nMissing Weights = \" +\r\n            missingWeights +\r\n            \"\\nNot Sorted = \" +\r\n            numberNotSorted +\r\n            \"\\nNot Normalized = \" +\r\n            numberNotNormalized +\r\n            \"\\nWeightCounts = [\" +\r\n            usedWeightCounts +\r\n            \"]\" +\r\n            \"\\nNumber of bones = \" +\r\n            numBones +\r\n            \"\\nBad Bone Indices = \" +\r\n            numBadBoneIndices;\r\n\r\n        return { skinned: true, valid: missingWeights === 0 && numberNotNormalized === 0 && numBadBoneIndices === 0, report: output };\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkDelayState(): Mesh {\r\n        const scene = this.getScene();\r\n        if (this._geometry) {\r\n            this._geometry.load(scene);\r\n        } else if (this.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\r\n            this.delayLoadState = Constants.DELAYLOADSTATE_LOADING;\r\n\r\n            this._queueLoad(scene);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private _queueLoad(scene: Scene): Mesh {\r\n        scene.addPendingData(this);\r\n\r\n        const getBinaryData = this.delayLoadingFile.indexOf(\".babylonbinarymeshdata\") !== -1;\r\n\r\n        Tools.LoadFile(\r\n            this.delayLoadingFile,\r\n            (data) => {\r\n                if (data instanceof ArrayBuffer) {\r\n                    this._delayLoadingFunction(data, this);\r\n                } else {\r\n                    this._delayLoadingFunction(JSON.parse(data), this);\r\n                }\r\n\r\n                this.instances.forEach((instance) => {\r\n                    instance.refreshBoundingInfo();\r\n                    instance._syncSubMeshes();\r\n                });\r\n\r\n                this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n                scene.removePendingData(this);\r\n            },\r\n            () => {},\r\n            scene.offlineProvider,\r\n            getBinaryData\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\r\n     * A mesh is in the frustum if its bounding box intersects the frustum\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is in the frustum planes\r\n     */\r\n    public override isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.isInFrustum(frustumPlanes)) {\r\n            return false;\r\n        }\r\n\r\n        this._checkDelayState();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh material by the material or multiMaterial `id` property\r\n     * @param id is a string identifying the material or the multiMaterial\r\n     * @returns the current mesh\r\n     */\r\n    public setMaterialById(id: string): Mesh {\r\n        const materials = this.getScene().materials;\r\n        let index: number;\r\n        for (index = materials.length - 1; index > -1; index--) {\r\n            if (materials[index].id === id) {\r\n                this.material = materials[index];\r\n                return this;\r\n            }\r\n        }\r\n\r\n        // Multi\r\n        const multiMaterials = this.getScene().multiMaterials;\r\n        for (index = multiMaterials.length - 1; index > -1; index--) {\r\n            if (multiMaterials[index].id === id) {\r\n                this.material = multiMaterials[index];\r\n                return this;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns as a new array populated with the mesh material and/or skeleton, if any.\r\n     * @returns an array of IAnimatable\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results: IAnimatable[] = [];\r\n\r\n        if (this.material) {\r\n            results.push(this.material);\r\n        }\r\n\r\n        if (this.skeleton) {\r\n            results.push(this.skeleton);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to the passed transformation matrix.\r\n     * This method returns nothing, but it really modifies the mesh even if it's originally not set as updatable.\r\n     * The mesh normals are modified using the same transformation.\r\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\r\n     * @param transform defines the transform matrix to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\r\n     * @returns the current mesh\r\n     */\r\n    public bakeTransformIntoVertices(transform: Matrix): Mesh {\r\n        // Position\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            return this;\r\n        }\r\n\r\n        const submeshes = this.subMeshes.splice(0);\r\n\r\n        this._resetPointsArrayCache();\r\n\r\n        let data = <FloatArray>this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        const temp = Vector3.Zero();\r\n        let index: number;\r\n        for (index = 0; index < data.length; index += 3) {\r\n            Vector3.TransformCoordinatesFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp).toArray(data, index);\r\n        }\r\n\r\n        this.setVerticesData(VertexBuffer.PositionKind, data, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.PositionKind)).isUpdatable());\r\n\r\n        // Normals\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            data = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n            for (index = 0; index < data.length; index += 3) {\r\n                Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp)\r\n                    .normalize()\r\n                    .toArray(data, index);\r\n            }\r\n            this.setVerticesData(VertexBuffer.NormalKind, data, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.NormalKind)).isUpdatable());\r\n        }\r\n\r\n        // Tangents\r\n        if (this.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            data = <FloatArray>this.getVerticesData(VertexBuffer.TangentKind);\r\n            for (index = 0; index < data.length; index += 4) {\r\n                Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp)\r\n                    .normalize()\r\n                    .toArray(data, index);\r\n            }\r\n            this.setVerticesData(VertexBuffer.TangentKind, data, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.TangentKind)).isUpdatable());\r\n        }\r\n\r\n        // flip faces?\r\n        if (transform.determinant() < 0) {\r\n            this.flipFaces();\r\n        }\r\n\r\n        // Restore submeshes\r\n        this.releaseSubMeshes();\r\n        this.subMeshes = submeshes;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to its own current World Matrix.\r\n     * The mesh World Matrix is then reset.\r\n     * This method returns nothing but really modifies the mesh even if it's originally not set as updatable.\r\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\r\n     * @param bakeIndependentlyOfChildren indicates whether to preserve all child nodes' World Matrix during baking\r\n     * @returns the current mesh\r\n     */\r\n    public bakeCurrentTransformIntoVertices(bakeIndependentlyOfChildren: boolean = true): Mesh {\r\n        this.bakeTransformIntoVertices(this.computeWorldMatrix(true));\r\n        this.resetLocalMatrix(bakeIndependentlyOfChildren);\r\n        return this;\r\n    }\r\n\r\n    // Cache\r\n\r\n    /** @internal */\r\n    public override get _positions(): Nullable<Vector3[]> {\r\n        return this._internalAbstractMeshDataInfo._positions || (this._geometry && this._geometry._positions) || null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _resetPointsArrayCache(): Mesh {\r\n        if (this._geometry) {\r\n            this._geometry._resetPointsArrayCache();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _generatePointsArray(): boolean {\r\n        if (this._geometry) {\r\n            return this._geometry._generatePointsArray();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Mesh object generated from the current mesh properties.\r\n     * This method must not get confused with createInstance()\r\n     * @param name is a string, the name given to the new mesh\r\n     * @param newParent can be any Node object (default `null`) or an instance of MeshCloneOptions. If the latter, doNotCloneChildren and clonePhysicsImpostor are unused.\r\n     * @param doNotCloneChildren allows/denies the recursive cloning of the original mesh children if any (default `false`)\r\n     * @param clonePhysicsImpostor allows/denies the cloning in the same time of the original mesh `body` used by the physics engine, if any (default `true`)\r\n     * @returns a new mesh\r\n     */\r\n    public override clone(name: string = \"\", newParent: Nullable<Node> | MeshCloneOptions = null, doNotCloneChildren?: boolean, clonePhysicsImpostor: boolean = true): Mesh {\r\n        if (newParent && (newParent as Node)._addToSceneRootNodes === undefined) {\r\n            const cloneOptions = newParent as MeshCloneOptions;\r\n\r\n            meshCreationOptions.source = this;\r\n            meshCreationOptions.doNotCloneChildren = cloneOptions.doNotCloneChildren;\r\n            meshCreationOptions.clonePhysicsImpostor = cloneOptions.clonePhysicsImpostor;\r\n            meshCreationOptions.cloneThinInstances = cloneOptions.cloneThinInstances;\r\n\r\n            return new Mesh(name, this.getScene(), meshCreationOptions);\r\n        }\r\n\r\n        return new Mesh(name, this.getScene(), newParent as Nullable<Node>, this, doNotCloneChildren, clonePhysicsImpostor);\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this mesh.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        this.morphTargetManager = null;\r\n\r\n        if (this._geometry) {\r\n            this._geometry.releaseForMesh(this, true);\r\n        }\r\n\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (internalDataInfo._onBeforeDrawObservable) {\r\n            internalDataInfo._onBeforeDrawObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBeforeBindObservable) {\r\n            internalDataInfo._onBeforeBindObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBeforeRenderObservable) {\r\n            internalDataInfo._onBeforeRenderObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onAfterRenderObservable) {\r\n            internalDataInfo._onAfterRenderObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBetweenPassObservable) {\r\n            internalDataInfo._onBetweenPassObservable.clear();\r\n        }\r\n\r\n        // Sources\r\n        if (this._scene.useClonedMeshMap) {\r\n            if (internalDataInfo.meshMap) {\r\n                for (const uniqueId in internalDataInfo.meshMap) {\r\n                    const mesh = internalDataInfo.meshMap[uniqueId];\r\n                    if (mesh) {\r\n                        mesh._internalMeshDataInfo._source = null;\r\n                        internalDataInfo.meshMap[uniqueId] = undefined;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (internalDataInfo._source && internalDataInfo._source._internalMeshDataInfo.meshMap) {\r\n                internalDataInfo._source._internalMeshDataInfo.meshMap[this.uniqueId] = undefined;\r\n            }\r\n        } else {\r\n            const meshes = this.getScene().meshes;\r\n            for (const abstractMesh of meshes) {\r\n                const mesh = abstractMesh as Mesh;\r\n                if (mesh._internalMeshDataInfo && mesh._internalMeshDataInfo._source && mesh._internalMeshDataInfo._source === this) {\r\n                    mesh._internalMeshDataInfo._source = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        internalDataInfo._source = null;\r\n        this._instanceDataStorage.visibleInstances = {};\r\n\r\n        // Instances\r\n        this._disposeInstanceSpecificData();\r\n\r\n        // Thin instances\r\n        this._disposeThinInstanceSpecificData();\r\n\r\n        if (this._internalMeshDataInfo._checkReadinessObserver) {\r\n            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\r\n        }\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeInstanceSpecificData() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeThinInstanceSpecificData() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _invalidateInstanceVertexArrayObject() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to a displacement map.\r\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\r\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\r\n     * @param url is a string, the URL from the image file is to be downloaded.\r\n     * @param minHeight is the lower limit of the displacement.\r\n     * @param maxHeight is the upper limit of the displacement.\r\n     * @param onSuccess is an optional Javascript function to be called just after the mesh is modified. It is passed the modified mesh and must return nothing.\r\n     * @param uvOffset is an optional vector2 used to offset UV.\r\n     * @param uvScale is an optional vector2 used to scale UV.\r\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\r\n     * @param onError defines a callback called when an error occurs during the processing of the request.\r\n     * @returns the Mesh.\r\n     */\r\n    public applyDisplacementMap(\r\n        url: string,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        onSuccess?: (mesh: Mesh) => void,\r\n        uvOffset?: Vector2,\r\n        uvScale?: Vector2,\r\n        forceUpdate = false,\r\n        onError?: (message?: string, exception?: any) => void\r\n    ): Mesh {\r\n        const scene = this.getScene();\r\n\r\n        const onload = (img: HTMLImageElement | ImageBitmap) => {\r\n            // Getting height map data\r\n            const heightMapWidth = img.width;\r\n            const heightMapHeight = img.height;\r\n            const canvas = this.getEngine().createCanvas(heightMapWidth, heightMapHeight);\r\n            const context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n\r\n            context.drawImage(img, 0, 0);\r\n\r\n            // Create VertexData from map data\r\n            //Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\r\n            const buffer = <Uint8Array>(<any>context.getImageData(0, 0, heightMapWidth, heightMapHeight).data);\r\n\r\n            this.applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale, forceUpdate);\r\n            //execute success callback, if set\r\n            if (onSuccess) {\r\n                onSuccess(this);\r\n            }\r\n        };\r\n\r\n        Tools.LoadImage(url, onload, onError ? onError : () => {}, scene.offlineProvider);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to a displacementMap buffer.\r\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\r\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\r\n     * @param buffer is a `Uint8Array` buffer containing series of `Uint8` lower than 255, the red, green, blue and alpha values of each successive pixel.\r\n     * @param heightMapWidth is the width of the buffer image.\r\n     * @param heightMapHeight is the height of the buffer image.\r\n     * @param minHeight is the lower limit of the displacement.\r\n     * @param maxHeight is the upper limit of the displacement.\r\n     * @param uvOffset is an optional vector2 used to offset UV.\r\n     * @param uvScale is an optional vector2 used to scale UV.\r\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\r\n     * @returns the Mesh.\r\n     */\r\n    public applyDisplacementMapFromBuffer(\r\n        buffer: Uint8Array,\r\n        heightMapWidth: number,\r\n        heightMapHeight: number,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        uvOffset?: Vector2,\r\n        uvScale?: Vector2,\r\n        forceUpdate = false\r\n    ): Mesh {\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind) || !this.isVerticesDataPresent(VertexBuffer.NormalKind) || !this.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            Logger.Warn(\"Cannot call applyDisplacementMap: Given mesh is not complete. Position, Normal or UV are missing\");\r\n            return this;\r\n        }\r\n\r\n        const positions = <FloatArray>this.getVerticesData(VertexBuffer.PositionKind, true, true);\r\n        const normals = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n        const uvs = <number[]>this.getVerticesData(VertexBuffer.UVKind);\r\n        let position = Vector3.Zero();\r\n        const normal = Vector3.Zero();\r\n        const uv = Vector2.Zero();\r\n\r\n        uvOffset = uvOffset || Vector2.Zero();\r\n        uvScale = uvScale || new Vector2(1, 1);\r\n\r\n        for (let index = 0; index < positions.length; index += 3) {\r\n            Vector3.FromArrayToRef(positions, index, position);\r\n            Vector3.FromArrayToRef(normals, index, normal);\r\n            Vector2.FromArrayToRef(uvs, (index / 3) * 2, uv);\r\n\r\n            // Compute height\r\n            const u = (Math.abs(uv.x * uvScale.x + (uvOffset.x % 1)) * (heightMapWidth - 1)) % heightMapWidth | 0;\r\n            const v = (Math.abs(uv.y * uvScale.y + (uvOffset.y % 1)) * (heightMapHeight - 1)) % heightMapHeight | 0;\r\n\r\n            const pos = (u + v * heightMapWidth) * 4;\r\n            const r = buffer[pos] / 255.0;\r\n            const g = buffer[pos + 1] / 255.0;\r\n            const b = buffer[pos + 2] / 255.0;\r\n\r\n            const gradient = r * 0.3 + g * 0.59 + b * 0.11;\r\n\r\n            normal.normalize();\r\n            normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);\r\n            position = position.add(normal);\r\n\r\n            position.toArray(positions, index);\r\n        }\r\n\r\n        VertexData.ComputeNormals(positions, this.getIndices(), normals);\r\n\r\n        if (forceUpdate) {\r\n            this.setVerticesData(VertexBuffer.PositionKind, positions);\r\n            this.setVerticesData(VertexBuffer.NormalKind, normals);\r\n            this.setVerticesData(VertexBuffer.UVKind, uvs);\r\n        } else {\r\n            this.updateVerticesData(VertexBuffer.PositionKind, positions);\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normals);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private _getFlattenedNormals(indices: IndicesArray, positions: FloatArray): Float32Array {\r\n        const normals = new Float32Array(indices.length * 3);\r\n        let normalsCount = 0;\r\n\r\n        // Decide if normals should be flipped\r\n        const flipNormalGeneration =\r\n            this.sideOrientation === (this._scene.useRightHandedSystem ? Constants.MATERIAL_CounterClockWiseSideOrientation : Constants.MATERIAL_ClockWiseSideOrientation);\r\n\r\n        // Generate new normals\r\n        for (let index = 0; index < indices.length; index += 3) {\r\n            const p1 = Vector3.FromArray(positions, indices[index] * 3);\r\n            const p2 = Vector3.FromArray(positions, indices[index + 1] * 3);\r\n            const p3 = Vector3.FromArray(positions, indices[index + 2] * 3);\r\n\r\n            const p1p2 = p1.subtract(p2);\r\n            const p3p2 = p3.subtract(p2);\r\n\r\n            const normal = Vector3.Normalize(Vector3.Cross(p1p2, p3p2));\r\n            if (flipNormalGeneration) {\r\n                normal.scaleInPlace(-1);\r\n            }\r\n\r\n            // Store same normals for every vertex\r\n            for (let localIndex = 0; localIndex < 3; localIndex++) {\r\n                normals[normalsCount++] = normal.x;\r\n                normals[normalsCount++] = normal.y;\r\n                normals[normalsCount++] = normal.z;\r\n            }\r\n        }\r\n\r\n        return normals;\r\n    }\r\n\r\n    private _convertToUnIndexedMesh(flattenNormals: boolean = false): Mesh {\r\n        const kinds = this.getVerticesDataKinds().filter((kind) => !this.getVertexBuffer(kind)?.getIsInstanced());\r\n        const indices = this.getIndices()!;\r\n        const data: { [kind: string]: FloatArray } = {};\r\n\r\n        const separateVertices = (data: FloatArray, size: number): Float32Array => {\r\n            const newData = new Float32Array(indices.length * size);\r\n            let count = 0;\r\n            for (let index = 0; index < indices.length; index++) {\r\n                for (let offset = 0; offset < size; offset++) {\r\n                    newData[count++] = data[indices[index] * size + offset];\r\n                }\r\n            }\r\n            return newData;\r\n        };\r\n\r\n        // Save mesh bounding info\r\n        const meshBoundingInfo = this.getBoundingInfo();\r\n\r\n        // Save previous submeshes\r\n        const previousSubmeshes = this.geometry ? this.subMeshes.slice(0) : [];\r\n\r\n        // Cache vertex data\r\n        for (const kind of kinds) {\r\n            data[kind] = this.getVerticesData(kind)!;\r\n        }\r\n\r\n        // Update vertex data\r\n        for (const kind of kinds) {\r\n            const vertexBuffer = this.getVertexBuffer(kind)!;\r\n            const size = vertexBuffer.getSize();\r\n\r\n            if (flattenNormals && kind === VertexBuffer.NormalKind) {\r\n                const normals = this._getFlattenedNormals(indices, data[VertexBuffer.PositionKind]);\r\n                this.setVerticesData(VertexBuffer.NormalKind, normals, vertexBuffer.isUpdatable(), size);\r\n            } else {\r\n                this.setVerticesData(kind, separateVertices(data[kind], size), vertexBuffer.isUpdatable(), size);\r\n            }\r\n        }\r\n\r\n        // Update morph targets\r\n        if (this.morphTargetManager) {\r\n            for (let targetIndex = 0; targetIndex < this.morphTargetManager.numTargets; targetIndex++) {\r\n                const target = this.morphTargetManager.getTarget(targetIndex);\r\n\r\n                const positions = target.getPositions()!;\r\n                target.setPositions(separateVertices(positions, 3));\r\n\r\n                const normals = target.getNormals();\r\n                if (normals) {\r\n                    target.setNormals(flattenNormals ? this._getFlattenedNormals(indices, positions) : separateVertices(normals, 3));\r\n                }\r\n\r\n                const tangents = target.getTangents();\r\n                if (tangents) {\r\n                    target.setTangents(separateVertices(tangents, 3));\r\n                }\r\n\r\n                const uvs = target.getUVs();\r\n                if (uvs) {\r\n                    target.setUVs(separateVertices(uvs, 2));\r\n                }\r\n            }\r\n            this.morphTargetManager.synchronize();\r\n        }\r\n\r\n        // Update indices\r\n        for (let index = 0; index < indices.length; index++) {\r\n            indices[index] = index;\r\n        }\r\n        this.setIndices(indices);\r\n\r\n        this._unIndexed = true;\r\n\r\n        // Update submeshes\r\n        this.releaseSubMeshes();\r\n        for (const previousOne of previousSubmeshes) {\r\n            const boundingInfo = previousOne.getBoundingInfo();\r\n            const subMesh = SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\r\n            subMesh.setBoundingInfo(boundingInfo);\r\n        }\r\n\r\n        this.setBoundingInfo(meshBoundingInfo);\r\n\r\n        this.synchronizeInstances();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modify the mesh to get a flat shading rendering.\r\n     * This means each mesh facet will then have its own normals. Usually new vertices are added in the mesh geometry to get this result.\r\n     * Warning : the mesh is really modified even if not set originally as updatable and, under the hood, a new VertexBuffer is allocated.\r\n     * @returns current mesh\r\n     */\r\n    public convertToFlatShadedMesh(): Mesh {\r\n        return this._convertToUnIndexedMesh(true);\r\n    }\r\n\r\n    /**\r\n     * This method removes all the mesh indices and add new vertices (duplication) in order to unfold facets into buffers.\r\n     * In other words, more vertices, no more indices and a single bigger VBO.\r\n     * The mesh is really modified even if not set originally as updatable. Under the hood, a new VertexBuffer is allocated.\r\n     * @returns current mesh\r\n     */\r\n    public convertToUnIndexedMesh(): Mesh {\r\n        return this._convertToUnIndexedMesh();\r\n    }\r\n\r\n    /**\r\n     * Inverses facet orientations.\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     * @param flipNormals will also inverts the normals\r\n     * @returns current mesh\r\n     */\r\n    public flipFaces(flipNormals: boolean = false): Mesh {\r\n        const vertex_data = VertexData.ExtractFromMesh(this);\r\n        let i: number;\r\n        if (flipNormals && this.isVerticesDataPresent(VertexBuffer.NormalKind) && vertex_data.normals) {\r\n            for (i = 0; i < vertex_data.normals.length; i++) {\r\n                vertex_data.normals[i] *= -1;\r\n            }\r\n            this.setVerticesData(VertexBuffer.NormalKind, vertex_data.normals, this.isVertexBufferUpdatable(VertexBuffer.NormalKind));\r\n        }\r\n\r\n        if (vertex_data.indices) {\r\n            let temp;\r\n            for (i = 0; i < vertex_data.indices.length; i += 3) {\r\n                // reassign indices\r\n                temp = vertex_data.indices[i + 1];\r\n                vertex_data.indices[i + 1] = vertex_data.indices[i + 2];\r\n                vertex_data.indices[i + 2] = temp;\r\n            }\r\n            this.setIndices(vertex_data.indices, null, this.isVertexBufferUpdatable(VertexBuffer.PositionKind), true);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Increase the number of facets and hence vertices in a mesh\r\n     * Vertex normals are interpolated from existing vertex normals\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     * @param numberPerEdge the number of new vertices to add to each edge of a facet, optional default 1\r\n     */\r\n    public increaseVertices(numberPerEdge: number = 1): void {\r\n        const vertex_data = VertexData.ExtractFromMesh(this);\r\n        const currentIndices = vertex_data.indices && !Array.isArray(vertex_data.indices) && Array.from ? Array.from(vertex_data.indices) : vertex_data.indices;\r\n        const positions = vertex_data.positions && !Array.isArray(vertex_data.positions) && Array.from ? Array.from(vertex_data.positions) : vertex_data.positions;\r\n        const uvs = vertex_data.uvs && !Array.isArray(vertex_data.uvs) && Array.from ? Array.from(vertex_data.uvs) : vertex_data.uvs;\r\n        const normals = vertex_data.normals && !Array.isArray(vertex_data.normals) && Array.from ? Array.from(vertex_data.normals) : vertex_data.normals;\r\n\r\n        if (!currentIndices || !positions) {\r\n            Logger.Warn(\"Couldn't increase number of vertices : VertexData must contain at least indices and positions\");\r\n        } else {\r\n            vertex_data.indices = currentIndices;\r\n            vertex_data.positions = positions;\r\n            if (uvs) {\r\n                vertex_data.uvs = uvs;\r\n            }\r\n            if (normals) {\r\n                vertex_data.normals = normals;\r\n            }\r\n\r\n            const segments: number = numberPerEdge + 1; //segments per current facet edge, become sides of new facets\r\n            const tempIndices: Array<Array<number>> = new Array();\r\n            for (let i = 0; i < segments + 1; i++) {\r\n                tempIndices[i] = new Array();\r\n            }\r\n            let a: number; //vertex index of one end of a side\r\n            let b: number; //vertex index of other end of the side\r\n            const deltaPosition: Vector3 = new Vector3(0, 0, 0);\r\n            const deltaNormal: Vector3 = new Vector3(0, 0, 0);\r\n            const deltaUV: Vector2 = new Vector2(0, 0);\r\n            const indices: number[] = new Array();\r\n            const vertexIndex: number[] = new Array();\r\n            const side: Array<Array<Array<number>>> = new Array();\r\n            let len: number;\r\n            let positionPtr: number = positions.length;\r\n            let uvPtr: number;\r\n            if (uvs) {\r\n                uvPtr = uvs.length;\r\n            }\r\n            let normalsPtr: number;\r\n            if (normals) {\r\n                normalsPtr = normals.length;\r\n            }\r\n\r\n            for (let i = 0; i < currentIndices.length; i += 3) {\r\n                vertexIndex[0] = currentIndices[i];\r\n                vertexIndex[1] = currentIndices[i + 1];\r\n                vertexIndex[2] = currentIndices[i + 2];\r\n                for (let j = 0; j < 3; j++) {\r\n                    a = vertexIndex[j];\r\n                    b = vertexIndex[(j + 1) % 3];\r\n                    if (side[a] === undefined && side[b] === undefined) {\r\n                        side[a] = new Array();\r\n                        side[b] = new Array();\r\n                    } else {\r\n                        if (side[a] === undefined) {\r\n                            side[a] = new Array();\r\n                        }\r\n                        if (side[b] === undefined) {\r\n                            side[b] = new Array();\r\n                        }\r\n                    }\r\n                    if (side[a][b] === undefined && side[b][a] === undefined) {\r\n                        side[a][b] = [];\r\n                        deltaPosition.x = (positions[3 * b] - positions[3 * a]) / segments;\r\n                        deltaPosition.y = (positions[3 * b + 1] - positions[3 * a + 1]) / segments;\r\n                        deltaPosition.z = (positions[3 * b + 2] - positions[3 * a + 2]) / segments;\r\n                        if (normals) {\r\n                            deltaNormal.x = (normals[3 * b] - normals[3 * a]) / segments;\r\n                            deltaNormal.y = (normals[3 * b + 1] - normals[3 * a + 1]) / segments;\r\n                            deltaNormal.z = (normals[3 * b + 2] - normals[3 * a + 2]) / segments;\r\n                        }\r\n                        if (uvs) {\r\n                            deltaUV.x = (uvs[2 * b] - uvs[2 * a]) / segments;\r\n                            deltaUV.y = (uvs[2 * b + 1] - uvs[2 * a + 1]) / segments;\r\n                        }\r\n                        side[a][b].push(a);\r\n                        for (let k = 1; k < segments; k++) {\r\n                            side[a][b].push(positions.length / 3);\r\n                            positions[positionPtr++] = positions[3 * a] + k * deltaPosition.x;\r\n                            positions[positionPtr++] = positions[3 * a + 1] + k * deltaPosition.y;\r\n                            positions[positionPtr++] = positions[3 * a + 2] + k * deltaPosition.z;\r\n                            if (normals) {\r\n                                normals[normalsPtr!++] = normals[3 * a] + k * deltaNormal.x;\r\n                                normals[normalsPtr!++] = normals[3 * a + 1] + k * deltaNormal.y;\r\n                                normals[normalsPtr!++] = normals[3 * a + 2] + k * deltaNormal.z;\r\n                            }\r\n                            if (uvs) {\r\n                                uvs[uvPtr!++] = uvs[2 * a] + k * deltaUV.x;\r\n                                uvs[uvPtr!++] = uvs[2 * a + 1] + k * deltaUV.y;\r\n                            }\r\n                        }\r\n                        side[a][b].push(b);\r\n                        side[b][a] = new Array();\r\n                        len = side[a][b].length;\r\n                        for (let idx = 0; idx < len; idx++) {\r\n                            side[b][a][idx] = side[a][b][len - 1 - idx];\r\n                        }\r\n                    }\r\n                }\r\n                //Calculate positions, normals and uvs of new internal vertices\r\n                tempIndices[0][0] = currentIndices[i];\r\n                tempIndices[1][0] = side[currentIndices[i]][currentIndices[i + 1]][1];\r\n                tempIndices[1][1] = side[currentIndices[i]][currentIndices[i + 2]][1];\r\n                for (let k = 2; k < segments; k++) {\r\n                    tempIndices[k][0] = side[currentIndices[i]][currentIndices[i + 1]][k];\r\n                    tempIndices[k][k] = side[currentIndices[i]][currentIndices[i + 2]][k];\r\n                    deltaPosition.x = (positions[3 * tempIndices[k][k]] - positions[3 * tempIndices[k][0]]) / k;\r\n                    deltaPosition.y = (positions[3 * tempIndices[k][k] + 1] - positions[3 * tempIndices[k][0] + 1]) / k;\r\n                    deltaPosition.z = (positions[3 * tempIndices[k][k] + 2] - positions[3 * tempIndices[k][0] + 2]) / k;\r\n                    if (normals) {\r\n                        deltaNormal.x = (normals[3 * tempIndices[k][k]] - normals[3 * tempIndices[k][0]]) / k;\r\n                        deltaNormal.y = (normals[3 * tempIndices[k][k] + 1] - normals[3 * tempIndices[k][0] + 1]) / k;\r\n                        deltaNormal.z = (normals[3 * tempIndices[k][k] + 2] - normals[3 * tempIndices[k][0] + 2]) / k;\r\n                    }\r\n                    if (uvs) {\r\n                        deltaUV.x = (uvs[2 * tempIndices[k][k]] - uvs[2 * tempIndices[k][0]]) / k;\r\n                        deltaUV.y = (uvs[2 * tempIndices[k][k] + 1] - uvs[2 * tempIndices[k][0] + 1]) / k;\r\n                    }\r\n                    for (let j = 1; j < k; j++) {\r\n                        tempIndices[k][j] = positions.length / 3;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0]] + j * deltaPosition.x;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 1] + j * deltaPosition.y;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 2] + j * deltaPosition.z;\r\n                        if (normals) {\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0]] + j * deltaNormal.x;\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0] + 1] + j * deltaNormal.y;\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0] + 2] + j * deltaNormal.z;\r\n                        }\r\n                        if (uvs) {\r\n                            uvs[uvPtr!++] = uvs[2 * tempIndices[k][0]] + j * deltaUV.x;\r\n                            uvs[uvPtr!++] = uvs[2 * tempIndices[k][0] + 1] + j * deltaUV.y;\r\n                        }\r\n                    }\r\n                }\r\n                tempIndices[segments] = side[currentIndices[i + 1]][currentIndices[i + 2]];\r\n\r\n                // reform indices\r\n                indices.push(tempIndices[0][0], tempIndices[1][0], tempIndices[1][1]);\r\n                for (let k = 1; k < segments; k++) {\r\n                    let j: number;\r\n                    for (j = 0; j < k; j++) {\r\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\r\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j + 1], tempIndices[k][j + 1]);\r\n                    }\r\n                    indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\r\n                }\r\n            }\r\n\r\n            vertex_data.indices = indices;\r\n            vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force adjacent facets to share vertices and remove any facets that have all vertices in a line\r\n     * This will undo any application of covertToFlatShadedMesh\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     */\r\n    public forceSharedVertices(): void {\r\n        const vertex_data = VertexData.ExtractFromMesh(this);\r\n        const currentUVs = vertex_data.uvs;\r\n        const currentIndices = vertex_data.indices;\r\n        const currentPositions = vertex_data.positions;\r\n        const currentColors = vertex_data.colors;\r\n        const currentMatrixIndices = vertex_data.matricesIndices;\r\n        const currentMatrixWeights = vertex_data.matricesWeights;\r\n        const currentMatrixIndicesExtra = vertex_data.matricesIndicesExtra;\r\n        const currentMatrixWeightsExtra = vertex_data.matricesWeightsExtra;\r\n\r\n        if (currentIndices === void 0 || currentPositions === void 0 || currentIndices === null || currentPositions === null) {\r\n            Logger.Warn(\"VertexData contains empty entries\");\r\n        } else {\r\n            const positions: Array<number> = new Array();\r\n            const indices: Array<number> = new Array();\r\n            const uvs: Array<number> = new Array();\r\n            const colors: Array<number> = new Array();\r\n            const matrixIndices: Array<number> = new Array();\r\n            const matrixWeights: Array<number> = new Array();\r\n            const matrixIndicesExtra: Array<number> = new Array();\r\n            const matrixWeightsExtra: Array<number> = new Array();\r\n            let pstring: Array<string> = new Array(); //lists facet vertex positions (a,b,c) as string \"a|b|c\"\r\n\r\n            let indexPtr: number = 0; // pointer to next available index value\r\n            const uniquePositions: { [key: string]: number } = {}; // unique vertex positions\r\n            let ptr: number; // pointer to element in uniquePositions\r\n            let facet: Array<number>;\r\n\r\n            for (let i = 0; i < currentIndices.length; i += 3) {\r\n                facet = [currentIndices[i], currentIndices[i + 1], currentIndices[i + 2]]; //facet vertex indices\r\n                pstring = [];\r\n                for (let j = 0; j < 3; j++) {\r\n                    pstring[j] = \"\";\r\n                    for (let k = 0; k < 3; k++) {\r\n                        //small values make 0\r\n                        if (Math.abs(currentPositions[3 * facet[j] + k]) < 0.00000001) {\r\n                            currentPositions[3 * facet[j] + k] = 0;\r\n                        }\r\n                        pstring[j] += currentPositions[3 * facet[j] + k] + \"|\";\r\n                    }\r\n                }\r\n                //check facet vertices to see that none are repeated\r\n                // do not process any facet that has a repeated vertex, ie is a line\r\n                if (!(pstring[0] == pstring[1] || pstring[0] == pstring[2] || pstring[1] == pstring[2])) {\r\n                    //for each facet position check if already listed in uniquePositions\r\n                    // if not listed add to uniquePositions and set index pointer\r\n                    // if listed use its index in uniquePositions and new index pointer\r\n                    for (let j = 0; j < 3; j++) {\r\n                        ptr = uniquePositions[pstring[j]];\r\n                        if (ptr === undefined) {\r\n                            uniquePositions[pstring[j]] = indexPtr;\r\n                            ptr = indexPtr++;\r\n                            //not listed so add individual x, y, z coordinates to positions\r\n                            for (let k = 0; k < 3; k++) {\r\n                                positions.push(currentPositions[3 * facet[j] + k]);\r\n                            }\r\n                            if (currentColors !== null && currentColors !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    colors.push(currentColors[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentUVs !== null && currentUVs !== void 0) {\r\n                                for (let k = 0; k < 2; k++) {\r\n                                    uvs.push(currentUVs[2 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixIndices.push(currentMatrixIndices[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixWeights.push(currentMatrixWeights[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixIndicesExtra.push(currentMatrixIndicesExtra[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixWeightsExtra !== null && currentMatrixWeightsExtra !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixWeightsExtra.push(currentMatrixWeightsExtra[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                        }\r\n                        // add new index pointer to indices array\r\n                        indices.push(ptr);\r\n                    }\r\n                }\r\n            }\r\n\r\n            const normals: Array<number> = new Array();\r\n            VertexData.ComputeNormals(positions, indices, normals);\r\n\r\n            //create new vertex data object and update\r\n            vertex_data.positions = positions;\r\n            vertex_data.indices = indices;\r\n            vertex_data.normals = normals;\r\n            if (currentUVs !== null && currentUVs !== void 0) {\r\n                vertex_data.uvs = uvs;\r\n            }\r\n            if (currentColors !== null && currentColors !== void 0) {\r\n                vertex_data.colors = colors;\r\n            }\r\n            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\r\n                vertex_data.matricesIndices = matrixIndices;\r\n            }\r\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                vertex_data.matricesWeights = matrixWeights;\r\n            }\r\n            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\r\n                vertex_data.matricesIndicesExtra = matrixIndicesExtra;\r\n            }\r\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                vertex_data.matricesWeightsExtra = matrixWeightsExtra;\r\n            }\r\n\r\n            vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\r\n        }\r\n    }\r\n\r\n    // Instances\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/naming-convention\r\n    public static _instancedMeshFactory(name: string, mesh: Mesh): InstancedMesh {\r\n        throw _WarnImport(\"InstancedMesh\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _PhysicsImpostorParser(scene: Scene, physicObject: IPhysicsEnabledObject, jsonObject: any): PhysicsImpostor {\r\n        throw _WarnImport(\"PhysicsImpostor\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedMesh object from the mesh model.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     * @param name defines the name of the new instance\r\n     * @returns a new InstancedMesh\r\n     */\r\n    public createInstance(name: string): InstancedMesh {\r\n        const instance = Mesh._instancedMeshFactory(name, this);\r\n\r\n        instance.parent = this.parent;\r\n\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Synchronises all the mesh instance submeshes to the current mesh submeshes, if any.\r\n     * After this call, all the mesh instances have the same submeshes than the current mesh.\r\n     * @returns the current mesh\r\n     */\r\n    public synchronizeInstances(): Mesh {\r\n        for (let instanceIndex = 0; instanceIndex < this.instances.length; instanceIndex++) {\r\n            const instance = this.instances[instanceIndex];\r\n            instance._syncSubMeshes();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Optimization of the mesh's indices, in case a mesh has duplicated vertices.\r\n     * The function will only reorder the indices and will not remove unused vertices to avoid problems with submeshes.\r\n     * This should be used together with the simplification to avoid disappearing triangles.\r\n     * @param successCallback an optional success callback to be called after the optimization finished.\r\n     * @returns the current mesh\r\n     */\r\n    public optimizeIndices(successCallback?: (mesh?: Mesh) => void): Mesh {\r\n        const indices = <IndicesArray>this.getIndices();\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!positions || !indices) {\r\n            return this;\r\n        }\r\n\r\n        const vectorPositions: Vector3[] = [];\r\n        for (let pos = 0; pos < positions.length; pos = pos + 3) {\r\n            vectorPositions.push(Vector3.FromArray(positions, pos));\r\n        }\r\n        const dupes: number[] = [];\r\n\r\n        AsyncLoop.SyncAsyncForLoop(\r\n            vectorPositions.length,\r\n            40,\r\n            (iteration) => {\r\n                const realPos = vectorPositions.length - 1 - iteration;\r\n                const testedPosition = vectorPositions[realPos];\r\n                for (let j = 0; j < realPos; ++j) {\r\n                    const againstPosition = vectorPositions[j];\r\n                    if (testedPosition.equals(againstPosition)) {\r\n                        dupes[realPos] = j;\r\n                        break;\r\n                    }\r\n                }\r\n            },\r\n            () => {\r\n                for (let i = 0; i < indices.length; ++i) {\r\n                    indices[i] = dupes[indices[i]] || indices[i];\r\n                }\r\n\r\n                //indices are now reordered\r\n                const originalSubMeshes = this.subMeshes.slice(0);\r\n                this.setIndices(indices);\r\n                this.subMeshes = originalSubMeshes;\r\n                if (successCallback) {\r\n                    successCallback(this);\r\n                }\r\n            }\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serialize current mesh\r\n     * @param serializationObject defines the object which will receive the serialization data\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(serializationObject: any = {}): any {\r\n        serializationObject.name = this.name;\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.type = this.getClassName();\r\n\r\n        if (Tags && Tags.HasTags(this)) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n\r\n        serializationObject.position = this.position.asArray();\r\n\r\n        if (this.rotationQuaternion) {\r\n            serializationObject.rotationQuaternion = this.rotationQuaternion.asArray();\r\n        } else if (this.rotation) {\r\n            serializationObject.rotation = this.rotation.asArray();\r\n        }\r\n\r\n        serializationObject.scaling = this.scaling.asArray();\r\n        if (this._postMultiplyPivotMatrix) {\r\n            serializationObject.pivotMatrix = this.getPivotMatrix().asArray();\r\n        } else {\r\n            serializationObject.localMatrix = this.getPivotMatrix().asArray();\r\n        }\r\n\r\n        serializationObject.isEnabled = this.isEnabled(false);\r\n        serializationObject.isVisible = this.isVisible;\r\n        serializationObject.infiniteDistance = this.infiniteDistance;\r\n        serializationObject.pickable = this.isPickable;\r\n\r\n        serializationObject.receiveShadows = this.receiveShadows;\r\n\r\n        serializationObject.billboardMode = this.billboardMode;\r\n        serializationObject.visibility = this.visibility;\r\n        serializationObject.alwaysSelectAsActiveMesh = this.alwaysSelectAsActiveMesh;\r\n\r\n        serializationObject.checkCollisions = this.checkCollisions;\r\n        serializationObject.ellipsoid = this.ellipsoid.asArray();\r\n        serializationObject.ellipsoidOffset = this.ellipsoidOffset.asArray();\r\n        serializationObject.doNotSyncBoundingInfo = this.doNotSyncBoundingInfo;\r\n        serializationObject.isBlocker = this.isBlocker;\r\n        serializationObject.sideOrientation = this.sideOrientation;\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        // Geometry\r\n        serializationObject.isUnIndexed = this.isUnIndexed;\r\n        const geometry = this._geometry;\r\n        if (geometry && this.subMeshes) {\r\n            serializationObject.geometryUniqueId = geometry.uniqueId;\r\n            serializationObject.geometryId = geometry.id;\r\n\r\n            // SubMeshes\r\n            serializationObject.subMeshes = [];\r\n            for (let subIndex = 0; subIndex < this.subMeshes.length; subIndex++) {\r\n                const subMesh = this.subMeshes[subIndex];\r\n\r\n                serializationObject.subMeshes.push({\r\n                    materialIndex: subMesh.materialIndex,\r\n                    verticesStart: subMesh.verticesStart,\r\n                    verticesCount: subMesh.verticesCount,\r\n                    indexStart: subMesh.indexStart,\r\n                    indexCount: subMesh.indexCount,\r\n                });\r\n            }\r\n        }\r\n\r\n        // Material\r\n        if (this.material) {\r\n            if (!this.material.doNotSerialize) {\r\n                serializationObject.materialUniqueId = this.material.uniqueId;\r\n                serializationObject.materialId = this.material.id; // back compat\r\n            }\r\n        } else {\r\n            this.material = null;\r\n            serializationObject.materialUniqueId = this._scene.defaultMaterial.uniqueId;\r\n            serializationObject.materialId = this._scene.defaultMaterial.id; // back compat\r\n        }\r\n\r\n        // Morph targets\r\n        if (this.morphTargetManager) {\r\n            serializationObject.morphTargetManagerId = this.morphTargetManager.uniqueId;\r\n        }\r\n\r\n        // Skeleton\r\n        if (this.skeleton) {\r\n            serializationObject.skeletonId = this.skeleton.id;\r\n            serializationObject.numBoneInfluencers = this.numBoneInfluencers;\r\n        }\r\n\r\n        // Physics\r\n        //TODO implement correct serialization for physics impostors.\r\n        if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\r\n            const impostor = this.getPhysicsImpostor();\r\n            if (impostor) {\r\n                serializationObject.physicsMass = impostor.getParam(\"mass\");\r\n                serializationObject.physicsFriction = impostor.getParam(\"friction\");\r\n                serializationObject.physicsRestitution = impostor.getParam(\"mass\");\r\n                serializationObject.physicsImpostor = impostor.type;\r\n            }\r\n        }\r\n\r\n        // Metadata\r\n        if (this.metadata) {\r\n            serializationObject.metadata = this.metadata;\r\n        }\r\n\r\n        // Instances\r\n        serializationObject.instances = [];\r\n        for (let index = 0; index < this.instances.length; index++) {\r\n            const instance = this.instances[index];\r\n            if (instance.doNotSerialize) {\r\n                continue;\r\n            }\r\n\r\n            const serializationInstance: any = {\r\n                name: instance.name,\r\n                id: instance.id,\r\n                isEnabled: instance.isEnabled(false),\r\n                isVisible: instance.isVisible,\r\n                isPickable: instance.isPickable,\r\n                checkCollisions: instance.checkCollisions,\r\n                position: instance.position.asArray(),\r\n                scaling: instance.scaling.asArray(),\r\n            };\r\n\r\n            if (instance.parent) {\r\n                instance.parent._serializeAsParent(serializationInstance);\r\n            }\r\n\r\n            if (instance.rotationQuaternion) {\r\n                serializationInstance.rotationQuaternion = instance.rotationQuaternion.asArray();\r\n            } else if (instance.rotation) {\r\n                serializationInstance.rotation = instance.rotation.asArray();\r\n            }\r\n\r\n            // Physics\r\n            //TODO implement correct serialization for physics impostors.\r\n            if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\r\n                const impostor = instance.getPhysicsImpostor();\r\n                if (impostor) {\r\n                    serializationInstance.physicsMass = impostor.getParam(\"mass\");\r\n                    serializationInstance.physicsFriction = impostor.getParam(\"friction\");\r\n                    serializationInstance.physicsRestitution = impostor.getParam(\"mass\");\r\n                    serializationInstance.physicsImpostor = impostor.type;\r\n                }\r\n            }\r\n\r\n            // Metadata\r\n            if (instance.metadata) {\r\n                serializationInstance.metadata = instance.metadata;\r\n            }\r\n\r\n            // Action Manager\r\n            if (instance.actionManager) {\r\n                serializationInstance.actions = instance.actionManager.serialize(instance.name);\r\n            }\r\n\r\n            serializationObject.instances.push(serializationInstance);\r\n\r\n            // Animations\r\n            SerializationHelper.AppendSerializedAnimations(instance, serializationInstance);\r\n            serializationInstance.ranges = instance.serializeAnimationRanges();\r\n        }\r\n\r\n        // Thin instances\r\n        if (this._thinInstanceDataStorage.instancesCount && this._thinInstanceDataStorage.matrixData) {\r\n            serializationObject.thinInstances = {\r\n                instancesCount: this._thinInstanceDataStorage.instancesCount,\r\n                matrixData: Array.from(this._thinInstanceDataStorage.matrixData),\r\n                matrixBufferSize: this._thinInstanceDataStorage.matrixBufferSize,\r\n                enablePicking: this.thinInstanceEnablePicking,\r\n            };\r\n\r\n            if (this._userThinInstanceBuffersStorage) {\r\n                const userThinInstance: any = {\r\n                    data: {},\r\n                    sizes: {},\r\n                    strides: {},\r\n                };\r\n\r\n                for (const kind in this._userThinInstanceBuffersStorage.data) {\r\n                    userThinInstance.data[kind] = Array.from(this._userThinInstanceBuffersStorage.data[kind]);\r\n                    userThinInstance.sizes[kind] = this._userThinInstanceBuffersStorage.sizes[kind];\r\n                    userThinInstance.strides[kind] = this._userThinInstanceBuffersStorage.strides[kind];\r\n                }\r\n\r\n                serializationObject.thinInstances.userThinInstance = userThinInstance;\r\n            }\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        // Layer mask\r\n        serializationObject.layerMask = this.layerMask;\r\n\r\n        // Alpha\r\n        serializationObject.alphaIndex = this.alphaIndex;\r\n        serializationObject.hasVertexAlpha = this.hasVertexAlpha;\r\n\r\n        // Overlay\r\n        serializationObject.overlayAlpha = this.overlayAlpha;\r\n        serializationObject.overlayColor = this.overlayColor.asArray();\r\n        serializationObject.renderOverlay = this.renderOverlay;\r\n\r\n        // Fog\r\n        serializationObject.applyFog = this.applyFog;\r\n\r\n        // Action Manager\r\n        if (this.actionManager) {\r\n            serializationObject.actions = this.actionManager.serialize(this.name);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _syncGeometryWithMorphTargetManager() {\r\n        if (!this.geometry) {\r\n            return;\r\n        }\r\n\r\n        this._markSubMeshesAsAttributesDirty();\r\n\r\n        const morphTargetManager = this._internalAbstractMeshDataInfo._morphTargetManager;\r\n        if (morphTargetManager && morphTargetManager.vertexCount) {\r\n            if (morphTargetManager.vertexCount !== this.getTotalVertices()) {\r\n                Logger.Error(\"Mesh is incompatible with morph targets. Targets and mesh must all have the same vertices count.\");\r\n                this.morphTargetManager = null;\r\n                return;\r\n            }\r\n\r\n            if (morphTargetManager.isUsingTextureForTargets) {\r\n                return;\r\n            }\r\n\r\n            for (let index = 0; index < morphTargetManager.numInfluencers; index++) {\r\n                const morphTarget = morphTargetManager.getActiveTarget(index);\r\n\r\n                const positions = morphTarget.getPositions();\r\n                if (!positions) {\r\n                    Logger.Error(\"Invalid morph target. Target must have positions.\");\r\n                    return;\r\n                }\r\n\r\n                this.geometry.setVerticesData(VertexBuffer.PositionKind + index, positions, false, 3);\r\n\r\n                const normals = morphTarget.getNormals();\r\n                if (normals) {\r\n                    this.geometry.setVerticesData(VertexBuffer.NormalKind + index, normals, false, 3);\r\n                }\r\n\r\n                const tangents = morphTarget.getTangents();\r\n                if (tangents) {\r\n                    this.geometry.setVerticesData(VertexBuffer.TangentKind + index, tangents, false, 3);\r\n                }\r\n\r\n                const uvs = morphTarget.getUVs();\r\n                if (uvs) {\r\n                    this.geometry.setVerticesData(VertexBuffer.UVKind + \"_\" + index, uvs, false, 2);\r\n                }\r\n\r\n                const uv2s = morphTarget.getUV2s();\r\n                if (uv2s) {\r\n                    this.geometry.setVerticesData(VertexBuffer.UV2Kind + \"_\" + index, uv2s, false, 2);\r\n                }\r\n            }\r\n        } else {\r\n            let index = 0;\r\n\r\n            // Positions\r\n            while (this.geometry.isVerticesDataPresent(VertexBuffer.PositionKind + index)) {\r\n                this.geometry.removeVerticesData(VertexBuffer.PositionKind + index);\r\n\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.NormalKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.NormalKind + index);\r\n                }\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.TangentKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.TangentKind + index);\r\n                }\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.UVKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.UVKind + \"_\" + index);\r\n                }\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.UV2Kind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.UV2Kind + \"_\" + index);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GroundMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"GroundMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GoldbergMeshParser = (parsedMesh: any, scene: Scene): GoldbergMesh => {\r\n        throw _WarnImport(\"GoldbergMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _LinesMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"LinesMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GreasedLineMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"GreasedLineMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GreasedLineRibbonMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"GreasedLineRibbonMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _TrailMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"TrailMesh\");\r\n    };\r\n\r\n    /**\r\n     * Returns a new Mesh object parsed from the source provided.\r\n     * @param parsedMesh is the source\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl is the root URL to prefix the `delayLoadingFile` property with\r\n     * @returns a new Mesh\r\n     */\r\n    public static override Parse(parsedMesh: any, scene: Scene, rootUrl: string): Mesh {\r\n        let mesh: Mesh;\r\n\r\n        if (parsedMesh.type && parsedMesh.type === \"LinesMesh\") {\r\n            mesh = Mesh._LinesMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GroundMesh\") {\r\n            mesh = Mesh._GroundMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GoldbergMesh\") {\r\n            mesh = Mesh._GoldbergMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GreasedLineMesh\") {\r\n            mesh = Mesh._GreasedLineMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"TrailMesh\") {\r\n            mesh = Mesh._TrailMeshParser(parsedMesh, scene);\r\n        } else {\r\n            mesh = new Mesh(parsedMesh.name, scene);\r\n        }\r\n        mesh.id = parsedMesh.id;\r\n        mesh._waitingParsedUniqueId = parsedMesh.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(mesh, parsedMesh.tags);\r\n        }\r\n\r\n        mesh.position = Vector3.FromArray(parsedMesh.position);\r\n\r\n        if (parsedMesh.metadata !== undefined) {\r\n            mesh.metadata = parsedMesh.metadata;\r\n        }\r\n\r\n        if (parsedMesh.rotationQuaternion) {\r\n            mesh.rotationQuaternion = Quaternion.FromArray(parsedMesh.rotationQuaternion);\r\n        } else if (parsedMesh.rotation) {\r\n            mesh.rotation = Vector3.FromArray(parsedMesh.rotation);\r\n        }\r\n\r\n        mesh.scaling = Vector3.FromArray(parsedMesh.scaling);\r\n\r\n        if (parsedMesh.localMatrix) {\r\n            mesh.setPreTransformMatrix(Matrix.FromArray(parsedMesh.localMatrix));\r\n        } else if (parsedMesh.pivotMatrix) {\r\n            mesh.setPivotMatrix(Matrix.FromArray(parsedMesh.pivotMatrix));\r\n        }\r\n\r\n        mesh.setEnabled(parsedMesh.isEnabled);\r\n        mesh.isVisible = parsedMesh.isVisible;\r\n        mesh.infiniteDistance = parsedMesh.infiniteDistance;\r\n        mesh.alwaysSelectAsActiveMesh = !!parsedMesh.alwaysSelectAsActiveMesh;\r\n\r\n        mesh.showBoundingBox = parsedMesh.showBoundingBox;\r\n        mesh.showSubMeshesBoundingBox = parsedMesh.showSubMeshesBoundingBox;\r\n\r\n        if (parsedMesh.applyFog !== undefined) {\r\n            mesh.applyFog = parsedMesh.applyFog;\r\n        }\r\n\r\n        if (parsedMesh.pickable !== undefined) {\r\n            mesh.isPickable = parsedMesh.pickable;\r\n        }\r\n\r\n        if (parsedMesh.alphaIndex !== undefined) {\r\n            mesh.alphaIndex = parsedMesh.alphaIndex;\r\n        }\r\n\r\n        mesh.receiveShadows = parsedMesh.receiveShadows;\r\n\r\n        if (parsedMesh.billboardMode !== undefined) {\r\n            mesh.billboardMode = parsedMesh.billboardMode;\r\n        }\r\n\r\n        if (parsedMesh.visibility !== undefined) {\r\n            mesh.visibility = parsedMesh.visibility;\r\n        }\r\n\r\n        mesh.checkCollisions = parsedMesh.checkCollisions;\r\n        mesh.doNotSyncBoundingInfo = !!parsedMesh.doNotSyncBoundingInfo;\r\n\r\n        if (parsedMesh.ellipsoid) {\r\n            mesh.ellipsoid = Vector3.FromArray(parsedMesh.ellipsoid);\r\n        }\r\n\r\n        if (parsedMesh.ellipsoidOffset) {\r\n            mesh.ellipsoidOffset = Vector3.FromArray(parsedMesh.ellipsoidOffset);\r\n        }\r\n\r\n        // For Backward compatibility (\"!=\" to exclude null and undefined)\r\n        if (parsedMesh.overrideMaterialSideOrientation != null) {\r\n            mesh.sideOrientation = parsedMesh.overrideMaterialSideOrientation;\r\n        }\r\n\r\n        if (parsedMesh.sideOrientation !== undefined) {\r\n            mesh.sideOrientation = parsedMesh.sideOrientation;\r\n        }\r\n\r\n        if (parsedMesh.isBlocker !== undefined) {\r\n            mesh.isBlocker = parsedMesh.isBlocker;\r\n        }\r\n\r\n        mesh._shouldGenerateFlatShading = parsedMesh.useFlatShading;\r\n\r\n        // freezeWorldMatrix\r\n        if (parsedMesh.freezeWorldMatrix) {\r\n            mesh._waitingData.freezeWorldMatrix = parsedMesh.freezeWorldMatrix;\r\n        }\r\n\r\n        // Parent\r\n        if (parsedMesh.parentId !== undefined) {\r\n            mesh._waitingParentId = parsedMesh.parentId;\r\n        }\r\n\r\n        if (parsedMesh.parentInstanceIndex !== undefined) {\r\n            mesh._waitingParentInstanceIndex = parsedMesh.parentInstanceIndex;\r\n        }\r\n\r\n        // Actions\r\n        if (parsedMesh.actions !== undefined) {\r\n            mesh._waitingData.actions = parsedMesh.actions;\r\n        }\r\n\r\n        // Overlay\r\n        if (parsedMesh.overlayAlpha !== undefined) {\r\n            mesh.overlayAlpha = parsedMesh.overlayAlpha;\r\n        }\r\n\r\n        if (parsedMesh.overlayColor !== undefined) {\r\n            mesh.overlayColor = Color3.FromArray(parsedMesh.overlayColor);\r\n        }\r\n\r\n        if (parsedMesh.renderOverlay !== undefined) {\r\n            mesh.renderOverlay = parsedMesh.renderOverlay;\r\n        }\r\n\r\n        // Geometry\r\n        mesh.isUnIndexed = !!parsedMesh.isUnIndexed;\r\n        mesh.hasVertexAlpha = parsedMesh.hasVertexAlpha;\r\n\r\n        if (parsedMesh.delayLoadingFile) {\r\n            mesh.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            mesh.delayLoadingFile = rootUrl + parsedMesh.delayLoadingFile;\r\n            mesh.buildBoundingInfo(Vector3.FromArray(parsedMesh.boundingBoxMinimum), Vector3.FromArray(parsedMesh.boundingBoxMaximum));\r\n\r\n            if (parsedMesh._binaryInfo) {\r\n                mesh._binaryInfo = parsedMesh._binaryInfo;\r\n            }\r\n\r\n            mesh._delayInfo = [];\r\n            if (parsedMesh.hasUVs) {\r\n                mesh._delayInfo.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs2) {\r\n                mesh._delayInfo.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs3) {\r\n                mesh._delayInfo.push(VertexBuffer.UV3Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs4) {\r\n                mesh._delayInfo.push(VertexBuffer.UV4Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs5) {\r\n                mesh._delayInfo.push(VertexBuffer.UV5Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs6) {\r\n                mesh._delayInfo.push(VertexBuffer.UV6Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasColors) {\r\n                mesh._delayInfo.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (parsedMesh.hasMatricesIndices) {\r\n                mesh._delayInfo.push(VertexBuffer.MatricesIndicesKind);\r\n            }\r\n\r\n            if (parsedMesh.hasMatricesWeights) {\r\n                mesh._delayInfo.push(VertexBuffer.MatricesWeightsKind);\r\n            }\r\n\r\n            mesh._delayLoadingFunction = Geometry._ImportGeometry;\r\n\r\n            if (SceneLoaderFlags.ForceFullSceneLoadingForIncremental) {\r\n                mesh._checkDelayState();\r\n            }\r\n        } else {\r\n            Geometry._ImportGeometry(parsedMesh, mesh);\r\n        }\r\n\r\n        // Material\r\n        if (parsedMesh.materialUniqueId) {\r\n            mesh._waitingMaterialId = parsedMesh.materialUniqueId;\r\n        } else if (parsedMesh.materialId) {\r\n            mesh._waitingMaterialId = parsedMesh.materialId;\r\n        }\r\n\r\n        // Morph targets\r\n        if (parsedMesh.morphTargetManagerId > -1) {\r\n            mesh._waitingMorphTargetManagerId = parsedMesh.morphTargetManagerId;\r\n        }\r\n\r\n        // Skeleton\r\n        if (parsedMesh.skeletonId !== undefined && parsedMesh.skeletonId !== null) {\r\n            mesh.skeleton = scene.getLastSkeletonById(parsedMesh.skeletonId);\r\n            if (parsedMesh.numBoneInfluencers) {\r\n                mesh.numBoneInfluencers = parsedMesh.numBoneInfluencers;\r\n            }\r\n        }\r\n\r\n        // Animations\r\n        if (parsedMesh.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedMesh.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedMesh.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    mesh.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(mesh, parsedMesh, scene);\r\n        }\r\n\r\n        if (parsedMesh.autoAnimate) {\r\n            scene.beginAnimation(mesh, parsedMesh.autoAnimateFrom, parsedMesh.autoAnimateTo, parsedMesh.autoAnimateLoop, parsedMesh.autoAnimateSpeed || 1.0);\r\n        }\r\n\r\n        // Layer Mask\r\n        if (parsedMesh.layerMask && !isNaN(parsedMesh.layerMask)) {\r\n            mesh.layerMask = Math.abs(parseInt(parsedMesh.layerMask));\r\n        } else {\r\n            mesh.layerMask = 0x0fffffff;\r\n        }\r\n\r\n        // Physics\r\n        if (parsedMesh.physicsImpostor) {\r\n            mesh.physicsImpostor = Mesh._PhysicsImpostorParser(scene, mesh, parsedMesh);\r\n        }\r\n\r\n        // Levels\r\n        if (parsedMesh.lodMeshIds) {\r\n            mesh._waitingData.lods = {\r\n                ids: parsedMesh.lodMeshIds,\r\n                distances: parsedMesh.lodDistances ? parsedMesh.lodDistances : null,\r\n                coverages: parsedMesh.lodCoverages ? parsedMesh.lodCoverages : null,\r\n            };\r\n        }\r\n\r\n        // Instances\r\n        if (parsedMesh.instances) {\r\n            for (let index = 0; index < parsedMesh.instances.length; index++) {\r\n                const parsedInstance = parsedMesh.instances[index];\r\n                const instance = mesh.createInstance(parsedInstance.name);\r\n\r\n                if (parsedInstance.id) {\r\n                    instance.id = parsedInstance.id;\r\n                }\r\n\r\n                if (Tags) {\r\n                    if (parsedInstance.tags) {\r\n                        Tags.AddTagsTo(instance, parsedInstance.tags);\r\n                    } else {\r\n                        Tags.AddTagsTo(instance, parsedMesh.tags);\r\n                    }\r\n                }\r\n\r\n                instance.position = Vector3.FromArray(parsedInstance.position);\r\n\r\n                if (parsedInstance.metadata !== undefined) {\r\n                    instance.metadata = parsedInstance.metadata;\r\n                }\r\n\r\n                if (parsedInstance.parentId !== undefined) {\r\n                    instance._waitingParentId = parsedInstance.parentId;\r\n                }\r\n\r\n                if (parsedInstance.parentInstanceIndex !== undefined) {\r\n                    instance._waitingParentInstanceIndex = parsedInstance.parentInstanceIndex;\r\n                }\r\n\r\n                if (parsedInstance.isEnabled !== undefined && parsedInstance.isEnabled !== null) {\r\n                    instance.setEnabled(parsedInstance.isEnabled);\r\n                }\r\n\r\n                if (parsedInstance.isVisible !== undefined && parsedInstance.isVisible !== null) {\r\n                    instance.isVisible = parsedInstance.isVisible;\r\n                }\r\n\r\n                if (parsedInstance.isPickable !== undefined && parsedInstance.isPickable !== null) {\r\n                    instance.isPickable = parsedInstance.isPickable;\r\n                }\r\n\r\n                if (parsedInstance.rotationQuaternion) {\r\n                    instance.rotationQuaternion = Quaternion.FromArray(parsedInstance.rotationQuaternion);\r\n                } else if (parsedInstance.rotation) {\r\n                    instance.rotation = Vector3.FromArray(parsedInstance.rotation);\r\n                }\r\n\r\n                instance.scaling = Vector3.FromArray(parsedInstance.scaling);\r\n\r\n                if (parsedInstance.checkCollisions != undefined && parsedInstance.checkCollisions != null) {\r\n                    instance.checkCollisions = parsedInstance.checkCollisions;\r\n                }\r\n                if (parsedInstance.pickable != undefined && parsedInstance.pickable != null) {\r\n                    instance.isPickable = parsedInstance.pickable;\r\n                }\r\n                if (parsedInstance.showBoundingBox != undefined && parsedInstance.showBoundingBox != null) {\r\n                    instance.showBoundingBox = parsedInstance.showBoundingBox;\r\n                }\r\n                if (parsedInstance.showSubMeshesBoundingBox != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\r\n                    instance.showSubMeshesBoundingBox = parsedInstance.showSubMeshesBoundingBox;\r\n                }\r\n                if (parsedInstance.alphaIndex != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\r\n                    instance.alphaIndex = parsedInstance.alphaIndex;\r\n                }\r\n\r\n                // Physics\r\n                if (parsedInstance.physicsImpostor) {\r\n                    instance.physicsImpostor = Mesh._PhysicsImpostorParser(scene, instance, parsedInstance);\r\n                }\r\n\r\n                // Actions\r\n                if (parsedInstance.actions !== undefined) {\r\n                    instance._waitingData.actions = parsedInstance.actions;\r\n                }\r\n\r\n                // Animation\r\n                if (parsedInstance.animations) {\r\n                    for (let animationIndex = 0; animationIndex < parsedInstance.animations.length; animationIndex++) {\r\n                        const parsedAnimation = parsedInstance.animations[animationIndex];\r\n                        const internalClass = GetClass(\"BABYLON.Animation\");\r\n                        if (internalClass) {\r\n                            instance.animations.push(internalClass.Parse(parsedAnimation));\r\n                        }\r\n                    }\r\n                    Node.ParseAnimationRanges(instance, parsedInstance, scene);\r\n\r\n                    if (parsedInstance.autoAnimate) {\r\n                        scene.beginAnimation(\r\n                            instance,\r\n                            parsedInstance.autoAnimateFrom,\r\n                            parsedInstance.autoAnimateTo,\r\n                            parsedInstance.autoAnimateLoop,\r\n                            parsedInstance.autoAnimateSpeed || 1.0\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thin instances\r\n        if (parsedMesh.thinInstances) {\r\n            const thinInstances = parsedMesh.thinInstances;\r\n\r\n            mesh.thinInstanceEnablePicking = !!thinInstances.enablePicking;\r\n\r\n            if (thinInstances.matrixData) {\r\n                mesh.thinInstanceSetBuffer(\"matrix\", new Float32Array(thinInstances.matrixData), 16, false);\r\n\r\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\r\n                mesh._thinInstanceDataStorage.instancesCount = thinInstances.instancesCount;\r\n            } else {\r\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\r\n            }\r\n\r\n            if (parsedMesh.thinInstances.userThinInstance) {\r\n                const userThinInstance = parsedMesh.thinInstances.userThinInstance;\r\n\r\n                for (const kind in userThinInstance.data) {\r\n                    mesh.thinInstanceSetBuffer(kind, new Float32Array(userThinInstance.data[kind]), userThinInstance.strides[kind], false);\r\n                    mesh._userThinInstanceBuffersStorage.sizes[kind] = userThinInstance.sizes[kind];\r\n                }\r\n            }\r\n        }\r\n\r\n        return mesh;\r\n    }\r\n\r\n    // Skeletons\r\n\r\n    /**\r\n     * Prepare internal position array for software CPU skinning\r\n     * @returns original positions used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh\r\n     */\r\n    public setPositionsForCPUSkinning(): Nullable<Float32Array> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        if (!internalDataInfo._sourcePositions) {\r\n            const source = this.getVerticesData(VertexBuffer.PositionKind);\r\n            if (!source) {\r\n                return internalDataInfo._sourcePositions;\r\n            }\r\n\r\n            internalDataInfo._sourcePositions = new Float32Array(<any>source);\r\n\r\n            if (!this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\r\n                this.setVerticesData(VertexBuffer.PositionKind, source, true);\r\n            }\r\n        }\r\n        return internalDataInfo._sourcePositions;\r\n    }\r\n\r\n    /**\r\n     * Prepare internal normal array for software CPU skinning\r\n     * @returns original normals used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh.\r\n     */\r\n    public setNormalsForCPUSkinning(): Nullable<Float32Array> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (!internalDataInfo._sourceNormals) {\r\n            const source = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            if (!source) {\r\n                return internalDataInfo._sourceNormals;\r\n            }\r\n\r\n            internalDataInfo._sourceNormals = new Float32Array(<any>source);\r\n\r\n            if (!this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\r\n                this.setVerticesData(VertexBuffer.NormalKind, source, true);\r\n            }\r\n        }\r\n        return internalDataInfo._sourceNormals;\r\n    }\r\n\r\n    /**\r\n     * Updates the vertex buffer by applying transformation from the bones\r\n     * @param skeleton defines the skeleton to apply to current mesh\r\n     * @returns the current mesh\r\n     */\r\n    public applySkeleton(skeleton: Skeleton): Mesh {\r\n        if (!this.geometry) {\r\n            return this;\r\n        }\r\n\r\n        if (this.geometry._softwareSkinningFrameId == this.getScene().getFrameId()) {\r\n            return this;\r\n        }\r\n\r\n        this.geometry._softwareSkinningFrameId = this.getScene().getFrameId();\r\n\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            return this;\r\n        }\r\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            return this;\r\n        }\r\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            return this;\r\n        }\r\n\r\n        const hasNormals = this.isVerticesDataPresent(VertexBuffer.NormalKind);\r\n\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (!internalDataInfo._sourcePositions) {\r\n            const submeshes = this.subMeshes.slice();\r\n            this.setPositionsForCPUSkinning();\r\n            this.subMeshes = submeshes;\r\n        }\r\n\r\n        if (hasNormals && !internalDataInfo._sourceNormals) {\r\n            this.setNormalsForCPUSkinning();\r\n        }\r\n\r\n        // positionsData checks for not being Float32Array will only pass at most once\r\n        let positionsData = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!positionsData) {\r\n            return this;\r\n        }\r\n\r\n        if (!(positionsData instanceof Float32Array)) {\r\n            positionsData = new Float32Array(positionsData);\r\n        }\r\n\r\n        // normalsData checks for not being Float32Array will only pass at most once\r\n        let normalsData = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n        if (hasNormals) {\r\n            if (!normalsData) {\r\n                return this;\r\n            }\r\n\r\n            if (!(normalsData instanceof Float32Array)) {\r\n                normalsData = new Float32Array(normalsData);\r\n            }\r\n        }\r\n\r\n        const matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n\r\n        if (!matricesWeightsData || !matricesIndicesData) {\r\n            return this;\r\n        }\r\n\r\n        const needExtras = this.numBoneInfluencers > 4;\r\n        const matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n        const matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n\r\n        const skeletonMatrices = skeleton.getTransformMatrices(this);\r\n\r\n        const tempVector3 = Vector3.Zero();\r\n        const finalMatrix = new Matrix();\r\n        const tempMatrix = new Matrix();\r\n\r\n        let matWeightIdx = 0;\r\n        let inf: number;\r\n        for (let index = 0; index < positionsData.length; index += 3, matWeightIdx += 4) {\r\n            let weight: number;\r\n            for (inf = 0; inf < 4; inf++) {\r\n                weight = matricesWeightsData[matWeightIdx + inf];\r\n                if (weight > 0) {\r\n                    Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                    finalMatrix.addToSelf(tempMatrix);\r\n                }\r\n            }\r\n            if (needExtras) {\r\n                for (inf = 0; inf < 4; inf++) {\r\n                    weight = matricesWeightsExtraData![matWeightIdx + inf];\r\n                    if (weight > 0) {\r\n                        Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData![matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                        finalMatrix.addToSelf(tempMatrix);\r\n                    }\r\n                }\r\n            }\r\n\r\n            Vector3.TransformCoordinatesFromFloatsToRef(\r\n                internalDataInfo._sourcePositions![index],\r\n                internalDataInfo._sourcePositions![index + 1],\r\n                internalDataInfo._sourcePositions![index + 2],\r\n                finalMatrix,\r\n                tempVector3\r\n            );\r\n            tempVector3.toArray(positionsData, index);\r\n\r\n            if (hasNormals) {\r\n                Vector3.TransformNormalFromFloatsToRef(\r\n                    internalDataInfo._sourceNormals![index],\r\n                    internalDataInfo._sourceNormals![index + 1],\r\n                    internalDataInfo._sourceNormals![index + 2],\r\n                    finalMatrix,\r\n                    tempVector3\r\n                );\r\n                tempVector3.toArray(normalsData!, index);\r\n            }\r\n\r\n            finalMatrix.reset();\r\n        }\r\n\r\n        this.updateVerticesData(VertexBuffer.PositionKind, positionsData);\r\n        if (hasNormals) {\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normalsData!);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // Tools\r\n\r\n    /**\r\n     * Returns an object containing a min and max Vector3 which are the minimum and maximum vectors of each mesh bounding box from the passed array, in the world coordinates\r\n     * @param meshes defines the list of meshes to scan\r\n     * @returns an object `{min:` Vector3`, max:` Vector3`}`\r\n     */\r\n    public static MinMax(meshes: AbstractMesh[]): { min: Vector3; max: Vector3 } {\r\n        let minVector: Nullable<Vector3> = null;\r\n        let maxVector: Nullable<Vector3> = null;\r\n\r\n        meshes.forEach(function (mesh) {\r\n            const boundingInfo = mesh.getBoundingInfo();\r\n\r\n            const boundingBox = boundingInfo.boundingBox;\r\n            if (!minVector || !maxVector) {\r\n                minVector = boundingBox.minimumWorld;\r\n                maxVector = boundingBox.maximumWorld;\r\n            } else {\r\n                minVector.minimizeInPlace(boundingBox.minimumWorld);\r\n                maxVector.maximizeInPlace(boundingBox.maximumWorld);\r\n            }\r\n        });\r\n\r\n        if (!minVector || !maxVector) {\r\n            return {\r\n                min: Vector3.Zero(),\r\n                max: Vector3.Zero(),\r\n            };\r\n        }\r\n\r\n        return {\r\n            min: minVector,\r\n            max: maxVector,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the center of the `{min:` Vector3`, max:` Vector3`}` or the center of MinMax vector3 computed from a mesh array\r\n     * @param meshesOrMinMaxVector could be an array of meshes or a `{min:` Vector3`, max:` Vector3`}` object\r\n     * @returns a vector3\r\n     */\r\n    public static Center(meshesOrMinMaxVector: { min: Vector3; max: Vector3 } | AbstractMesh[]): Vector3 {\r\n        const minMaxVector = meshesOrMinMaxVector instanceof Array ? Mesh.MinMax(meshesOrMinMaxVector) : meshesOrMinMaxVector;\r\n        return Vector3.Center(minMaxVector.min, minMaxVector.max);\r\n    }\r\n\r\n    /**\r\n     * Merge the array of meshes into a single mesh for performance reasons.\r\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\r\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\r\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\r\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\r\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\r\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\r\n     * @returns a new mesh\r\n     */\r\n    public static MergeMeshes(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices?: boolean,\r\n        meshSubclass?: Mesh,\r\n        subdivideWithSubMeshes?: boolean,\r\n        multiMultiMaterials?: boolean\r\n    ) {\r\n        return runCoroutineSync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, false));\r\n    }\r\n\r\n    /**\r\n     * Merge the array of meshes into a single mesh for performance reasons.\r\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\r\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\r\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\r\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\r\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\r\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\r\n     * @returns a new mesh\r\n     */\r\n    public static MergeMeshesAsync(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices?: boolean,\r\n        meshSubclass?: Mesh,\r\n        subdivideWithSubMeshes?: boolean,\r\n        multiMultiMaterials?: boolean\r\n    ) {\r\n        return runCoroutineAsync(\r\n            Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, true),\r\n            createYieldingScheduler()\r\n        );\r\n    }\r\n\r\n    private static *_MergeMeshesCoroutine(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices: boolean | undefined,\r\n        meshSubclass: Mesh | undefined,\r\n        subdivideWithSubMeshes: boolean | undefined,\r\n        multiMultiMaterials: boolean | undefined,\r\n        isAsync: boolean\r\n    ): Coroutine<Nullable<Mesh>> {\r\n        // Remove any null/undefined entries from the mesh array\r\n        meshes = meshes.filter(Boolean);\r\n\r\n        if (meshes.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let index: number;\r\n        if (!allow32BitsIndices) {\r\n            let totalVertices = 0;\r\n\r\n            // Counting vertices\r\n            for (index = 0; index < meshes.length; index++) {\r\n                totalVertices += meshes[index].getTotalVertices();\r\n\r\n                if (totalVertices >= 65536) {\r\n                    Logger.Warn(\"Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices\");\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        if (multiMultiMaterials) {\r\n            subdivideWithSubMeshes = false;\r\n        }\r\n        const materialArray: Array<Material> = new Array<Material>();\r\n        const materialIndexArray: Array<number> = new Array<number>();\r\n        // Merge\r\n        const indiceArray: Array<number> = new Array<number>();\r\n        const currentsideOrientation = meshes[0].sideOrientation;\r\n\r\n        for (index = 0; index < meshes.length; index++) {\r\n            const mesh = meshes[index];\r\n            if (mesh.isAnInstance) {\r\n                Logger.Warn(\"Cannot merge instance meshes.\");\r\n                return null;\r\n            }\r\n\r\n            if (currentsideOrientation !== mesh.sideOrientation) {\r\n                Logger.Warn(\"Cannot merge meshes with different sideOrientation values.\");\r\n                return null;\r\n            }\r\n\r\n            if (subdivideWithSubMeshes) {\r\n                indiceArray.push(mesh.getTotalIndices());\r\n            }\r\n\r\n            if (multiMultiMaterials) {\r\n                if (mesh.material) {\r\n                    const material = mesh.material;\r\n                    if (material instanceof MultiMaterial) {\r\n                        for (let matIndex = 0; matIndex < material.subMaterials.length; matIndex++) {\r\n                            if (materialArray.indexOf(<Material>material.subMaterials[matIndex]) < 0) {\r\n                                materialArray.push(<Material>material.subMaterials[matIndex]);\r\n                            }\r\n                        }\r\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                            materialIndexArray.push(materialArray.indexOf(<Material>material.subMaterials[mesh.subMeshes[subIndex].materialIndex]));\r\n                            indiceArray.push(mesh.subMeshes[subIndex].indexCount);\r\n                        }\r\n                    } else {\r\n                        if (materialArray.indexOf(<Material>material) < 0) {\r\n                            materialArray.push(<Material>material);\r\n                        }\r\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                            materialIndexArray.push(materialArray.indexOf(<Material>material));\r\n                            indiceArray.push(mesh.subMeshes[subIndex].indexCount);\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                        materialIndexArray.push(0);\r\n                        indiceArray.push(mesh.subMeshes[subIndex].indexCount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const source = meshes[0];\r\n\r\n        const getVertexDataFromMesh = (mesh: Mesh) => {\r\n            const wm = mesh.computeWorldMatrix(true);\r\n            const vertexData = VertexData.ExtractFromMesh(mesh, false, false);\r\n            return { vertexData, transform: wm };\r\n        };\r\n\r\n        const { vertexData: sourceVertexData, transform: sourceTransform } = getVertexDataFromMesh(source);\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n\r\n        const meshVertexDatas = new Array<{ vertexData: VertexData; transform?: Matrix }>(meshes.length - 1);\r\n        for (let i = 1; i < meshes.length; i++) {\r\n            meshVertexDatas[i - 1] = getVertexDataFromMesh(meshes[i]);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        const mergeCoroutine = sourceVertexData._mergeCoroutine(sourceTransform, meshVertexDatas, allow32BitsIndices, isAsync, !disposeSource);\r\n        let mergeCoroutineStep = mergeCoroutine.next();\r\n        while (!mergeCoroutineStep.done) {\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n            mergeCoroutineStep = mergeCoroutine.next();\r\n        }\r\n        const vertexData = mergeCoroutineStep.value;\r\n\r\n        if (!meshSubclass) {\r\n            meshSubclass = new Mesh(source.name + \"_merged\", source.getScene());\r\n        }\r\n\r\n        const applyToCoroutine = vertexData._applyToCoroutine(meshSubclass, undefined, isAsync);\r\n        let applyToCoroutineStep = applyToCoroutine.next();\r\n        while (!applyToCoroutineStep.done) {\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n            applyToCoroutineStep = applyToCoroutine.next();\r\n        }\r\n\r\n        // Setting properties\r\n        meshSubclass.checkCollisions = source.checkCollisions;\r\n        meshSubclass.sideOrientation = source.sideOrientation;\r\n\r\n        // Cleaning\r\n        if (disposeSource) {\r\n            for (index = 0; index < meshes.length; index++) {\r\n                meshes[index].dispose();\r\n            }\r\n        }\r\n\r\n        // Subdivide\r\n        if (subdivideWithSubMeshes || multiMultiMaterials) {\r\n            //-- removal of global submesh\r\n            meshSubclass.releaseSubMeshes();\r\n            index = 0;\r\n            let offset = 0;\r\n\r\n            //-- apply subdivision according to index table\r\n            while (index < indiceArray.length) {\r\n                SubMesh.CreateFromIndices(0, offset, indiceArray[index], meshSubclass, undefined, false);\r\n                offset += indiceArray[index];\r\n                index++;\r\n            }\r\n\r\n            for (const subMesh of meshSubclass.subMeshes) {\r\n                subMesh.refreshBoundingInfo();\r\n            }\r\n\r\n            meshSubclass.computeWorldMatrix(true);\r\n        }\r\n\r\n        if (multiMultiMaterials) {\r\n            const newMultiMaterial = new MultiMaterial(source.name + \"_merged\", source.getScene());\r\n            newMultiMaterial.subMaterials = materialArray;\r\n            for (let subIndex = 0; subIndex < meshSubclass.subMeshes.length; subIndex++) {\r\n                meshSubclass.subMeshes[subIndex].materialIndex = materialIndexArray[subIndex];\r\n            }\r\n            meshSubclass.material = newMultiMaterial;\r\n        } else {\r\n            meshSubclass.material = source.material;\r\n        }\r\n\r\n        return meshSubclass;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public addInstance(instance: InstancedMesh) {\r\n        instance._indexInSourceMeshInstanceArray = this.instances.length;\r\n        this.instances.push(instance);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public removeInstance(instance: InstancedMesh) {\r\n        // Remove from mesh\r\n        const index = instance._indexInSourceMeshInstanceArray;\r\n        if (index != -1) {\r\n            if (index !== this.instances.length - 1) {\r\n                const last = this.instances[this.instances.length - 1];\r\n                this.instances[index] = last;\r\n                last._indexInSourceMeshInstanceArray = index;\r\n            }\r\n\r\n            instance._indexInSourceMeshInstanceArray = -1;\r\n            this.instances.pop();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _shouldConvertRHS() {\r\n        return this._scene.useRightHandedSystem && this.sideOrientation === Material.CounterClockWiseSideOrientation;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getRenderingFillMode(fillMode: number): number {\r\n        const scene = this.getScene();\r\n\r\n        if (scene.forcePointsCloud) return Material.PointFillMode;\r\n\r\n        if (scene.forceWireframe) return Material.WireFrameFillMode;\r\n\r\n        return this.overrideRenderingFillMode ?? fillMode;\r\n    }\r\n\r\n    // deprecated methods\r\n    /**\r\n     * Sets the mesh material by the material or multiMaterial `id` property\r\n     * @param id is a string identifying the material or the multiMaterial\r\n     * @returns the current mesh\r\n     * @deprecated Please use MeshBuilder instead Please use setMaterialById instead\r\n     */\r\n    public setMaterialByID(id: string): Mesh {\r\n        return this.setMaterialById(id);\r\n    }\r\n\r\n    /**\r\n     * Creates a ribbon mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @param name defines the name of the mesh to create\r\n     * @param pathArray is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry.\r\n     * @param closeArray creates a seam between the first and the last paths of the path array (default is false)\r\n     * @param closePath creates a seam between the first and the last points of each path of the path array\r\n     * @param offset is taken in account only if the `pathArray` is containing a single path\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance defines an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#ribbon)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateRibbon(\r\n        name: string,\r\n        pathArray: Vector3[][],\r\n        closeArray: boolean,\r\n        closePath: boolean,\r\n        offset: number,\r\n        scene?: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a plane polygonal mesh.  By default, this is a disc.\r\n     * @param name defines the name of the mesh to create\r\n     * @param radius sets the radius size (float) of the polygon (default 0.5)\r\n     * @param tessellation sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDisc(name: string, radius: number, tessellation: number, scene: Nullable<Scene>, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a box mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param size sets the size (float) of each box side (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateBox(name: string, size: number, scene: Nullable<Scene>, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param segments sets the sphere number of horizontal stripes (positive integer, default 32)\r\n     * @param diameter sets the diameter size (float) of the sphere (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateSphere(name: string, segments: number, diameter: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a hemisphere mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param segments sets the sphere number of horizontal stripes (positive integer, default 32)\r\n     * @param diameter sets the diameter size (float) of the sphere (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateHemisphere(name: string, segments: number, diameter: number, scene?: Scene): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a cylinder or a cone mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param height sets the height size (float) of the cylinder/cone (float, default 2)\r\n     * @param diameterTop set the top cap diameter (floats, default 1)\r\n     * @param diameterBottom set the bottom cap diameter (floats, default 1). This value can't be zero\r\n     * @param tessellation sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance\r\n     * @param subdivisions sets the number of rings along the cylinder height (positive integer, default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateCylinder(\r\n        name: string,\r\n        height: number,\r\n        diameterTop: number,\r\n        diameterBottom: number,\r\n        tessellation: number,\r\n        subdivisions: any,\r\n        scene?: Scene,\r\n        updatable?: any,\r\n        sideOrientation?: number\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    // Torus  (Code from SharpDX.org)\r\n    /**\r\n     * Creates a torus mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param diameter sets the diameter size (float) of the torus (default 1)\r\n     * @param thickness sets the diameter size of the tube of the torus (float, default 0.5)\r\n     * @param tessellation sets the number of torus sides (positive integer, default 16)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTorus(name: string, diameter: number, thickness: number, tessellation: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a torus knot mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param radius sets the global radius size (float) of the torus knot (default 2)\r\n     * @param tube sets the diameter size of the tube of the torus (float, default 0.5)\r\n     * @param radialSegments sets the number of sides on each tube segments (positive integer, default 32)\r\n     * @param tubularSegments sets the number of tubes to decompose the knot into (positive integer, default 32)\r\n     * @param p the number of windings on X axis (positive integers, default 2)\r\n     * @param q the number of windings on Y axis (positive integers, default 3)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTorusKnot(\r\n        name: string,\r\n        radius: number,\r\n        tube: number,\r\n        radialSegments: number,\r\n        tubularSegments: number,\r\n        p: number,\r\n        q: number,\r\n        scene?: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a line mesh..\r\n     * @param name defines the name of the mesh to create\r\n     * @param points is an array successive Vector3\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param instance is an instance of an existing LineMesh object to be updated with the passed `points` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#lines-and-dashedlines).\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateLines(name: string, points: Vector3[], scene: Nullable<Scene>, updatable: boolean, instance?: Nullable<LinesMesh>): LinesMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a dashed line mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param points is an array successive Vector3\r\n     * @param dashSize is the size of the dashes relatively the dash number (positive float, default 3)\r\n     * @param gapSize is the size of the gap between two successive dashes relatively the dash number (positive float, default 1)\r\n     * @param dashNb is the intended total number of dashes (positive integer, default 200)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param instance is an instance of an existing LineMesh object to be updated with the passed `points` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#lines-and-dashedlines)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDashedLines(\r\n        name: string,\r\n        points: Vector3[],\r\n        dashSize: number,\r\n        gapSize: number,\r\n        dashNb: number,\r\n        scene: Nullable<Scene>,\r\n        updatable?: boolean,\r\n        instance?: LinesMesh\r\n    ): LinesMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a polygon mesh.Please consider using the same method from the MeshBuilder class instead\r\n     * The polygon's shape will depend on the input parameters and is constructed parallel to a ground mesh.\r\n     * The parameter `shape` is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors.\r\n     * You can set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n     * Remember you can only change the shape positions, not their number when updating a polygon.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#non-regular-polygon\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n     * @param scene defines the hosting scene\r\n     * @param holes is a required array of arrays of successive Vector3 used to defines holes in the polygon\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param earcutInjection can be used to inject your own earcut reference\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePolygon(name: string, shape: Vector3[], scene: Scene, holes?: Vector3[][], updatable?: boolean, sideOrientation?: number, earcutInjection?: any): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an extruded polygon mesh, with depth in the Y direction..\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-non-regular-polygon\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n     * @param depth defines the height of extrusion\r\n     * @param scene defines the hosting scene\r\n     * @param holes is a required array of arrays of successive Vector3 used to defines holes in the polygon\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param earcutInjection can be used to inject your own earcut reference\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudePolygon(\r\n        name: string,\r\n        shape: Vector3[],\r\n        depth: number,\r\n        scene: Scene,\r\n        holes?: Vector3[][],\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        earcutInjection?: any\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an extruded shape mesh.\r\n     * The extrusion is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-shapes\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis\r\n     * @param path is a required array of successive Vector3. This is the axis curve the shape is extruded along\r\n     * @param scale is the value to scale the shape\r\n     * @param rotation is the angle value to rotate the shape each step (each path point), from the former step (so rotation added each step) along the curve\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#extruded-shape)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudeShape(\r\n        name: string,\r\n        shape: Vector3[],\r\n        path: Vector3[],\r\n        scale: number,\r\n        rotation: number,\r\n        cap: number,\r\n        scene: Nullable<Scene>,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an custom extruded shape mesh.\r\n     * The custom extrusion is a parametric shape.\r\n     * It has no predefined shape. Its final shape will depend on the input parameters.\r\n     *\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-shapes\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis\r\n     * @param path is a required array of successive Vector3. This is the axis curve the shape is extruded along\r\n     * @param scaleFunction is a custom Javascript function called on each path point\r\n     * @param rotationFunction is a custom Javascript function called on each path point\r\n     * @param ribbonCloseArray forces the extrusion underlying ribbon to close all the paths in its `pathArray`\r\n     * @param ribbonClosePath forces the extrusion underlying ribbon to close its `pathArray`\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters (https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#extruded-shape)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudeShapeCustom(\r\n        name: string,\r\n        shape: Vector3[],\r\n        path: Vector3[],\r\n        scaleFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        rotationFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        ribbonCloseArray: boolean,\r\n        ribbonClosePath: boolean,\r\n        cap: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates lathe mesh.\r\n     * The lathe is a shape with a symmetry axis : a 2D model shape is rotated around this axis to design the lathe.\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be rotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero\r\n     * @param radius is the radius value of the lathe\r\n     * @param tessellation is the side number of the lathe.\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateLathe(name: string, shape: Vector3[], radius: number, tessellation: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a plane mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param size sets the size (float) of both sides of the plane at once (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePlane(name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a ground mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param width set the width of the ground\r\n     * @param height set the height of the ground\r\n     * @param subdivisions sets the number of subdivisions per side\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateGround(name: string, width: number, height: number, subdivisions: number, scene?: Scene, updatable?: boolean): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a tiled ground mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param xmin set the ground minimum X coordinate\r\n     * @param zmin set the ground minimum Y coordinate\r\n     * @param xmax set the ground maximum X coordinate\r\n     * @param zmax set the ground maximum Z coordinate\r\n     * @param subdivisions is an object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the numbers of subdivisions on the ground width and height. Each subdivision is called a tile\r\n     * @param precision is an object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the numbers of subdivisions on the ground width and height of each tile\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTiledGround(\r\n        name: string,\r\n        xmin: number,\r\n        zmin: number,\r\n        xmax: number,\r\n        zmax: number,\r\n        subdivisions: { w: number; h: number },\r\n        precision: { w: number; h: number },\r\n        scene: Scene,\r\n        updatable?: boolean\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a ground mesh from a height map.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/height_map\r\n     * @param name defines the name of the mesh to create\r\n     * @param url sets the URL of the height map image resource\r\n     * @param width set the ground width size\r\n     * @param height set the ground height size\r\n     * @param subdivisions sets the number of subdivision per side\r\n     * @param minHeight is the minimum altitude on the ground\r\n     * @param maxHeight is the maximum altitude on the ground\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param onReady  is a callback function that will be called  once the mesh is built (the height map download can last some time)\r\n     * @param alphaFilter will filter any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateGroundFromHeightMap(\r\n        name: string,\r\n        url: string,\r\n        width: number,\r\n        height: number,\r\n        subdivisions: number,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        onReady?: (mesh: GroundMesh) => void,\r\n        alphaFilter?: number\r\n    ): GroundMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a tube mesh.\r\n     * The tube is a parametric shape.\r\n     * It has no predefined shape. Its final shape will depend on the input parameters.\r\n     *\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @param name defines the name of the mesh to create\r\n     * @param path is a required array of successive Vector3. It is the curve used as the axis of the tube\r\n     * @param radius sets the tube radius size\r\n     * @param tessellation is the number of sides on the tubular surface\r\n     * @param radiusFunction is a custom function. If it is not null, it overrides the parameter `radius`. This function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing Tube object to be updated with the passed `pathArray` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#tube)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTube(\r\n        name: string,\r\n        path: Vector3[],\r\n        radius: number,\r\n        tessellation: number,\r\n        radiusFunction: { (i: number, distance: number): number },\r\n        cap: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a polyhedron mesh.\r\n     *.\r\n     * * The parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embedded types. Please refer to the type sheet in the tutorial to choose the wanted type\r\n     * * The parameter `size` (positive float, default 1) sets the polygon size\r\n     * * You can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value)\r\n     * * You can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`\r\n     * * A `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\r\n     * * You can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`)\r\n     * * To understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\r\n     * * The parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored\r\n     * * You can also set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @param name defines the name of the mesh to create\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePolyhedron(\r\n        name: string,\r\n        options: {\r\n            type?: number;\r\n            size?: number;\r\n            sizeX?: number;\r\n            sizeY?: number;\r\n            sizeZ?: number;\r\n            custom?: any;\r\n            faceUV?: Vector4[];\r\n            faceColors?: Color4[];\r\n            updatable?: boolean;\r\n            sideOrientation?: number;\r\n        },\r\n        scene: Scene\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\r\n     * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\r\n     * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value than `radius`)\r\n     * * The parameter `subdivisions` sets the number of subdivisions (positive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\r\n     * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\r\n     * * You can also set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/polyhedra#icosphere\r\n     * @param name defines the name of the mesh\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateIcoSphere(\r\n        name: string,\r\n        options: { radius?: number; flat?: boolean; subdivisions?: number; sideOrientation?: number; updatable?: boolean },\r\n        scene: Scene\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a decal mesh.\r\n     *.\r\n     * A decal is a mesh usually applied as a model onto the surface of another mesh\r\n     * @param name  defines the name of the mesh\r\n     * @param sourceMesh defines the mesh receiving the decal\r\n     * @param position sets the position of the decal in world coordinates\r\n     * @param normal sets the normal of the mesh where the decal is applied onto in world coordinates\r\n     * @param size sets the decal scaling\r\n     * @param angle sets the angle to rotate the decal\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDecal(name: string, sourceMesh: AbstractMesh, position: Vector3, normal: Vector3, size: Vector3, angle: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /** Creates a Capsule Mesh\r\n     * @param name defines the name of the mesh.\r\n     * @param options the constructors options used to shape the mesh.\r\n     * @param scene defines the scene the mesh is scoped to.\r\n     * @returns the capsule mesh\r\n     * @see https://doc.babylonjs.com/how_to/capsule_shape\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateCapsule(name: string, options: ICreateCapsuleOptions, scene: Scene): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Extends a mesh to a Goldberg mesh\r\n     * Warning  the mesh to convert MUST be an import of a perviously exported Goldberg mesh\r\n     * @param mesh the mesh to convert\r\n     * @returns the extended mesh\r\n     * @deprecated Please use ExtendMeshToGoldberg instead\r\n     */\r\n    public static ExtendToGoldberg(mesh: Mesh): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.Mesh\", Mesh);\r\n", "import type { Scene } from \"../scene\";\r\nimport { Vector3, Vector2, TmpVectors, Vector4 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\n\r\nMesh._GroundMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n    return GroundMesh.Parse(parsedMesh, scene);\r\n};\r\n\r\n/**\r\n * Mesh representing the ground\r\n */\r\nexport class GroundMesh extends Mesh {\r\n    /** If octree should be generated */\r\n    public generateOctree = false;\r\n\r\n    private _heightQuads: { slope: Vector2; facet1: Vector4; facet2: Vector4 }[];\r\n\r\n    /** @internal */\r\n    public _subdivisionsX: number;\r\n    /** @internal */\r\n    public _subdivisionsY: number;\r\n    /** @internal */\r\n    public _width: number;\r\n    /** @internal */\r\n    public _height: number;\r\n    /** @internal */\r\n    public _minX: number;\r\n    /** @internal */\r\n    public _maxX: number;\r\n    /** @internal */\r\n    public _minZ: number;\r\n    /** @internal */\r\n    public _maxZ: number;\r\n\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    /**\r\n     * \"GroundMesh\"\r\n     * @returns \"GroundMesh\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"GroundMesh\";\r\n    }\r\n\r\n    /**\r\n     * The minimum of x and y subdivisions\r\n     */\r\n    public get subdivisions(): number {\r\n        return Math.min(this._subdivisionsX, this._subdivisionsY);\r\n    }\r\n\r\n    /**\r\n     * X subdivisions\r\n     */\r\n    public get subdivisionsX(): number {\r\n        return this._subdivisionsX;\r\n    }\r\n\r\n    /**\r\n     * Y subdivisions\r\n     */\r\n    public get subdivisionsY(): number {\r\n        return this._subdivisionsY;\r\n    }\r\n\r\n    /**\r\n     * This function will divide the mesh into submeshes and update an octree to help to select the right submeshes\r\n     * for rendering, picking and collision computations. Please note that you must have a decent number of submeshes\r\n     * to get performance improvements when using an octree.\r\n     * @param chunksCount the number of submeshes the mesh will be divided into\r\n     * @param octreeBlocksSize the maximum size of the octree blocks (Default: 32)\r\n     */\r\n    public optimize(chunksCount: number, octreeBlocksSize = 32): void {\r\n        this._subdivisionsX = chunksCount;\r\n        this._subdivisionsY = chunksCount;\r\n        this.subdivide(chunksCount);\r\n\r\n        // Call the octree system optimization if it is defined.\r\n        const thisAsAny = this as any;\r\n        if (thisAsAny.createOrUpdateSubmeshesOctree) {\r\n            thisAsAny.createOrUpdateSubmeshesOctree(octreeBlocksSize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a height (y) value in the World system :\r\n     * the ground altitude at the coordinates (x, z) expressed in the World system.\r\n     * @param x x coordinate\r\n     * @param z z coordinate\r\n     * @returns the ground y position if (x, z) are outside the ground surface.\r\n     */\r\n    public getHeightAtCoordinates(x: number, z: number): number {\r\n        const world = this.getWorldMatrix();\r\n        const invMat = TmpVectors.Matrix[5];\r\n        world.invertToRef(invMat);\r\n        const tmpVect = TmpVectors.Vector3[8];\r\n        Vector3.TransformCoordinatesFromFloatsToRef(x, 0.0, z, invMat, tmpVect); // transform x,z in the mesh local space\r\n        x = tmpVect.x;\r\n        z = tmpVect.z;\r\n        if (x < this._minX || x >= this._maxX || z <= this._minZ || z > this._maxZ) {\r\n            return this.position.y;\r\n        }\r\n        if (!this._heightQuads || this._heightQuads.length == 0) {\r\n            this._initHeightQuads();\r\n            this._computeHeightQuads();\r\n        }\r\n        const facet = this._getFacetAt(x, z);\r\n        const y = -(facet.x * x + facet.z * z + facet.w) / facet.y;\r\n        // return y in the World system\r\n        Vector3.TransformCoordinatesFromFloatsToRef(0.0, y, 0.0, world, tmpVect);\r\n        return tmpVect.y;\r\n    }\r\n\r\n    /**\r\n     * Returns a normalized vector (Vector3) orthogonal to the ground\r\n     * at the ground coordinates (x, z) expressed in the World system.\r\n     * @param x x coordinate\r\n     * @param z z coordinate\r\n     * @returns Vector3(0.0, 1.0, 0.0) if (x, z) are outside the ground surface.\r\n     */\r\n    public getNormalAtCoordinates(x: number, z: number): Vector3 {\r\n        const normal = new Vector3(0.0, 1.0, 0.0);\r\n        this.getNormalAtCoordinatesToRef(x, z, normal);\r\n        return normal;\r\n    }\r\n\r\n    /**\r\n     * Updates the Vector3 passed a reference with a normalized vector orthogonal to the ground\r\n     * at the ground coordinates (x, z) expressed in the World system.\r\n     * Doesn't update the reference Vector3 if (x, z) are outside the ground surface.\r\n     * @param x x coordinate\r\n     * @param z z coordinate\r\n     * @param ref vector to store the result\r\n     * @returns the GroundMesh.\r\n     */\r\n    public getNormalAtCoordinatesToRef(x: number, z: number, ref: Vector3): GroundMesh {\r\n        const world = this.getWorldMatrix();\r\n        const tmpMat = TmpVectors.Matrix[5];\r\n        world.invertToRef(tmpMat);\r\n        const tmpVect = TmpVectors.Vector3[8];\r\n        Vector3.TransformCoordinatesFromFloatsToRef(x, 0.0, z, tmpMat, tmpVect); // transform x,z in the mesh local space\r\n        x = tmpVect.x;\r\n        z = tmpVect.z;\r\n        if (x < this._minX || x > this._maxX || z < this._minZ || z > this._maxZ) {\r\n            return this;\r\n        }\r\n        if (!this._heightQuads || this._heightQuads.length == 0) {\r\n            this._initHeightQuads();\r\n            this._computeHeightQuads();\r\n        }\r\n        const facet = this._getFacetAt(x, z);\r\n        Vector3.TransformNormalFromFloatsToRef(facet.x, facet.y, facet.z, world, ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Force the heights to be recomputed for getHeightAtCoordinates() or getNormalAtCoordinates()\r\n     * if the ground has been updated.\r\n     * This can be used in the render loop.\r\n     * @returns the GroundMesh.\r\n     */\r\n    public updateCoordinateHeights(): GroundMesh {\r\n        if (!this._heightQuads || this._heightQuads.length == 0) {\r\n            this._initHeightQuads();\r\n        }\r\n        this._computeHeightQuads();\r\n        return this;\r\n    }\r\n\r\n    // Returns the element \"facet\" from the heightQuads array relative to (x, z) local coordinates\r\n    private _getFacetAt(x: number, z: number): Vector4 {\r\n        // retrieve col and row from x, z coordinates in the ground local system\r\n        const col = Math.floor(((x + this._maxX) * this._subdivisionsX) / this._width);\r\n        const row = Math.floor((-(z + this._maxZ) * this._subdivisionsY) / this._height + this._subdivisionsY);\r\n        const quad = this._heightQuads[row * this._subdivisionsX + col];\r\n        let facet;\r\n        if (z < quad.slope.x * x + quad.slope.y) {\r\n            facet = quad.facet1;\r\n        } else {\r\n            facet = quad.facet2;\r\n        }\r\n        return facet;\r\n    }\r\n\r\n    //  Creates and populates the heightMap array with \"facet\" elements :\r\n    // a quad is two triangular facets separated by a slope, so a \"facet\" element is 1 slope + 2 facets\r\n    // slope : Vector2(c, h) = 2D diagonal line equation setting apart two triangular facets in a quad : z = cx + h\r\n    // facet1 : Vector4(a, b, c, d) = first facet 3D plane equation : ax + by + cz + d = 0\r\n    // facet2 :  Vector4(a, b, c, d) = second facet 3D plane equation : ax + by + cz + d = 0\r\n    // Returns the GroundMesh.\r\n    private _initHeightQuads(): GroundMesh {\r\n        const subdivisionsX = this._subdivisionsX;\r\n        const subdivisionsY = this._subdivisionsY;\r\n        this._heightQuads = new Array();\r\n        for (let row = 0; row < subdivisionsY; row++) {\r\n            for (let col = 0; col < subdivisionsX; col++) {\r\n                const quad = { slope: Vector2.Zero(), facet1: new Vector4(0.0, 0.0, 0.0, 0.0), facet2: new Vector4(0.0, 0.0, 0.0, 0.0) };\r\n                this._heightQuads[row * subdivisionsX + col] = quad;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // Compute each quad element values and update the heightMap array :\r\n    // slope : Vector2(c, h) = 2D diagonal line equation setting apart two triangular facets in a quad : z = cx + h\r\n    // facet1 : Vector4(a, b, c, d) = first facet 3D plane equation : ax + by + cz + d = 0\r\n    // facet2 :  Vector4(a, b, c, d) = second facet 3D plane equation : ax + by + cz + d = 0\r\n    // Returns the GroundMesh.\r\n    private _computeHeightQuads(): GroundMesh {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!positions) {\r\n            return this;\r\n        }\r\n\r\n        const v1 = TmpVectors.Vector3[3];\r\n        const v2 = TmpVectors.Vector3[2];\r\n        const v3 = TmpVectors.Vector3[1];\r\n        const v4 = TmpVectors.Vector3[0];\r\n        const v1v2 = TmpVectors.Vector3[4];\r\n        const v1v3 = TmpVectors.Vector3[5];\r\n        const v1v4 = TmpVectors.Vector3[6];\r\n        const norm1 = TmpVectors.Vector3[7];\r\n        const norm2 = TmpVectors.Vector3[8];\r\n        let i = 0;\r\n        let j = 0;\r\n        let k = 0;\r\n        let cd = 0; // 2D slope coefficient : z = cd * x + h\r\n        let h = 0;\r\n        let d1 = 0; // facet plane equation : ax + by + cz + d = 0\r\n        let d2 = 0;\r\n\r\n        const subdivisionsX = this._subdivisionsX;\r\n        const subdivisionsY = this._subdivisionsY;\r\n\r\n        for (let row = 0; row < subdivisionsY; row++) {\r\n            for (let col = 0; col < subdivisionsX; col++) {\r\n                i = col * 3;\r\n                j = row * (subdivisionsX + 1) * 3;\r\n                k = (row + 1) * (subdivisionsX + 1) * 3;\r\n                v1.x = positions[j + i];\r\n                v1.y = positions[j + i + 1];\r\n                v1.z = positions[j + i + 2];\r\n                v2.x = positions[j + i + 3];\r\n                v2.y = positions[j + i + 4];\r\n                v2.z = positions[j + i + 5];\r\n                v3.x = positions[k + i];\r\n                v3.y = positions[k + i + 1];\r\n                v3.z = positions[k + i + 2];\r\n                v4.x = positions[k + i + 3];\r\n                v4.y = positions[k + i + 4];\r\n                v4.z = positions[k + i + 5];\r\n\r\n                // 2D slope V1V4\r\n                cd = (v4.z - v1.z) / (v4.x - v1.x);\r\n                h = v1.z - cd * v1.x; // v1 belongs to the slope\r\n\r\n                // facet equations :\r\n                // we compute each facet normal vector\r\n                // the equation of the facet plane is : norm.x * x + norm.y * y + norm.z * z + d = 0\r\n                // we compute the value d by applying the equation to v1 which belongs to the plane\r\n                // then we store the facet equation in a Vector4\r\n                v2.subtractToRef(v1, v1v2);\r\n                v3.subtractToRef(v1, v1v3);\r\n                v4.subtractToRef(v1, v1v4);\r\n                Vector3.CrossToRef(v1v4, v1v3, norm1); // caution : CrossToRef uses the Tmp class\r\n                Vector3.CrossToRef(v1v2, v1v4, norm2);\r\n                norm1.normalize();\r\n                norm2.normalize();\r\n                d1 = -(norm1.x * v1.x + norm1.y * v1.y + norm1.z * v1.z);\r\n                d2 = -(norm2.x * v2.x + norm2.y * v2.y + norm2.z * v2.z);\r\n\r\n                const quad = this._heightQuads[row * subdivisionsX + col];\r\n                quad.slope.copyFromFloats(cd, h);\r\n                quad.facet1.copyFromFloats(norm1.x, norm1.y, norm1.z, d1);\r\n                quad.facet2.copyFromFloats(norm2.x, norm2.y, norm2.z, d2);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serializes this ground mesh\r\n     * @param serializationObject object to write serialization to\r\n     */\r\n    public override serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.subdivisionsX = this._subdivisionsX;\r\n        serializationObject.subdivisionsY = this._subdivisionsY;\r\n\r\n        serializationObject.minX = this._minX;\r\n        serializationObject.maxX = this._maxX;\r\n\r\n        serializationObject.minZ = this._minZ;\r\n        serializationObject.maxZ = this._maxZ;\r\n\r\n        serializationObject.width = this._width;\r\n        serializationObject.height = this._height;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized ground mesh\r\n     * @param parsedMesh the serialized mesh\r\n     * @param scene the scene to create the ground mesh in\r\n     * @returns the created ground mesh\r\n     */\r\n    public static override Parse(parsedMesh: any, scene: Scene): GroundMesh {\r\n        const result = new GroundMesh(parsedMesh.name, scene);\r\n\r\n        result._subdivisionsX = parsedMesh.subdivisionsX || 1;\r\n        result._subdivisionsY = parsedMesh.subdivisionsY || 1;\r\n\r\n        result._minX = parsedMesh.minX;\r\n        result._maxX = parsedMesh.maxX;\r\n\r\n        result._minZ = parsedMesh.minZ;\r\n        result._maxZ = parsedMesh.maxZ;\r\n\r\n        result._width = parsedMesh.width;\r\n        result._height = parsedMesh.height;\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { GroundMesh } from \"../groundMesh\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport { Epsilon } from \"../../Maths/math.constants\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a Ground\r\n * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n * @param options.width the width (x direction) of the ground, optional, default 1\r\n * @param options.height the height (z direction) of the ground, optional, default 1\r\n * @param options.subdivisions the number of subdivisions per side, optional, default 1\r\n * @param options.subdivisionsX the number of subdivisions in the x direction, overrides options.subdivisions, optional, default undefined\r\n * @param options.subdivisionsY the number of subdivisions in the y direction, overrides options.subdivisions, optional, default undefined\r\n * @returns the VertexData of the Ground\r\n */\r\nexport function CreateGroundVertexData(options: {\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    subdivisions?: number;\r\n    subdivisionsX?: number;\r\n    subdivisionsY?: number;\r\n}): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n    let row: number, col: number;\r\n\r\n    const width: number = options.width || options.size || 1;\r\n    const height: number = options.height || options.size || 1;\r\n    const subdivisionsX: number = (options.subdivisionsX || options.subdivisions || 1) | 0;\r\n    const subdivisionsY: number = (options.subdivisionsY || options.subdivisions || 1) | 0;\r\n\r\n    for (row = 0; row <= subdivisionsY; row++) {\r\n        for (col = 0; col <= subdivisionsX; col++) {\r\n            const position = new Vector3((col * width) / subdivisionsX - width / 2.0, 0, ((subdivisionsY - row) * height) / subdivisionsY - height / 2.0);\r\n            const normal = new Vector3(0, 1.0, 0);\r\n\r\n            positions.push(position.x, position.y, position.z);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            uvs.push(col / subdivisionsX, useOpenGLOrientationForUV ? row / subdivisionsY : 1.0 - row / subdivisionsY);\r\n        }\r\n    }\r\n\r\n    for (row = 0; row < subdivisionsY; row++) {\r\n        for (col = 0; col < subdivisionsX; col++) {\r\n            indices.push(col + 1 + (row + 1) * (subdivisionsX + 1));\r\n            indices.push(col + 1 + row * (subdivisionsX + 1));\r\n            indices.push(col + row * (subdivisionsX + 1));\r\n\r\n            indices.push(col + (row + 1) * (subdivisionsX + 1));\r\n            indices.push(col + 1 + (row + 1) * (subdivisionsX + 1));\r\n            indices.push(col + row * (subdivisionsX + 1));\r\n        }\r\n    }\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the VertexData for a TiledGround by subdividing the ground into tiles\r\n * @param options an object used to set the following optional parameters for the Ground\r\n * @param options.xmin ground minimum X coordinate, default -1\r\n * @param options.zmin ground minimum Z coordinate, default -1\r\n * @param options.xmax ground maximum X coordinate, default 1\r\n * @param options.zmax ground maximum Z coordinate, default 1\r\n * @param options.subdivisions a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the ground width and height creating 'tiles', default {w: 6, h: 6}\r\n * @param options.subdivisions.w positive integer, default 6\r\n * @param options.subdivisions.h positive integer, default 6\r\n * @param options.precision a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the tile width and height, default {w: 2, h: 2}\r\n * @param options.precision.w positive integer, default 2\r\n * @param options.precision.h positive integer, default 2\r\n * @returns the VertexData of the TiledGround\r\n */\r\nexport function CreateTiledGroundVertexData(options: {\r\n    xmin: number;\r\n    zmin: number;\r\n    xmax: number;\r\n    zmax: number;\r\n    subdivisions?: { w: number; h: number };\r\n    precision?: { w: number; h: number };\r\n}): VertexData {\r\n    const xmin = options.xmin !== undefined && options.xmin !== null ? options.xmin : -1.0;\r\n    const zmin = options.zmin !== undefined && options.zmin !== null ? options.zmin : -1.0;\r\n    const xmax = options.xmax !== undefined && options.xmax !== null ? options.xmax : 1.0;\r\n    const zmax = options.zmax !== undefined && options.zmax !== null ? options.zmax : 1.0;\r\n    const subdivisions = options.subdivisions || { w: 1, h: 1 };\r\n    const precision = options.precision || { w: 1, h: 1 };\r\n\r\n    const indices: number[] = [];\r\n    const positions: number[] = [];\r\n    const normals: number[] = [];\r\n    const uvs: number[] = [];\r\n    let row: number, col: number, tileRow: number, tileCol: number;\r\n\r\n    subdivisions.h = subdivisions.h < 1 ? 1 : subdivisions.h;\r\n    subdivisions.w = subdivisions.w < 1 ? 1 : subdivisions.w;\r\n    precision.w = precision.w < 1 ? 1 : precision.w;\r\n    precision.h = precision.h < 1 ? 1 : precision.h;\r\n\r\n    const tileSize = {\r\n        w: (xmax - xmin) / subdivisions.w,\r\n        h: (zmax - zmin) / subdivisions.h,\r\n    };\r\n\r\n    function applyTile(xTileMin: number, zTileMin: number, xTileMax: number, zTileMax: number) {\r\n        // Indices\r\n        const base = positions.length / 3;\r\n        const rowLength = precision.w + 1;\r\n        for (row = 0; row < precision.h; row++) {\r\n            for (col = 0; col < precision.w; col++) {\r\n                const square = [base + col + row * rowLength, base + (col + 1) + row * rowLength, base + (col + 1) + (row + 1) * rowLength, base + col + (row + 1) * rowLength];\r\n\r\n                indices.push(square[1]);\r\n                indices.push(square[2]);\r\n                indices.push(square[3]);\r\n                indices.push(square[0]);\r\n                indices.push(square[1]);\r\n                indices.push(square[3]);\r\n            }\r\n        }\r\n\r\n        // Position, normals and uvs\r\n        const position = Vector3.Zero();\r\n        const normal = new Vector3(0, 1.0, 0);\r\n        for (row = 0; row <= precision.h; row++) {\r\n            position.z = (row * (zTileMax - zTileMin)) / precision.h + zTileMin;\r\n            for (col = 0; col <= precision.w; col++) {\r\n                position.x = (col * (xTileMax - xTileMin)) / precision.w + xTileMin;\r\n                position.y = 0;\r\n\r\n                positions.push(position.x, position.y, position.z);\r\n                normals.push(normal.x, normal.y, normal.z);\r\n                uvs.push(col / precision.w, row / precision.h);\r\n            }\r\n        }\r\n    }\r\n\r\n    for (tileRow = 0; tileRow < subdivisions.h; tileRow++) {\r\n        for (tileCol = 0; tileCol < subdivisions.w; tileCol++) {\r\n            applyTile(xmin + tileCol * tileSize.w, zmin + tileRow * tileSize.h, xmin + (tileCol + 1) * tileSize.w, zmin + (tileRow + 1) * tileSize.h);\r\n        }\r\n    }\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the VertexData of the Ground designed from a heightmap\r\n * @param options an object used to set the following parameters for the Ground, required and provided by CreateGroundFromHeightMap\r\n * @param options.width the width (x direction) of the ground\r\n * @param options.height the height (z direction) of the ground\r\n * @param options.subdivisions the number of subdivisions per side\r\n * @param options.minHeight the minimum altitude on the ground, optional, default 0\r\n * @param options.maxHeight the maximum altitude on the ground, optional default 1\r\n * @param options.colorFilter the filter to apply to the image pixel colors to compute the height, optional Color3, default (0.3, 0.59, 0.11)\r\n * @param options.buffer the array holding the image color data\r\n * @param options.bufferWidth the width of image\r\n * @param options.bufferHeight the height of image\r\n * @param options.alphaFilter Remove any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n * @param options.heightBuffer a array of floats where the height data can be saved, if its length is greater than zero.\r\n * @returns the VertexData of the Ground designed from a heightmap\r\n */\r\nexport function CreateGroundFromHeightMapVertexData(options: {\r\n    width: number;\r\n    height: number;\r\n    subdivisions: number;\r\n    minHeight: number;\r\n    maxHeight: number;\r\n    colorFilter: Color3;\r\n    buffer: Uint8Array;\r\n    bufferWidth: number;\r\n    bufferHeight: number;\r\n    alphaFilter: number;\r\n    heightBuffer?: Float32Array;\r\n}): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n    let row, col;\r\n    const filter = options.colorFilter || new Color3(0.3, 0.59, 0.11);\r\n    const alphaFilter = options.alphaFilter || 0.0;\r\n    let invert = false;\r\n\r\n    if (options.minHeight > options.maxHeight) {\r\n        invert = true;\r\n        const temp = options.maxHeight;\r\n        options.maxHeight = options.minHeight;\r\n        options.minHeight = temp;\r\n    }\r\n\r\n    // Vertices\r\n    for (row = 0; row <= options.subdivisions; row++) {\r\n        for (col = 0; col <= options.subdivisions; col++) {\r\n            const position = new Vector3(\r\n                (col * options.width) / options.subdivisions - options.width / 2.0,\r\n                0,\r\n                ((options.subdivisions - row) * options.height) / options.subdivisions - options.height / 2.0\r\n            );\r\n\r\n            // Compute height\r\n            const heightMapX = (((position.x + options.width / 2) / options.width) * (options.bufferWidth - 1)) | 0;\r\n            const heightMapY = ((1.0 - (position.z + options.height / 2) / options.height) * (options.bufferHeight - 1)) | 0;\r\n            const pos = (heightMapX + heightMapY * options.bufferWidth) * 4;\r\n            let r = options.buffer[pos] / 255.0;\r\n            let g = options.buffer[pos + 1] / 255.0;\r\n            let b = options.buffer[pos + 2] / 255.0;\r\n            const a = options.buffer[pos + 3] / 255.0;\r\n\r\n            if (invert) {\r\n                r = 1.0 - r;\r\n                g = 1.0 - g;\r\n                b = 1.0 - b;\r\n            }\r\n\r\n            const gradient = r * filter.r + g * filter.g + b * filter.b;\r\n\r\n            // If our alpha channel is not within our filter then we will assign a 'special' height\r\n            // Then when building the indices, we will ignore any vertex that is using the special height\r\n            if (a >= alphaFilter) {\r\n                position.y = options.minHeight + (options.maxHeight - options.minHeight) * gradient;\r\n            } else {\r\n                position.y = options.minHeight - Epsilon; // We can't have a height below minHeight, normally.\r\n            }\r\n            if (options.heightBuffer) {\r\n                // set the height buffer information in row major order.\r\n                options.heightBuffer[row * (options.subdivisions + 1) + col] = position.y;\r\n            }\r\n\r\n            // Add  vertex\r\n            positions.push(position.x, position.y, position.z);\r\n            normals.push(0, 0, 0);\r\n            uvs.push(col / options.subdivisions, 1.0 - row / options.subdivisions);\r\n        }\r\n    }\r\n\r\n    // Indices\r\n    for (row = 0; row < options.subdivisions; row++) {\r\n        for (col = 0; col < options.subdivisions; col++) {\r\n            // Calculate Indices\r\n            const idx1 = col + 1 + (row + 1) * (options.subdivisions + 1);\r\n            const idx2 = col + 1 + row * (options.subdivisions + 1);\r\n            const idx3 = col + row * (options.subdivisions + 1);\r\n            const idx4 = col + (row + 1) * (options.subdivisions + 1);\r\n\r\n            // Check that all indices are visible (based on our special height)\r\n            // Only display the vertex if all Indices are visible\r\n            // Positions are stored x,y,z for each vertex, hence the * 3 and + 1 for height\r\n            const isVisibleIdx1 = positions[idx1 * 3 + 1] >= options.minHeight;\r\n            const isVisibleIdx2 = positions[idx2 * 3 + 1] >= options.minHeight;\r\n            const isVisibleIdx3 = positions[idx3 * 3 + 1] >= options.minHeight;\r\n            if (isVisibleIdx1 && isVisibleIdx2 && isVisibleIdx3) {\r\n                indices.push(idx1);\r\n                indices.push(idx2);\r\n                indices.push(idx3);\r\n            }\r\n\r\n            const isVisibleIdx4 = positions[idx4 * 3 + 1] >= options.minHeight;\r\n            if (isVisibleIdx4 && isVisibleIdx1 && isVisibleIdx3) {\r\n                indices.push(idx4);\r\n                indices.push(idx1);\r\n                indices.push(idx3);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Normals\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a ground mesh\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.width set the width size (float, default 1)\r\n * @param options.height set the height size (float, default 1)\r\n * @param options.subdivisions sets the number of subdivision per side (default 1)\r\n * @param options.subdivisionsX sets the number of subdivision on the X axis (overrides subdivisions)\r\n * @param options.subdivisionsY sets the number of subdivision on the Y axis (overrides subdivisions)\r\n * @param options.updatable defines if the mesh must be flagged as updatable (default false)\r\n * @param scene defines the hosting scene\r\n * @returns the ground mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#ground\r\n */\r\nexport function CreateGround(\r\n    name: string,\r\n    options: { width?: number; height?: number; subdivisions?: number; subdivisionsX?: number; subdivisionsY?: number; updatable?: boolean } = {},\r\n    scene?: Scene\r\n): GroundMesh {\r\n    const ground = new GroundMesh(name, scene);\r\n    ground._setReady(false);\r\n    ground._subdivisionsX = options.subdivisionsX || options.subdivisions || 1;\r\n    ground._subdivisionsY = options.subdivisionsY || options.subdivisions || 1;\r\n    ground._width = options.width || 1;\r\n    ground._height = options.height || 1;\r\n    ground._maxX = ground._width / 2;\r\n    ground._maxZ = ground._height / 2;\r\n    ground._minX = -ground._maxX;\r\n    ground._minZ = -ground._maxZ;\r\n\r\n    const vertexData = CreateGroundVertexData(options);\r\n\r\n    vertexData.applyToMesh(ground, options.updatable);\r\n\r\n    ground._setReady(true);\r\n\r\n    return ground;\r\n}\r\n\r\n/**\r\n * Creates a tiled ground mesh\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.xmin ground minimum X coordinate (float, default -1)\r\n * @param options.zmin ground minimum Z coordinate (float, default -1)\r\n * @param options.xmax ground maximum X coordinate (float, default 1)\r\n * @param options.zmax ground maximum Z coordinate (float, default 1)\r\n * @param options.subdivisions a javascript object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the numbers of subdivisions on the ground width and height. Each subdivision is called a tile\r\n * @param options.subdivisions.w positive integer, default 6\r\n * @param options.subdivisions.h positive integer, default 6\r\n * @param options.precision a javascript object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the numbers of subdivisions on the ground width and height of each tile\r\n * @param options.precision.w positive integer, default 2\r\n * @param options.precision.h positive integer, default 2\r\n * @param options.updatable boolean, default false, true if the mesh must be flagged as updatable\r\n * @param scene defines the hosting scene\r\n * @returns the tiled ground mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#tiled-ground\r\n */\r\nexport function CreateTiledGround(\r\n    name: string,\r\n    options: { xmin: number; zmin: number; xmax: number; zmax: number; subdivisions?: { w: number; h: number }; precision?: { w: number; h: number }; updatable?: boolean },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const tiledGround = new Mesh(name, scene);\r\n\r\n    const vertexData = CreateTiledGroundVertexData(options);\r\n\r\n    vertexData.applyToMesh(tiledGround, options.updatable);\r\n\r\n    return tiledGround;\r\n}\r\n\r\n/**\r\n * Creates a ground mesh from a height map. The height map download can take some frames,\r\n * so the mesh is not immediately ready. To wait for the mesh to be completely built,\r\n * you should use the `onReady` callback option.\r\n * @param name defines the name of the mesh\r\n * @param url sets the URL of the height map image resource.\r\n * @param options defines the options used to create the mesh\r\n * @param options.width sets the ground width size (positive float, default 10)\r\n * @param options.height sets the ground height size (positive float, default 10)\r\n * @param options.subdivisions sets the number of subdivision per side (positive integer, default 1)\r\n * @param options.minHeight is the minimum altitude on the ground (float, default 0)\r\n * @param options.maxHeight is the maximum altitude on the ground (float, default 1)\r\n * @param options.colorFilter is the filter to apply to the image pixel colors to compute the height (optional Color3, default (0.3, 0.59, 0.11) )\r\n * @param options.alphaFilter will filter any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n * @param options.updatable defines if the mesh must be flagged as updatable\r\n * @param options.onReady is a javascript callback function that will be called once the mesh is just built (the height map download can last some time)\r\n * @param options.onError is a javascript callback function that will be called if there is an error\r\n * @param options.passHeightBufferInCallback a boolean that indicates if the calculated height data will be passed in the onReady callback. Useful if you need the height data for physics, for example.\r\n * @param scene defines the hosting scene\r\n * @returns the ground mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/height_map\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#ground-from-a-height-map\r\n */\r\nexport function CreateGroundFromHeightMap(\r\n    name: string,\r\n    url: string | { data: Uint8Array; width: number; height: number },\r\n    options: {\r\n        width?: number;\r\n        height?: number;\r\n        subdivisions?: number;\r\n        minHeight?: number;\r\n        maxHeight?: number;\r\n        colorFilter?: Color3;\r\n        alphaFilter?: number;\r\n        updatable?: boolean;\r\n        onReady?: (mesh: GroundMesh, heightBuffer?: Float32Array) => void;\r\n        onError?: (message?: string, exception?: any) => void;\r\n        passHeightBufferInCallback?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): GroundMesh {\r\n    const width = options.width || 10.0;\r\n    const height = options.height || 10.0;\r\n    const subdivisions = options.subdivisions || 1 | 0;\r\n    const minHeight = options.minHeight || 0.0;\r\n    const maxHeight = options.maxHeight || 1.0;\r\n    const filter = options.colorFilter || new Color3(0.3, 0.59, 0.11);\r\n    const alphaFilter = options.alphaFilter || 0.0;\r\n    const updatable = options.updatable;\r\n    const onReady = options.onReady;\r\n\r\n    scene = scene || EngineStore.LastCreatedScene!;\r\n\r\n    const ground = new GroundMesh(name, scene);\r\n    ground._subdivisionsX = subdivisions;\r\n    ground._subdivisionsY = subdivisions;\r\n    ground._width = width;\r\n    ground._height = height;\r\n    ground._maxX = ground._width / 2.0;\r\n    ground._maxZ = ground._height / 2.0;\r\n    ground._minX = -ground._maxX;\r\n    ground._minZ = -ground._maxZ;\r\n\r\n    ground._setReady(false);\r\n\r\n    let heightBuffer: Float32Array;\r\n    if (options.passHeightBufferInCallback) {\r\n        heightBuffer = new Float32Array((subdivisions + 1) * (subdivisions + 1));\r\n    }\r\n\r\n    const onBufferLoaded = (buffer: Uint8Array, bufferWidth: number, bufferHeight: number) => {\r\n        const vertexData = CreateGroundFromHeightMapVertexData({\r\n            width: width,\r\n            height: height,\r\n            subdivisions: subdivisions,\r\n            minHeight: minHeight,\r\n            maxHeight: maxHeight,\r\n            colorFilter: filter,\r\n            buffer: buffer,\r\n            bufferWidth: bufferWidth,\r\n            bufferHeight: bufferHeight,\r\n            alphaFilter: alphaFilter,\r\n            heightBuffer,\r\n        });\r\n\r\n        vertexData.applyToMesh(ground, updatable);\r\n\r\n        //execute ready callback, if set\r\n        if (onReady) {\r\n            onReady(ground, heightBuffer);\r\n        }\r\n\r\n        ground._setReady(true);\r\n    };\r\n\r\n    if (typeof url === \"string\") {\r\n        const onload = (img: HTMLImageElement | ImageBitmap) => {\r\n            const bufferWidth = img.width;\r\n            const bufferHeight = img.height;\r\n\r\n            if (scene!.isDisposed) {\r\n                return;\r\n            }\r\n\r\n            const buffer = <Uint8Array>scene?.getEngine().resizeImageBitmap(img, bufferWidth, bufferHeight);\r\n\r\n            onBufferLoaded(buffer, bufferWidth, bufferHeight);\r\n        };\r\n\r\n        Tools.LoadImage(url, onload, options.onError ? options.onError : () => {}, scene.offlineProvider);\r\n    } else {\r\n        onBufferLoaded(url.data, url.width, url.height);\r\n    }\r\n\r\n    return ground;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the functions directly from the module\r\n */\r\nexport const GroundBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateGround,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateGroundFromHeightMap,\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTiledGround,\r\n};\r\n\r\nVertexData.CreateGround = CreateGroundVertexData;\r\nVertexData.CreateTiledGround = CreateTiledGroundVertexData;\r\nVertexData.CreateGroundFromHeightMap = CreateGroundFromHeightMapVertexData;\r\n\r\nMesh.CreateGround = (name: string, width: number, height: number, subdivisions: number, scene?: Scene, updatable?: boolean): Mesh => {\r\n    const options = {\r\n        width,\r\n        height,\r\n        subdivisions,\r\n        updatable,\r\n    };\r\n\r\n    return CreateGround(name, options, scene);\r\n};\r\n\r\nMesh.CreateTiledGround = (\r\n    name: string,\r\n    xmin: number,\r\n    zmin: number,\r\n    xmax: number,\r\n    zmax: number,\r\n    subdivisions: { w: number; h: number },\r\n    precision: { w: number; h: number },\r\n    scene: Scene,\r\n    updatable?: boolean\r\n): Mesh => {\r\n    const options = {\r\n        xmin,\r\n        zmin,\r\n        xmax,\r\n        zmax,\r\n        subdivisions,\r\n        precision,\r\n        updatable,\r\n    };\r\n\r\n    return CreateTiledGround(name, options, scene);\r\n};\r\n\r\nMesh.CreateGroundFromHeightMap = (\r\n    name: string,\r\n    url: string,\r\n    width: number,\r\n    height: number,\r\n    subdivisions: number,\r\n    minHeight: number,\r\n    maxHeight: number,\r\n    scene: Scene,\r\n    updatable?: boolean,\r\n    onReady?: (mesh: GroundMesh) => void,\r\n    alphaFilter?: number\r\n): GroundMesh => {\r\n    const options = {\r\n        width,\r\n        height,\r\n        subdivisions,\r\n        minHeight,\r\n        maxHeight,\r\n        updatable,\r\n        onReady,\r\n        alphaFilter,\r\n    };\r\n\r\n    return CreateGroundFromHeightMap(name, url, options, scene);\r\n};\r\n", "import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\nimport { CreateGroundVertexData } from \"./groundBuilder\";\r\n\r\n/**\r\n * Creates the VertexData for a box\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreateBoxVertexData(options: {\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    depth?: number;\r\n    faceUV?: Vector4[];\r\n    faceColors?: Color4[];\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n    wrap?: boolean;\r\n    topBaseAt?: number;\r\n    bottomBaseAt?: number;\r\n}): VertexData {\r\n    const nbFaces = 6;\r\n    let indices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];\r\n    const normals = [\r\n        0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0,\r\n        1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,\r\n    ];\r\n    const uvs = [];\r\n    let positions = [];\r\n    const width = options.width || options.size || 1;\r\n    const height = options.height || options.size || 1;\r\n    const depth = options.depth || options.size || 1;\r\n    const wrap = options.wrap || false;\r\n    let topBaseAt = options.topBaseAt === void 0 ? 1 : options.topBaseAt;\r\n    let bottomBaseAt = options.bottomBaseAt === void 0 ? 0 : options.bottomBaseAt;\r\n    topBaseAt = (topBaseAt + 4) % 4; // places values as 0 to 3\r\n    bottomBaseAt = (bottomBaseAt + 4) % 4; // places values as 0 to 3\r\n    const topOrder = [2, 0, 3, 1];\r\n    const bottomOrder = [2, 0, 1, 3];\r\n    let topIndex = topOrder[topBaseAt];\r\n    let bottomIndex = bottomOrder[bottomBaseAt];\r\n    let basePositions = [\r\n        1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1,\r\n        1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1,\r\n    ];\r\n    if (wrap) {\r\n        indices = [2, 3, 0, 2, 0, 1, 4, 5, 6, 4, 6, 7, 9, 10, 11, 9, 11, 8, 12, 14, 15, 12, 13, 14];\r\n        basePositions = [\r\n            -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1,\r\n        ];\r\n        let topFaceBase: any = [\r\n            [1, 1, 1],\r\n            [-1, 1, 1],\r\n            [-1, 1, -1],\r\n            [1, 1, -1],\r\n        ];\r\n        let bottomFaceBase: any = [\r\n            [-1, -1, 1],\r\n            [1, -1, 1],\r\n            [1, -1, -1],\r\n            [-1, -1, -1],\r\n        ];\r\n        const topFaceOrder: any = [17, 18, 19, 16];\r\n        const bottomFaceOrder: any = [22, 23, 20, 21];\r\n        while (topIndex > 0) {\r\n            topFaceBase.unshift(topFaceBase.pop());\r\n            topFaceOrder.unshift(topFaceOrder.pop());\r\n            topIndex--;\r\n        }\r\n        while (bottomIndex > 0) {\r\n            bottomFaceBase.unshift(bottomFaceBase.pop());\r\n            bottomFaceOrder.unshift(bottomFaceOrder.pop());\r\n            bottomIndex--;\r\n        }\r\n        topFaceBase = topFaceBase.flat();\r\n        bottomFaceBase = bottomFaceBase.flat();\r\n        basePositions = basePositions.concat(topFaceBase).concat(bottomFaceBase);\r\n        indices.push(topFaceOrder[0], topFaceOrder[2], topFaceOrder[3], topFaceOrder[0], topFaceOrder[1], topFaceOrder[2]);\r\n        indices.push(bottomFaceOrder[0], bottomFaceOrder[2], bottomFaceOrder[3], bottomFaceOrder[0], bottomFaceOrder[1], bottomFaceOrder[2]);\r\n    }\r\n    const scaleArray = [width / 2, height / 2, depth / 2];\r\n    positions = basePositions.reduce((accumulator: Array<number>, currentValue, currentIndex) => accumulator.concat(currentValue * scaleArray[currentIndex % 3]), []);\r\n\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const faceUV: Vector4[] = options.faceUV || new Array<Vector4>(6);\r\n    const faceColors = options.faceColors;\r\n    const colors = [];\r\n\r\n    // default face colors and UV if undefined\r\n    for (let f = 0; f < 6; f++) {\r\n        if (faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    // Create each face in turn.\r\n    for (let index = 0; index < nbFaces; index++) {\r\n        uvs.push(faceUV[index].z, useOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\r\n        uvs.push(faceUV[index].x, useOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\r\n        uvs.push(faceUV[index].x, useOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\r\n        uvs.push(faceUV[index].z, useOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\r\n        if (faceColors) {\r\n            for (let c = 0; c < 4; c++) {\r\n                colors.push(faceColors[index].r, faceColors[index].g, faceColors[index].b, faceColors[index].a);\r\n            }\r\n        }\r\n    }\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    if (faceColors) {\r\n        const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n        vertexData.colors = totalColors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the VertexData for a segmented box\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n * * segments sets the number of segments on the all axis (1 by default)\r\n * * widthSegments sets the number of segments on the x axis (1 by default)\r\n * * heightSegments sets the number of segments on the y axis (1 by default)\r\n * * depthSegments sets the number of segments on the z axis (1 by default)\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreateSegmentedBoxVertexData(options: {\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    depth?: number;\r\n    segments?: number;\r\n    widthSegments?: number;\r\n    heightSegments?: number;\r\n    depthSegments?: number;\r\n}): VertexData {\r\n    const width = options.width || options.size || 1;\r\n    const height = options.height || options.size || 1;\r\n    const depth = options.depth || options.size || 1;\r\n    const widthSegments = (options.widthSegments || options.segments || 1) | 0;\r\n    const heightSegments = (options.heightSegments || options.segments || 1) | 0;\r\n    const depthSegments = (options.depthSegments || options.segments || 1) | 0;\r\n    const rotationMatrix = new Matrix();\r\n    const translationMatrix = new Matrix();\r\n    const transformMatrix = new Matrix();\r\n\r\n    const bottomPlane = CreateGroundVertexData({ width: width, height: depth, subdivisionsX: widthSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(0, -height / 2, 0, translationMatrix);\r\n    Matrix.RotationZToRef(Math.PI, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    bottomPlane.transform(transformMatrix);\r\n\r\n    const topPlane = CreateGroundVertexData({ width: width, height: depth, subdivisionsX: widthSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(0, height / 2, 0, transformMatrix);\r\n    topPlane.transform(transformMatrix);\r\n\r\n    const negXPlane = CreateGroundVertexData({ width: height, height: depth, subdivisionsX: heightSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(-width / 2, 0, 0, translationMatrix);\r\n    Matrix.RotationZToRef(Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    negXPlane.transform(transformMatrix);\r\n\r\n    const posXPlane = CreateGroundVertexData({ width: height, height: depth, subdivisionsX: heightSegments, subdivisionsY: depthSegments });\r\n    Matrix.TranslationToRef(width / 2, 0, 0, translationMatrix);\r\n    Matrix.RotationZToRef(-Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    posXPlane.transform(transformMatrix);\r\n\r\n    const negZPlane = CreateGroundVertexData({ width: width, height: height, subdivisionsX: widthSegments, subdivisionsY: heightSegments });\r\n    Matrix.TranslationToRef(0, 0, -depth / 2, translationMatrix);\r\n    Matrix.RotationXToRef(-Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    negZPlane.transform(transformMatrix);\r\n\r\n    const posZPlane = CreateGroundVertexData({ width: width, height: height, subdivisionsX: widthSegments, subdivisionsY: heightSegments });\r\n    Matrix.TranslationToRef(0, 0, depth / 2, translationMatrix);\r\n    Matrix.RotationXToRef(Math.PI / 2, rotationMatrix);\r\n    rotationMatrix.multiplyToRef(translationMatrix, transformMatrix);\r\n    posZPlane.transform(transformMatrix);\r\n\r\n    // Result\r\n    bottomPlane.merge([topPlane, posXPlane, negXPlane, negZPlane, posZPlane], true);\r\n\r\n    return bottomPlane;\r\n}\r\n\r\n/**\r\n * Creates a box mesh\r\n * * The parameter `size` sets the size (float) of each box side (default 1)\r\n * * You can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value of `size`)\r\n * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements)\r\n * * Please read this tutorial : https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#box\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the box mesh\r\n */\r\nexport function CreateBox(\r\n    name: string,\r\n    options: {\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        wrap?: boolean;\r\n        topBaseAt?: number;\r\n        bottomBaseAt?: number;\r\n        updatable?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const box = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    box._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateBoxVertexData(options);\r\n\r\n    vertexData.applyToMesh(box, options.updatable);\r\n\r\n    return box;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use CreateBox directly\r\n */\r\nexport const BoxBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateBox,\r\n};\r\n\r\n// Side effects\r\nVertexData.CreateBox = CreateBoxVertexData;\r\n\r\nMesh.CreateBox = (name: string, size: number, scene: Nullable<Scene> = null, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        size,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateBox(name, options, scene);\r\n};\r\n", "/**\r\n * Manages the defines for the Material\r\n */\r\nexport class MaterialDefines {\r\n    /** @internal */\r\n    protected _keys: string[] = [];\r\n    private _isDirty = true;\r\n    /** @internal */\r\n    public _renderId: number;\r\n\r\n    /** @internal */\r\n    public _areLightsDirty = true;\r\n    /** @internal */\r\n    public _areLightsDisposed = false;\r\n    /** @internal */\r\n    public _areAttributesDirty = true;\r\n    /** @internal */\r\n    public _areTexturesDirty = true;\r\n    /** @internal */\r\n    public _areFresnelDirty = true;\r\n    /** @internal */\r\n    public _areMiscDirty = true;\r\n    /** @internal */\r\n    public _arePrePassDirty = true;\r\n    /** @internal */\r\n    public _areImageProcessingDirty = true;\r\n\r\n    /** @internal */\r\n    public _normals = false;\r\n    /** @internal */\r\n    public _uvs = false;\r\n\r\n    /** @internal */\r\n    public _needNormals = false;\r\n    /** @internal */\r\n    public _needUVs = false;\r\n\r\n    protected _externalProperties?: { [name: string]: { type: string; default: any } };\r\n\r\n    [id: string]: any;\r\n\r\n    /**\r\n     * Creates a new instance\r\n     * @param externalProperties list of external properties to inject into the object\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        this._externalProperties = externalProperties;\r\n\r\n        // Initialize External Properties\r\n        if (externalProperties) {\r\n            for (const prop in externalProperties) {\r\n                if (Object.prototype.hasOwnProperty.call(externalProperties, prop)) {\r\n                    this._setDefaultValue(prop);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material needs to be re-calculated\r\n     */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it has been re-calculated\r\n     */\r\n    public markAsProcessed() {\r\n        this._isDirty = false;\r\n        this._areAttributesDirty = false;\r\n        this._areTexturesDirty = false;\r\n        this._areFresnelDirty = false;\r\n        this._areLightsDirty = false;\r\n        this._areLightsDisposed = false;\r\n        this._areMiscDirty = false;\r\n        this._arePrePassDirty = false;\r\n        this._areImageProcessingDirty = false;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it needs to be re-calculated\r\n     */\r\n    public markAsUnprocessed() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate all of its defines need to be re-calculated\r\n     */\r\n    public markAllAsDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._areAttributesDirty = true;\r\n        this._areLightsDirty = true;\r\n        this._areFresnelDirty = true;\r\n        this._areMiscDirty = true;\r\n        this._arePrePassDirty = false;\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that image processing needs to be re-calculated\r\n     */\r\n    public markAsImageProcessingDirty() {\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate the lights need to be re-calculated\r\n     * @param disposed Defines whether the light is dirty due to dispose or not\r\n     */\r\n    public markAsLightDirty(disposed = false) {\r\n        this._areLightsDirty = true;\r\n        this._areLightsDisposed = this._areLightsDisposed || disposed;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the attribute state as changed\r\n     */\r\n    public markAsAttributesDirty() {\r\n        this._areAttributesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the texture state as changed\r\n     */\r\n    public markAsTexturesDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the fresnel state as changed\r\n     */\r\n    public markAsFresnelDirty() {\r\n        this._areFresnelDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the misc state as changed\r\n     */\r\n    public markAsMiscDirty() {\r\n        this._areMiscDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the prepass state as changed\r\n     */\r\n    public markAsPrePassDirty() {\r\n        this._arePrePassDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the material defines\r\n     */\r\n    public rebuild() {\r\n        this._keys.length = 0;\r\n\r\n        for (const key of Object.keys(this)) {\r\n            if (key[0] === \"_\") {\r\n                continue;\r\n            }\r\n\r\n            this._keys.push(key);\r\n        }\r\n\r\n        if (this._externalProperties) {\r\n            for (const name in this._externalProperties) {\r\n                if (this._keys.indexOf(name) === -1) {\r\n                    this._keys.push(name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if two material defines are equal\r\n     * @param other - A material define instance to compare to\r\n     * @returns - Boolean indicating if the material defines are equal (true) or not (false)\r\n     */\r\n    public isEqual(other: MaterialDefines): boolean {\r\n        if (this._keys.length !== other._keys.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            if ((<any>this)[prop] !== (<any>other)[prop]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clones this instance's defines to another instance\r\n     * @param other - material defines to clone values to\r\n     */\r\n    public cloneTo(other: MaterialDefines): void {\r\n        if (this._keys.length !== other._keys.length) {\r\n            other._keys = this._keys.slice(0);\r\n        }\r\n\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n\r\n            (<any>other)[prop] = (<any>this)[prop];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the material define values\r\n     */\r\n    public reset(): void {\r\n        this._keys.forEach((prop) => this._setDefaultValue(prop));\r\n    }\r\n\r\n    private _setDefaultValue(prop: string): void {\r\n        const type = this._externalProperties?.[prop]?.type ?? typeof (<any>this)[prop];\r\n        const defValue = this._externalProperties?.[prop]?.default;\r\n\r\n        switch (type) {\r\n            case \"number\":\r\n                (<any>this)[prop] = defValue ?? 0;\r\n                break;\r\n            case \"string\":\r\n                (<any>this)[prop] = defValue ?? \"\";\r\n                break;\r\n            default:\r\n                (<any>this)[prop] = defValue ?? false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the material define values to a string\r\n     * @returns - String of material define information\r\n     */\r\n    public toString(): string {\r\n        let result = \"\";\r\n        for (let index = 0; index < this._keys.length; index++) {\r\n            const prop = this._keys[index];\r\n            const value = (<any>this)[prop];\r\n            const type = typeof value;\r\n\r\n            switch (type) {\r\n                case \"number\":\r\n                case \"string\":\r\n                    result += \"#define \" + prop + \" \" + value + \"\\n\";\r\n                    break;\r\n                default:\r\n                    if (value) {\r\n                        result += \"#define \" + prop + \"\\n\";\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { Material } from \"../Materials/material\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\n/**\r\n * Base class of materials working in push mode in babylon JS\r\n * @internal\r\n */\r\nexport class PushMaterial extends Material {\r\n    protected _activeEffect?: Effect;\r\n\r\n    protected _normalMatrix: Matrix = new Matrix();\r\n\r\n    constructor(name: string, scene?: Scene, storeEffectOnSubMeshes = true, forceGLSL = false) {\r\n        super(name, scene, undefined, forceGLSL);\r\n        this._storeEffectOnSubMeshes = storeEffectOnSubMeshes;\r\n    }\r\n\r\n    public override getEffect(): Effect {\r\n        return this._storeEffectOnSubMeshes ? this._activeEffect! : super.getEffect()!;\r\n    }\r\n\r\n    public override isReady(mesh?: AbstractMesh, useInstances?: boolean): boolean {\r\n        if (!mesh) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._storeEffectOnSubMeshes) {\r\n            return true;\r\n        }\r\n\r\n        if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        return this.isReadyForSubMesh(mesh, mesh.subMeshes[0], useInstances);\r\n    }\r\n\r\n    protected _isReadyForSubMesh(subMesh: SubMesh) {\r\n        const defines = subMesh.materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect && defines) {\r\n            if (defines._renderId === this.getScene().getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Binds the given world matrix to the active effect\r\n     *\r\n     * @param world the matrix to bind\r\n     */\r\n    public override bindOnlyWorldMatrix(world: Matrix): void {\r\n        this._activeEffect!.setMatrix(\"world\", world);\r\n    }\r\n\r\n    /**\r\n     * Binds the given normal matrix to the active effect\r\n     *\r\n     * @param normalMatrix the matrix to bind\r\n     */\r\n    public bindOnlyNormalMatrix(normalMatrix: Matrix): void {\r\n        this._activeEffect!.setMatrix(\"normalMatrix\", normalMatrix);\r\n    }\r\n\r\n    public override bind(world: Matrix, mesh?: Mesh): void {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.bindForSubMesh(world, mesh, mesh.subMeshes[0]);\r\n    }\r\n\r\n    protected override _afterBind(mesh?: AbstractMesh, effect: Nullable<Effect> = null, subMesh?: SubMesh): void {\r\n        super._afterBind(mesh, effect, subMesh);\r\n        this.getScene()._cachedEffect = effect;\r\n        if (subMesh) {\r\n            subMesh._drawWrapper._forceRebindOnNextCall = false;\r\n        } else {\r\n            this._drawWrapper._forceRebindOnNextCall = false;\r\n        }\r\n    }\r\n\r\n    protected _mustRebind(scene: Scene, effect: Effect, subMesh: SubMesh, visibility = 1): boolean {\r\n        return subMesh._drawWrapper._forceRebindOnNextCall || scene.isCachedMaterialInvalid(this, effect, visibility);\r\n    }\r\n\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean) {\r\n        this._activeEffect = undefined;\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\r\n    }\r\n}\r\n", "import { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * This groups all the flags used to control the materials channel.\r\n */\r\nexport class MaterialFlags {\r\n    // Flags used to enable or disable a type of texture for all Standard Materials\r\n    private static _DiffuseTextureEnabled = true;\r\n    /**\r\n     * Are diffuse textures enabled in the application.\r\n     */\r\n    public static get DiffuseTextureEnabled(): boolean {\r\n        return this._DiffuseTextureEnabled;\r\n    }\r\n    public static set DiffuseTextureEnabled(value: boolean) {\r\n        if (this._DiffuseTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._DiffuseTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _BaseWeightTextureEnabled = true;\r\n    /**\r\n     * Is the OpenPBR Base Weight texture enabled in the application.\r\n     */\r\n    public static get BaseWeightTextureEnabled(): boolean {\r\n        return this._BaseWeightTextureEnabled;\r\n    }\r\n    public static set BaseWeightTextureEnabled(value: boolean) {\r\n        if (this._BaseWeightTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._BaseWeightTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _DetailTextureEnabled = true;\r\n    /**\r\n     * Are detail textures enabled in the application.\r\n     */\r\n    public static get DetailTextureEnabled(): boolean {\r\n        return this._DetailTextureEnabled;\r\n    }\r\n    public static set DetailTextureEnabled(value: boolean) {\r\n        if (this._DetailTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._DetailTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _DecalMapEnabled = true;\r\n    /**\r\n     * Are decal maps enabled in the application.\r\n     */\r\n    public static get DecalMapEnabled(): boolean {\r\n        return this._DecalMapEnabled;\r\n    }\r\n    public static set DecalMapEnabled(value: boolean) {\r\n        if (this._DecalMapEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._DecalMapEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _AmbientTextureEnabled = true;\r\n    /**\r\n     * Are ambient textures enabled in the application.\r\n     */\r\n    public static get AmbientTextureEnabled(): boolean {\r\n        return this._AmbientTextureEnabled;\r\n    }\r\n    public static set AmbientTextureEnabled(value: boolean) {\r\n        if (this._AmbientTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._AmbientTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _OpacityTextureEnabled = true;\r\n    /**\r\n     * Are opacity textures enabled in the application.\r\n     */\r\n    public static get OpacityTextureEnabled(): boolean {\r\n        return this._OpacityTextureEnabled;\r\n    }\r\n    public static set OpacityTextureEnabled(value: boolean) {\r\n        if (this._OpacityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._OpacityTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ReflectionTextureEnabled = true;\r\n    /**\r\n     * Are reflection textures enabled in the application.\r\n     */\r\n    public static get ReflectionTextureEnabled(): boolean {\r\n        return this._ReflectionTextureEnabled;\r\n    }\r\n    public static set ReflectionTextureEnabled(value: boolean) {\r\n        if (this._ReflectionTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ReflectionTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _EmissiveTextureEnabled = true;\r\n    /**\r\n     * Are emissive textures enabled in the application.\r\n     */\r\n    public static get EmissiveTextureEnabled(): boolean {\r\n        return this._EmissiveTextureEnabled;\r\n    }\r\n    public static set EmissiveTextureEnabled(value: boolean) {\r\n        if (this._EmissiveTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._EmissiveTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _SpecularTextureEnabled = true;\r\n    /**\r\n     * Are specular textures enabled in the application.\r\n     */\r\n    public static get SpecularTextureEnabled(): boolean {\r\n        return this._SpecularTextureEnabled;\r\n    }\r\n    public static set SpecularTextureEnabled(value: boolean) {\r\n        if (this._SpecularTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._SpecularTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _BumpTextureEnabled = true;\r\n    /**\r\n     * Are bump textures enabled in the application.\r\n     */\r\n    public static get BumpTextureEnabled(): boolean {\r\n        return this._BumpTextureEnabled;\r\n    }\r\n    public static set BumpTextureEnabled(value: boolean) {\r\n        if (this._BumpTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._BumpTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _LightmapTextureEnabled = true;\r\n    /**\r\n     * Are lightmap textures enabled in the application.\r\n     */\r\n    public static get LightmapTextureEnabled(): boolean {\r\n        return this._LightmapTextureEnabled;\r\n    }\r\n    public static set LightmapTextureEnabled(value: boolean) {\r\n        if (this._LightmapTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._LightmapTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _RefractionTextureEnabled = true;\r\n    /**\r\n     * Are refraction textures enabled in the application.\r\n     */\r\n    public static get RefractionTextureEnabled(): boolean {\r\n        return this._RefractionTextureEnabled;\r\n    }\r\n    public static set RefractionTextureEnabled(value: boolean) {\r\n        if (this._RefractionTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._RefractionTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ColorGradingTextureEnabled = true;\r\n    /**\r\n     * Are color grading textures enabled in the application.\r\n     */\r\n    public static get ColorGradingTextureEnabled(): boolean {\r\n        return this._ColorGradingTextureEnabled;\r\n    }\r\n    public static set ColorGradingTextureEnabled(value: boolean) {\r\n        if (this._ColorGradingTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ColorGradingTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _FresnelEnabled = true;\r\n    /**\r\n     * Are fresnels enabled in the application.\r\n     */\r\n    public static get FresnelEnabled(): boolean {\r\n        return this._FresnelEnabled;\r\n    }\r\n    public static set FresnelEnabled(value: boolean) {\r\n        if (this._FresnelEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._FresnelEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_FresnelDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatTextureEnabled = true;\r\n    /**\r\n     * Are clear coat textures enabled in the application.\r\n     */\r\n    public static get ClearCoatTextureEnabled(): boolean {\r\n        return this._ClearCoatTextureEnabled;\r\n    }\r\n    public static set ClearCoatTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatBumpTextureEnabled = true;\r\n    /**\r\n     * Are clear coat bump textures enabled in the application.\r\n     */\r\n    public static get ClearCoatBumpTextureEnabled(): boolean {\r\n        return this._ClearCoatBumpTextureEnabled;\r\n    }\r\n    public static set ClearCoatBumpTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatBumpTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatBumpTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ClearCoatTintTextureEnabled = true;\r\n    /**\r\n     * Are clear coat tint textures enabled in the application.\r\n     */\r\n    public static get ClearCoatTintTextureEnabled(): boolean {\r\n        return this._ClearCoatTintTextureEnabled;\r\n    }\r\n    public static set ClearCoatTintTextureEnabled(value: boolean) {\r\n        if (this._ClearCoatTintTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ClearCoatTintTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _SheenTextureEnabled = true;\r\n    /**\r\n     * Are sheen textures enabled in the application.\r\n     */\r\n    public static get SheenTextureEnabled(): boolean {\r\n        return this._SheenTextureEnabled;\r\n    }\r\n    public static set SheenTextureEnabled(value: boolean) {\r\n        if (this._SheenTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._SheenTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _AnisotropicTextureEnabled = true;\r\n    /**\r\n     * Are anisotropic textures enabled in the application.\r\n     */\r\n    public static get AnisotropicTextureEnabled(): boolean {\r\n        return this._AnisotropicTextureEnabled;\r\n    }\r\n    public static set AnisotropicTextureEnabled(value: boolean) {\r\n        if (this._AnisotropicTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._AnisotropicTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _ThicknessTextureEnabled = true;\r\n    /**\r\n     * Are thickness textures enabled in the application.\r\n     */\r\n    public static get ThicknessTextureEnabled(): boolean {\r\n        return this._ThicknessTextureEnabled;\r\n    }\r\n    public static set ThicknessTextureEnabled(value: boolean) {\r\n        if (this._ThicknessTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ThicknessTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _RefractionIntensityTextureEnabled = true;\r\n    /**\r\n     * Are refraction intensity textures enabled in the application.\r\n     */\r\n    public static get RefractionIntensityTextureEnabled(): boolean {\r\n        return this._ThicknessTextureEnabled;\r\n    }\r\n    public static set RefractionIntensityTextureEnabled(value: boolean) {\r\n        if (this._RefractionIntensityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._RefractionIntensityTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _TranslucencyIntensityTextureEnabled = true;\r\n    /**\r\n     * Are translucency intensity textures enabled in the application.\r\n     */\r\n    public static get TranslucencyIntensityTextureEnabled(): boolean {\r\n        return this._TranslucencyIntensityTextureEnabled;\r\n    }\r\n    public static set TranslucencyIntensityTextureEnabled(value: boolean) {\r\n        if (this._TranslucencyIntensityTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._TranslucencyIntensityTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _TranslucencyColorTextureEnabled = true;\r\n    /**\r\n     * Are translucency tint textures enabled in the application.\r\n     */\r\n    public static get TranslucencyColorTextureEnabled(): boolean {\r\n        return this._TranslucencyColorTextureEnabled;\r\n    }\r\n    public static set TranslucencyColorTextureEnabled(value: boolean) {\r\n        if (this._TranslucencyColorTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._TranslucencyColorTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private static _IridescenceTextureEnabled = true;\r\n    /**\r\n     * Are translucency intensity textures enabled in the application.\r\n     */\r\n    public static get IridescenceTextureEnabled(): boolean {\r\n        return this._IridescenceTextureEnabled;\r\n    }\r\n    public static set IridescenceTextureEnabled(value: boolean) {\r\n        if (this._IridescenceTextureEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._IridescenceTextureEnabled = value;\r\n        AbstractEngine.MarkAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { IEffectFallbacks } from \"./iEffectFallbacks\";\r\n\r\nimport type { Effect } from \"./effect\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\r\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\r\n */\r\nexport class EffectFallbacks implements IEffectFallbacks {\r\n    private _defines: { [key: string]: Array<String> } = {};\r\n\r\n    private _currentRank = 32;\r\n    private _maxRank = -1;\r\n\r\n    private _mesh: Nullable<AbstractMesh> = null;\r\n\r\n    /**\r\n     * Removes the fallback from the bound mesh.\r\n     */\r\n    public unBindMesh() {\r\n        this._mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Adds a fallback on the specified property.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param define The name of the define in the shader\r\n     */\r\n    public addFallback(rank: number, define: string): void {\r\n        if (!this._defines[rank]) {\r\n            if (rank < this._currentRank) {\r\n                this._currentRank = rank;\r\n            }\r\n\r\n            if (rank > this._maxRank) {\r\n                this._maxRank = rank;\r\n            }\r\n\r\n            this._defines[rank] = new Array<String>();\r\n        }\r\n\r\n        this._defines[rank].push(define);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh to use CPU skinning when needing to fallback.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param mesh The mesh to use the fallbacks.\r\n     */\r\n    public addCPUSkinningFallback(rank: number, mesh: AbstractMesh) {\r\n        this._mesh = mesh;\r\n\r\n        if (rank < this._currentRank) {\r\n            this._currentRank = rank;\r\n        }\r\n        if (rank > this._maxRank) {\r\n            this._maxRank = rank;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks to see if more fallbacks are still available.\r\n     */\r\n    public get hasMoreFallbacks(): boolean {\r\n        return this._currentRank <= this._maxRank;\r\n    }\r\n\r\n    /**\r\n     * Removes the defines that should be removed when falling back.\r\n     * @param currentDefines defines the current define statements for the shader.\r\n     * @param effect defines the current effect we try to compile\r\n     * @returns The resulting defines with defines of the current rank removed.\r\n     */\r\n    public reduce(currentDefines: string, effect: Effect): string {\r\n        // First we try to switch to CPU skinning\r\n        if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\r\n            this._mesh.computeBonesUsingShaders = false;\r\n            currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\r\n            effect._bonesComputationForcedToCPU = true;\r\n\r\n            const scene = this._mesh.getScene();\r\n            for (let index = 0; index < scene.meshes.length; index++) {\r\n                const otherMesh = scene.meshes[index];\r\n\r\n                if (!otherMesh.material) {\r\n                    if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\r\n                        otherMesh.computeBonesUsingShaders = false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (otherMesh.material.getEffect() === effect) {\r\n                    otherMesh.computeBonesUsingShaders = false;\r\n                } else if (otherMesh.subMeshes) {\r\n                    for (const subMesh of otherMesh.subMeshes) {\r\n                        const subMeshEffect = subMesh.effect;\r\n\r\n                        if (subMeshEffect === effect) {\r\n                            otherMesh.computeBonesUsingShaders = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            const currentFallbacks = this._defines[this._currentRank];\r\n            if (currentFallbacks) {\r\n                for (let index = 0; index < currentFallbacks.length; index++) {\r\n                    currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\r\n                }\r\n            }\r\n\r\n            this._currentRank++;\r\n        }\r\n\r\n        return currentDefines;\r\n    }\r\n}\r\n", "import type { ProcessingOptions, ShaderCustomProcessingFunction } from \"../Engines/Processors/shaderProcessingOptions\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"./material\";\r\nimport type {\r\n    MaterialPluginPrepareEffect,\r\n    MaterialPluginBindForSubMesh,\r\n    MaterialPluginDisposed,\r\n    MaterialPluginGetActiveTextures,\r\n    MaterialPluginGetAnimatables,\r\n    MaterialPluginGetDefineNames,\r\n    MaterialPluginHasTexture,\r\n    MaterialPluginIsReadyForSubMesh,\r\n    MaterialPluginPrepareDefines,\r\n    MaterialPluginPrepareUniformBuffer,\r\n    MaterialPluginHardBindForSubMesh,\r\n    MaterialPluginHasRenderTargetTextures,\r\n    MaterialPluginFillRenderTargetTextures,\r\n} from \"./materialPluginEvent\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { MaterialPluginBase } from \"./materialPluginBase\";\r\nimport { _ProcessIncludes } from \"../Engines/Processors/shaderProcessor\";\r\nimport { ShaderLanguage } from \"./shaderLanguage\";\r\nimport { ShaderStore } from \"../Engines/shaderStore\";\r\n\r\ndeclare module \"./material\" {\r\n    export interface Material {\r\n        /**\r\n         * Plugin manager for this material\r\n         */\r\n        pluginManager?: MaterialPluginManager;\r\n    }\r\n}\r\n\r\nconst rxOption = new RegExp(\"^([gimus]+)!\");\r\n\r\n/**\r\n * Class that manages the plugins of a material\r\n * @since 5.0\r\n */\r\nexport class MaterialPluginManager {\r\n    /** Map a plugin class name to a #define name (used in the vertex/fragment shaders as a marker of the plugin usage) */\r\n    private static _MaterialPluginClassToMainDefine: { [name: string]: string } = {};\r\n    private static _MaterialPluginCounter: number = 0;\r\n\r\n    protected _material: Material;\r\n    protected _scene: Scene;\r\n    protected _engine: AbstractEngine;\r\n    /** @internal */\r\n    public _plugins: MaterialPluginBase[] = [];\r\n    protected _activePlugins: MaterialPluginBase[] = [];\r\n    protected _activePluginsForExtraEvents: MaterialPluginBase[] = [];\r\n    protected _codeInjectionPoints: { [shaderType: string]: { [codeName: string]: boolean } };\r\n    protected _defineNamesFromPlugins?: { [name: string]: { type: string; default: any } };\r\n    protected _uboDeclaration: string;\r\n    protected _vertexDeclaration: string;\r\n    protected _fragmentDeclaration: string;\r\n    protected _uniformList: string[];\r\n    protected _samplerList: string[];\r\n    protected _uboList: string[];\r\n\r\n    static {\r\n        EngineStore.OnEnginesDisposedObservable.add(() => {\r\n            UnregisterAllMaterialPlugins();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of the plugin manager\r\n     * @param material material that this manager will manage the plugins for\r\n     */\r\n    constructor(material: Material) {\r\n        this._material = material;\r\n        this._scene = material.getScene();\r\n        this._engine = this._scene.getEngine();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _addPlugin(plugin: MaterialPluginBase): boolean {\r\n        for (let i = 0; i < this._plugins.length; ++i) {\r\n            if (this._plugins[i].name === plugin.name) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this._material._uniformBufferLayoutBuilt) {\r\n            this._material.resetDrawCache();\r\n            this._material._createUniformBuffer();\r\n        }\r\n\r\n        if (!plugin.isCompatible(this._material.shaderLanguage)) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `The plugin \"${plugin.name}\" can't be added to the material \"${this._material.name}\" because the plugin is not compatible with the shader language of the material.`;\r\n        }\r\n\r\n        const pluginClassName = plugin.getClassName();\r\n        if (!MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]) {\r\n            MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName] = \"MATERIALPLUGIN_\" + ++MaterialPluginManager._MaterialPluginCounter;\r\n        }\r\n\r\n        this._material._callbackPluginEventGeneric = (id, info) => this._handlePluginEvent(id, info);\r\n\r\n        this._plugins.push(plugin);\r\n        this._plugins.sort((a, b) => a.priority - b.priority);\r\n\r\n        this._codeInjectionPoints = {};\r\n\r\n        const defineNamesFromPlugins: { [name: string]: { type: string; default: any } } = {};\r\n        defineNamesFromPlugins[MaterialPluginManager._MaterialPluginClassToMainDefine[pluginClassName]] = {\r\n            type: \"boolean\",\r\n            default: true,\r\n        };\r\n\r\n        for (const plugin of this._plugins) {\r\n            plugin.collectDefines(defineNamesFromPlugins);\r\n            this._collectPointNames(\"vertex\", plugin.getCustomCode(\"vertex\", this._material.shaderLanguage));\r\n            this._collectPointNames(\"fragment\", plugin.getCustomCode(\"fragment\", this._material.shaderLanguage));\r\n        }\r\n\r\n        this._defineNamesFromPlugins = defineNamesFromPlugins;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _activatePlugin(plugin: MaterialPluginBase): void {\r\n        if (this._activePlugins.indexOf(plugin) === -1) {\r\n            this._activePlugins.push(plugin);\r\n            this._activePlugins.sort((a, b) => a.priority - b.priority);\r\n\r\n            this._material._callbackPluginEventIsReadyForSubMesh = this._handlePluginEventIsReadyForSubMesh.bind(this);\r\n            this._material._callbackPluginEventPrepareDefinesBeforeAttributes = this._handlePluginEventPrepareDefinesBeforeAttributes.bind(this);\r\n            this._material._callbackPluginEventPrepareDefines = this._handlePluginEventPrepareDefines.bind(this);\r\n            this._material._callbackPluginEventBindForSubMesh = this._handlePluginEventBindForSubMesh.bind(this);\r\n\r\n            if (plugin.registerForExtraEvents) {\r\n                this._activePluginsForExtraEvents.push(plugin);\r\n                this._activePluginsForExtraEvents.sort((a, b) => a.priority - b.priority);\r\n                this._material._callbackPluginEventHasRenderTargetTextures = this._handlePluginEventHasRenderTargetTextures.bind(this);\r\n                this._material._callbackPluginEventFillRenderTargetTextures = this._handlePluginEventFillRenderTargetTextures.bind(this);\r\n                this._material._callbackPluginEventHardBindForSubMesh = this._handlePluginEventHardBindForSubMesh.bind(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a plugin from the list of plugins managed by this manager\r\n     * @param name name of the plugin\r\n     * @returns the plugin if found, else null\r\n     */\r\n    public getPlugin<T = MaterialPluginBase>(name: string): Nullable<T> {\r\n        for (let i = 0; i < this._plugins.length; ++i) {\r\n            if (this._plugins[i].name === name) {\r\n                return this._plugins[i] as T;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected _handlePluginEventIsReadyForSubMesh(eventData: MaterialPluginIsReadyForSubMesh): void {\r\n        let isReady = true;\r\n        for (const plugin of this._activePlugins) {\r\n            isReady = isReady && plugin.isReadyForSubMesh(eventData.defines, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n        eventData.isReadyForSubMesh = isReady;\r\n    }\r\n\r\n    protected _handlePluginEventPrepareDefinesBeforeAttributes(eventData: MaterialPluginPrepareDefines): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.prepareDefinesBeforeAttributes(eventData.defines, this._scene, eventData.mesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventPrepareDefines(eventData: MaterialPluginPrepareDefines): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.prepareDefines(eventData.defines, this._scene, eventData.mesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventHardBindForSubMesh(eventData: MaterialPluginHardBindForSubMesh): void {\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            plugin.hardBindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventBindForSubMesh(eventData: MaterialPluginBindForSubMesh): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.bindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventHasRenderTargetTextures(eventData: MaterialPluginHasRenderTargetTextures): void {\r\n        let hasRenderTargetTextures = false;\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            hasRenderTargetTextures = plugin.hasRenderTargetTextures();\r\n            if (hasRenderTargetTextures) {\r\n                break;\r\n            }\r\n        }\r\n        eventData.hasRenderTargetTextures = hasRenderTargetTextures;\r\n    }\r\n\r\n    protected _handlePluginEventFillRenderTargetTextures(eventData: MaterialPluginFillRenderTargetTextures): void {\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            plugin.fillRenderTargetTextures(eventData.renderTargets);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEvent(\r\n        id: number,\r\n        info:\r\n            | MaterialPluginGetActiveTextures\r\n            | MaterialPluginGetAnimatables\r\n            | MaterialPluginHasTexture\r\n            | MaterialPluginDisposed\r\n            | MaterialPluginGetDefineNames\r\n            | MaterialPluginPrepareEffect\r\n            | MaterialPluginPrepareUniformBuffer\r\n    ): void {\r\n        switch (id) {\r\n            case MaterialPluginEvent.GetActiveTextures: {\r\n                const eventData = info as MaterialPluginGetActiveTextures;\r\n                for (const plugin of this._activePlugins) {\r\n                    plugin.getActiveTextures(eventData.activeTextures);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.GetAnimatables: {\r\n                const eventData = info as MaterialPluginGetAnimatables;\r\n                for (const plugin of this._activePlugins) {\r\n                    plugin.getAnimatables(eventData.animatables);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.HasTexture: {\r\n                const eventData = info as MaterialPluginHasTexture;\r\n                let hasTexture = false;\r\n                for (const plugin of this._activePlugins) {\r\n                    hasTexture = plugin.hasTexture(eventData.texture);\r\n                    if (hasTexture) {\r\n                        break;\r\n                    }\r\n                }\r\n                eventData.hasTexture = hasTexture;\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.Disposed: {\r\n                const eventData = info as MaterialPluginDisposed;\r\n                for (const plugin of this._plugins) {\r\n                    plugin.dispose(eventData.forceDisposeTextures);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.GetDefineNames: {\r\n                const eventData = info as MaterialPluginGetDefineNames;\r\n                eventData.defineNames = this._defineNamesFromPlugins;\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.PrepareEffect: {\r\n                const eventData = info as MaterialPluginPrepareEffect;\r\n                for (const plugin of this._activePlugins) {\r\n                    eventData.fallbackRank = plugin.addFallbacks(eventData.defines, eventData.fallbacks, eventData.fallbackRank);\r\n                    plugin.getAttributes(eventData.attributes, this._scene, eventData.mesh);\r\n                }\r\n                if (this._uniformList.length > 0) {\r\n                    eventData.uniforms.push(...this._uniformList);\r\n                }\r\n                if (this._samplerList.length > 0) {\r\n                    eventData.samplers.push(...this._samplerList);\r\n                }\r\n                if (this._uboList.length > 0) {\r\n                    eventData.uniformBuffersNames.push(...this._uboList);\r\n                }\r\n                eventData.customCode = this._injectCustomCode(eventData, eventData.customCode);\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.PrepareUniformBuffer: {\r\n                const eventData = info as MaterialPluginPrepareUniformBuffer;\r\n                this._uboDeclaration = \"\";\r\n                this._vertexDeclaration = \"\";\r\n                this._fragmentDeclaration = \"\";\r\n                this._uniformList = [];\r\n                this._samplerList = [];\r\n                this._uboList = [];\r\n                const isWebGPU = this._material.shaderLanguage === ShaderLanguage.WGSL;\r\n                for (const plugin of this._plugins) {\r\n                    const uniforms = plugin.getUniforms(this._material.shaderLanguage);\r\n                    if (uniforms) {\r\n                        if (uniforms.ubo) {\r\n                            for (const uniform of uniforms.ubo) {\r\n                                if (uniform.size && uniform.type) {\r\n                                    const arraySize = uniform.arraySize ?? 0;\r\n                                    eventData.ubo.addUniform(uniform.name, uniform.size, arraySize);\r\n                                    if (isWebGPU) {\r\n                                        let type: string;\r\n                                        switch (uniform.type) {\r\n                                            case \"mat4\":\r\n                                                type = \"mat4x4f\";\r\n                                                break;\r\n                                            case \"float\":\r\n                                                type = \"f32\";\r\n                                                break;\r\n                                            default:\r\n                                                type = `${uniform.type}f`;\r\n                                                break;\r\n                                        }\r\n\r\n                                        this._uboDeclaration += `uniform ${uniform.name}: ${type}${arraySize > 0 ? `[${arraySize}]` : \"\"};\\n`;\r\n                                    } else {\r\n                                        this._uboDeclaration += `${uniform.type} ${uniform.name}${arraySize > 0 ? `[${arraySize}]` : \"\"};\\n`;\r\n                                    }\r\n                                }\r\n                                this._uniformList.push(uniform.name);\r\n                            }\r\n                        }\r\n                        if (uniforms.vertex) {\r\n                            this._vertexDeclaration += uniforms.vertex + \"\\n\";\r\n                        }\r\n                        if (uniforms.fragment) {\r\n                            this._fragmentDeclaration += uniforms.fragment + \"\\n\";\r\n                        }\r\n                    }\r\n                    plugin.getSamplers(this._samplerList);\r\n                    plugin.getUniformBuffersNames(this._uboList);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _collectPointNames(shaderType: string, customCode: Nullable<{ [pointName: string]: string }> | undefined): void {\r\n        if (!customCode) {\r\n            return;\r\n        }\r\n        for (const pointName in customCode) {\r\n            if (!this._codeInjectionPoints[shaderType]) {\r\n                this._codeInjectionPoints[shaderType] = {};\r\n            }\r\n            this._codeInjectionPoints[shaderType][pointName] = true;\r\n        }\r\n    }\r\n\r\n    protected _injectCustomCode(eventData: MaterialPluginPrepareEffect, existingCallback?: (shaderType: string, code: string) => string): ShaderCustomProcessingFunction {\r\n        return (shaderType: string, code: string) => {\r\n            if (existingCallback) {\r\n                code = existingCallback(shaderType, code);\r\n            }\r\n            if (this._uboDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_UBO_DECLARATION\", this._uboDeclaration);\r\n            }\r\n            if (this._vertexDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_VERTEX_DECLARATION\", this._vertexDeclaration);\r\n            }\r\n            if (this._fragmentDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_FRAGMENT_DECLARATION\", this._fragmentDeclaration);\r\n            }\r\n            const points = this._codeInjectionPoints?.[shaderType];\r\n            if (!points) {\r\n                return code;\r\n            }\r\n            let processorOptions: Nullable<ProcessingOptions> = null;\r\n            for (let pointName in points) {\r\n                let injectedCode = \"\";\r\n                for (const plugin of this._activePlugins) {\r\n                    let customCode = plugin.getCustomCode(shaderType, this._material.shaderLanguage)?.[pointName];\r\n                    if (!customCode) {\r\n                        continue;\r\n                    }\r\n                    if (plugin.resolveIncludes) {\r\n                        if (processorOptions === null) {\r\n                            const shaderLanguage = ShaderLanguage.GLSL;\r\n                            processorOptions = {\r\n                                defines: [], // not used by _ProcessIncludes\r\n                                indexParameters: eventData.indexParameters,\r\n                                isFragment: false,\r\n                                shouldUseHighPrecisionShader: this._engine._shouldUseHighPrecisionShader,\r\n                                processor: undefined as any, // not used by _ProcessIncludes\r\n                                supportsUniformBuffers: this._engine.supportsUniformBuffers,\r\n                                shadersRepository: ShaderStore.GetShadersRepository(shaderLanguage),\r\n                                includesShadersStore: ShaderStore.GetIncludesShadersStore(shaderLanguage),\r\n                                version: undefined as any, // not used by _ProcessIncludes\r\n                                platformName: this._engine.shaderPlatformName,\r\n                                processingContext: undefined as any, // not used by _ProcessIncludes\r\n                                isNDCHalfZRange: this._engine.isNDCHalfZRange,\r\n                                useReverseDepthBuffer: this._engine.useReverseDepthBuffer,\r\n                                processCodeAfterIncludes: undefined as any, // not used by _ProcessIncludes\r\n                            };\r\n                        }\r\n                        processorOptions.isFragment = shaderType === \"fragment\";\r\n                        _ProcessIncludes(customCode, processorOptions, (code) => (customCode = code));\r\n                    }\r\n                    injectedCode += customCode + \"\\n\";\r\n                }\r\n                if (injectedCode.length > 0) {\r\n                    if (pointName.charAt(0) === \"!\") {\r\n                        // pointName is a regular expression\r\n                        pointName = pointName.substring(1);\r\n\r\n                        let regexFlags = \"g\";\r\n                        if (pointName.charAt(0) === \"!\") {\r\n                            // no flags\r\n                            regexFlags = \"\";\r\n                            pointName = pointName.substring(1);\r\n                        } else {\r\n                            // get the flag(s)\r\n                            const matchOption = rxOption.exec(pointName);\r\n                            if (matchOption && matchOption.length >= 2) {\r\n                                regexFlags = matchOption[1];\r\n                                pointName = pointName.substring(regexFlags.length + 1);\r\n                            }\r\n                        }\r\n\r\n                        if (regexFlags.indexOf(\"g\") < 0) {\r\n                            // we force the \"g\" flag so that the regexp object is stateful!\r\n                            regexFlags += \"g\";\r\n                        }\r\n\r\n                        const sourceCode = code;\r\n                        const rx = new RegExp(pointName, regexFlags);\r\n                        let match = rx.exec(sourceCode);\r\n                        while (match !== null) {\r\n                            let newCode = injectedCode;\r\n                            for (let i = 0; i < match.length; ++i) {\r\n                                newCode = newCode.replace(\"$\" + i, match[i]);\r\n                            }\r\n                            code = code.replace(match[0], newCode);\r\n                            match = rx.exec(sourceCode);\r\n                        }\r\n                    } else {\r\n                        const fullPointName = \"#define \" + pointName;\r\n                        code = code.replace(fullPointName, \"\\n\" + injectedCode + \"\\n\" + fullPointName);\r\n                    }\r\n                }\r\n            }\r\n            return code;\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Type for plugin material factories.\r\n */\r\nexport type PluginMaterialFactory = (material: Material) => Nullable<MaterialPluginBase>;\r\n\r\nconst plugins: Array<[string, PluginMaterialFactory]> = [];\r\nlet inited = false;\r\nlet observer: Nullable<Observer<Material>> = null;\r\n\r\n/**\r\n * Registers a new material plugin through a factory, or updates it. This makes the plugin available to all materials instantiated after its registration.\r\n * @param pluginName The plugin name\r\n * @param factory The factory function which allows to create the plugin\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function RegisterMaterialPlugin(pluginName: string, factory: PluginMaterialFactory): void {\r\n    if (!inited) {\r\n        observer = Material.OnEventObservable.add((material: Material) => {\r\n            for (const [, factory] of plugins) {\r\n                factory(material);\r\n            }\r\n        }, MaterialPluginEvent.Created);\r\n        inited = true;\r\n    }\r\n    const existing = plugins.filter(([name, _factory]) => name === pluginName);\r\n    if (existing.length > 0) {\r\n        existing[0][1] = factory;\r\n    } else {\r\n        plugins.push([pluginName, factory]);\r\n    }\r\n}\r\n\r\n/**\r\n * Removes a material plugin from the list of global plugins.\r\n * @param pluginName The plugin name\r\n * @returns true if the plugin has been removed, else false\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function UnregisterMaterialPlugin(pluginName: string): boolean {\r\n    for (let i = 0; i < plugins.length; ++i) {\r\n        if (plugins[i][0] === pluginName) {\r\n            plugins.splice(i, 1);\r\n            if (plugins.length === 0) {\r\n                UnregisterAllMaterialPlugins();\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Clear the list of global material plugins\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function UnregisterAllMaterialPlugins(): void {\r\n    plugins.length = 0;\r\n    inited = false;\r\n    Material.OnEventObservable.remove(observer);\r\n    observer = null;\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport { MaterialPluginManager } from \"./materialPluginManager\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { EffectFallbacks } from \"./effectFallbacks\";\r\nimport type { MaterialDefines } from \"./materialDefines\";\r\nimport type { Material } from \"./material\";\r\nimport type { BaseTexture } from \"./Textures/baseTexture\";\r\nimport type { RenderTargetTexture } from \"./Textures/renderTargetTexture\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { ShaderLanguage } from \"./shaderLanguage\";\r\n\r\n/**\r\n * Base class for material plugins.\r\n * @since 5.0\r\n */\r\nexport class MaterialPluginBase {\r\n    /**\r\n     * Defines the name of the plugin\r\n     */\r\n    @serialize()\r\n    public name: string;\r\n\r\n    /**\r\n     * Defines the priority of the plugin. Lower numbers run first.\r\n     */\r\n    @serialize()\r\n    public priority: number = 500;\r\n\r\n    /**\r\n     * Indicates that any #include directive in the plugin code must be replaced by the corresponding code.\r\n     */\r\n    @serialize()\r\n    public resolveIncludes: boolean = false;\r\n\r\n    /**\r\n     * Indicates that this plugin should be notified for the extra events (HasRenderTargetTextures / FillRenderTargetTextures / HardBindForSubMesh)\r\n     */\r\n    @serialize()\r\n    public registerForExtraEvents: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the material plugin should be serialized, `true` to skip serialization\r\n     */\r\n    public doNotSerialize = false;\r\n\r\n    protected _material: Material;\r\n    protected _pluginManager: MaterialPluginManager;\r\n    protected _pluginDefineNames?: { [name: string]: any };\r\n\r\n    /**\r\n     * Gets a boolean indicating that the plugin is compatible with a given shader language.\r\n     * @param shaderLanguage The shader language to use.\r\n     * @returns true if the plugin is compatible with the shader language\r\n     */\r\n    public isCompatible(shaderLanguage: ShaderLanguage): boolean {\r\n        switch (shaderLanguage) {\r\n            case ShaderLanguage.GLSL:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    protected _enable(enable: boolean) {\r\n        if (enable) {\r\n            this._pluginManager._activatePlugin(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to mark defines as being dirty.\r\n     */\r\n    public readonly markAllDefinesAsDirty: () => void;\r\n\r\n    /**\r\n     * Creates a new material plugin\r\n     * @param material parent material of the plugin\r\n     * @param name name of the plugin\r\n     * @param priority priority of the plugin\r\n     * @param defines list of defines used by the plugin. The value of the property is the default value for this property\r\n     * @param addToPluginList true to add the plugin to the list of plugins managed by the material plugin manager of the material (default: true)\r\n     * @param enable true to enable the plugin (it is handy if the plugin does not handle properties to switch its current activation)\r\n     * @param resolveIncludes Indicates that any #include directive in the plugin code must be replaced by the corresponding code (default: false)\r\n     */\r\n    constructor(material: Material, name: string, priority: number, defines?: { [key: string]: any }, addToPluginList = true, enable = false, resolveIncludes = false) {\r\n        this._material = material;\r\n        this.name = name;\r\n        this.priority = priority;\r\n        this.resolveIncludes = resolveIncludes;\r\n\r\n        if (!material.pluginManager) {\r\n            material.pluginManager = new MaterialPluginManager(material);\r\n            material.onDisposeObservable.add(() => {\r\n                material.pluginManager = undefined;\r\n            });\r\n        }\r\n\r\n        this._pluginDefineNames = defines;\r\n        this._pluginManager = material.pluginManager;\r\n\r\n        if (addToPluginList) {\r\n            this._pluginManager._addPlugin(this);\r\n        }\r\n\r\n        if (enable) {\r\n            this._enable(true);\r\n        }\r\n\r\n        this.markAllDefinesAsDirty = material._dirtyCallbacks[Constants.MATERIAL_AllDirtyFlag];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name useful for serialization or dynamic coding.\r\n     * @returns The class name.\r\n     */\r\n    public getClassName(): string {\r\n        return \"MaterialPluginBase\";\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used.\r\n     * @param _defines the list of \"defines\" to update.\r\n     * @param _scene defines the scene the material belongs to.\r\n     * @param _engine the engine this scene belongs to.\r\n     * @param _subMesh the submesh to check for readiness\r\n     * @returns - boolean indicating that the submesh is ready or not.\r\n     */\r\n    public isReadyForSubMesh(_defines: MaterialDefines, _scene: Scene, _engine: AbstractEngine, _subMesh: SubMesh): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Binds the material data (this function is called even if mustRebind() returns false)\r\n     * @param _uniformBuffer defines the Uniform buffer to fill in.\r\n     * @param _scene defines the scene the material belongs to.\r\n     * @param _engine defines the engine the material belongs to.\r\n     * @param _subMesh the submesh to bind data for\r\n     */\r\n    public hardBindForSubMesh(_uniformBuffer: UniformBuffer, _scene: Scene, _engine: AbstractEngine, _subMesh: SubMesh): void {}\r\n\r\n    /**\r\n     * Binds the material data.\r\n     * @param _uniformBuffer defines the Uniform buffer to fill in.\r\n     * @param _scene defines the scene the material belongs to.\r\n     * @param _engine the engine this scene belongs to.\r\n     * @param _subMesh the submesh to bind data for\r\n     */\r\n    public bindForSubMesh(_uniformBuffer: UniformBuffer, _scene: Scene, _engine: AbstractEngine, _subMesh: SubMesh): void {}\r\n\r\n    /**\r\n     * Disposes the resources of the material.\r\n     * @param _forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    public dispose(_forceDisposeTextures?: boolean): void {}\r\n\r\n    /**\r\n     * Returns a list of custom shader code fragments to customize the shader.\r\n     * @param _shaderType \"vertex\" or \"fragment\"\r\n     * @param _shaderLanguage The shader language to use.\r\n     * @returns null if no code to be added, or a list of pointName =\\> code.\r\n     * Note that `pointName` can also be a regular expression if it starts with a `!`.\r\n     * In that case, the string found by the regular expression (if any) will be\r\n     * replaced by the code provided.\r\n     */\r\n    public getCustomCode(_shaderType: string, _shaderLanguage = ShaderLanguage.GLSL): Nullable<{ [pointName: string]: string }> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Collects all defines.\r\n     * @param defines The object to append to.\r\n     */\r\n    public collectDefines(defines: { [name: string]: { type: string; default: any } }): void {\r\n        if (!this._pluginDefineNames) {\r\n            return;\r\n        }\r\n        for (const key of Object.keys(this._pluginDefineNames)) {\r\n            if (key[0] === \"_\") {\r\n                continue;\r\n            }\r\n\r\n            const type = typeof this._pluginDefineNames[key];\r\n            defines[key] = {\r\n                type: type === \"number\" ? \"number\" : type === \"string\" ? \"string\" : type === \"boolean\" ? \"boolean\" : \"object\",\r\n                default: this._pluginDefineNames[key],\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the defines for the next rendering. Called before PrepareDefinesForAttributes is called.\r\n     * @param _defines the list of \"defines\" to update.\r\n     * @param _scene defines the scene to the material belongs to.\r\n     * @param _mesh the mesh being rendered\r\n     */\r\n    public prepareDefinesBeforeAttributes(_defines: MaterialDefines, _scene: Scene, _mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Sets the defines for the next rendering\r\n     * @param _defines the list of \"defines\" to update.\r\n     * @param _scene defines the scene to the material belongs to.\r\n     * @param _mesh the mesh being rendered\r\n     */\r\n    public prepareDefines(_defines: MaterialDefines, _scene: Scene, _mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Checks to see if a texture is used in the material.\r\n     * @param _texture - Base texture to use.\r\n     * @returns - Boolean specifying if a texture is used in the material.\r\n     */\r\n    public hasTexture(_texture: BaseTexture): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     * @returns true if this uses a render target otherwise false.\r\n     */\r\n    public hasRenderTargetTextures(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Fills the list of render target textures.\r\n     * @param _renderTargets the list of render targets to update\r\n     */\r\n    public fillRenderTargetTextures(_renderTargets: SmartArray<RenderTargetTexture>): void {}\r\n\r\n    /**\r\n     * Returns an array of the actively used textures.\r\n     * @param _activeTextures Array of BaseTextures\r\n     */\r\n    public getActiveTextures(_activeTextures: BaseTexture[]): void {}\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * @param _animatables Array of animatable textures.\r\n     */\r\n    public getAnimatables(_animatables: IAnimatable[]): void {}\r\n\r\n    /**\r\n     * Add fallbacks to the effect fallbacks list.\r\n     * @param defines defines the Base texture to use.\r\n     * @param fallbacks defines the current fallback list.\r\n     * @param currentRank defines the current fallback rank.\r\n     * @returns the new fallback rank.\r\n     */\r\n    public addFallbacks(defines: MaterialDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        return currentRank;\r\n    }\r\n\r\n    /**\r\n     * Gets the samplers used by the plugin.\r\n     * @param _samplers list that the sampler names should be added to.\r\n     */\r\n    public getSamplers(_samplers: string[]): void {}\r\n\r\n    /**\r\n     * Gets the attributes used by the plugin.\r\n     * @param _attributes list that the attribute names should be added to.\r\n     * @param _scene the scene that the material belongs to.\r\n     * @param _mesh the mesh being rendered.\r\n     */\r\n    public getAttributes(_attributes: string[], _scene: Scene, _mesh: AbstractMesh): void {}\r\n\r\n    /**\r\n     * Gets the uniform buffers names added by the plugin.\r\n     * @param _ubos list that the ubo names should be added to.\r\n     */\r\n    public getUniformBuffersNames(_ubos: string[]): void {}\r\n\r\n    /**\r\n     * Gets the description of the uniforms to add to the ubo (if engine supports ubos) or to inject directly in the vertex/fragment shaders (if engine does not support ubos)\r\n     * @param _shaderLanguage The shader language to use.\r\n     * @returns the description of the uniforms\r\n     */\r\n    public getUniforms(_shaderLanguage = ShaderLanguage.GLSL): {\r\n        ubo?: Array<{ name: string; size?: number; type?: string; arraySize?: number }>;\r\n        vertex?: string;\r\n        fragment?: string;\r\n    } {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current configuration into another one.\r\n     * @param plugin define the config where to copy the info\r\n     */\r\n    public copyTo(plugin: MaterialPluginBase): void {\r\n        SerializationHelper.Clone(() => plugin, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this plugin configuration.\r\n     * @returns - An object with the serialized config.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a plugin configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.MaterialPluginBase\", MaterialPluginBase);\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"./material\";\r\nimport { serialize, expandToProperty, serializeAsTexture } from \"../Misc/decorators\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\nimport type { BaseTexture } from \"./Textures/baseTexture\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { MaterialDefines } from \"./materialDefines\";\r\nimport { MaterialPluginBase } from \"./materialPluginBase\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { StandardMaterial } from \"./standardMaterial\";\r\nimport type { PBRBaseMaterial } from \"./PBR/pbrBaseMaterial\";\r\nimport { BindTextureMatrix, PrepareDefinesForMergedUV } from \"./materialHelper.functions\";\r\nimport type { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialDetailMapDefines extends MaterialDefines {\r\n    DETAIL = false;\r\n    DETAILDIRECTUV = 0;\r\n    DETAIL_NORMALBLENDMETHOD = 0;\r\n}\r\n\r\n/**\r\n * Plugin that implements the detail map component of a material\r\n *\r\n * Inspired from:\r\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\r\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\r\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\r\n */\r\nexport class DetailMapConfiguration extends MaterialPluginBase {\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The detail texture of the material.\r\n     */\r\n    @serializeAsTexture(\"detailTexture\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\r\n     * Bigger values mean stronger blending\r\n     */\r\n    @serialize()\r\n    public diffuseBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strongly the detail roughness channel is blended with the regular roughness value\r\n     * Bigger values mean stronger blending. Only used with PBR materials\r\n     */\r\n    @serialize()\r\n    public roughnessBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strong the bump effect from the detail map is\r\n     * Bigger values mean stronger effect\r\n     */\r\n    @serialize()\r\n    public bumpLevel = 1;\r\n\r\n    private _normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\r\n    /**\r\n     * The method used to blend the bump and detail normals together\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalBlendMethod: number;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Enable or disable the detail map on this material\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the plugin is compatible with a given shader language.\r\n     * @returns true if the plugin is compatible with the shader language\r\n     */\r\n    public override isCompatible(): boolean {\r\n        return true;\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial | StandardMaterial, addToPluginList = true) {\r\n        super(material, \"DetailMap\", 140, new MaterialDetailMapDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public override isReadyForSubMesh(defines: MaterialDetailMapDefines, scene: Scene, engine: AbstractEngine): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty && scene.texturesEnabled) {\r\n            if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                // Detail texture cannot be not blocking.\r\n                if (!this._texture.isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public override prepareDefines(defines: MaterialDetailMapDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n\r\n            const engine = scene.getEngine();\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\r\n                    PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\r\n                    defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n                } else {\r\n                    defines.DETAIL = false;\r\n                }\r\n            }\r\n        } else {\r\n            defines.DETAIL = false;\r\n        }\r\n    }\r\n\r\n    public override bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\r\n                BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.setTexture(\"detailSampler\", this._texture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public override getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public override dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n        }\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"DetailMapConfiguration\";\r\n    }\r\n\r\n    public override getSamplers(samplers: string[]): void {\r\n        samplers.push(\"detailSampler\");\r\n    }\r\n\r\n    public override getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vDetailInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"detailMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n", "import { Constants } from \"core/Engines/constants\";\r\nimport type { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { Effect } from \"core/Materials/effect\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Matrix } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Type of clear operation to perform on a geometry texture.\r\n */\r\nexport const enum GeometryRenderingTextureClearType {\r\n    /**\r\n     * Clear the texture with zero.\r\n     */\r\n    Zero = 0,\r\n\r\n    /**\r\n     * Clear the texture with one.\r\n     */\r\n    One = 1,\r\n\r\n    /**\r\n     * Clear the texture with the maximum view Z value.\r\n     */\r\n    MaxViewZ = 2,\r\n}\r\n\r\n/**\r\n * Configuration for geometry rendering.\r\n * A configuration is created for each rendering pass a geometry rendering is used in.\r\n */\r\nexport type GeometryRenderingConfiguration = {\r\n    /**\r\n     * Defines used for the geometry rendering.\r\n     */\r\n    defines: { [name: string]: number };\r\n\r\n    /**\r\n     * Previous world matrices for meshes.\r\n     */\r\n    previousWorldMatrices: { [index: number]: Matrix };\r\n\r\n    /**\r\n     * Previous view projection matrix.\r\n     */\r\n    previousViewProjection: Matrix;\r\n\r\n    /**\r\n     * Current view projection matrix.\r\n     */\r\n    currentViewProjection: Matrix;\r\n\r\n    /**\r\n     * Previous bones for skinned meshes.\r\n     */\r\n    previousBones: { [index: number]: Float32Array };\r\n\r\n    /**\r\n     * Last frame id the configuration was updated.\r\n     */\r\n    lastUpdateFrameId: number;\r\n\r\n    /**\r\n     * List of excluded skinned meshes.\r\n     */\r\n    excludedSkinnedMesh: AbstractMesh[];\r\n};\r\n\r\n/**\r\n * Helper class to manage geometry rendering.\r\n */\r\nexport class MaterialHelperGeometryRendering {\r\n    /**\r\n     * Descriptions of the geometry textures.\r\n     */\r\n    public static readonly GeometryTextureDescriptions = [\r\n        {\r\n            type: Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE,\r\n            name: \"Irradiance\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_IRRADIANCE\",\r\n            defineIndex: \"PREPASS_IRRADIANCE_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_POSITION_TEXTURE_TYPE,\r\n            name: \"WorldPosition\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_POSITION\",\r\n            defineIndex: \"PREPASS_POSITION_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_VELOCITY_TEXTURE_TYPE,\r\n            name: \"Velocity\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_VELOCITY\",\r\n            defineIndex: \"PREPASS_VELOCITY_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE,\r\n            name: \"Reflectivity\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_REFLECTIVITY\",\r\n            defineIndex: \"PREPASS_REFLECTIVITY_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n            name: \"ViewDepth\",\r\n            clearType: GeometryRenderingTextureClearType.MaxViewZ,\r\n            define: \"PREPASS_DEPTH\",\r\n            defineIndex: \"PREPASS_DEPTH_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_NORMAL_TEXTURE_TYPE,\r\n            name: \"ViewNormal\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_NORMAL\",\r\n            defineIndex: \"PREPASS_NORMAL_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE,\r\n            name: \"AlbedoSqrt\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_ALBEDO_SQRT\",\r\n            defineIndex: \"PREPASS_ALBEDO_SQRT_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_WORLD_NORMAL_TEXTURE_TYPE,\r\n            name: \"WorldNormal\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_WORLD_NORMAL\",\r\n            defineIndex: \"PREPASS_WORLD_NORMAL_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_LOCAL_POSITION_TEXTURE_TYPE,\r\n            name: \"LocalPosition\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_LOCAL_POSITION\",\r\n            defineIndex: \"PREPASS_LOCAL_POSITION_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_SCREENSPACE_DEPTH_TEXTURE_TYPE,\r\n            name: \"ScreenDepth\",\r\n            clearType: GeometryRenderingTextureClearType.One,\r\n            define: \"PREPASS_SCREENSPACE_DEPTH\",\r\n            defineIndex: \"PREPASS_SCREENSPACE_DEPTH_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE,\r\n            name: \"LinearVelocity\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_VELOCITY_LINEAR\",\r\n            defineIndex: \"PREPASS_VELOCITY_LINEAR_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_ALBEDO_TEXTURE_TYPE,\r\n            name: \"Albedo\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_ALBEDO\",\r\n            defineIndex: \"PREPASS_ALBEDO_INDEX\",\r\n        },\r\n    ];\r\n\r\n    private static _Configurations: { [renderPassId: number]: GeometryRenderingConfiguration } = {};\r\n\r\n    /**\r\n     * Creates a new geometry rendering configuration.\r\n     * @param renderPassId Render pass id the configuration is created for.\r\n     * @returns The created configuration.\r\n     */\r\n    public static CreateConfiguration(renderPassId: number) {\r\n        MaterialHelperGeometryRendering._Configurations[renderPassId] = {\r\n            defines: {},\r\n            previousWorldMatrices: {},\r\n            previousViewProjection: Matrix.Zero(),\r\n            currentViewProjection: Matrix.Zero(),\r\n            previousBones: {},\r\n            lastUpdateFrameId: -1,\r\n            excludedSkinnedMesh: [],\r\n        };\r\n        return MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Deletes a geometry rendering configuration.\r\n     * @param renderPassId The render pass id of the configuration to delete.\r\n     */\r\n    public static DeleteConfiguration(renderPassId: number) {\r\n        delete MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Gets a geometry rendering configuration.\r\n     * @param renderPassId The render pass id of the configuration to get.\r\n     * @returns The configuration.\r\n     */\r\n    public static GetConfiguration(renderPassId: number): GeometryRenderingConfiguration {\r\n        return MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Adds uniforms and samplers for geometry rendering.\r\n     * @param uniforms The array of uniforms to add to.\r\n     * @param _samplers The array of samplers to add to.\r\n     */\r\n    public static AddUniformsAndSamplers(uniforms: string[], _samplers: string[]) {\r\n        uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\r\n    }\r\n\r\n    /**\r\n     * Marks a list of meshes as dirty for geometry rendering.\r\n     * @param renderPassId The render pass id the meshes are marked as dirty for.\r\n     * @param meshes The list of meshes to mark as dirty.\r\n     */\r\n    public static MarkAsDirty(renderPassId: number, meshes: AbstractMesh[]) {\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n\r\n            for (const subMesh of mesh.subMeshes) {\r\n                subMesh._removeDrawWrapper(renderPassId);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares defines for geometry rendering.\r\n     * @param renderPassId The render pass id the defines are prepared for.\r\n     * @param mesh The mesh the defines are prepared for.\r\n     * @param defines The defines to update according to the geometry rendering configuration.\r\n     */\r\n    public static PrepareDefines(renderPassId: number, mesh: AbstractMesh, defines: MaterialDefines) {\r\n        if (!defines._arePrePassDirty) {\r\n            return;\r\n        }\r\n\r\n        const configuration = MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n        if (!configuration) {\r\n            return;\r\n        }\r\n\r\n        defines[\"PREPASS\"] = true;\r\n        defines[\"PREPASS_COLOR\"] = false;\r\n        defines[\"PREPASS_COLOR_INDEX\"] = -1;\r\n\r\n        let numMRT = 0;\r\n\r\n        for (let i = 0; i < MaterialHelperGeometryRendering.GeometryTextureDescriptions.length; i++) {\r\n            const geometryTextureDescription = MaterialHelperGeometryRendering.GeometryTextureDescriptions[i];\r\n            const defineName = geometryTextureDescription.define;\r\n            const defineIndex = geometryTextureDescription.defineIndex;\r\n            const index = configuration.defines[defineIndex];\r\n\r\n            if (index !== undefined) {\r\n                defines[defineName] = true;\r\n                defines[defineIndex] = index;\r\n                numMRT++;\r\n            } else {\r\n                defines[defineName] = false;\r\n                delete defines[defineIndex];\r\n            }\r\n        }\r\n\r\n        defines[\"SCENE_MRT_COUNT\"] = numMRT;\r\n\r\n        defines[\"BONES_VELOCITY_ENABLED\"] =\r\n            mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton && !mesh.skeleton.isUsingTextureForMatrices && configuration.excludedSkinnedMesh.indexOf(mesh) === -1;\r\n    }\r\n\r\n    /**\r\n     * Binds geometry rendering data for a mesh.\r\n     * @param renderPassId The render pass id the geometry rendering data is bound for.\r\n     * @param effect The effect to bind the geometry rendering data to.\r\n     * @param mesh The mesh to bind the geometry rendering data for.\r\n     * @param world The world matrix of the mesh.\r\n     */\r\n    public static Bind(renderPassId: number, effect: Effect, mesh: Mesh, world: Matrix) {\r\n        const configuration = MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n        if (!configuration) {\r\n            return;\r\n        }\r\n\r\n        if (configuration.defines[\"PREPASS_VELOCITY_INDEX\"] !== undefined || configuration.defines[\"PREPASS_VELOCITY_LINEAR_INDEX\"] !== undefined) {\r\n            if (!configuration.previousWorldMatrices[mesh.uniqueId]) {\r\n                configuration.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n            }\r\n\r\n            const scene = mesh.getScene();\r\n\r\n            if (!configuration.previousViewProjection) {\r\n                configuration.previousViewProjection = scene.getTransformMatrix().clone();\r\n                configuration.currentViewProjection = scene.getTransformMatrix().clone();\r\n            }\r\n\r\n            const engine = scene.getEngine();\r\n\r\n            if (configuration.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\r\n                // First update of the prepass configuration for this rendering pass\r\n                configuration.lastUpdateFrameId = engine.frameId;\r\n                configuration.previousViewProjection.copyFrom(configuration.currentViewProjection);\r\n                configuration.currentViewProjection.copyFrom(scene.getTransformMatrix());\r\n            } else if (configuration.lastUpdateFrameId !== engine.frameId) {\r\n                // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\r\n                configuration.lastUpdateFrameId = engine.frameId;\r\n                configuration.previousViewProjection.copyFrom(configuration.currentViewProjection);\r\n            }\r\n\r\n            effect.setMatrix(\"previousWorld\", configuration.previousWorldMatrices[mesh.uniqueId]);\r\n            effect.setMatrix(\"previousViewProjection\", configuration.previousViewProjection);\r\n\r\n            configuration.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n\r\n            if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n                const skeleton = mesh.skeleton;\r\n\r\n                if (!skeleton.isUsingTextureForMatrices || effect.getUniformIndex(\"boneTextureWidth\") === -1) {\r\n                    const matrices = skeleton.getTransformMatrices(mesh);\r\n\r\n                    if (matrices) {\r\n                        if (!configuration.previousBones[mesh.uniqueId]) {\r\n                            configuration.previousBones[mesh.uniqueId] = matrices.slice();\r\n                        }\r\n                        effect.setMatrices(\"mPreviousBones\", configuration.previousBones[mesh.uniqueId]);\r\n                        configuration.previousBones[mesh.uniqueId].set(matrices);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import type { Matrix } from \"../Maths/math.vector\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Configuration needed for prepass-capable materials\r\n */\r\nexport class PrePassConfiguration {\r\n    /**\r\n     * Previous world matrices of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousWorldMatrices: { [index: number]: Matrix } = {};\r\n    /**\r\n     * Previous view project matrix\r\n     * Used for computing velocity\r\n     */\r\n    public previousViewProjection: Matrix;\r\n    /**\r\n     * Current view projection matrix\r\n     * Used for computing velocity\r\n     */\r\n    public currentViewProjection: Matrix;\r\n    /**\r\n     * Previous bones of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousBones: { [index: number]: Float32Array } = {};\r\n\r\n    private _lastUpdateFrameId: number;\r\n\r\n    /**\r\n     * Add the required uniforms to the current list.\r\n     * @param uniforms defines the current uniform list.\r\n     */\r\n    public static AddUniforms(uniforms: string[]): void {\r\n        uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\r\n    }\r\n\r\n    /**\r\n     * Add the required samplers to the current list.\r\n     * @param samplers defines the current sampler list.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static AddSamplers(samplers: string[]): void {\r\n        // pass\r\n    }\r\n\r\n    /**\r\n     * Binds the material data.\r\n     * @param effect defines the effect to update\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param mesh The mesh\r\n     * @param world World matrix of this mesh\r\n     * @param isFrozen Is the material frozen\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bindForSubMesh(effect: Effect, scene: Scene, mesh: Mesh, world: Matrix, isFrozen: boolean): void {\r\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled && scene.prePassRenderer.currentRTisSceneRT) {\r\n            if (\r\n                scene.prePassRenderer.getIndex(Constants.PREPASS_VELOCITY_TEXTURE_TYPE) !== -1 ||\r\n                scene.prePassRenderer.getIndex(Constants.PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE) !== -1\r\n            ) {\r\n                if (!this.previousWorldMatrices[mesh.uniqueId]) {\r\n                    this.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n                }\r\n\r\n                if (!this.previousViewProjection) {\r\n                    this.previousViewProjection = scene.getTransformMatrix().clone();\r\n                    this.currentViewProjection = scene.getTransformMatrix().clone();\r\n                }\r\n\r\n                const engine = scene.getEngine();\r\n\r\n                if (this.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\r\n                    // First update of the prepass configuration for this rendering pass\r\n                    this._lastUpdateFrameId = engine.frameId;\r\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\r\n                    this.currentViewProjection.copyFrom(scene.getTransformMatrix());\r\n                } else if (this._lastUpdateFrameId !== engine.frameId) {\r\n                    // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\r\n                    this._lastUpdateFrameId = engine.frameId;\r\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\r\n                }\r\n\r\n                effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\r\n                effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\r\n\r\n                this.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n            }\r\n        }\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, serializeAsColor3, expandToProperty, serializeAsFresnelParameters, serializeAsTexture } from \"../Misc/decorators\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\n\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { PrePassConfiguration } from \"./prePassConfiguration\";\r\n\r\nimport type { IImageProcessingConfigurationDefines } from \"./imageProcessingConfiguration.defines\";\r\nimport { ImageProcessingConfiguration } from \"./imageProcessingConfiguration\";\r\nimport type { ColorCurves } from \"./colorCurves\";\r\nimport type { FresnelParameters } from \"./fresnelParameters\";\r\nimport type { ICustomShaderNameResolveOptions } from \"../Materials/material\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\nimport { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport { PushMaterial } from \"./pushMaterial\";\r\n\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { CubeTexture } from \"../Materials/Textures/cubeTexture\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\n\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { EffectFallbacks } from \"./effectFallbacks\";\r\nimport type { Effect, IEffectCreationOptions } from \"./effect\";\r\nimport { DetailMapConfiguration } from \"./material.detailMapConfiguration\";\r\nimport { addClipPlaneUniforms, bindClipPlane } from \"./clipPlaneMaterialHelper\";\r\nimport {\r\n    BindBonesParameters,\r\n    BindFogParameters,\r\n    BindLights,\r\n    BindLogDepth,\r\n    BindMorphTargetParameters,\r\n    BindTextureMatrix,\r\n    HandleFallbacksForShadows,\r\n    PrepareAttributesForBakedVertexAnimation,\r\n    PrepareAttributesForBones,\r\n    PrepareAttributesForInstances,\r\n    PrepareAttributesForMorphTargets,\r\n    PrepareDefinesForAttributes,\r\n    PrepareDefinesForFrameBoundValues,\r\n    PrepareDefinesForLights,\r\n    PrepareDefinesForMergedUV,\r\n    PrepareDefinesForMisc,\r\n    PrepareDefinesForMultiview,\r\n    PrepareDefinesForOIT,\r\n    PrepareDefinesForPrePass,\r\n    PrepareUniformsAndSamplersList,\r\n} from \"./materialHelper.functions\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { ShaderLanguage } from \"./shaderLanguage\";\r\nimport { MaterialHelperGeometryRendering } from \"./materialHelper.geometryrendering\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/** @internal */\r\nexport class StandardMaterialDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public MAINUV1 = false;\r\n    public MAINUV2 = false;\r\n    public MAINUV3 = false;\r\n    public MAINUV4 = false;\r\n    public MAINUV5 = false;\r\n    public MAINUV6 = false;\r\n    public DIFFUSE = false;\r\n    public DIFFUSEDIRECTUV = 0;\r\n    public BAKED_VERTEX_ANIMATION_TEXTURE = false;\r\n    public AMBIENT = false;\r\n    public AMBIENTDIRECTUV = 0;\r\n    public OPACITY = false;\r\n    public OPACITYDIRECTUV = 0;\r\n    public OPACITYRGB = false;\r\n    public REFLECTION = false;\r\n    public EMISSIVE = false;\r\n    public EMISSIVEDIRECTUV = 0;\r\n    public SPECULAR = false;\r\n    public SPECULARDIRECTUV = 0;\r\n    public BUMP = false;\r\n    public BUMPDIRECTUV = 0;\r\n    public PARALLAX = false;\r\n    public PARALLAX_RHS = false;\r\n    public PARALLAXOCCLUSION = false;\r\n    public SPECULAROVERALPHA = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public ALPHAFROMDIFFUSE = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public DIFFUSEFRESNEL = false;\r\n    public OPACITYFRESNEL = false;\r\n    public REFLECTIONFRESNEL = false;\r\n    public REFRACTIONFRESNEL = false;\r\n    public EMISSIVEFRESNEL = false;\r\n    public FRESNEL = false;\r\n    public NORMAL = false;\r\n    public TANGENT = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public UV3 = false;\r\n    public UV4 = false;\r\n    public UV5 = false;\r\n    public UV6 = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public BONETEXTURE = false;\r\n    public BONES_VELOCITY_ENABLED = false;\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public GLOSSINESS = false;\r\n    public ROUGHNESS = false;\r\n    public EMISSIVEASILLUMINATION = false;\r\n    public LINKEMISSIVEWITHDIFFUSE = false;\r\n    public REFLECTIONFRESNELFROMSPECULAR = false;\r\n    public LIGHTMAP = false;\r\n    public LIGHTMAPDIRECTUV = 0;\r\n    public OBJECTSPACE_NORMALMAP = false;\r\n    public USELIGHTMAPASSHADOWMAP = false;\r\n    public REFLECTIONMAP_3D = false;\r\n    public REFLECTIONMAP_SPHERICAL = false;\r\n    public REFLECTIONMAP_PLANAR = false;\r\n    public REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFRACTIONMAP_CUBIC = false;\r\n    public REFLECTIONMAP_PROJECTION = false;\r\n    public REFLECTIONMAP_SKYBOX = false;\r\n    public REFLECTIONMAP_EXPLICIT = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_OPPOSITEZ = false;\r\n    public INVERTCUBICMAP = false;\r\n    public LOGARITHMICDEPTH = false;\r\n    public REFRACTION = false;\r\n    public REFRACTIONMAP_3D = false;\r\n    public REFLECTIONOVERALPHA = false;\r\n    public TWOSIDEDLIGHTING = false;\r\n    public SHADOWFLOAT = false;\r\n    public MORPHTARGETS = false;\r\n    public MORPHTARGETS_POSITION = false;\r\n    public MORPHTARGETS_NORMAL = false;\r\n    public MORPHTARGETS_TANGENT = false;\r\n    public MORPHTARGETS_UV = false;\r\n    public MORPHTARGETS_UV2 = false;\r\n    public MORPHTARGETTEXTURE_HASPOSITIONS = false;\r\n    public MORPHTARGETTEXTURE_HASNORMALS = false;\r\n    public MORPHTARGETTEXTURE_HASTANGENTS = false;\r\n    public MORPHTARGETTEXTURE_HASUVS = false;\r\n    public MORPHTARGETTEXTURE_HASUV2S = false;\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n    public MORPHTARGETS_TEXTURE = false;\r\n    public NONUNIFORMSCALING = false; // https://playground.babylonjs.com#V6DWIH\r\n    public PREMULTIPLYALPHA = false; // https://playground.babylonjs.com#LNVJJ7\r\n    public ALPHATEST_AFTERALLALPHACOMPUTATIONS = false;\r\n    public ALPHABLEND = true;\r\n\r\n    public PREPASS = false;\r\n    public PREPASS_COLOR = false;\r\n    public PREPASS_COLOR_INDEX = -1;\r\n    public PREPASS_IRRADIANCE = false;\r\n    public PREPASS_IRRADIANCE_INDEX = -1;\r\n    public PREPASS_ALBEDO = false;\r\n    public PREPASS_ALBEDO_INDEX = -1;\r\n    public PREPASS_ALBEDO_SQRT = false;\r\n    public PREPASS_ALBEDO_SQRT_INDEX = -1;\r\n    public PREPASS_DEPTH = false;\r\n    public PREPASS_DEPTH_INDEX = -1;\r\n    public PREPASS_SCREENSPACE_DEPTH = false;\r\n    public PREPASS_SCREENSPACE_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMAL = false;\r\n    public PREPASS_NORMAL_INDEX = -1;\r\n    public PREPASS_NORMAL_WORLDSPACE = false;\r\n    public PREPASS_WORLD_NORMAL = false;\r\n    public PREPASS_WORLD_NORMAL_INDEX = -1;\r\n    public PREPASS_POSITION = false;\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    public PREPASS_LOCAL_POSITION = false;\r\n    public PREPASS_LOCAL_POSITION_INDEX = -1;\r\n    public PREPASS_VELOCITY = false;\r\n    public PREPASS_VELOCITY_INDEX = -1;\r\n    public PREPASS_VELOCITY_LINEAR = false;\r\n    public PREPASS_VELOCITY_LINEAR_INDEX = -1;\r\n    public PREPASS_REFLECTIVITY = false;\r\n    public PREPASS_REFLECTIVITY_INDEX = -1;\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    public RGBDLIGHTMAP = false;\r\n    public RGBDREFLECTION = false;\r\n    public RGBDREFRACTION = false;\r\n\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = 0;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public DITHER = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n    public MULTIVIEW = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\r\n    public CAMERA_ORTHOGRAPHIC = false;\r\n    public CAMERA_PERSPECTIVE = false;\r\n    public AREALIGHTSUPPORTED = true;\r\n\r\n    /**\r\n     * If the reflection texture on this material is in linear color space\r\n     * @internal\r\n     */\r\n    public IS_REFLECTION_LINEAR = false;\r\n    /**\r\n     * If the refraction texture on this material is in linear color space\r\n     * @internal\r\n     */\r\n    public IS_REFRACTION_LINEAR = false;\r\n    public EXPOSURE = false;\r\n\r\n    public DECAL_AFTER_DETAIL = false;\r\n\r\n    /**\r\n     * Initializes the Standard Material defines.\r\n     * @param externalProperties The external properties\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        super(externalProperties);\r\n        this.rebuild();\r\n    }\r\n\r\n    public setReflectionMode(modeToEnable: string) {\r\n        const modes = [\r\n            \"REFLECTIONMAP_CUBIC\",\r\n            \"REFLECTIONMAP_EXPLICIT\",\r\n            \"REFLECTIONMAP_PLANAR\",\r\n            \"REFLECTIONMAP_PROJECTION\",\r\n            \"REFLECTIONMAP_PROJECTION\",\r\n            \"REFLECTIONMAP_SKYBOX\",\r\n            \"REFLECTIONMAP_SPHERICAL\",\r\n            \"REFLECTIONMAP_EQUIRECTANGULAR\",\r\n            \"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\",\r\n            \"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\",\r\n        ];\r\n\r\n        for (const mode of modes) {\r\n            (<any>this)[mode] = mode === modeToEnable;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * This is the default material used in Babylon. It is the best trade off between quality\r\n * and performances.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\r\n */\r\nexport class StandardMaterial extends PushMaterial {\r\n    /**\r\n     * Force all the standard materials to compile to glsl even on WebGPU engines.\r\n     * False by default. This is mostly meant for backward compatibility.\r\n     */\r\n    public static ForceGLSL = false;\r\n\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The basic texture of the material as viewed under a light.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public diffuseTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"ambientTexture\")\r\n    private _ambientTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * AKA Occlusion Texture in other nomenclature, it helps adding baked shadows into your material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public ambientTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the transparency of the material from a texture.\r\n     * The final alpha value can be read either from the red channel (if texture.getAlphaFromRGB is false)\r\n     * or from the luminance or the current texel (if texture.getAlphaFromRGB is true)\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public opacityTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"reflectionTexture\")\r\n    private _reflectionTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the texture used to display the reflection.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public reflectionTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"emissiveTexture\")\r\n    private _emissiveTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define texture of the material as if self lit.\r\n     * This will be mixed in the final result even in the absence of light.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"specularTexture\")\r\n    private _specularTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define how the color and intensity of the highlight given by the light in the material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public specularTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"bumpTexture\")\r\n    private _bumpTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Bump mapping is a technique to simulate bump and dents on a rendered surface.\r\n     * These are made by creating a normal map from an image. The means to do this can be found on the web, a search for 'normal map generator' will bring up free and paid for methods of doing this.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#bump-map\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"lightmapTexture\")\r\n    private _lightmapTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Complex lighting can be computationally expensive to compute at runtime.\r\n     * To save on computation, lightmaps may be used to store calculated lighting in a texture which will be applied to a given mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction#lightmaps\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public lightmapTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"refractionTexture\")\r\n    private _refractionTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the texture used to display the refraction.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public refractionTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * The color of the material lit by the environmental background lighting.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#ambient-color-example\r\n     */\r\n    @serializeAsColor3(\"ambient\")\r\n    public ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * The basic color of the material as viewed under a light.\r\n     */\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Define how the color and intensity of the highlight given by the light in the material.\r\n     */\r\n    @serializeAsColor3(\"specular\")\r\n    public specularColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Define the color of the material as if self lit.\r\n     * This will be mixed in the final result even in the absence of light.\r\n     */\r\n    @serializeAsColor3(\"emissive\")\r\n    public emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Defines how sharp are the highlights in the material.\r\n     * The bigger the value the sharper giving a more glossy feeling to the result.\r\n     * Reversely, the smaller the value the blurrier giving a more rough feeling to the result.\r\n     */\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"useAlphaFromDiffuseTexture\")\r\n    private _useAlphaFromDiffuseTexture = false;\r\n    /**\r\n     * Does the transparency come from the diffuse texture alpha channel.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public useAlphaFromDiffuseTexture: boolean;\r\n\r\n    @serialize(\"useEmissiveAsIllumination\")\r\n    private _useEmissiveAsIllumination = false;\r\n    /**\r\n     * If true, the emissive value is added into the end result, otherwise it is multiplied in.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useEmissiveAsIllumination: boolean;\r\n\r\n    @serialize(\"linkEmissiveWithDiffuse\")\r\n    private _linkEmissiveWithDiffuse = false;\r\n    /**\r\n     * If true, some kind of energy conservation will prevent the end result to be more than 1 by reducing\r\n     * the emissive level when the final color is close to one.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public linkEmissiveWithDiffuse: boolean;\r\n\r\n    @serialize(\"useSpecularOverAlpha\")\r\n    private _useSpecularOverAlpha = false;\r\n    /**\r\n     * Specifies that the material will keep the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When sun reflects on it you can not see what is behind.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useSpecularOverAlpha: boolean;\r\n\r\n    @serialize(\"useReflectionOverAlpha\")\r\n    private _useReflectionOverAlpha = false;\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useReflectionOverAlpha: boolean;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    /**\r\n     * Does lights from the scene impacts this material.\r\n     * It can be a nice trick for performance to disable lighting on a fully emissive material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"useObjectSpaceNormalMap\")\r\n    private _useObjectSpaceNormalMap = false;\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useObjectSpaceNormalMap: boolean;\r\n\r\n    @serialize(\"useParallax\")\r\n    private _useParallax = false;\r\n    /**\r\n     * Is parallax enabled or not.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/parallaxMapping\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallax: boolean;\r\n\r\n    @serialize(\"useParallaxOcclusion\")\r\n    private _useParallaxOcclusion = false;\r\n    /**\r\n     * Is parallax occlusion enabled or not.\r\n     * If true, the outcome is way more realistic than traditional Parallax but you can expect a performance hit that worthes consideration.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/parallaxMapping\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallaxOcclusion: boolean;\r\n\r\n    /**\r\n     * Apply a scaling factor that determine which \"depth\" the height map should reprensent. A value between 0.05 and 0.1 is reasonnable in Parallax, you can reach 0.2 using Parallax Occlusion.\r\n     */\r\n    @serialize()\r\n    public parallaxScaleBias = 0.05;\r\n\r\n    @serialize(\"roughness\")\r\n    private _roughness = 0;\r\n    /**\r\n     * Helps to define how blurry the reflections should appears in the material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public roughness: number;\r\n\r\n    /**\r\n     * In case of refraction, define the value of the index of refraction.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @serialize()\r\n    public indexOfRefraction = 0.98;\r\n\r\n    /**\r\n     * Invert the refraction texture alongside the y axis.\r\n     * It can be useful with procedural textures or probe for instance.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @serialize()\r\n    public invertRefractionY = true;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @serialize()\r\n    public alphaCutOff = 0.4;\r\n\r\n    @serialize(\"useLightmapAsShadowmap\")\r\n    private _useLightmapAsShadowmap = false;\r\n    /**\r\n     * In case of light mapping, define whether the map contains light or shadow informations.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useLightmapAsShadowmap: boolean;\r\n\r\n    // Fresnel\r\n    @serializeAsFresnelParameters(\"diffuseFresnelParameters\")\r\n    private _diffuseFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the diffuse fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public diffuseFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"opacityFresnelParameters\")\r\n    private _opacityFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the opacity fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelAndMiscDirty\")\r\n    public opacityFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"reflectionFresnelParameters\")\r\n    private _reflectionFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the reflection fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public reflectionFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"refractionFresnelParameters\")\r\n    private _refractionFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the refraction fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public refractionFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"emissiveFresnelParameters\")\r\n    private _emissiveFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the emissive fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public emissiveFresnelParameters: FresnelParameters;\r\n\r\n    @serialize(\"useReflectionFresnelFromSpecular\")\r\n    private _useReflectionFresnelFromSpecular = false;\r\n    /**\r\n     * If true automatically deducts the fresnels values from the material specularity.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public useReflectionFresnelFromSpecular: boolean;\r\n\r\n    @serialize(\"useGlossinessFromSpecularMapAlpha\")\r\n    private _useGlossinessFromSpecularMapAlpha = false;\r\n    /**\r\n     * Defines if the glossiness/roughness of the material should be read from the specular map alpha channel\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useGlossinessFromSpecularMapAlpha: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    /**\r\n     * Defines the maximum number of lights that can be used in the material\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    @serialize(\"invertNormalMapX\")\r\n    private _invertNormalMapX = false;\r\n    /**\r\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapX: boolean;\r\n\r\n    @serialize(\"invertNormalMapY\")\r\n    private _invertNormalMapY = false;\r\n    /**\r\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapY: boolean;\r\n\r\n    @serialize(\"twoSidedLighting\")\r\n    private _twoSidedLighting = false;\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public twoSidedLighting: boolean;\r\n\r\n    @serialize(\"applyDecalMapAfterDetailMap\")\r\n    private _applyDecalMapAfterDetailMap = false;\r\n    /**\r\n     * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public applyDecalMapAfterDetailMap: boolean;\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the standard Material.\r\n     */\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: ImageProcessingConfiguration) {\r\n        this._attachImageProcessingConfiguration(value);\r\n\r\n        // Ensure the effect will be rebuilt.\r\n        this._markAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>>;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the Standard Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed\r\n        if (!configuration) {\r\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._markAllSubMeshesAsImageProcessingDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    private _shadersLoaded = false;\r\n\r\n    /**\r\n     * Defines additional PrePass parameters for the material.\r\n     */\r\n    public readonly prePassConfiguration: PrePassConfiguration;\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public override get isPrePassCapable(): boolean {\r\n        return !this.disableDepthWrite;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get cameraColorCurvesEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set cameraColorCurvesEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get cameraColorGradingEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public set cameraColorGradingEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether tonemapping is enabled or not.\r\n     */\r\n    public get cameraToneMappingEnabled(): boolean {\r\n        return this._imageProcessingConfiguration.toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether tonemapping is enabled or not\r\n     */\r\n    public set cameraToneMappingEnabled(value: boolean) {\r\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\r\n    public get cameraExposure(): number {\r\n        return this._imageProcessingConfiguration.exposure;\r\n    }\r\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\r\n    public set cameraExposure(value: number) {\r\n        this._imageProcessingConfiguration.exposure = value;\r\n    }\r\n\r\n    /**\r\n     * Gets The camera contrast used on this material.\r\n     */\r\n    public get cameraContrast(): number {\r\n        return this._imageProcessingConfiguration.contrast;\r\n    }\r\n\r\n    /**\r\n     * Sets The camera contrast used on this material.\r\n     */\r\n    public set cameraContrast(value: number) {\r\n        this._imageProcessingConfiguration.contrast = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the Color Grading 2D Lookup Texture.\r\n     */\r\n    public get cameraColorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._imageProcessingConfiguration.colorGradingTexture;\r\n    }\r\n    /**\r\n     * Sets the Color Grading 2D Lookup Texture.\r\n     */\r\n    public set cameraColorGradingTexture(value: Nullable<BaseTexture>) {\r\n        this._imageProcessingConfiguration.colorGradingTexture = value;\r\n    }\r\n\r\n    /**\r\n     * The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\r\n    public get cameraColorCurves(): Nullable<ColorCurves> {\r\n        return this._imageProcessingConfiguration.colorCurves;\r\n    }\r\n    /**\r\n     * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\r\n    public set cameraColorCurves(value: Nullable<ColorCurves>) {\r\n        this._imageProcessingConfiguration.colorCurves = value;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to several textures at once\r\n     */\r\n    public override get canRenderToMRT() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\r\n    public readonly detailMap: DetailMapConfiguration;\r\n\r\n    protected _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n    protected _globalAmbientColor = new Color3(0, 0, 0);\r\n    protected _cacheHasRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Instantiates a new standard material.\r\n     * This is the default material used in Babylon. It is the best trade off between quality\r\n     * and performances.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belong to\r\n     * @param forceGLSL Use the GLSL code generation for the shader (even on WebGPU). Default is false\r\n     */\r\n    constructor(name: string, scene?: Scene, forceGLSL = false) {\r\n        super(name, scene, undefined, forceGLSL || StandardMaterial.ForceGLSL);\r\n\r\n        this.detailMap = new DetailMapConfiguration(this);\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n        this.prePassConfiguration = new PrePassConfiguration();\r\n\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n\r\n            if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._reflectionTexture);\r\n            }\r\n\r\n            if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._refractionTexture);\r\n            }\r\n\r\n            this._eventInfo.renderTargets = this._renderTargets;\r\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\r\n\r\n            return this._renderTargets;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public override get hasRenderTargetTextures(): boolean {\r\n        if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        return this._cacheHasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"StandardMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"StandardMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public override needAlphaBlending(): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsBlend;\r\n        }\r\n\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            this.alpha < 1.0 ||\r\n            this._opacityTexture != null ||\r\n            this._shouldUseAlphaFromDiffuseTexture() ||\r\n            (this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public override needAlphaTesting(): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsTest;\r\n        }\r\n\r\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === Material.MATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not the alpha value of the diffuse texture should be used for alpha blending.\r\n     */\r\n    protected _shouldUseAlphaFromDiffuseTexture(): boolean {\r\n        return this._diffuseTexture != null && this._diffuseTexture.hasAlpha && this._useAlphaFromDiffuseTexture && this._transparencyMode !== Material.MATERIAL_OPAQUE;\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not there is a usable alpha channel for transparency.\r\n     */\r\n    protected _hasAlphaChannel(): boolean {\r\n        return (this._diffuseTexture != null && this._diffuseTexture.hasAlpha) || this._opacityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * Get the texture used for alpha test purpose.\r\n     * @returns the diffuse texture in case of the standard material.\r\n     */\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return this._diffuseTexture;\r\n    }\r\n\r\n    /**\r\n     * Get if the submesh is ready to be used and all its information available.\r\n     * Child classes can use it to update shaders\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances: boolean = false): boolean {\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (drawWrapper.effect && this.isFrozen) {\r\n            if (drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n            subMesh.materialDefines = new StandardMaterialDefines(this._eventInfo.defineNames);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const defines = <StandardMaterialDefines>subMesh.materialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Lights\r\n        defines._needNormals = PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Multiview\r\n        PrepareDefinesForMultiview(scene, defines);\r\n\r\n        // PrePass\r\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\r\n        PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\r\n\r\n        // Order independant transparency\r\n        PrepareDefinesForOIT(scene, defines, oit);\r\n\r\n        MaterialHelperGeometryRendering.PrepareDefines(engine.currentRenderPassId, mesh, defines);\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            this._eventInfo.hasRenderTargetTextures = false;\r\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\r\n            defines._needUVs = false;\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                defines[\"MAINUV\" + i] = false;\r\n            }\r\n            if (scene.texturesEnabled) {\r\n                defines.DIFFUSEDIRECTUV = 0;\r\n                defines.BUMPDIRECTUV = 0;\r\n                defines.AMBIENTDIRECTUV = 0;\r\n                defines.OPACITYDIRECTUV = 0;\r\n                defines.EMISSIVEDIRECTUV = 0;\r\n                defines.SPECULARDIRECTUV = 0;\r\n                defines.LIGHTMAPDIRECTUV = 0;\r\n\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._diffuseTexture, defines, \"DIFFUSE\");\r\n                    }\r\n                } else {\r\n                    defines.DIFFUSE = false;\r\n                }\r\n\r\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\r\n                    }\r\n                } else {\r\n                    defines.AMBIENT = false;\r\n                }\r\n\r\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\r\n                        defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\r\n                    }\r\n                } else {\r\n                    defines.OPACITY = false;\r\n                }\r\n\r\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                    if (!this._reflectionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needNormals = true;\r\n                        defines.REFLECTION = true;\r\n\r\n                        defines.ROUGHNESS = this._roughness > 0;\r\n                        defines.REFLECTIONOVERALPHA = this._useReflectionOverAlpha;\r\n                        defines.INVERTCUBICMAP = this._reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE;\r\n                        defines.REFLECTIONMAP_3D = this._reflectionTexture.isCube;\r\n                        defines.REFLECTIONMAP_OPPOSITEZ =\r\n                            defines.REFLECTIONMAP_3D && this.getScene().useRightHandedSystem ? !this._reflectionTexture.invertZ : this._reflectionTexture.invertZ;\r\n                        defines.RGBDREFLECTION = this._reflectionTexture.isRGBD;\r\n\r\n                        switch (this._reflectionTexture.coordinatesMode) {\r\n                            case Texture.EXPLICIT_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EXPLICIT\");\r\n                                break;\r\n                            case Texture.PLANAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_PLANAR\");\r\n                                break;\r\n                            case Texture.PROJECTION_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_PROJECTION\");\r\n                                break;\r\n                            case Texture.SKYBOX_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_SKYBOX\");\r\n                                break;\r\n                            case Texture.SPHERICAL_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_SPHERICAL\");\r\n                                break;\r\n                            case Texture.EQUIRECTANGULAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR\");\r\n                                break;\r\n                            case Texture.FIXED_EQUIRECTANGULAR_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_EQUIRECTANGULAR_FIXED\");\r\n                                break;\r\n                            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED\");\r\n                                break;\r\n                            case Texture.CUBIC_MODE:\r\n                            case Texture.INVCUBIC_MODE:\r\n                            default:\r\n                                defines.setReflectionMode(\"REFLECTIONMAP_CUBIC\");\r\n                                break;\r\n                        }\r\n\r\n                        defines.USE_LOCAL_REFLECTIONMAP_CUBIC = (<any>this._reflectionTexture).boundingBoxSize ? true : false;\r\n                    }\r\n                } else {\r\n                    defines.REFLECTION = false;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\r\n                }\r\n\r\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\r\n                    }\r\n                } else {\r\n                    defines.EMISSIVE = false;\r\n                }\r\n\r\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\r\n                        defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\r\n                        defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\r\n                    }\r\n                } else {\r\n                    defines.LIGHTMAP = false;\r\n                }\r\n\r\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                    if (!this._specularTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._specularTexture, defines, \"SPECULAR\");\r\n                        defines.GLOSSINESS = this._useGlossinessFromSpecularMapAlpha;\r\n                    }\r\n                } else {\r\n                    defines.SPECULAR = false;\r\n                }\r\n\r\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && StandardMaterial.BumpTextureEnabled) {\r\n                    // Bump texture can not be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\r\n\r\n                        defines.PARALLAX = this._useParallax;\r\n                        defines.PARALLAX_RHS = scene.useRightHandedSystem;\r\n                        defines.PARALLAXOCCLUSION = this._useParallaxOcclusion;\r\n                    }\r\n\r\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\r\n                } else {\r\n                    defines.BUMP = false;\r\n                    defines.PARALLAX = false;\r\n                    defines.PARALLAX_RHS = false;\r\n                    defines.PARALLAXOCCLUSION = false;\r\n                }\r\n\r\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                    if (!this._refractionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.REFRACTION = true;\r\n\r\n                        defines.REFRACTIONMAP_3D = this._refractionTexture.isCube;\r\n                        defines.RGBDREFRACTION = this._refractionTexture.isRGBD;\r\n                        defines.USE_LOCAL_REFRACTIONMAP_CUBIC = (<any>this._refractionTexture).boundingBoxSize ? true : false;\r\n                    }\r\n                } else {\r\n                    defines.REFRACTION = false;\r\n                }\r\n\r\n                defines.TWOSIDEDLIGHTING = !this._backFaceCulling && this._twoSidedLighting;\r\n            } else {\r\n                defines.DIFFUSE = false;\r\n                defines.AMBIENT = false;\r\n                defines.OPACITY = false;\r\n                defines.REFLECTION = false;\r\n                defines.EMISSIVE = false;\r\n                defines.LIGHTMAP = false;\r\n                defines.BUMP = false;\r\n                defines.REFRACTION = false;\r\n            }\r\n\r\n            defines.ALPHAFROMDIFFUSE = this._shouldUseAlphaFromDiffuseTexture();\r\n\r\n            defines.EMISSIVEASILLUMINATION = this._useEmissiveAsIllumination;\r\n\r\n            defines.LINKEMISSIVEWITHDIFFUSE = this._linkEmissiveWithDiffuse;\r\n\r\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\r\n\r\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n\r\n            defines.ALPHATEST_AFTERALLALPHACOMPUTATIONS = this.transparencyMode !== null;\r\n\r\n            defines.ALPHABLEND = this.transparencyMode === null || this.needAlphaBlendingForMesh(mesh); // check on null for backward compatibility\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        if (!this._eventInfo.isReadyForSubMesh) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n\r\n            defines.IS_REFLECTION_LINEAR = this.reflectionTexture != null && !this.reflectionTexture.gammaSpace;\r\n            defines.IS_REFRACTION_LINEAR = this.refractionTexture != null && !this.refractionTexture.gammaSpace;\r\n        }\r\n\r\n        if (defines._areFresnelDirty) {\r\n            if (StandardMaterial.FresnelEnabled) {\r\n                // Fresnel\r\n                if (\r\n                    this._diffuseFresnelParameters ||\r\n                    this._opacityFresnelParameters ||\r\n                    this._emissiveFresnelParameters ||\r\n                    this._refractionFresnelParameters ||\r\n                    this._reflectionFresnelParameters\r\n                ) {\r\n                    defines.DIFFUSEFRESNEL = this._diffuseFresnelParameters && this._diffuseFresnelParameters.isEnabled;\r\n\r\n                    defines.OPACITYFRESNEL = this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled;\r\n\r\n                    defines.REFLECTIONFRESNEL = this._reflectionFresnelParameters && this._reflectionFresnelParameters.isEnabled;\r\n\r\n                    defines.REFLECTIONFRESNELFROMSPECULAR = this._useReflectionFresnelFromSpecular;\r\n\r\n                    defines.REFRACTIONFRESNEL = this._refractionFresnelParameters && this._refractionFresnelParameters.isEnabled;\r\n\r\n                    defines.EMISSIVEFRESNEL = this._emissiveFresnelParameters && this._emissiveFresnelParameters.isEnabled;\r\n\r\n                    defines._needNormals = true;\r\n                    defines.FRESNEL = true;\r\n                }\r\n            } else {\r\n                defines.FRESNEL = false;\r\n            }\r\n        }\r\n\r\n        // Check if Area Lights have LTC texture.\r\n        if (defines[\"AREALIGHTUSED\"]) {\r\n            for (let index = 0; index < mesh.lightSources.length; index++) {\r\n                if (!mesh.lightSources[index]._isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        PrepareDefinesForMisc(\r\n            mesh,\r\n            scene,\r\n            this._useLogarithmicDepth,\r\n            this.pointsCloud,\r\n            this.fogEnabled,\r\n            this.needAlphaTestingForMesh(mesh),\r\n            defines,\r\n            this._applyDecalMapAfterDetailMap\r\n        );\r\n\r\n        // Values that need to be evaluated on every frame\r\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\r\n\r\n        // External config\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.mesh = mesh;\r\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, true, true, true);\r\n\r\n        // External config\r\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\r\n\r\n        // Get correct effect\r\n        let forceWasNotReadyPreviously = false;\r\n\r\n        if (defines.isDirty) {\r\n            const lightDisposed = defines._areLightsDisposed;\r\n            defines.markAsProcessed();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.REFLECTION) {\r\n                fallbacks.addFallback(0, \"REFLECTION\");\r\n            }\r\n\r\n            if (defines.SPECULAR) {\r\n                fallbacks.addFallback(0, \"SPECULAR\");\r\n            }\r\n\r\n            if (defines.BUMP) {\r\n                fallbacks.addFallback(0, \"BUMP\");\r\n            }\r\n\r\n            if (defines.PARALLAX) {\r\n                fallbacks.addFallback(1, \"PARALLAX\");\r\n            }\r\n\r\n            if (defines.PARALLAX_RHS) {\r\n                fallbacks.addFallback(1, \"PARALLAX_RHS\");\r\n            }\r\n\r\n            if (defines.PARALLAXOCCLUSION) {\r\n                fallbacks.addFallback(0, \"PARALLAXOCCLUSION\");\r\n            }\r\n\r\n            if (defines.SPECULAROVERALPHA) {\r\n                fallbacks.addFallback(0, \"SPECULAROVERALPHA\");\r\n            }\r\n\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            if (defines.POINTSIZE) {\r\n                fallbacks.addFallback(0, \"POINTSIZE\");\r\n            }\r\n\r\n            if (defines.LOGARITHMICDEPTH) {\r\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\r\n            }\r\n\r\n            HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights);\r\n\r\n            if (defines.SPECULARTERM) {\r\n                fallbacks.addFallback(0, \"SPECULARTERM\");\r\n            }\r\n\r\n            if (defines.DIFFUSEFRESNEL) {\r\n                fallbacks.addFallback(1, \"DIFFUSEFRESNEL\");\r\n            }\r\n\r\n            if (defines.OPACITYFRESNEL) {\r\n                fallbacks.addFallback(2, \"OPACITYFRESNEL\");\r\n            }\r\n\r\n            if (defines.REFLECTIONFRESNEL) {\r\n                fallbacks.addFallback(3, \"REFLECTIONFRESNEL\");\r\n            }\r\n\r\n            if (defines.EMISSIVEFRESNEL) {\r\n                fallbacks.addFallback(4, \"EMISSIVEFRESNEL\");\r\n            }\r\n\r\n            if (defines.FRESNEL) {\r\n                fallbacks.addFallback(4, \"FRESNEL\");\r\n            }\r\n\r\n            if (defines.MULTIVIEW) {\r\n                fallbacks.addFallback(0, \"MULTIVIEW\");\r\n            }\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                if (defines[\"UV\" + i]) {\r\n                    attribs.push(`uv${i === 1 ? \"\" : i}`);\r\n                }\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            PrepareAttributesForInstances(attribs, defines);\r\n            PrepareAttributesForMorphTargets(attribs, mesh, defines);\r\n            PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n\r\n            let shaderName = \"default\";\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vAmbientColor\",\r\n                \"vDiffuseColor\",\r\n                \"vSpecularColor\",\r\n                \"vEmissiveColor\",\r\n                \"visibility\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"vAmbientInfos\",\r\n                \"vOpacityInfos\",\r\n                \"vReflectionInfos\",\r\n                \"vEmissiveInfos\",\r\n                \"vSpecularInfos\",\r\n                \"vBumpInfos\",\r\n                \"vLightmapInfos\",\r\n                \"vRefractionInfos\",\r\n                \"mBones\",\r\n                \"diffuseMatrix\",\r\n                \"ambientMatrix\",\r\n                \"opacityMatrix\",\r\n                \"reflectionMatrix\",\r\n                \"emissiveMatrix\",\r\n                \"specularMatrix\",\r\n                \"bumpMatrix\",\r\n                \"normalMatrix\",\r\n                \"lightmapMatrix\",\r\n                \"refractionMatrix\",\r\n                \"diffuseLeftColor\",\r\n                \"diffuseRightColor\",\r\n                \"opacityParts\",\r\n                \"reflectionLeftColor\",\r\n                \"reflectionRightColor\",\r\n                \"emissiveLeftColor\",\r\n                \"emissiveRightColor\",\r\n                \"refractionLeftColor\",\r\n                \"refractionRightColor\",\r\n                \"vReflectionPosition\",\r\n                \"vReflectionSize\",\r\n                \"vRefractionPosition\",\r\n                \"vRefractionSize\",\r\n                \"logarithmicDepthConstant\",\r\n                \"vTangentSpaceParams\",\r\n                \"alphaCutOff\",\r\n                \"boneTextureWidth\",\r\n                \"morphTargetTextureInfo\",\r\n                \"morphTargetTextureIndices\",\r\n            ];\r\n\r\n            const samplers = [\r\n                \"diffuseSampler\",\r\n                \"ambientSampler\",\r\n                \"opacitySampler\",\r\n                \"reflectionCubeSampler\",\r\n                \"reflection2DSampler\",\r\n                \"emissiveSampler\",\r\n                \"specularSampler\",\r\n                \"bumpSampler\",\r\n                \"lightmapSampler\",\r\n                \"refractionCubeSampler\",\r\n                \"refraction2DSampler\",\r\n                \"boneSampler\",\r\n                \"morphTargets\",\r\n                \"oitDepthSampler\",\r\n                \"oitFrontColorSampler\",\r\n                \"areaLightsLTC1Sampler\",\r\n                \"areaLightsLTC2Sampler\",\r\n            ];\r\n\r\n            const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\r\n\r\n            const indexParameters = { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS };\r\n\r\n            this._eventInfo.fallbacks = fallbacks;\r\n            this._eventInfo.fallbackRank = 0;\r\n            this._eventInfo.defines = defines;\r\n            this._eventInfo.uniforms = uniforms;\r\n            this._eventInfo.attributes = attribs;\r\n            this._eventInfo.samplers = samplers;\r\n            this._eventInfo.uniformBuffersNames = uniformBuffers;\r\n            this._eventInfo.customCode = undefined;\r\n            this._eventInfo.mesh = mesh;\r\n            this._eventInfo.indexParameters = indexParameters;\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\r\n\r\n            MaterialHelperGeometryRendering.AddUniformsAndSamplers(uniforms, samplers);\r\n\r\n            PrePassConfiguration.AddUniforms(uniforms);\r\n            PrePassConfiguration.AddSamplers(samplers);\r\n\r\n            if (ImageProcessingConfiguration) {\r\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n            }\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this._maxSimultaneousLights,\r\n            });\r\n\r\n            addClipPlaneUniforms(uniforms);\r\n\r\n            const csnrOptions: ICustomShaderNameResolveOptions = {};\r\n\r\n            if (this.customShaderNameResolve) {\r\n                shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\r\n            }\r\n\r\n            const join = defines.toString();\r\n\r\n            const previousEffect = subMesh.effect;\r\n            let effect = scene.getEngine().createEffect(\r\n                shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters,\r\n                    processFinalCode: csnrOptions.processFinalCode,\r\n                    processCodeAfterIncludes: this._eventInfo.customCode,\r\n                    multiTarget: defines.PREPASS,\r\n                    shaderLanguage: this._shaderLanguage,\r\n                    extraInitializationsAsync: this._shadersLoaded\r\n                        ? undefined\r\n                        : async () => {\r\n                              if (this._shaderLanguage === ShaderLanguage.WGSL) {\r\n                                  await Promise.all([import(\"../ShadersWGSL/default.vertex\"), import(\"../ShadersWGSL/default.fragment\")]);\r\n                              } else {\r\n                                  await Promise.all([import(\"../Shaders/default.vertex\"), import(\"../Shaders/default.fragment\")]);\r\n                              }\r\n                              this._shadersLoaded = true;\r\n                          },\r\n                },\r\n                engine\r\n            );\r\n\r\n            this._eventInfo.customCode = undefined;\r\n\r\n            if (effect) {\r\n                if (this._onEffectCreatedObservable) {\r\n                    onCreatedEffectParameters.effect = effect;\r\n                    onCreatedEffectParameters.subMesh = subMesh;\r\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n                }\r\n\r\n                // Use previous effect while new one is compiling\r\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                    effect = previousEffect;\r\n                    defines.markAsUnprocessed();\r\n\r\n                    forceWasNotReadyPreviously = this.isFrozen;\r\n\r\n                    if (lightDisposed) {\r\n                        // re register in case it takes more than one frame.\r\n                        defines._areLightsDisposed = true;\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    scene.resetCachedMaterial();\r\n                    subMesh.setEffect(effect, defines, this._materialContext);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\r\n        drawWrapper._wasPreviouslyUsingInstances = useInstances;\r\n\r\n        this._checkScenePerformancePriority();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Builds the material UBO layouts.\r\n     * Used internally during the effect preparation.\r\n     */\r\n    public override buildUniformLayout(): void {\r\n        // Order is important !\r\n        const ubo = this._uniformBuffer;\r\n        ubo.addUniform(\"diffuseLeftColor\", 4);\r\n        ubo.addUniform(\"diffuseRightColor\", 4);\r\n        ubo.addUniform(\"opacityParts\", 4);\r\n        ubo.addUniform(\"reflectionLeftColor\", 4);\r\n        ubo.addUniform(\"reflectionRightColor\", 4);\r\n        ubo.addUniform(\"refractionLeftColor\", 4);\r\n        ubo.addUniform(\"refractionRightColor\", 4);\r\n        ubo.addUniform(\"emissiveLeftColor\", 4);\r\n        ubo.addUniform(\"emissiveRightColor\", 4);\r\n\r\n        ubo.addUniform(\"vDiffuseInfos\", 2);\r\n        ubo.addUniform(\"vAmbientInfos\", 2);\r\n        ubo.addUniform(\"vOpacityInfos\", 2);\r\n        ubo.addUniform(\"vReflectionInfos\", 2);\r\n        ubo.addUniform(\"vReflectionPosition\", 3);\r\n        ubo.addUniform(\"vReflectionSize\", 3);\r\n        ubo.addUniform(\"vEmissiveInfos\", 2);\r\n        ubo.addUniform(\"vLightmapInfos\", 2);\r\n        ubo.addUniform(\"vSpecularInfos\", 2);\r\n        ubo.addUniform(\"vBumpInfos\", 3);\r\n\r\n        ubo.addUniform(\"diffuseMatrix\", 16);\r\n        ubo.addUniform(\"ambientMatrix\", 16);\r\n        ubo.addUniform(\"opacityMatrix\", 16);\r\n        ubo.addUniform(\"reflectionMatrix\", 16);\r\n        ubo.addUniform(\"emissiveMatrix\", 16);\r\n        ubo.addUniform(\"lightmapMatrix\", 16);\r\n        ubo.addUniform(\"specularMatrix\", 16);\r\n        ubo.addUniform(\"bumpMatrix\", 16);\r\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\r\n        ubo.addUniform(\"pointSize\", 1);\r\n        ubo.addUniform(\"alphaCutOff\", 1);\r\n        ubo.addUniform(\"refractionMatrix\", 16);\r\n        ubo.addUniform(\"vRefractionInfos\", 4);\r\n        ubo.addUniform(\"vRefractionPosition\", 3);\r\n        ubo.addUniform(\"vRefractionSize\", 3);\r\n        ubo.addUniform(\"vSpecularColor\", 4);\r\n        ubo.addUniform(\"vEmissiveColor\", 3);\r\n        ubo.addUniform(\"vDiffuseColor\", 4);\r\n        ubo.addUniform(\"vAmbientColor\", 3);\r\n\r\n        super.buildUniformLayout();\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <StandardMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices Mesh.\r\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n        mesh.transferToEffect(world);\r\n\r\n        // Binding unconditionally\r\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\r\n\r\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\r\n\r\n        MaterialHelperGeometryRendering.Bind(scene.getEngine().currentRenderPassId, this._activeEffect, mesh, world);\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\r\n\r\n        // Normal Matrix\r\n        if (defines.OBJECTSPACE_NORMALMAP) {\r\n            world.toNormalMatrix(this._normalMatrix);\r\n            this.bindOnlyNormalMatrix(this._normalMatrix);\r\n        }\r\n\r\n        const mustRebind = this._mustRebind(scene, effect, subMesh, mesh.visibility);\r\n\r\n        // Bones\r\n        BindBonesParameters(mesh, effect);\r\n        const ubo = this._uniformBuffer;\r\n        if (mustRebind) {\r\n            this.bindViewProjection(effect);\r\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || subMesh._drawWrapper._forceRebindOnNextCall) {\r\n                if (StandardMaterial.FresnelEnabled && defines.FRESNEL) {\r\n                    // Fresnel\r\n                    if (this.diffuseFresnelParameters && this.diffuseFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"diffuseLeftColor\", this.diffuseFresnelParameters.leftColor, this.diffuseFresnelParameters.power);\r\n                        ubo.updateColor4(\"diffuseRightColor\", this.diffuseFresnelParameters.rightColor, this.diffuseFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.opacityFresnelParameters && this.opacityFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\r\n                            \"opacityParts\",\r\n                            new Color3(\r\n                                this.opacityFresnelParameters.leftColor.toLuminance(),\r\n                                this.opacityFresnelParameters.rightColor.toLuminance(),\r\n                                this.opacityFresnelParameters.bias\r\n                            ),\r\n                            this.opacityFresnelParameters.power\r\n                        );\r\n                    }\r\n\r\n                    if (this.reflectionFresnelParameters && this.reflectionFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"reflectionLeftColor\", this.reflectionFresnelParameters.leftColor, this.reflectionFresnelParameters.power);\r\n                        ubo.updateColor4(\"reflectionRightColor\", this.reflectionFresnelParameters.rightColor, this.reflectionFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.refractionFresnelParameters && this.refractionFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"refractionLeftColor\", this.refractionFresnelParameters.leftColor, this.refractionFresnelParameters.power);\r\n                        ubo.updateColor4(\"refractionRightColor\", this.refractionFresnelParameters.rightColor, this.refractionFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.emissiveFresnelParameters && this.emissiveFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"emissiveLeftColor\", this.emissiveFresnelParameters.leftColor, this.emissiveFresnelParameters.power);\r\n                        ubo.updateColor4(\"emissiveRightColor\", this.emissiveFresnelParameters.rightColor, this.emissiveFresnelParameters.bias);\r\n                    }\r\n                }\r\n\r\n                // Textures\r\n                if (scene.texturesEnabled) {\r\n                    if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                        ubo.updateFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                        BindTextureMatrix(this._diffuseTexture, ubo, \"diffuse\");\r\n                    }\r\n\r\n                    if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                        ubo.updateFloat2(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level);\r\n                        BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\r\n                    }\r\n\r\n                    if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                        BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\r\n                    }\r\n\r\n                    if (this._hasAlphaChannel()) {\r\n                        ubo.updateFloat(\"alphaCutOff\", this.alphaCutOff);\r\n                    }\r\n\r\n                    if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                        ubo.updateFloat2(\"vReflectionInfos\", this._reflectionTexture.level, this.roughness);\r\n                        ubo.updateMatrix(\"reflectionMatrix\", this._reflectionTexture.getReflectionTextureMatrix());\r\n\r\n                        if ((<any>this._reflectionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>this._reflectionTexture;\r\n\r\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n                    } else {\r\n                        ubo.updateFloat2(\"vReflectionInfos\", 0.0, this.roughness);\r\n                    }\r\n\r\n                    if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\r\n                        BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\r\n                    }\r\n\r\n                    if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\r\n                        BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\r\n                    }\r\n\r\n                    if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                        ubo.updateFloat2(\"vSpecularInfos\", this._specularTexture.coordinatesIndex, this._specularTexture.level);\r\n                        BindTextureMatrix(this._specularTexture, ubo, \"specular\");\r\n                    }\r\n\r\n                    if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\r\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, 1.0 / this._bumpTexture.level, this.parallaxScaleBias);\r\n                        BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\r\n\r\n                        if (scene._mirroredCameraPosition) {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\r\n                        } else {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\r\n                        }\r\n                    }\r\n\r\n                    if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                        let depth = 1.0;\r\n                        if (!this._refractionTexture.isCube) {\r\n                            ubo.updateMatrix(\"refractionMatrix\", this._refractionTexture.getReflectionTextureMatrix());\r\n\r\n                            if ((<any>this._refractionTexture).depth) {\r\n                                depth = (<any>this._refractionTexture).depth;\r\n                            }\r\n                        }\r\n                        ubo.updateFloat4(\"vRefractionInfos\", this._refractionTexture.level, this.indexOfRefraction, depth, this.invertRefractionY ? -1 : 1);\r\n\r\n                        if ((<any>this._refractionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>this._refractionTexture;\r\n\r\n                            ubo.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Point size\r\n                if (this.pointsCloud) {\r\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\r\n                }\r\n\r\n                ubo.updateColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n\r\n                ubo.updateColor3(\"vEmissiveColor\", StandardMaterial.EmissiveTextureEnabled ? this.emissiveColor : Color3.BlackReadOnly);\r\n                ubo.updateColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha);\r\n\r\n                scene.ambientColor.multiplyToRef(this.ambientColor, this._globalAmbientColor);\r\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\r\n            }\r\n\r\n            // Textures\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    effect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n                }\r\n\r\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                    effect.setTexture(\"ambientSampler\", this._ambientTexture);\r\n                }\r\n\r\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                    effect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                }\r\n\r\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                    if (this._reflectionTexture.isCube) {\r\n                        effect.setTexture(\"reflectionCubeSampler\", this._reflectionTexture);\r\n                    } else {\r\n                        effect.setTexture(\"reflection2DSampler\", this._reflectionTexture);\r\n                    }\r\n                }\r\n\r\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                    effect.setTexture(\"emissiveSampler\", this._emissiveTexture);\r\n                }\r\n\r\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                    effect.setTexture(\"lightmapSampler\", this._lightmapTexture);\r\n                }\r\n\r\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                    effect.setTexture(\"specularSampler\", this._specularTexture);\r\n                }\r\n\r\n                if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\r\n                    effect.setTexture(\"bumpSampler\", this._bumpTexture);\r\n                }\r\n\r\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                    if (this._refractionTexture.isCube) {\r\n                        effect.setTexture(\"refractionCubeSampler\", this._refractionTexture);\r\n                    } else {\r\n                        effect.setTexture(\"refraction2DSampler\", this._refractionTexture);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // OIT with depth peeling\r\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\r\n                this.getScene().depthPeelingRenderer!.bind(effect);\r\n            }\r\n\r\n            this._eventInfo.subMesh = subMesh;\r\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Colors\r\n            this.bindEyePosition(effect);\r\n        } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n\r\n        if (mustRebind || !this.isFrozen) {\r\n            // Lights\r\n            if (scene.lightsEnabled && !this._disableLighting) {\r\n                BindLights(scene, mesh, effect, defines, this._maxSimultaneousLights);\r\n            }\r\n\r\n            // View\r\n            if (\r\n                (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\r\n                this._reflectionTexture ||\r\n                this._refractionTexture ||\r\n                mesh.receiveShadows ||\r\n                defines.PREPASS\r\n            ) {\r\n                this.bindView(effect);\r\n            }\r\n\r\n            // Fog\r\n            BindFogParameters(scene, mesh, effect);\r\n\r\n            // Morph targets\r\n            if (defines.NUM_MORPH_INFLUENCERS) {\r\n                BindMorphTargetParameters(mesh, effect);\r\n            }\r\n\r\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\r\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\r\n            }\r\n\r\n            // Log. depth\r\n            if (this.useLogarithmicDepth) {\r\n                BindLogDepth(defines, effect, scene);\r\n            }\r\n\r\n            // image processing\r\n            if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\r\n                this._imageProcessingConfiguration.bind(this._activeEffect);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        const results = super.getAnimatables();\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\r\n            results.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\r\n            results.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\r\n            results.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._specularTexture && this._specularTexture.animations && this._specularTexture.animations.length > 0) {\r\n            results.push(this._specularTexture);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            results.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\r\n            results.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\r\n            results.push(this._refractionTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public override getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._ambientTexture) {\r\n            activeTextures.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture) {\r\n            activeTextures.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture) {\r\n            activeTextures.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._specularTexture) {\r\n            activeTextures.push(this._specularTexture);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture) {\r\n            activeTextures.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._refractionTexture) {\r\n            activeTextures.push(this._refractionTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._ambientTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._emissiveTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._specularTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._lightmapTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._refractionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     */\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._diffuseTexture?.dispose();\r\n            this._ambientTexture?.dispose();\r\n            this._opacityTexture?.dispose();\r\n            this._reflectionTexture?.dispose();\r\n            this._emissiveTexture?.dispose();\r\n            this._specularTexture?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._lightmapTexture?.dispose();\r\n            this._refractionTexture?.dispose();\r\n        }\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @param cloneTexturesOnlyOnce - if a texture is used in more than one channel (e.g diffuse and opacity), only clone it once and reuse it on the other channels. Default false.\r\n     * @param rootUrl defines the root URL to use to load textures\r\n     * @returns the cloned material\r\n     */\r\n    public override clone(name: string, cloneTexturesOnlyOnce: boolean = true, rootUrl = \"\"): StandardMaterial {\r\n        const result = SerializationHelper.Clone(() => new StandardMaterial(name, this.getScene()), this, { cloneTexturesOnlyOnce });\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        this.stencil.copyTo(result.stencil);\r\n\r\n        this._clonePlugins(result, rootUrl);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a standard material from parsed material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new standard material\r\n     */\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): StandardMaterial {\r\n        const material = SerializationHelper.Parse(() => new StandardMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        Material._ParsePlugins(source, material, scene, rootUrl);\r\n\r\n        return material;\r\n    }\r\n\r\n    // Flags used to enable or disable a type of texture for all Standard Materials\r\n    /**\r\n     * Are diffuse textures enabled in the application.\r\n     */\r\n    public static get DiffuseTextureEnabled(): boolean {\r\n        return MaterialFlags.DiffuseTextureEnabled;\r\n    }\r\n    public static set DiffuseTextureEnabled(value: boolean) {\r\n        MaterialFlags.DiffuseTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are detail textures enabled in the application.\r\n     */\r\n    public static get DetailTextureEnabled(): boolean {\r\n        return MaterialFlags.DetailTextureEnabled;\r\n    }\r\n    public static set DetailTextureEnabled(value: boolean) {\r\n        MaterialFlags.DetailTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are ambient textures enabled in the application.\r\n     */\r\n    public static get AmbientTextureEnabled(): boolean {\r\n        return MaterialFlags.AmbientTextureEnabled;\r\n    }\r\n    public static set AmbientTextureEnabled(value: boolean) {\r\n        MaterialFlags.AmbientTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are opacity textures enabled in the application.\r\n     */\r\n    public static get OpacityTextureEnabled(): boolean {\r\n        return MaterialFlags.OpacityTextureEnabled;\r\n    }\r\n    public static set OpacityTextureEnabled(value: boolean) {\r\n        MaterialFlags.OpacityTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are reflection textures enabled in the application.\r\n     */\r\n    public static get ReflectionTextureEnabled(): boolean {\r\n        return MaterialFlags.ReflectionTextureEnabled;\r\n    }\r\n    public static set ReflectionTextureEnabled(value: boolean) {\r\n        MaterialFlags.ReflectionTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are emissive textures enabled in the application.\r\n     */\r\n    public static get EmissiveTextureEnabled(): boolean {\r\n        return MaterialFlags.EmissiveTextureEnabled;\r\n    }\r\n    public static set EmissiveTextureEnabled(value: boolean) {\r\n        MaterialFlags.EmissiveTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are specular textures enabled in the application.\r\n     */\r\n    public static get SpecularTextureEnabled(): boolean {\r\n        return MaterialFlags.SpecularTextureEnabled;\r\n    }\r\n    public static set SpecularTextureEnabled(value: boolean) {\r\n        MaterialFlags.SpecularTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are bump textures enabled in the application.\r\n     */\r\n    public static get BumpTextureEnabled(): boolean {\r\n        return MaterialFlags.BumpTextureEnabled;\r\n    }\r\n    public static set BumpTextureEnabled(value: boolean) {\r\n        MaterialFlags.BumpTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are lightmap textures enabled in the application.\r\n     */\r\n    public static get LightmapTextureEnabled(): boolean {\r\n        return MaterialFlags.LightmapTextureEnabled;\r\n    }\r\n    public static set LightmapTextureEnabled(value: boolean) {\r\n        MaterialFlags.LightmapTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are refraction textures enabled in the application.\r\n     */\r\n    public static get RefractionTextureEnabled(): boolean {\r\n        return MaterialFlags.RefractionTextureEnabled;\r\n    }\r\n    public static set RefractionTextureEnabled(value: boolean) {\r\n        MaterialFlags.RefractionTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are color grading textures enabled in the application.\r\n     */\r\n    public static get ColorGradingTextureEnabled(): boolean {\r\n        return MaterialFlags.ColorGradingTextureEnabled;\r\n    }\r\n    public static set ColorGradingTextureEnabled(value: boolean) {\r\n        MaterialFlags.ColorGradingTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are fresnels enabled in the application.\r\n     */\r\n    public static get FresnelEnabled(): boolean {\r\n        return MaterialFlags.FresnelEnabled;\r\n    }\r\n    public static set FresnelEnabled(value: boolean) {\r\n        MaterialFlags.FresnelEnabled = value;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.StandardMaterial\", StandardMaterial);\r\n\r\nScene.DefaultMaterialFactory = (scene: Scene) => {\r\n    return new StandardMaterial(\"default material\", scene);\r\n};\r\n", "import type { WebXRSessionManager } from \"./webXRSessionManager\";\r\nimport type { IDisposable } from \"../scene\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { Observable } from \"core/Misc/observable\";\r\n\r\n/**\r\n * Defining the interface required for a (webxr) feature\r\n */\r\nexport interface IWebXRFeature extends IDisposable {\r\n    /**\r\n     * Is this feature attached\r\n     */\r\n    attached: boolean;\r\n    /**\r\n     * Should auto-attach be disabled?\r\n     */\r\n    disableAutoAttach: boolean;\r\n\r\n    /**\r\n     * Attach the feature to the session\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @param force should attachment be forced (even when already attached)\r\n     * @returns true if successful.\r\n     */\r\n    attach(force?: boolean): boolean;\r\n    /**\r\n     * Detach the feature from the session\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    detach(): boolean;\r\n\r\n    /**\r\n     * This function will be executed during before enabling the feature and can be used to not-allow enabling it.\r\n     * Note that at this point the session has NOT started, so this is purely checking if the browser supports it\r\n     *\r\n     * @returns whether or not the feature is compatible in this environment\r\n     */\r\n    isCompatible(): boolean;\r\n\r\n    /**\r\n     * Was this feature disposed;\r\n     */\r\n    isDisposed: boolean;\r\n\r\n    /**\r\n     * The name of the native xr feature name, if applicable (like anchor, hit-test, or hand-tracking)\r\n     */\r\n    xrNativeFeatureName?: string;\r\n\r\n    /**\r\n     * A list of (Babylon WebXR) features this feature depends on\r\n     */\r\n    dependsOn?: string[];\r\n\r\n    /**\r\n     * If this feature requires to extend the XRSessionInit object, this function will return the partial XR session init object\r\n     */\r\n    getXRSessionInitExtension?: () => Promise<Partial<XRSessionInit>>;\r\n\r\n    /**\r\n     * Triggered when the feature is attached\r\n     */\r\n    onFeatureAttachObservable: Observable<IWebXRFeature>;\r\n    /**\r\n     * Triggered when the feature is detached\r\n     */\r\n    onFeatureDetachObservable: Observable<IWebXRFeature>;\r\n}\r\n\r\n/**\r\n * A list of the currently available features without referencing them\r\n */\r\nexport class WebXRFeatureName {\r\n    /**\r\n     * The name of the anchor system feature\r\n     */\r\n    public static readonly ANCHOR_SYSTEM = \"xr-anchor-system\";\r\n    /**\r\n     * The name of the background remover feature\r\n     */\r\n    public static readonly BACKGROUND_REMOVER = \"xr-background-remover\";\r\n    /**\r\n     * The name of the hit test feature\r\n     */\r\n    public static readonly HIT_TEST = \"xr-hit-test\";\r\n    /**\r\n     * The name of the mesh detection feature\r\n     */\r\n    public static readonly MESH_DETECTION = \"xr-mesh-detection\";\r\n    /**\r\n     * physics impostors for xr controllers feature\r\n     */\r\n    public static readonly PHYSICS_CONTROLLERS = \"xr-physics-controller\";\r\n    /**\r\n     * The name of the plane detection feature\r\n     */\r\n    public static readonly PLANE_DETECTION = \"xr-plane-detection\";\r\n    /**\r\n     * The name of the pointer selection feature\r\n     */\r\n    public static readonly POINTER_SELECTION = \"xr-controller-pointer-selection\";\r\n    /**\r\n     * The name of the teleportation feature\r\n     */\r\n    public static readonly TELEPORTATION = \"xr-controller-teleportation\";\r\n    /**\r\n     * The name of the feature points feature.\r\n     */\r\n    public static readonly FEATURE_POINTS = \"xr-feature-points\";\r\n    /**\r\n     * The name of the hand tracking feature.\r\n     */\r\n    public static readonly HAND_TRACKING = \"xr-hand-tracking\";\r\n    /**\r\n     * The name of the image tracking feature\r\n     */\r\n    public static readonly IMAGE_TRACKING = \"xr-image-tracking\";\r\n    /**\r\n     * The name of the near interaction feature\r\n     */\r\n    public static readonly NEAR_INTERACTION = \"xr-near-interaction\";\r\n    /**\r\n     * The name of the DOM overlay feature\r\n     */\r\n    public static readonly DOM_OVERLAY = \"xr-dom-overlay\";\r\n    /**\r\n     * The name of the movement feature\r\n     */\r\n    public static readonly MOVEMENT = \"xr-controller-movement\";\r\n    /**\r\n     * The name of the light estimation feature\r\n     */\r\n    public static readonly LIGHT_ESTIMATION = \"xr-light-estimation\";\r\n    /**\r\n     * The name of the eye tracking feature\r\n     */\r\n    public static readonly EYE_TRACKING = \"xr-eye-tracking\";\r\n    /**\r\n     * The name of the walking locomotion feature\r\n     */\r\n    public static readonly WALKING_LOCOMOTION = \"xr-walking-locomotion\";\r\n    /**\r\n     * The name of the composition layers feature\r\n     */\r\n    public static readonly LAYERS = \"xr-layers\";\r\n    /**\r\n     * The name of the depth sensing feature\r\n     */\r\n    public static readonly DEPTH_SENSING = \"xr-depth-sensing\";\r\n    /**\r\n     * The name of the WebXR Space Warp feature\r\n     */\r\n    public static readonly SPACE_WARP = \"xr-space-warp\";\r\n    /**\r\n     * The name of the WebXR Raw Camera Access feature\r\n     */\r\n    public static readonly RAW_CAMERA_ACCESS = \"xr-raw-camera-access\";\r\n}\r\n\r\n/**\r\n * Defining the constructor of a feature. Used to register the modules.\r\n */\r\nexport type WebXRFeatureConstructor = (xrSessionManager: WebXRSessionManager, options?: any) => () => IWebXRFeature;\r\n\r\n/**\r\n * The WebXR features manager is responsible of enabling or disabling features required for the current XR session.\r\n * It is mainly used in AR sessions.\r\n *\r\n * A feature can have a version that is defined by Babylon (and does not correspond with the webxr version).\r\n */\r\nexport class WebXRFeaturesManager implements IDisposable {\r\n    private static readonly _AvailableFeatures: {\r\n        [name: string]: {\r\n            stable: number;\r\n            latest: number;\r\n            [version: number]: WebXRFeatureConstructor;\r\n        };\r\n    } = {};\r\n\r\n    private _features: {\r\n        [name: string]: {\r\n            featureImplementation: IWebXRFeature;\r\n            version: number;\r\n            enabled: boolean;\r\n            required: boolean;\r\n        };\r\n    } = {};\r\n\r\n    /**\r\n     * The key is the feature to check and the value is the feature that conflicts.\r\n     */\r\n    private static readonly _ConflictingFeatures: { [key: string]: string } = {\r\n        [WebXRFeatureName.TELEPORTATION]: WebXRFeatureName.MOVEMENT,\r\n        [WebXRFeatureName.MOVEMENT]: WebXRFeatureName.TELEPORTATION,\r\n    };\r\n\r\n    /**\r\n     * constructs a new features manages.\r\n     *\r\n     * @param _xrSessionManager an instance of WebXRSessionManager\r\n     */\r\n    constructor(private _xrSessionManager: WebXRSessionManager) {\r\n        // when session starts / initialized - attach\r\n        this._xrSessionManager.onXRSessionInit.add(() => {\r\n            this.getEnabledFeatures().forEach((featureName) => {\r\n                const feature = this._features[featureName];\r\n                if (feature.enabled && !feature.featureImplementation.attached && !feature.featureImplementation.disableAutoAttach) {\r\n                    this.attachFeature(featureName);\r\n                }\r\n            });\r\n        });\r\n\r\n        // when session ends - detach\r\n        this._xrSessionManager.onXRSessionEnded.add(() => {\r\n            this.getEnabledFeatures().forEach((featureName) => {\r\n                const feature = this._features[featureName];\r\n                if (feature.enabled && feature.featureImplementation.attached) {\r\n                    // detach, but don't disable!\r\n                    this.detachFeature(featureName);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Used to register a module. After calling this function a developer can use this feature in the scene.\r\n     * Mainly used internally.\r\n     *\r\n     * @param featureName the name of the feature to register\r\n     * @param constructorFunction the function used to construct the module\r\n     * @param version the (babylon) version of the module\r\n     * @param stable is that a stable version of this module\r\n     */\r\n    public static AddWebXRFeature(featureName: string, constructorFunction: WebXRFeatureConstructor, version: number = 1, stable: boolean = false) {\r\n        this._AvailableFeatures[featureName] = this._AvailableFeatures[featureName] || { latest: version };\r\n        if (version > this._AvailableFeatures[featureName].latest) {\r\n            this._AvailableFeatures[featureName].latest = version;\r\n        }\r\n        if (stable) {\r\n            this._AvailableFeatures[featureName].stable = version;\r\n        }\r\n        this._AvailableFeatures[featureName][version] = constructorFunction;\r\n    }\r\n\r\n    /**\r\n     * Returns a constructor of a specific feature.\r\n     *\r\n     * @param featureName the name of the feature to construct\r\n     * @param version the version of the feature to load\r\n     * @param xrSessionManager the xrSessionManager. Used to construct the module\r\n     * @param options optional options provided to the module.\r\n     * @returns a function that, when called, will return a new instance of this feature\r\n     */\r\n    public static ConstructFeature(featureName: string, version: number = 1, xrSessionManager: WebXRSessionManager, options?: any): () => IWebXRFeature {\r\n        const constructorFunction = this._AvailableFeatures[featureName][version];\r\n        if (!constructorFunction) {\r\n            // throw an error? return nothing?\r\n            throw new Error(\"feature not found\");\r\n        }\r\n\r\n        return constructorFunction(xrSessionManager, options);\r\n    }\r\n\r\n    /**\r\n     * Can be used to return the list of features currently registered\r\n     *\r\n     * @returns an Array of available features\r\n     */\r\n    public static GetAvailableFeatures() {\r\n        return Object.keys(this._AvailableFeatures);\r\n    }\r\n\r\n    /**\r\n     * Gets the versions available for a specific feature\r\n     * @param featureName the name of the feature\r\n     * @returns an array with the available versions\r\n     */\r\n    public static GetAvailableVersions(featureName: string) {\r\n        return Object.keys(this._AvailableFeatures[featureName]);\r\n    }\r\n\r\n    /**\r\n     * Return the latest unstable version of this feature\r\n     * @param featureName the name of the feature to search\r\n     * @returns the version number. if not found will return -1\r\n     */\r\n    public static GetLatestVersionOfFeature(featureName: string): number {\r\n        return (this._AvailableFeatures[featureName] && this._AvailableFeatures[featureName].latest) || -1;\r\n    }\r\n\r\n    /**\r\n     * Return the latest stable version of this feature\r\n     * @param featureName the name of the feature to search\r\n     * @returns the version number. if not found will return -1\r\n     */\r\n    public static GetStableVersionOfFeature(featureName: string): number {\r\n        return (this._AvailableFeatures[featureName] && this._AvailableFeatures[featureName].stable) || -1;\r\n    }\r\n\r\n    /**\r\n     * Attach a feature to the current session. Mainly used when session started to start the feature effect.\r\n     * Can be used during a session to start a feature\r\n     * @param featureName the name of feature to attach\r\n     */\r\n    public attachFeature(featureName: string) {\r\n        const feature = this._features[featureName];\r\n        if (feature && feature.enabled && !feature.featureImplementation.attached) {\r\n            const attached = feature.featureImplementation.attach();\r\n            if (!attached) {\r\n                Tools.Warn(`Feature ${featureName} failed to attach`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Can be used inside a session or when the session ends to detach a specific feature\r\n     * @param featureName the name of the feature to detach\r\n     */\r\n    public detachFeature(featureName: string) {\r\n        const feature = this._features[featureName];\r\n        if (feature && feature.featureImplementation.attached) {\r\n            const detached = feature.featureImplementation.detach();\r\n            if (!detached) {\r\n                Tools.Warn(`Feature ${featureName} failed to detach`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used to disable an already-enabled feature\r\n     * The feature will be disposed and will be recreated once enabled.\r\n     * @param featureName the feature to disable\r\n     * @returns true if disable was successful\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public disableFeature(featureName: string | { Name: string }): boolean {\r\n        const name = typeof featureName === \"string\" ? featureName : featureName.Name;\r\n        const feature = this._features[name];\r\n        if (feature && feature.enabled) {\r\n            feature.enabled = false;\r\n            this.detachFeature(name);\r\n            feature.featureImplementation.dispose();\r\n            delete this._features[name];\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * dispose this features manager\r\n     */\r\n    public dispose(): void {\r\n        this.getEnabledFeatures().forEach((feature) => {\r\n            this.disableFeature(feature);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Enable a feature using its name and a version. This will enable it in the scene, and will be responsible to attach it when the session starts.\r\n     * If used twice, the old version will be disposed and a new one will be constructed. This way you can re-enable with different configuration.\r\n     *\r\n     * @param featureName the name of the feature to load or the class of the feature\r\n     * @param version optional version to load. if not provided the latest version will be enabled\r\n     * @param moduleOptions options provided to the module. Ses the module documentation / constructor\r\n     * @param attachIfPossible if set to true (default) the feature will be automatically attached, if it is currently possible\r\n     * @param required is this feature required to the app. If set to true the session init will fail if the feature is not available.\r\n     * @returns a new constructed feature or throws an error if feature not found or conflicts with another enabled feature.\r\n     */\r\n    public enableFeature(\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        featureName: string | { Name: string },\r\n        version: number | string = \"latest\",\r\n        moduleOptions: any = {},\r\n        attachIfPossible: boolean = true,\r\n        required: boolean = true\r\n    ): IWebXRFeature {\r\n        const name = typeof featureName === \"string\" ? featureName : featureName.Name;\r\n        let versionToLoad = 0;\r\n        if (typeof version === \"string\") {\r\n            if (!version) {\r\n                throw new Error(`Error in provided version - ${name} (${version})`);\r\n            }\r\n            if (version === \"stable\") {\r\n                versionToLoad = WebXRFeaturesManager.GetStableVersionOfFeature(name);\r\n            } else if (version === \"latest\") {\r\n                versionToLoad = WebXRFeaturesManager.GetLatestVersionOfFeature(name);\r\n            } else {\r\n                // try loading the number the string represents\r\n                versionToLoad = +version;\r\n            }\r\n            if (versionToLoad === -1 || isNaN(versionToLoad)) {\r\n                throw new Error(`feature not found - ${name} (${version})`);\r\n            }\r\n        } else {\r\n            versionToLoad = version;\r\n        }\r\n\r\n        // check if there is a feature conflict\r\n        const conflictingFeature = WebXRFeaturesManager._ConflictingFeatures[name];\r\n        if (conflictingFeature !== undefined && this.getEnabledFeatures().indexOf(conflictingFeature) !== -1) {\r\n            throw new Error(`Feature ${name} cannot be enabled while ${conflictingFeature} is enabled.`);\r\n        }\r\n\r\n        // check if already initialized\r\n        const feature = this._features[name];\r\n        const constructFunction = WebXRFeaturesManager.ConstructFeature(name, versionToLoad, this._xrSessionManager, moduleOptions);\r\n        if (!constructFunction) {\r\n            // report error?\r\n            throw new Error(`feature not found - ${name}`);\r\n        }\r\n\r\n        /* If the feature is already enabled, detach and dispose it, and create a new one */\r\n        if (feature) {\r\n            this.disableFeature(name);\r\n        }\r\n\r\n        const constructed = constructFunction();\r\n        if (constructed.dependsOn) {\r\n            const dependentsFound = constructed.dependsOn.every((featureName) => !!this._features[featureName]);\r\n            if (!dependentsFound) {\r\n                throw new Error(`Dependant features missing. Make sure the following features are enabled - ${constructed.dependsOn.join(\", \")}`);\r\n            }\r\n        }\r\n        if (constructed.isCompatible()) {\r\n            this._features[name] = {\r\n                featureImplementation: constructed,\r\n                enabled: true,\r\n                version: versionToLoad,\r\n                required,\r\n            };\r\n\r\n            if (attachIfPossible) {\r\n                // if session started already, request and enable\r\n                if (this._xrSessionManager.session && !this._features[name].featureImplementation.attached) {\r\n                    // enable feature\r\n                    this.attachFeature(name);\r\n                }\r\n            } else {\r\n                // disable auto-attach when session starts\r\n                this._features[name].featureImplementation.disableAutoAttach = true;\r\n            }\r\n\r\n            return this._features[name].featureImplementation;\r\n        } else {\r\n            if (required) {\r\n                throw new Error(\"required feature not compatible\");\r\n            } else {\r\n                Tools.Warn(`Feature ${name} not compatible with the current environment/browser and was not enabled.`);\r\n                return constructed;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the implementation of an enabled feature.\r\n     * @param featureName the name of the feature to load\r\n     * @returns the feature class, if found\r\n     */\r\n    public getEnabledFeature(featureName: string): IWebXRFeature {\r\n        return this._features[featureName] && this._features[featureName].featureImplementation;\r\n    }\r\n\r\n    /**\r\n     * Get the list of enabled features\r\n     * @returns an array of enabled features\r\n     */\r\n    public getEnabledFeatures() {\r\n        return Object.keys(this._features);\r\n    }\r\n\r\n    /**\r\n     * This function will extend the session creation configuration object with enabled features.\r\n     * If, for example, the anchors feature is enabled, it will be automatically added to the optional or required features list,\r\n     * according to the defined \"required\" variable, provided during enableFeature call\r\n     * @param xrSessionInit the xr Session init object to extend\r\n     *\r\n     * @returns an extended XRSessionInit object\r\n     */\r\n    public async _extendXRSessionInitObject(xrSessionInit: XRSessionInit): Promise<XRSessionInit> {\r\n        const enabledFeatures = this.getEnabledFeatures();\r\n        for (const featureName of enabledFeatures) {\r\n            const feature = this._features[featureName];\r\n            const nativeName = feature.featureImplementation.xrNativeFeatureName;\r\n            if (nativeName) {\r\n                if (feature.required) {\r\n                    xrSessionInit.requiredFeatures = xrSessionInit.requiredFeatures || [];\r\n                    if (xrSessionInit.requiredFeatures.indexOf(nativeName) === -1) {\r\n                        xrSessionInit.requiredFeatures.push(nativeName);\r\n                    }\r\n                } else {\r\n                    xrSessionInit.optionalFeatures = xrSessionInit.optionalFeatures || [];\r\n                    if (xrSessionInit.optionalFeatures.indexOf(nativeName) === -1) {\r\n                        xrSessionInit.optionalFeatures.push(nativeName);\r\n                    }\r\n                }\r\n            }\r\n            if (feature.featureImplementation.getXRSessionInitExtension) {\r\n                const extended = await feature.featureImplementation.getXRSessionInitExtension();\r\n                xrSessionInit = {\r\n                    ...xrSessionInit,\r\n                    ...extended,\r\n                };\r\n            }\r\n        }\r\n        return xrSessionInit;\r\n    }\r\n}\r\n", "import type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { WebXRFeatureName } from \"../../XR/webXRFeaturesManager\";\r\nimport type { WebXRFeaturesManager } from \"../../XR/webXRFeaturesManager\";\r\nimport type { WebXREyeTracking } from \"../../XR/features/WebXREyeTracking\";\r\nimport type { WebXRHandTracking } from \"../../XR/features/WebXRHandTracking\";\r\nimport { WebXRHandJoint } from \"../../XR/features/WebXRHandTracking\";\r\nimport type { WebXRExperienceHelper } from \"../../XR/webXRExperienceHelper\";\r\nimport type { Behavior } from \"../behavior\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Quaternion, TmpVectors, Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Ray } from \"../../Culling/ray\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n/**\r\n * Zones around the hand\r\n */\r\nexport const enum HandConstraintZone {\r\n    /**\r\n     * Above finger tips\r\n     */\r\n    ABOVE_FINGER_TIPS,\r\n    /**\r\n     * Next to the thumb\r\n     */\r\n    RADIAL_SIDE,\r\n    /**\r\n     * Next to the pinky finger\r\n     */\r\n    ULNAR_SIDE,\r\n    /**\r\n     * Below the wrist\r\n     */\r\n    BELOW_WRIST,\r\n}\r\n\r\n/**\r\n * Orientations for the hand zones and for the attached node\r\n */\r\nexport const enum HandConstraintOrientation {\r\n    /**\r\n     * Orientation is towards the camera\r\n     */\r\n    LOOK_AT_CAMERA,\r\n    /**\r\n     * Orientation is determined by the rotation of the palm\r\n     */\r\n    HAND_ROTATION,\r\n}\r\n\r\n/**\r\n * Orientations for the hand zones and for the attached node\r\n */\r\nexport const enum HandConstraintVisibility {\r\n    /**\r\n     * Constraint is always visible\r\n     */\r\n    ALWAYS_VISIBLE,\r\n    /**\r\n     * Constraint is only visible when the palm is up\r\n     */\r\n    PALM_UP,\r\n    /**\r\n     * Constraint is only visible when the user is looking at the constraint.\r\n     * Uses XR Eye Tracking if enabled/available, otherwise uses camera direction\r\n     */\r\n    GAZE_FOCUS,\r\n    /**\r\n     * Constraint is only visible when the palm is up and the user is looking at it\r\n     */\r\n    PALM_AND_GAZE,\r\n}\r\n\r\ntype HandPoseInfo = {\r\n    position: Vector3;\r\n    quaternion: Quaternion;\r\n    id: string;\r\n};\r\n\r\n/**\r\n * Hand constraint behavior that makes the attached `TransformNode` follow hands in XR experiences.\r\n * @since 5.0.0\r\n */\r\nexport class HandConstraintBehavior implements Behavior<TransformNode> {\r\n    private _scene: Scene;\r\n    private _node: TransformNode;\r\n    private _eyeTracking: Nullable<WebXREyeTracking>;\r\n    private _handTracking: Nullable<WebXRHandTracking>;\r\n    private _sceneRenderObserver: Nullable<Observer<Scene>> = null;\r\n    private _zoneAxis: { [id: number]: Vector3 } = {};\r\n\r\n    /**\r\n     * Sets the HandConstraintVisibility level for the hand constraint\r\n     */\r\n    public handConstraintVisibility: HandConstraintVisibility = HandConstraintVisibility.PALM_AND_GAZE;\r\n\r\n    /**\r\n     * A number from 0.0 to 1.0, marking how restricted the direction the palm faces is for the attached node to be enabled.\r\n     * A 1 means the palm must be directly facing the user before the node is enabled, a 0 means it is always enabled.\r\n     * Used with HandConstraintVisibility.PALM_UP\r\n     */\r\n    public palmUpStrictness: number = 0.95;\r\n\r\n    /**\r\n     * The radius in meters around the center of the hand that the user must gaze inside for the attached node to be enabled and appear.\r\n     * Used with HandConstraintVisibility.GAZE_FOCUS\r\n     */\r\n    public gazeProximityRadius: number = 0.15;\r\n\r\n    /**\r\n     * Offset distance from the hand in meters\r\n     */\r\n    public targetOffset: number = 0.1;\r\n\r\n    /**\r\n     * Where to place the node regarding the center of the hand.\r\n     */\r\n    public targetZone: HandConstraintZone = HandConstraintZone.ULNAR_SIDE;\r\n\r\n    /**\r\n     * Orientation mode of the 4 zones around the hand\r\n     */\r\n    public zoneOrientationMode: HandConstraintOrientation = HandConstraintOrientation.HAND_ROTATION;\r\n    /**\r\n     * Orientation mode of the node attached to this behavior\r\n     */\r\n    public nodeOrientationMode: HandConstraintOrientation = HandConstraintOrientation.HAND_ROTATION;\r\n\r\n    /**\r\n     * Set the hand this behavior should follow. If set to \"none\", it will follow any visible hand (prioritising the left one).\r\n     */\r\n    public handedness: XRHandedness = \"none\";\r\n\r\n    /**\r\n     * Rate of interpolation of position and rotation of the attached node.\r\n     * Higher values will give a slower interpolation.\r\n     */\r\n    public lerpTime = 100;\r\n\r\n    /**\r\n     * Builds a hand constraint behavior\r\n     */\r\n    constructor() {\r\n        // For a right hand\r\n        this._zoneAxis[HandConstraintZone.ABOVE_FINGER_TIPS] = new Vector3(0, 1, 0);\r\n        this._zoneAxis[HandConstraintZone.RADIAL_SIDE] = new Vector3(-1, 0, 0);\r\n        this._zoneAxis[HandConstraintZone.ULNAR_SIDE] = new Vector3(1, 0, 0);\r\n        this._zoneAxis[HandConstraintZone.BELOW_WRIST] = new Vector3(0, -1, 0);\r\n    }\r\n\r\n    /** gets or sets behavior's name */\r\n    public get name() {\r\n        return \"HandConstraint\";\r\n    }\r\n\r\n    /** Enable the behavior */\r\n    public enable() {\r\n        this._node.setEnabled(true);\r\n    }\r\n\r\n    /** Disable the behavior */\r\n    public disable() {\r\n        this._node.setEnabled(false);\r\n    }\r\n\r\n    private _getHandPose(): Nullable<HandPoseInfo> {\r\n        if (!this._handTracking) {\r\n            return null;\r\n        }\r\n\r\n        // Retrieve any available hand, starting by the left\r\n        let hand;\r\n        if (this.handedness === \"none\") {\r\n            hand = this._handTracking.getHandByHandedness(\"left\") || this._handTracking.getHandByHandedness(\"right\");\r\n        } else {\r\n            hand = this._handTracking.getHandByHandedness(this.handedness);\r\n        }\r\n\r\n        if (hand) {\r\n            const pinkyMetacarpal = hand.getJointMesh(WebXRHandJoint.PINKY_FINGER_METACARPAL);\r\n            const middleMetacarpal = hand.getJointMesh(WebXRHandJoint.MIDDLE_FINGER_METACARPAL);\r\n            const wrist = hand.getJointMesh(WebXRHandJoint.WRIST);\r\n\r\n            if (wrist && middleMetacarpal && pinkyMetacarpal) {\r\n                const handPose: HandPoseInfo = { position: middleMetacarpal.absolutePosition, quaternion: new Quaternion(), id: hand.xrController.uniqueId };\r\n\r\n                // palm forward\r\n                const up = TmpVectors.Vector3[0];\r\n                const forward = TmpVectors.Vector3[1];\r\n                const left = TmpVectors.Vector3[2];\r\n                up.copyFrom(middleMetacarpal.absolutePosition).subtractInPlace(wrist.absolutePosition).normalize();\r\n                forward.copyFrom(pinkyMetacarpal.absolutePosition).subtractInPlace(middleMetacarpal.absolutePosition).normalize();\r\n\r\n                // Create vectors for a rotation quaternion, where forward points out from the palm\r\n                Vector3.CrossToRef(up, forward, forward);\r\n                Vector3.CrossToRef(forward, up, left);\r\n\r\n                Quaternion.FromLookDirectionLHToRef(forward, up, handPose.quaternion);\r\n\r\n                return handPose;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Initializes the hand constraint behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the hand constraint to a `TransformNode`\r\n     * @param node defines the node to attach the behavior to\r\n     */\r\n    public attach(node: TransformNode): void {\r\n        this._node = node;\r\n        this._scene = node.getScene();\r\n\r\n        if (!this._node.rotationQuaternion) {\r\n            this._node.rotationQuaternion = Quaternion.RotationYawPitchRoll(this._node.rotation.y, this._node.rotation.x, this._node.rotation.z);\r\n        }\r\n\r\n        let lastTick = Date.now();\r\n        this._sceneRenderObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n            const pose = this._getHandPose();\r\n\r\n            this._node.reservedDataStore = this._node.reservedDataStore || {};\r\n            this._node.reservedDataStore.nearInteraction = this._node.reservedDataStore.nearInteraction || {};\r\n            this._node.reservedDataStore.nearInteraction.excludedControllerId = null;\r\n\r\n            if (pose) {\r\n                const zoneOffset = TmpVectors.Vector3[0];\r\n                const camera = this._scene.activeCamera;\r\n\r\n                zoneOffset.copyFrom(this._zoneAxis[this.targetZone]);\r\n\r\n                const cameraLookAtQuaternion = TmpVectors.Quaternion[0];\r\n                if (camera && (this.zoneOrientationMode === HandConstraintOrientation.LOOK_AT_CAMERA || this.nodeOrientationMode === HandConstraintOrientation.LOOK_AT_CAMERA)) {\r\n                    const toCamera = TmpVectors.Vector3[1];\r\n                    toCamera.copyFrom(camera.position).subtractInPlace(pose.position).normalize();\r\n                    if (this._scene.useRightHandedSystem) {\r\n                        Quaternion.FromLookDirectionRHToRef(toCamera, Vector3.UpReadOnly, cameraLookAtQuaternion);\r\n                    } else {\r\n                        Quaternion.FromLookDirectionLHToRef(toCamera, Vector3.UpReadOnly, cameraLookAtQuaternion);\r\n                    }\r\n                }\r\n\r\n                if (this.zoneOrientationMode === HandConstraintOrientation.HAND_ROTATION) {\r\n                    pose.quaternion.toRotationMatrix(TmpVectors.Matrix[0]);\r\n                } else {\r\n                    cameraLookAtQuaternion.toRotationMatrix(TmpVectors.Matrix[0]);\r\n                }\r\n\r\n                Vector3.TransformNormalToRef(zoneOffset, TmpVectors.Matrix[0], zoneOffset);\r\n                zoneOffset.scaleInPlace(this.targetOffset);\r\n\r\n                const targetPosition = TmpVectors.Vector3[2];\r\n                const targetRotation = TmpVectors.Quaternion[1];\r\n                targetPosition.copyFrom(pose.position).addInPlace(zoneOffset);\r\n\r\n                if (this.nodeOrientationMode === HandConstraintOrientation.HAND_ROTATION) {\r\n                    targetRotation.copyFrom(pose.quaternion);\r\n                } else {\r\n                    targetRotation.copyFrom(cameraLookAtQuaternion);\r\n                }\r\n\r\n                const elapsed = Date.now() - lastTick;\r\n\r\n                Vector3.SmoothToRef(this._node.position, targetPosition, elapsed, this.lerpTime, this._node.position);\r\n                Quaternion.SmoothToRef(this._node.rotationQuaternion!, targetRotation, elapsed, this.lerpTime, this._node.rotationQuaternion!);\r\n\r\n                this._node.reservedDataStore.nearInteraction.excludedControllerId = pose.id;\r\n            }\r\n\r\n            this._setVisibility(pose);\r\n\r\n            lastTick = Date.now();\r\n        });\r\n    }\r\n\r\n    private _setVisibility(pose: Nullable<HandPoseInfo>) {\r\n        let palmVisible = true;\r\n        let gazeVisible = true;\r\n        const camera = this._scene.activeCamera;\r\n\r\n        if (camera) {\r\n            const cameraForward = camera.getForwardRay();\r\n\r\n            if (this.handConstraintVisibility === HandConstraintVisibility.GAZE_FOCUS || this.handConstraintVisibility === HandConstraintVisibility.PALM_AND_GAZE) {\r\n                gazeVisible = false;\r\n                let gaze: Ray | undefined;\r\n                if (this._eyeTracking) {\r\n                    gaze = this._eyeTracking.getEyeGaze()!;\r\n                }\r\n\r\n                gaze = gaze || cameraForward;\r\n\r\n                const gazeToBehavior = TmpVectors.Vector3[0];\r\n                if (pose) {\r\n                    pose.position.subtractToRef(gaze.origin, gazeToBehavior);\r\n                } else {\r\n                    this._node.getAbsolutePosition().subtractToRef(gaze.origin, gazeToBehavior);\r\n                }\r\n\r\n                const projectedDistance = Vector3.Dot(gazeToBehavior, gaze.direction);\r\n                const projectedSquared = projectedDistance * projectedDistance;\r\n\r\n                if (projectedDistance > 0) {\r\n                    const radiusSquared = gazeToBehavior.lengthSquared() - projectedSquared;\r\n                    if (radiusSquared < this.gazeProximityRadius * this.gazeProximityRadius) {\r\n                        gazeVisible = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.handConstraintVisibility === HandConstraintVisibility.PALM_UP || this.handConstraintVisibility === HandConstraintVisibility.PALM_AND_GAZE) {\r\n                palmVisible = false;\r\n\r\n                if (pose) {\r\n                    const palmDirection = TmpVectors.Vector3[0];\r\n                    Vector3.LeftHandedForwardReadOnly.rotateByQuaternionToRef(pose.quaternion, palmDirection);\r\n\r\n                    if (Vector3.Dot(palmDirection, cameraForward.direction) > this.palmUpStrictness * 2 - 1) {\r\n                        palmVisible = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._node.setEnabled(palmVisible && gazeVisible);\r\n    }\r\n\r\n    /**\r\n     * Detaches the behavior from the `TransformNode`\r\n     */\r\n    public detach(): void {\r\n        this._scene.onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n    }\r\n\r\n    /**\r\n     * Links the behavior to the XR experience in which to retrieve hand transform information.\r\n     * @param xr xr experience\r\n     */\r\n    public linkToXRExperience(xr: WebXRExperienceHelper | WebXRFeaturesManager) {\r\n        const featuresManager: WebXRFeaturesManager = (xr as WebXRExperienceHelper).featuresManager ? (xr as WebXRExperienceHelper).featuresManager : (xr as WebXRFeaturesManager);\r\n        if (!featuresManager) {\r\n            Tools.Error(\"XR features manager must be available or provided directly for the Hand Menu to work\");\r\n        } else {\r\n            try {\r\n                this._eyeTracking = featuresManager.getEnabledFeature(WebXRFeatureName.EYE_TRACKING) as WebXREyeTracking;\r\n            } catch {}\r\n\r\n            try {\r\n                this._handTracking = featuresManager.getEnabledFeature(WebXRFeatureName.HAND_TRACKING) as WebXRHandTracking;\r\n            } catch {\r\n                Tools.Error(\"Hand tracking must be enabled for the Hand Menu to work\");\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { WebRequest } from \"./webRequest\";\r\n\r\n/**\r\n * Fetches a resource from the network\r\n * @param url defines the url to fetch the resource from\r\n * @param options defines the options to use when fetching the resource\r\n * @returns a promise that resolves when the resource is fetched\r\n * @internal\r\n */\r\nexport function _FetchAsync(\r\n    url: string,\r\n    options: Partial<{ method: string; responseHeaders?: string[] }>\r\n): Promise<{ response: Response; headerValues: { [key: string]: string } }> {\r\n    const method = options.method || \"GET\";\r\n    return new Promise((resolve, reject) => {\r\n        const request = new WebRequest();\r\n        request.addEventListener(\"readystatechange\", () => {\r\n            if (request.readyState == 4) {\r\n                if (request.status == 200) {\r\n                    const headerValues: { [key: string]: string } = {};\r\n                    if (options.responseHeaders) {\r\n                        for (const header of options.responseHeaders) {\r\n                            headerValues[header] = request.getResponseHeader(header) || \"\";\r\n                        }\r\n                    }\r\n\r\n                    resolve({ response: request.response, headerValues: headerValues });\r\n                } else {\r\n                    reject(`Unable to fetch data from ${url}. Error code: ${request.status}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        request.open(method, url);\r\n        request.send();\r\n    });\r\n}\r\n", "import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { AnimationGroup } from \"../Animations/animationGroup\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { SceneLoaderFlags } from \"./sceneLoaderFlags\";\r\nimport type { IFileRequest } from \"../Misc/fileRequest\";\r\nimport type { WebRequest } from \"../Misc/webRequest\";\r\nimport type { LoadFileError } from \"../Misc/fileTools\";\r\nimport { IsBase64DataUrl } from \"../Misc/fileTools\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { Geometry } from \"../Meshes/geometry\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport { RuntimeError, ErrorCodes } from \"../Misc/error\";\r\nimport type { ISpriteManager } from \"../Sprites/spriteManager\";\r\nimport { RandomGUID } from \"../Misc/guid\";\r\nimport { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { _FetchAsync } from \"core/Misc/webRequest.fetch\";\r\n\r\n/**\r\n * Type used for the success callback of ImportMesh\r\n */\r\nexport type SceneLoaderSuccessCallback = (\r\n    meshes: AbstractMesh[],\r\n    particleSystems: IParticleSystem[],\r\n    skeletons: Skeleton[],\r\n    animationGroups: AnimationGroup[],\r\n    transformNodes: TransformNode[],\r\n    geometries: Geometry[],\r\n    lights: Light[],\r\n    spriteManagers: ISpriteManager[]\r\n) => void;\r\n\r\n/**\r\n * Interface used for the result of ImportMeshAsync\r\n */\r\nexport interface ISceneLoaderAsyncResult {\r\n    /**\r\n     * The array of loaded meshes\r\n     */\r\n    readonly meshes: AbstractMesh[];\r\n\r\n    /**\r\n     * The array of loaded particle systems\r\n     */\r\n    readonly particleSystems: IParticleSystem[];\r\n\r\n    /**\r\n     * The array of loaded skeletons\r\n     */\r\n    readonly skeletons: Skeleton[];\r\n\r\n    /**\r\n     * The array of loaded animation groups\r\n     */\r\n    readonly animationGroups: AnimationGroup[];\r\n\r\n    /**\r\n     * The array of loaded transform nodes\r\n     */\r\n    readonly transformNodes: TransformNode[];\r\n\r\n    /**\r\n     * The array of loaded geometries\r\n     */\r\n    readonly geometries: Geometry[];\r\n\r\n    /**\r\n     * The array of loaded lights\r\n     */\r\n    readonly lights: Light[];\r\n\r\n    /**\r\n     * The array of loaded sprite managers\r\n     */\r\n    readonly spriteManagers: ISpriteManager[];\r\n}\r\n\r\n/**\r\n * Interface used to represent data loading progression\r\n */\r\nexport interface ISceneLoaderProgressEvent {\r\n    /**\r\n     * Defines if data length to load can be evaluated\r\n     */\r\n    readonly lengthComputable: boolean;\r\n\r\n    /**\r\n     * Defines the loaded data length\r\n     */\r\n    readonly loaded: number;\r\n\r\n    /**\r\n     * Defines the data length to load\r\n     */\r\n    readonly total: number;\r\n}\r\n\r\n/**\r\n * Interface used by SceneLoader plugins to define supported file extensions\r\n */\r\nexport interface ISceneLoaderPluginExtensions {\r\n    /**\r\n     * Defines the list of supported extensions\r\n     */\r\n    readonly [extension: string]: {\r\n        readonly isBinary: boolean;\r\n        readonly mimeType?: string;\r\n    };\r\n}\r\n\r\n/**\r\n * Metadata for a SceneLoader plugin that must also be provided by a plugin factory\r\n */\r\nexport interface ISceneLoaderPluginMetadata {\r\n    /**\r\n     * The friendly name of the plugin.\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * The file extensions supported by the plugin.\r\n     */\r\n    readonly extensions: string | ISceneLoaderPluginExtensions;\r\n\r\n    /**\r\n     * The callback that returns true if the data can be directly loaded.\r\n     * @param data string containing the file data\r\n     * @returns if the data can be loaded directly\r\n     */\r\n    canDirectLoad?(data: string): boolean;\r\n}\r\n\r\n/**\r\n * Interface used by SceneLoader plugin factory\r\n */\r\nexport interface ISceneLoaderPluginFactory extends ISceneLoaderPluginMetadata {\r\n    /**\r\n     * Function called to create a new plugin\r\n     * @param options plugin options that were passed to the SceneLoader operation\r\n     * @returns the new plugin\r\n     */\r\n    createPlugin(options: SceneLoaderPluginOptions): ISceneLoaderPlugin | ISceneLoaderPluginAsync | Promise<ISceneLoaderPlugin | ISceneLoaderPluginAsync>;\r\n}\r\n\r\n/**\r\n * Interface used to define the base of ISceneLoaderPlugin and ISceneLoaderPluginAsync\r\n */\r\nexport interface ISceneLoaderPluginBase extends ISceneLoaderPluginMetadata {\r\n    /**\r\n     * The callback called when loading from a url.\r\n     * @param scene scene loading this url\r\n     * @param fileOrUrl file or url to load\r\n     * @param rootUrl root url to use to load assets\r\n     * @param onSuccess callback called when the file successfully loads\r\n     * @param onProgress callback called while file is loading (if the server supports this mode)\r\n     * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\r\n     * @param onError callback called when the file fails to load\r\n     * @param name defines the name of the file when loading a binary file\r\n     * @returns a file request object\r\n     */\r\n    loadFile?(\r\n        scene: Scene,\r\n        fileOrUrl: File | string | ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: unknown, responseURL?: string) => void,\r\n        onProgress?: (ev: ISceneLoaderProgressEvent) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        name?: string\r\n    ): Nullable<IFileRequest>;\r\n\r\n    /**\r\n     * The callback that returns the data to pass to the plugin if the data can be directly loaded.\r\n     * @param scene scene loading this data\r\n     * @param data string containing the data\r\n     * @returns data to pass to the plugin\r\n     */\r\n    directLoad?(scene: Scene, data: string): unknown | Promise<unknown>;\r\n\r\n    /**\r\n     * The callback that allows custom handling of the root url based on the response url.\r\n     * @param rootUrl the original root url\r\n     * @param responseURL the response url if available\r\n     * @returns the new root url\r\n     */\r\n    rewriteRootURL?(rootUrl: string, responseURL?: string): string;\r\n}\r\n\r\n/**\r\n * Interface used to define a SceneLoader plugin\r\n */\r\nexport interface ISceneLoaderPlugin extends ISceneLoaderPluginBase {\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param meshes The meshes array to import into\r\n     * @param particleSystems The particle systems array to import into\r\n     * @param skeletons The skeletons array to import into\r\n     * @param onError The callback when import fails\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    importMesh(\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        data: unknown,\r\n        rootUrl: string,\r\n        meshes: AbstractMesh[],\r\n        particleSystems: IParticleSystem[],\r\n        skeletons: Skeleton[],\r\n        onError?: (message: string, exception?: any) => void\r\n    ): boolean;\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onError The callback when import fails\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    load(scene: Scene, data: unknown, rootUrl: string, onError?: (message: string, exception?: any) => void): boolean;\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onError The callback when import fails\r\n     * @returns The loaded asset container\r\n     */\r\n    loadAssetContainer(scene: Scene, data: unknown, rootUrl: string, onError?: (message: string, exception?: any) => void): AssetContainer;\r\n}\r\n\r\n/**\r\n * Interface used to define an async SceneLoader plugin\r\n */\r\nexport interface ISceneLoaderPluginAsync extends ISceneLoaderPluginBase {\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns The loaded objects (e.g. meshes, particle systems, skeletons, animation groups, etc.)\r\n     */\r\n    importMeshAsync(\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        data: unknown,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<ISceneLoaderAsyncResult>;\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns Nothing\r\n     */\r\n    loadAsync(scene: Scene, data: unknown, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<void>;\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns The loaded asset container\r\n     */\r\n    loadAssetContainerAsync(scene: Scene, data: unknown, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<AssetContainer>;\r\n}\r\n\r\n/**\r\n * Mode that determines how to handle old animation groups before loading new ones.\r\n */\r\nexport const enum SceneLoaderAnimationGroupLoadingMode {\r\n    /**\r\n     * Reset all old animations to initial state then dispose them.\r\n     */\r\n    Clean = 0,\r\n\r\n    /**\r\n     * Stop all old animations.\r\n     */\r\n    Stop = 1,\r\n\r\n    /**\r\n     * Restart old animations from first frame.\r\n     */\r\n    Sync = 2,\r\n\r\n    /**\r\n     * Old animations remains untouched.\r\n     */\r\n    NoSync = 3,\r\n}\r\n\r\n/**\r\n * Defines internal only plugin members.\r\n */\r\ninterface ISceneLoaderPluginInternal {\r\n    /**\r\n     * An optional observable to notify when the plugin is disposed\r\n     */\r\n    readonly onDisposeObservable: Observable<void>;\r\n}\r\n\r\n/**\r\n * Defines a plugin registered by the SceneLoader\r\n */\r\ninterface IRegisteredPlugin {\r\n    /**\r\n     * Defines the plugin to use\r\n     */\r\n    plugin: ((ISceneLoaderPlugin | ISceneLoaderPluginAsync) & Partial<ISceneLoaderPluginInternal>) | ISceneLoaderPluginFactory;\r\n    /**\r\n     * Defines if the plugin supports binary data\r\n     */\r\n    isBinary: boolean;\r\n    mimeType?: string;\r\n}\r\n\r\nfunction isFactory(pluginOrFactory: IRegisteredPlugin[\"plugin\"]): pluginOrFactory is ISceneLoaderPluginFactory {\r\n    return !!(pluginOrFactory as ISceneLoaderPluginFactory).createPlugin;\r\n}\r\n\r\n/**\r\n * Defines file information\r\n */\r\ninterface IFileInfo {\r\n    /**\r\n     * Gets the file url\r\n     */\r\n    url: string;\r\n    /**\r\n     * Gets the root url\r\n     */\r\n    rootUrl: string;\r\n    /**\r\n     * Gets filename\r\n     */\r\n    name: string;\r\n    /**\r\n     * Gets the file\r\n     */\r\n    file: Nullable<File>;\r\n\r\n    /**\r\n     * Gets raw binary data.\r\n     */\r\n    rawData: Nullable<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * Defines options for SceneLoader plugins. This interface is extended by specific plugins.\r\n */\r\nexport interface SceneLoaderPluginOptions extends Record<string, Record<string, unknown> | undefined> {}\r\n\r\n/**\r\n * Adds default/implicit options to plugin specific options.\r\n */\r\ntype DefaultPluginOptions<BasePluginOptions> = {\r\n    /**\r\n     * Defines if the plugin is enabled\r\n     */\r\n    enabled?: boolean;\r\n} & BasePluginOptions;\r\n\r\n// This captures the type defined inline for the pluginOptions property, which is just SceneLoaderPluginOptions wrapped with DefaultPluginOptions.\r\n// We do it this way rather than explicitly defining the type here and then using it in SceneLoaderOptions because we want the full expanded type\r\n// to show up in the user's intellisense to make it easier to understand what options are available.\r\ntype PluginOptions = SceneLoaderOptions[\"pluginOptions\"];\r\n\r\ntype SceneSource = string | File | ArrayBufferView;\r\n\r\n/**\r\n * Defines common options for loading operations performed by SceneLoader.\r\n */\r\ninterface SceneLoaderOptions {\r\n    /**\r\n     * A string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     */\r\n    rootUrl?: string;\r\n\r\n    /**\r\n     * A callback with a progress event for each file being loaded\r\n     */\r\n    onProgress?: (event: ISceneLoaderProgressEvent) => void;\r\n\r\n    /**\r\n     * The extension used to determine the plugin\r\n     */\r\n    pluginExtension?: string;\r\n\r\n    /**\r\n     * Defines the filename, if the data is binary\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Defines options for the registered plugins\r\n     */\r\n    pluginOptions?: {\r\n        // NOTE: This type is doing two things:\r\n        // 1. Adding an implicit 'enabled' property to the options for each plugin.\r\n        // 2. Creating a mapped type of all the options of all the plugins to make it just look like a consolidated plain object in intellisense for the user.\r\n        [Plugin in keyof SceneLoaderPluginOptions]?: {\r\n            [Option in keyof DefaultPluginOptions<SceneLoaderPluginOptions[Plugin]>]: DefaultPluginOptions<SceneLoaderPluginOptions[Plugin]>[Option];\r\n        };\r\n    };\r\n}\r\n\r\n/**\r\n * Defines options for ImportMeshAsync.\r\n */\r\nexport interface ImportMeshOptions extends SceneLoaderOptions {\r\n    /**\r\n     * An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     */\r\n    meshNames?: string | readonly string[] | null | undefined;\r\n}\r\n\r\n/**\r\n * Defines options for LoadAsync.\r\n */\r\nexport interface LoadOptions extends SceneLoaderOptions {}\r\n\r\n/**\r\n * Defines options for AppendAsync.\r\n */\r\nexport interface AppendOptions extends SceneLoaderOptions {}\r\n\r\n/**\r\n * Defines options for LoadAssetContainerAsync.\r\n */\r\nexport interface LoadAssetContainerOptions extends SceneLoaderOptions {}\r\n\r\n/**\r\n * Defines options for ImportAnimationsAsync.\r\n */\r\nexport interface ImportAnimationsOptions extends SceneLoaderOptions {\r\n    /**\r\n     * When true, animations are cleaned before importing new ones. Animations are appended otherwise\r\n     */\r\n    overwriteAnimations?: boolean;\r\n\r\n    /**\r\n     * Defines how to handle old animations groups before importing new ones\r\n     */\r\n    animationGroupLoadingMode?: SceneLoaderAnimationGroupLoadingMode;\r\n\r\n    /**\r\n     * defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n     */\r\n    targetConverter?: Nullable<(target: unknown) => unknown>;\r\n}\r\n\r\nfunction isFile(value: unknown): value is File {\r\n    return !!(value as File).name;\r\n}\r\n\r\nconst onPluginActivatedObservable = new Observable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>();\r\nconst registeredPlugins: { [extension: string]: IRegisteredPlugin } = {};\r\nlet showingLoadingScreen = false;\r\n\r\nfunction getDefaultPlugin(): IRegisteredPlugin | undefined {\r\n    return registeredPlugins[\".babylon\"];\r\n}\r\n\r\nfunction getPluginForMimeType(mimeType: string): IRegisteredPlugin | undefined {\r\n    for (const registeredPluginKey in registeredPlugins) {\r\n        const registeredPlugin = registeredPlugins[registeredPluginKey];\r\n        if (registeredPlugin.mimeType === mimeType) {\r\n            return registeredPlugin;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getPluginForExtension(extension: string, returnDefault: boolean): IRegisteredPlugin | undefined {\r\n    const registeredPlugin = registeredPlugins[extension];\r\n    if (registeredPlugin) {\r\n        return registeredPlugin;\r\n    }\r\n    Logger.Warn(\r\n        \"Unable to find a plugin to load \" +\r\n            extension +\r\n            \" files. Trying to use .babylon default plugin. To load from a specific filetype (eg. gltf) see: https://doc.babylonjs.com/features/featuresDeepDive/importers/loadingFileTypes\"\r\n    );\r\n    return returnDefault ? getDefaultPlugin() : undefined;\r\n}\r\n\r\nfunction isPluginForExtensionAvailable(extension: string): boolean {\r\n    return !!registeredPlugins[extension];\r\n}\r\n\r\nfunction getPluginForDirectLoad(data: string): IRegisteredPlugin | undefined {\r\n    for (const extension in registeredPlugins) {\r\n        const plugin = registeredPlugins[extension].plugin;\r\n\r\n        if (plugin.canDirectLoad && plugin.canDirectLoad(data)) {\r\n            return registeredPlugins[extension];\r\n        }\r\n    }\r\n\r\n    return getDefaultPlugin();\r\n}\r\n\r\nfunction getFilenameExtension(sceneFilename: string): string {\r\n    const queryStringPosition = sceneFilename.indexOf(\"?\");\r\n\r\n    if (queryStringPosition !== -1) {\r\n        sceneFilename = sceneFilename.substring(0, queryStringPosition);\r\n    }\r\n\r\n    const dotPosition = sceneFilename.lastIndexOf(\".\");\r\n\r\n    return sceneFilename.substring(dotPosition, sceneFilename.length).toLowerCase();\r\n}\r\n\r\nfunction getDirectLoad(sceneFilename: string): Nullable<string> {\r\n    if (sceneFilename.substring(0, 5) === \"data:\") {\r\n        return sceneFilename.substring(5);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction formatErrorMessage(fileInfo: IFileInfo, message?: string, exception?: any): string {\r\n    const fromLoad = fileInfo.rawData ? \"binary data\" : fileInfo.url;\r\n    let errorMessage = \"Unable to load from \" + fromLoad;\r\n\r\n    if (message) {\r\n        errorMessage += `: ${message}`;\r\n    } else if (exception) {\r\n        errorMessage += `: ${exception}`;\r\n    }\r\n\r\n    return errorMessage;\r\n}\r\n\r\nasync function loadDataAsync(\r\n    fileInfo: IFileInfo,\r\n    scene: Scene,\r\n    onSuccess: (plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync, data: unknown, responseURL?: string) => void,\r\n    onProgress: ((event: ISceneLoaderProgressEvent) => void) | undefined,\r\n    onError: (message?: string, exception?: any) => void,\r\n    onDispose: () => void,\r\n    pluginExtension: Nullable<string>,\r\n    name: string,\r\n    pluginOptions: PluginOptions\r\n): Promise<Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>> {\r\n    const directLoad = getDirectLoad(fileInfo.url);\r\n\r\n    if (fileInfo.rawData && !pluginExtension) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \"When using ArrayBufferView to load data the file extension must be provided.\";\r\n    }\r\n\r\n    const fileExtension = !directLoad && !pluginExtension ? getFilenameExtension(fileInfo.url) : \"\";\r\n\r\n    let registeredPlugin = pluginExtension\r\n        ? getPluginForExtension(pluginExtension, true)\r\n        : directLoad\r\n          ? getPluginForDirectLoad(fileInfo.url)\r\n          : getPluginForExtension(fileExtension, false);\r\n\r\n    if (!registeredPlugin && fileExtension) {\r\n        if (fileInfo.url && !fileInfo.url.startsWith(\"blob:\")) {\r\n            // Fetching head content to get the mime type\r\n            const response = await _FetchAsync(fileInfo.url, { method: \"HEAD\", responseHeaders: [\"Content-Type\"] });\r\n            const mimeType = response.headerValues ? response.headerValues[\"Content-Type\"] : \"\";\r\n            if (mimeType) {\r\n                registeredPlugin = getPluginForMimeType(mimeType);\r\n            }\r\n        }\r\n\r\n        if (!registeredPlugin) {\r\n            registeredPlugin = getDefaultPlugin();\r\n        }\r\n    }\r\n\r\n    if (!registeredPlugin) {\r\n        throw new Error(`No plugin or fallback for ${pluginExtension ?? fileInfo.url}`);\r\n    }\r\n\r\n    if (pluginOptions?.[registeredPlugin.plugin.name]?.enabled === false) {\r\n        throw new Error(`The '${registeredPlugin.plugin.name}' plugin is disabled via the loader options passed to the loading operation.`);\r\n    }\r\n\r\n    if (fileInfo.rawData && !registeredPlugin.isBinary) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \"Loading from ArrayBufferView can not be used with plugins that don't support binary loading.\";\r\n    }\r\n\r\n    const getPluginInstance = (callback: (plugin: (ISceneLoaderPlugin | ISceneLoaderPluginAsync) & Partial<ISceneLoaderPluginInternal>) => void) => {\r\n        // For plugin factories, the plugin is instantiated on each SceneLoader operation. This makes options handling\r\n        // much simpler as we can just pass the options to the factory, rather than passing options through to every possible\r\n        // plugin call. Given this, options are only supported for plugins that provide a factory function.\r\n        if (isFactory(registeredPlugin!.plugin)) {\r\n            const pluginFactory = registeredPlugin!.plugin;\r\n            const partialPlugin = pluginFactory.createPlugin(pluginOptions ?? {});\r\n            if (partialPlugin instanceof Promise) {\r\n                partialPlugin.then(callback).catch((error) => {\r\n                    onError(\"Error instantiating plugin.\", error);\r\n                });\r\n                // When async factories are used, the plugin instance cannot be returned synchronously.\r\n                // In this case, the legacy loader functions will return null.\r\n                return null;\r\n            } else {\r\n                callback(partialPlugin);\r\n                return partialPlugin;\r\n            }\r\n        } else {\r\n            callback(registeredPlugin!.plugin);\r\n            return registeredPlugin!.plugin;\r\n        }\r\n    };\r\n\r\n    return getPluginInstance((plugin) => {\r\n        if (!plugin) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `The loader plugin corresponding to the '${pluginExtension}' file type has not been found. If using es6, please import the plugin you wish to use before.`;\r\n        }\r\n\r\n        onPluginActivatedObservable.notifyObservers(plugin);\r\n\r\n        // Check if we have a direct load url. If the plugin is registered to handle\r\n        // it or it's not a base64 data url, then pass it through the direct load path.\r\n        if (directLoad && ((plugin.canDirectLoad && plugin.canDirectLoad(fileInfo.url)) || !IsBase64DataUrl(fileInfo.url))) {\r\n            if (plugin.directLoad) {\r\n                const result = plugin.directLoad(scene, directLoad);\r\n                if (result instanceof Promise) {\r\n                    result\r\n                        .then((data: unknown) => {\r\n                            onSuccess(plugin, data);\r\n                        })\r\n                        .catch((error: any) => {\r\n                            onError(\"Error in directLoad of _loadData: \" + error, error);\r\n                        });\r\n                } else {\r\n                    onSuccess(plugin, result);\r\n                }\r\n            } else {\r\n                onSuccess(plugin, directLoad);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const useArrayBuffer = registeredPlugin!.isBinary;\r\n\r\n        const dataCallback = (data: unknown, responseURL?: string) => {\r\n            if (scene.isDisposed) {\r\n                onError(\"Scene has been disposed\");\r\n                return;\r\n            }\r\n\r\n            onSuccess(plugin, data, responseURL);\r\n        };\r\n\r\n        let request: Nullable<IFileRequest> = null;\r\n        let pluginDisposed = false;\r\n        plugin.onDisposeObservable?.add(() => {\r\n            pluginDisposed = true;\r\n\r\n            if (request) {\r\n                request.abort();\r\n                request = null;\r\n            }\r\n\r\n            onDispose();\r\n        });\r\n\r\n        const manifestChecked = () => {\r\n            if (pluginDisposed) {\r\n                return;\r\n            }\r\n\r\n            const errorCallback = (request?: WebRequest, exception?: LoadFileError) => {\r\n                onError(request?.statusText, exception);\r\n            };\r\n\r\n            if (!plugin.loadFile && fileInfo.rawData) {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw \"Plugin does not support loading ArrayBufferView.\";\r\n            }\r\n\r\n            request = plugin.loadFile\r\n                ? plugin.loadFile(scene, fileInfo.rawData || fileInfo.file || fileInfo.url, fileInfo.rootUrl, dataCallback, onProgress, useArrayBuffer, errorCallback, name)\r\n                : scene._loadFile(fileInfo.file || fileInfo.url, dataCallback, onProgress, true, useArrayBuffer, errorCallback);\r\n        };\r\n\r\n        const engine = scene.getEngine();\r\n        let canUseOfflineSupport = engine.enableOfflineSupport;\r\n        if (canUseOfflineSupport) {\r\n            // Also check for exceptions\r\n            let exceptionFound = false;\r\n            for (const regex of scene.disableOfflineSupportExceptionRules) {\r\n                if (regex.test(fileInfo.url)) {\r\n                    exceptionFound = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            canUseOfflineSupport = !exceptionFound;\r\n        }\r\n\r\n        if (canUseOfflineSupport && AbstractEngine.OfflineProviderFactory) {\r\n            // Checking if a manifest file has been set for this scene and if offline mode has been requested\r\n            scene.offlineProvider = AbstractEngine.OfflineProviderFactory(fileInfo.url, manifestChecked, engine.disableManifestCheck);\r\n        } else {\r\n            manifestChecked();\r\n        }\r\n    });\r\n}\r\n\r\nfunction _getFileInfo(rootUrl: string, sceneSource: SceneSource): Nullable<IFileInfo> {\r\n    let url: string;\r\n    let name: string;\r\n    let file: Nullable<File> = null;\r\n    let rawData: Nullable<ArrayBufferView> = null;\r\n\r\n    if (!sceneSource) {\r\n        url = rootUrl;\r\n        name = Tools.GetFilename(rootUrl);\r\n        rootUrl = Tools.GetFolderPath(rootUrl);\r\n    } else if (isFile(sceneSource)) {\r\n        url = `file:${sceneSource.name}`;\r\n        name = sceneSource.name;\r\n        file = sceneSource;\r\n    } else if (ArrayBuffer.isView(sceneSource)) {\r\n        url = \"\";\r\n        name = RandomGUID();\r\n        rawData = sceneSource;\r\n    } else if (sceneSource.startsWith(\"data:\")) {\r\n        url = sceneSource;\r\n        name = \"\";\r\n    } else if (rootUrl) {\r\n        const filename = sceneSource;\r\n        if (filename.substring(0, 1) === \"/\") {\r\n            Tools.Error(\"Wrong sceneFilename parameter\");\r\n            return null;\r\n        }\r\n\r\n        url = rootUrl + filename;\r\n        name = filename;\r\n    } else {\r\n        url = sceneSource;\r\n        name = Tools.GetFilename(sceneSource);\r\n        rootUrl = Tools.GetFolderPath(sceneSource);\r\n    }\r\n\r\n    return {\r\n        url: url,\r\n        rootUrl: rootUrl,\r\n        name: name,\r\n        file: file,\r\n        rawData,\r\n    };\r\n}\r\n\r\n/**\r\n * Adds a new plugin to the list of registered plugins\r\n * @param plugin defines the plugin to add\r\n */\r\nexport function registerSceneLoaderPlugin(plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory): void {\r\n    if (typeof plugin.extensions === \"string\") {\r\n        const extension = plugin.extensions;\r\n        registeredPlugins[extension.toLowerCase()] = {\r\n            plugin: plugin,\r\n            isBinary: false,\r\n        };\r\n    } else {\r\n        const extensions = plugin.extensions;\r\n        Object.keys(extensions).forEach((extension) => {\r\n            registeredPlugins[extension.toLowerCase()] = {\r\n                plugin: plugin,\r\n                isBinary: extensions[extension].isBinary,\r\n                mimeType: extensions[extension].mimeType,\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\nasync function importMeshAsync(\r\n    meshNames: string | readonly string[] | null | undefined,\r\n    rootUrl: string,\r\n    sceneFilename: SceneSource = \"\",\r\n    scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n    onSuccess: Nullable<SceneLoaderSuccessCallback> = null,\r\n    onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n    onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n    pluginExtension: Nullable<string> = null,\r\n    name = \"\",\r\n    pluginOptions: PluginOptions = {}\r\n): Promise<Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>> {\r\n    if (!scene) {\r\n        Logger.Error(\"No scene available to import mesh to\");\r\n        return null;\r\n    }\r\n\r\n    const fileInfo = _getFileInfo(rootUrl, sceneFilename);\r\n    if (!fileInfo) {\r\n        return null;\r\n    }\r\n\r\n    const loadingToken = {};\r\n    scene.addPendingData(loadingToken);\r\n\r\n    const disposeHandler = () => {\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    const errorHandler = (message?: string, exception?: any) => {\r\n        const errorMessage = formatErrorMessage(fileInfo, message, exception);\r\n\r\n        if (onError) {\r\n            onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n        } else {\r\n            Logger.Error(errorMessage);\r\n            // should the exception be thrown?\r\n        }\r\n\r\n        disposeHandler();\r\n    };\r\n\r\n    const progressHandler = onProgress\r\n        ? (event: ISceneLoaderProgressEvent) => {\r\n              try {\r\n                  onProgress(event);\r\n              } catch (e) {\r\n                  errorHandler(\"Error in onProgress callback: \" + e, e);\r\n              }\r\n          }\r\n        : undefined;\r\n\r\n    const successHandler: SceneLoaderSuccessCallback = (meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers) => {\r\n        scene.importedMeshesFiles.push(fileInfo.url);\r\n\r\n        if (onSuccess) {\r\n            try {\r\n                onSuccess(meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers);\r\n            } catch (e) {\r\n                errorHandler(\"Error in onSuccess callback: \" + e, e);\r\n            }\r\n        }\r\n\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    return await loadDataAsync(\r\n        fileInfo,\r\n        scene,\r\n        (plugin, data, responseURL) => {\r\n            if (plugin.rewriteRootURL) {\r\n                fileInfo.rootUrl = plugin.rewriteRootURL(fileInfo.rootUrl, responseURL);\r\n            }\r\n\r\n            if ((plugin as ISceneLoaderPlugin).importMesh) {\r\n                const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                const meshes: AbstractMesh[] = [];\r\n                const particleSystems: IParticleSystem[] = [];\r\n                const skeletons: Skeleton[] = [];\r\n\r\n                if (!syncedPlugin.importMesh(meshNames, scene, data, fileInfo.rootUrl, meshes, particleSystems, skeletons, errorHandler)) {\r\n                    return;\r\n                }\r\n\r\n                scene.loadingPluginName = plugin.name;\r\n                successHandler(meshes, particleSystems, skeletons, [], [], [], [], []);\r\n            } else {\r\n                const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                asyncedPlugin\r\n                    .importMeshAsync(meshNames, scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                    .then((result) => {\r\n                        scene.loadingPluginName = plugin.name;\r\n                        successHandler(\r\n                            result.meshes,\r\n                            result.particleSystems,\r\n                            result.skeletons,\r\n                            result.animationGroups,\r\n                            result.transformNodes,\r\n                            result.geometries,\r\n                            result.lights,\r\n                            result.spriteManagers\r\n                        );\r\n                    })\r\n                    .catch((error) => {\r\n                        errorHandler(error.message, error);\r\n                    });\r\n            }\r\n        },\r\n        progressHandler,\r\n        errorHandler,\r\n        disposeHandler,\r\n        pluginExtension,\r\n        name,\r\n        pluginOptions\r\n    );\r\n}\r\n\r\nfunction importMeshAsyncCore(\r\n    meshNames: string | readonly string[] | null | undefined,\r\n    rootUrl: string,\r\n    sceneFilename?: SceneSource,\r\n    scene?: Nullable<Scene>,\r\n    onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n    pluginExtension?: Nullable<string>,\r\n    name?: string,\r\n    pluginOptions?: PluginOptions\r\n): Promise<ISceneLoaderAsyncResult> {\r\n    return new Promise((resolve, reject) => {\r\n        importMeshAsync(\r\n            meshNames,\r\n            rootUrl,\r\n            sceneFilename,\r\n            scene,\r\n            (meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers) => {\r\n                resolve({\r\n                    meshes: meshes,\r\n                    particleSystems: particleSystems,\r\n                    skeletons: skeletons,\r\n                    animationGroups: animationGroups,\r\n                    transformNodes: transformNodes,\r\n                    geometries: geometries,\r\n                    lights: lights,\r\n                    spriteManagers: spriteManagers,\r\n                });\r\n            },\r\n            onProgress,\r\n            (scene, message, exception) => {\r\n                reject(exception || new Error(message));\r\n            },\r\n            pluginExtension,\r\n            name,\r\n            pluginOptions\r\n        );\r\n    });\r\n}\r\n\r\nfunction loadScene(\r\n    rootUrl: string,\r\n    sceneFilename: SceneSource = \"\",\r\n    engine: Nullable<AbstractEngine> = EngineStore.LastCreatedEngine,\r\n    onSuccess: Nullable<(scene: Scene) => void> = null,\r\n    onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n    onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n    pluginExtension: Nullable<string> = null,\r\n    name = \"\",\r\n    pluginOptions: PluginOptions = {}\r\n): void {\r\n    if (!engine) {\r\n        Tools.Error(\"No engine available\");\r\n        return;\r\n    }\r\n\r\n    appendAsync(rootUrl, sceneFilename, new Scene(engine), onSuccess, onProgress, onError, pluginExtension, name, pluginOptions);\r\n}\r\n\r\n/**\r\n * Load a scene\r\n * @experimental\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param engine is the instance of BABYLON.Engine to use to create the scene\r\n * @param options an object that configures aspects of how the scene is loaded\r\n * @returns The loaded scene\r\n */\r\nexport function loadSceneAsync(source: SceneSource, engine: AbstractEngine, options?: LoadOptions): Promise<Scene> {\r\n    const { rootUrl = \"\", onProgress, pluginExtension, name, pluginOptions } = options ?? {};\r\n    return loadSceneAsyncCore(rootUrl, source, engine, onProgress, pluginExtension, name, pluginOptions);\r\n}\r\n\r\nfunction loadSceneAsyncCore(\r\n    rootUrl: string,\r\n    sceneFilename?: SceneSource,\r\n    engine?: Nullable<AbstractEngine>,\r\n    onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n    pluginExtension?: Nullable<string>,\r\n    name?: string,\r\n    pluginOptions?: PluginOptions\r\n): Promise<Scene> {\r\n    return new Promise((resolve, reject) => {\r\n        loadScene(\r\n            rootUrl,\r\n            sceneFilename,\r\n            engine,\r\n            (scene) => {\r\n                resolve(scene);\r\n            },\r\n            onProgress,\r\n            (scene, message, exception) => {\r\n                reject(exception || new Error(message));\r\n            },\r\n            pluginExtension,\r\n            name,\r\n            pluginOptions\r\n        );\r\n    });\r\n}\r\n\r\nasync function appendAsync(\r\n    rootUrl: string,\r\n    sceneFilename: SceneSource = \"\",\r\n    scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n    onSuccess: Nullable<(scene: Scene) => void> = null,\r\n    onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n    onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n    pluginExtension: Nullable<string> = null,\r\n    name = \"\",\r\n    pluginOptions: PluginOptions = {}\r\n): Promise<Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>> {\r\n    if (!scene) {\r\n        Logger.Error(\"No scene available to append to\");\r\n        return null;\r\n    }\r\n\r\n    const fileInfo = _getFileInfo(rootUrl, sceneFilename);\r\n    if (!fileInfo) {\r\n        return null;\r\n    }\r\n\r\n    const loadingToken = {};\r\n    scene.addPendingData(loadingToken);\r\n\r\n    const disposeHandler = () => {\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    if (SceneLoaderFlags.ShowLoadingScreen && !showingLoadingScreen) {\r\n        showingLoadingScreen = true;\r\n        scene.getEngine().displayLoadingUI();\r\n        scene.executeWhenReady(() => {\r\n            scene.getEngine().hideLoadingUI();\r\n            showingLoadingScreen = false;\r\n        });\r\n    }\r\n\r\n    const errorHandler = (message?: string, exception?: any) => {\r\n        const errorMessage = formatErrorMessage(fileInfo, message, exception);\r\n\r\n        if (onError) {\r\n            onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n        } else {\r\n            Logger.Error(errorMessage);\r\n            // should the exception be thrown?\r\n        }\r\n\r\n        disposeHandler();\r\n    };\r\n\r\n    const progressHandler = onProgress\r\n        ? (event: ISceneLoaderProgressEvent) => {\r\n              try {\r\n                  onProgress(event);\r\n              } catch (e) {\r\n                  errorHandler(\"Error in onProgress callback\", e);\r\n              }\r\n          }\r\n        : undefined;\r\n\r\n    const successHandler = () => {\r\n        if (onSuccess) {\r\n            try {\r\n                onSuccess(scene);\r\n            } catch (e) {\r\n                errorHandler(\"Error in onSuccess callback\", e);\r\n            }\r\n        }\r\n\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    return await loadDataAsync(\r\n        fileInfo,\r\n        scene,\r\n        (plugin, data) => {\r\n            if ((plugin as ISceneLoaderPlugin).load) {\r\n                const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                if (!syncedPlugin.load(scene, data, fileInfo.rootUrl, errorHandler)) {\r\n                    return;\r\n                }\r\n\r\n                scene.loadingPluginName = plugin.name;\r\n                successHandler();\r\n            } else {\r\n                const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                asyncedPlugin\r\n                    .loadAsync(scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                    .then(() => {\r\n                        scene.loadingPluginName = plugin.name;\r\n                        successHandler();\r\n                    })\r\n                    .catch((error) => {\r\n                        errorHandler(error.message, error);\r\n                    });\r\n            }\r\n        },\r\n        progressHandler,\r\n        errorHandler,\r\n        disposeHandler,\r\n        pluginExtension,\r\n        name,\r\n        pluginOptions\r\n    );\r\n}\r\n\r\n/**\r\n * Append a scene\r\n * @experimental\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param scene is the instance of BABYLON.Scene to append to\r\n * @param options an object that configures aspects of how the scene is loaded\r\n */\r\nexport async function appendSceneAsync(source: SceneSource, scene: Scene, options?: AppendOptions): Promise<void> {\r\n    const { rootUrl = \"\", onProgress, pluginExtension, name, pluginOptions } = options ?? {};\r\n    await appendSceneAsyncCore(rootUrl, source, scene, onProgress, pluginExtension, name, pluginOptions);\r\n}\r\n\r\nfunction appendSceneAsyncCore(\r\n    rootUrl: string,\r\n    sceneFilename?: SceneSource,\r\n    scene?: Nullable<Scene>,\r\n    onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n    pluginExtension?: Nullable<string>,\r\n    name?: string,\r\n    pluginOptions?: PluginOptions\r\n): Promise<Scene> {\r\n    return new Promise((resolve, reject) => {\r\n        appendAsync(\r\n            rootUrl,\r\n            sceneFilename,\r\n            scene,\r\n            (scene) => {\r\n                resolve(scene);\r\n            },\r\n            onProgress,\r\n            (scene, message, exception) => {\r\n                reject(exception || new Error(message));\r\n            },\r\n            pluginExtension,\r\n            name,\r\n            pluginOptions\r\n        );\r\n    });\r\n}\r\n\r\nasync function loadAssetContainerCoreAsync(\r\n    rootUrl: string,\r\n    sceneFilename: SceneSource = \"\",\r\n    scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n    onSuccess: Nullable<(assets: AssetContainer) => void> = null,\r\n    onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n    onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n    pluginExtension: Nullable<string> = null,\r\n    name = \"\",\r\n    pluginOptions: PluginOptions = {}\r\n): Promise<Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>> {\r\n    if (!scene) {\r\n        Logger.Error(\"No scene available to load asset container to\");\r\n        return null;\r\n    }\r\n\r\n    const fileInfo = _getFileInfo(rootUrl, sceneFilename);\r\n    if (!fileInfo) {\r\n        return null;\r\n    }\r\n\r\n    const loadingToken = {};\r\n    scene.addPendingData(loadingToken);\r\n\r\n    const disposeHandler = () => {\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    const errorHandler = (message?: string, exception?: any) => {\r\n        const errorMessage = formatErrorMessage(fileInfo, message, exception);\r\n\r\n        if (onError) {\r\n            onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n        } else {\r\n            Logger.Error(errorMessage);\r\n            // should the exception be thrown?\r\n        }\r\n\r\n        disposeHandler();\r\n    };\r\n\r\n    const progressHandler = onProgress\r\n        ? (event: ISceneLoaderProgressEvent) => {\r\n              try {\r\n                  onProgress(event);\r\n              } catch (e) {\r\n                  errorHandler(\"Error in onProgress callback\", e);\r\n              }\r\n          }\r\n        : undefined;\r\n\r\n    const successHandler = (assets: AssetContainer) => {\r\n        if (onSuccess) {\r\n            try {\r\n                onSuccess(assets);\r\n            } catch (e) {\r\n                errorHandler(\"Error in onSuccess callback\", e);\r\n            }\r\n        }\r\n\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    return await loadDataAsync(\r\n        fileInfo,\r\n        scene,\r\n        (plugin, data) => {\r\n            if ((plugin as ISceneLoaderPlugin).loadAssetContainer) {\r\n                const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                const assetContainer = syncedPlugin.loadAssetContainer(scene, data, fileInfo.rootUrl, errorHandler);\r\n                if (!assetContainer) {\r\n                    return;\r\n                }\r\n                assetContainer.populateRootNodes();\r\n                scene.loadingPluginName = plugin.name;\r\n                successHandler(assetContainer);\r\n            } else if ((plugin as ISceneLoaderPluginAsync).loadAssetContainerAsync) {\r\n                const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                asyncedPlugin\r\n                    .loadAssetContainerAsync(scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                    .then((assetContainer) => {\r\n                        assetContainer.populateRootNodes();\r\n                        scene.loadingPluginName = plugin.name;\r\n                        successHandler(assetContainer);\r\n                    })\r\n                    .catch((error) => {\r\n                        errorHandler(error.message, error);\r\n                    });\r\n            } else {\r\n                errorHandler(\"LoadAssetContainer is not supported by this plugin. Plugin did not provide a loadAssetContainer or loadAssetContainerAsync method.\");\r\n            }\r\n        },\r\n        progressHandler,\r\n        errorHandler,\r\n        disposeHandler,\r\n        pluginExtension,\r\n        name,\r\n        pluginOptions\r\n    );\r\n}\r\n\r\n/**\r\n * Load a scene into an asset container\r\n * @experimental\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param scene is the instance of Scene to append to\r\n * @param options an object that configures aspects of how the scene is loaded\r\n * @returns The loaded asset container\r\n */\r\nexport function loadAssetContainerAsync(source: SceneSource, scene: Scene, options?: LoadAssetContainerOptions): Promise<AssetContainer> {\r\n    const { rootUrl = \"\", onProgress, pluginExtension, name, pluginOptions } = options ?? {};\r\n    return internalLoadAssetContainerAsync(rootUrl, source, scene, onProgress, pluginExtension, name, pluginOptions);\r\n}\r\n\r\nfunction internalLoadAssetContainerAsync(\r\n    rootUrl: string,\r\n    sceneFilename?: SceneSource,\r\n    scene?: Nullable<Scene>,\r\n    onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n    pluginExtension?: Nullable<string>,\r\n    name?: string,\r\n    pluginOptions?: PluginOptions\r\n): Promise<AssetContainer> {\r\n    return new Promise((resolve, reject) => {\r\n        loadAssetContainerCoreAsync(\r\n            rootUrl,\r\n            sceneFilename,\r\n            scene,\r\n            (assets) => {\r\n                resolve(assets);\r\n            },\r\n            onProgress,\r\n            (scene, message, exception) => {\r\n                reject(exception || new Error(message));\r\n            },\r\n            pluginExtension,\r\n            name,\r\n            pluginOptions\r\n        );\r\n    });\r\n}\r\n\r\nfunction importAnimations(\r\n    rootUrl: string,\r\n    sceneFilename: SceneSource = \"\",\r\n    scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n    overwriteAnimations = true,\r\n    animationGroupLoadingMode = SceneLoaderAnimationGroupLoadingMode.Clean,\r\n    targetConverter: Nullable<(target: any) => any> = null,\r\n    onSuccess: Nullable<(scene: Scene) => void> = null,\r\n    onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n    onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n    pluginExtension: Nullable<string> = null,\r\n    name = \"\",\r\n    pluginOptions: PluginOptions = {}\r\n): void {\r\n    if (!scene) {\r\n        Logger.Error(\"No scene available to load animations to\");\r\n        return;\r\n    }\r\n\r\n    if (overwriteAnimations) {\r\n        // Reset, stop and dispose all animations before loading new ones\r\n        for (const animatable of scene.animatables) {\r\n            animatable.reset();\r\n        }\r\n        scene.stopAllAnimations();\r\n        scene.animationGroups.slice().forEach((animationGroup) => {\r\n            animationGroup.dispose();\r\n        });\r\n        const nodes = scene.getNodes();\r\n        nodes.forEach((node) => {\r\n            if (node.animations) {\r\n                node.animations = [];\r\n            }\r\n        });\r\n    } else {\r\n        switch (animationGroupLoadingMode) {\r\n            case SceneLoaderAnimationGroupLoadingMode.Clean:\r\n                scene.animationGroups.slice().forEach((animationGroup) => {\r\n                    animationGroup.dispose();\r\n                });\r\n                break;\r\n            case SceneLoaderAnimationGroupLoadingMode.Stop:\r\n                scene.animationGroups.forEach((animationGroup) => {\r\n                    animationGroup.stop();\r\n                });\r\n                break;\r\n            case SceneLoaderAnimationGroupLoadingMode.Sync:\r\n                scene.animationGroups.forEach((animationGroup) => {\r\n                    animationGroup.reset();\r\n                    animationGroup.restart();\r\n                });\r\n                break;\r\n            case SceneLoaderAnimationGroupLoadingMode.NoSync:\r\n                // nothing to do\r\n                break;\r\n            default:\r\n                Logger.Error(\"Unknown animation group loading mode value '\" + animationGroupLoadingMode + \"'\");\r\n                return;\r\n        }\r\n    }\r\n\r\n    const startingIndexForNewAnimatables = scene.animatables.length;\r\n\r\n    const onAssetContainerLoaded = (container: AssetContainer) => {\r\n        container.mergeAnimationsTo(scene, scene.animatables.slice(startingIndexForNewAnimatables), targetConverter);\r\n\r\n        container.dispose();\r\n\r\n        scene.onAnimationFileImportedObservable.notifyObservers(scene);\r\n\r\n        if (onSuccess) {\r\n            onSuccess(scene);\r\n        }\r\n    };\r\n\r\n    loadAssetContainerCoreAsync(rootUrl, sceneFilename, scene, onAssetContainerLoaded, onProgress, onError, pluginExtension, name, pluginOptions);\r\n}\r\n\r\n/**\r\n * Import animations from a file into a scene\r\n * @experimental\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param scene is the instance of BABYLON.Scene to append to\r\n * @param options an object that configures aspects of how the scene is loaded\r\n */\r\nexport async function importAnimationsAsync(source: SceneSource, scene: Scene, options?: ImportAnimationsOptions): Promise<void> {\r\n    const { rootUrl = \"\", overwriteAnimations, animationGroupLoadingMode, targetConverter, onProgress, pluginExtension, name, pluginOptions } = options ?? {};\r\n    await importAnimationsAsyncCore(rootUrl, source, scene, overwriteAnimations, animationGroupLoadingMode, targetConverter, onProgress, pluginExtension, name, pluginOptions);\r\n}\r\n\r\nfunction importAnimationsAsyncCore(\r\n    rootUrl: string,\r\n    sceneFilename?: SceneSource,\r\n    scene?: Nullable<Scene>,\r\n    overwriteAnimations?: boolean,\r\n    animationGroupLoadingMode?: SceneLoaderAnimationGroupLoadingMode,\r\n    targetConverter?: Nullable<(target: any) => any>,\r\n    onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n    pluginExtension?: Nullable<string>,\r\n    name?: string,\r\n    pluginOptions?: PluginOptions\r\n): Promise<Scene> {\r\n    return new Promise((resolve, reject) => {\r\n        importAnimations(\r\n            rootUrl,\r\n            sceneFilename,\r\n            scene,\r\n            overwriteAnimations,\r\n            animationGroupLoadingMode,\r\n            targetConverter,\r\n            (scene) => {\r\n                resolve(scene);\r\n            },\r\n            onProgress,\r\n            (scene, message, exception) => {\r\n                reject(exception || new Error(message));\r\n            },\r\n            pluginExtension,\r\n            name,\r\n            pluginOptions\r\n        );\r\n    });\r\n}\r\n\r\n/**\r\n * Class used to load scene from various file formats using registered plugins\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/loadingFileTypes\r\n */\r\nexport class SceneLoader {\r\n    /**\r\n     * No logging while loading\r\n     */\r\n    public static readonly NO_LOGGING = Constants.SCENELOADER_NO_LOGGING;\r\n\r\n    /**\r\n     * Minimal logging while loading\r\n     */\r\n    public static readonly MINIMAL_LOGGING = Constants.SCENELOADER_MINIMAL_LOGGING;\r\n\r\n    /**\r\n     * Summary logging while loading\r\n     */\r\n    public static readonly SUMMARY_LOGGING = Constants.SCENELOADER_SUMMARY_LOGGING;\r\n\r\n    /**\r\n     * Detailed logging while loading\r\n     */\r\n    public static readonly DETAILED_LOGGING = Constants.SCENELOADER_DETAILED_LOGGING;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if entire scene must be loaded even if scene contains incremental data\r\n     */\r\n    public static get ForceFullSceneLoadingForIncremental() {\r\n        return SceneLoaderFlags.ForceFullSceneLoadingForIncremental;\r\n    }\r\n\r\n    public static set ForceFullSceneLoadingForIncremental(value: boolean) {\r\n        SceneLoaderFlags.ForceFullSceneLoadingForIncremental = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if loading screen must be displayed while loading a scene\r\n     */\r\n    public static get ShowLoadingScreen(): boolean {\r\n        return SceneLoaderFlags.ShowLoadingScreen;\r\n    }\r\n\r\n    public static set ShowLoadingScreen(value: boolean) {\r\n        SceneLoaderFlags.ShowLoadingScreen = value;\r\n    }\r\n\r\n    /**\r\n     * Defines the current logging level (while loading the scene)\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static get loggingLevel(): number {\r\n        return SceneLoaderFlags.loggingLevel;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static set loggingLevel(value: number) {\r\n        SceneLoaderFlags.loggingLevel = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set a boolean indicating if matrix weights must be cleaned upon loading\r\n     */\r\n    public static get CleanBoneMatrixWeights(): boolean {\r\n        return SceneLoaderFlags.CleanBoneMatrixWeights;\r\n    }\r\n\r\n    public static set CleanBoneMatrixWeights(value: boolean) {\r\n        SceneLoaderFlags.CleanBoneMatrixWeights = value;\r\n    }\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Event raised when a plugin is used to load a scene\r\n     */\r\n    public static readonly OnPluginActivatedObservable = onPluginActivatedObservable;\r\n\r\n    /**\r\n     * Gets the default plugin (used to load Babylon files)\r\n     * @returns the .babylon plugin\r\n     */\r\n    public static GetDefaultPlugin(): IRegisteredPlugin | undefined {\r\n        return getDefaultPlugin();\r\n    }\r\n\r\n    // Public functions\r\n\r\n    /**\r\n     * Gets a plugin that can load the given extension\r\n     * @param extension defines the extension to load\r\n     * @returns a plugin or null if none works\r\n     */\r\n    public static GetPluginForExtension(extension: string): ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory | undefined {\r\n        return getPluginForExtension(extension, true)?.plugin;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the given extension can be loaded\r\n     * @param extension defines the extension to load\r\n     * @returns true if the extension is supported\r\n     */\r\n    public static IsPluginForExtensionAvailable(extension: string): boolean {\r\n        return isPluginForExtensionAvailable(extension);\r\n    }\r\n\r\n    /**\r\n     * Adds a new plugin to the list of registered plugins\r\n     * @param plugin defines the plugin to add\r\n     */\r\n    public static RegisterPlugin(plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory): void {\r\n        registerSceneLoaderPlugin(plugin);\r\n    }\r\n\r\n    /**\r\n     * Import meshes into a scene\r\n     * @param meshNames an array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene the instance of BABYLON.Scene to append to\r\n     * @param onSuccess a callback with a list of imported meshes, particleSystems, skeletons, and animationGroups when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @deprecated Please use ImportMeshAsync instead\r\n     */\r\n    public static ImportMesh(\r\n        meshNames: string | readonly string[] | null | undefined,\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onSuccess?: Nullable<SceneLoaderSuccessCallback>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): void {\r\n        importMeshAsync(meshNames, rootUrl, sceneFilename, scene, onSuccess, onProgress, onError, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Import meshes into a scene\r\n     * @param meshNames an array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene the instance of BABYLON.Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file\r\n     * @returns The loaded list of imported meshes, particle systems, skeletons, and animation groups\r\n     */\r\n    public static ImportMeshAsync(\r\n        meshNames: string | readonly string[] | null | undefined,\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return importMeshAsyncCore(meshNames, rootUrl, sceneFilename, scene, onProgress, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Load a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param engine is the instance of BABYLON.Engine to use to create the scene\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @deprecated Please use LoadAsync instead\r\n     */\r\n    public static Load(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        engine?: Nullable<AbstractEngine>,\r\n        onSuccess?: Nullable<(scene: Scene) => void>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ) {\r\n        loadScene(rootUrl, sceneFilename, engine, onSuccess, onProgress, onError, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Load a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param engine is the instance of BABYLON.Engine to use to create the scene\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns The loaded scene\r\n     */\r\n    public static LoadAsync(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        engine?: Nullable<AbstractEngine>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): Promise<Scene> {\r\n        return loadSceneAsyncCore(rootUrl, sceneFilename, engine, onProgress, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Append a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @deprecated Please use AppendAsync instead\r\n     */\r\n    public static Append(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onSuccess?: Nullable<(scene: Scene) => void>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ) {\r\n        appendAsync(rootUrl, sceneFilename, scene, onSuccess, onProgress, onError, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Append a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @returns The given scene\r\n     */\r\n    public static AppendAsync(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): Promise<Scene> {\r\n        return appendSceneAsyncCore(rootUrl, sceneFilename, scene, onProgress, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Load a scene into an asset container\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @deprecated Please use LoadAssetContainerAsync instead\r\n     */\r\n    public static LoadAssetContainer(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onSuccess?: Nullable<(assets: AssetContainer) => void>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ) {\r\n        loadAssetContainerCoreAsync(rootUrl, sceneFilename, scene, onSuccess, onProgress, onError, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Load a scene into an asset container\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene (default: empty string)\r\n     * @param scene is the instance of Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns The loaded asset container\r\n     */\r\n    public static LoadAssetContainerAsync(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): Promise<AssetContainer> {\r\n        return internalLoadAssetContainerAsync(rootUrl, sceneFilename, scene, onProgress, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Import animations from a file into a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param overwriteAnimations when true, animations are cleaned before importing new ones. Animations are appended otherwise\r\n     * @param animationGroupLoadingMode defines how to handle old animations groups before importing new ones\r\n     * @param targetConverter defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @deprecated Please use ImportAnimationsAsync instead\r\n     */\r\n    public static ImportAnimations(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        overwriteAnimations?: boolean,\r\n        animationGroupLoadingMode?: SceneLoaderAnimationGroupLoadingMode,\r\n        targetConverter?: Nullable<(target: any) => any>,\r\n        onSuccess?: Nullable<(scene: Scene) => void>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): void {\r\n        importAnimations(rootUrl, sceneFilename, scene, overwriteAnimations, animationGroupLoadingMode, targetConverter, onSuccess, onProgress, onError, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Import animations from a file into a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param overwriteAnimations when true, animations are cleaned before importing new ones. Animations are appended otherwise\r\n     * @param animationGroupLoadingMode defines how to handle old animations groups before importing new ones\r\n     * @param targetConverter defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns the updated scene with imported animations\r\n     */\r\n    public static ImportAnimationsAsync(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        overwriteAnimations?: boolean,\r\n        animationGroupLoadingMode?: SceneLoaderAnimationGroupLoadingMode,\r\n        targetConverter?: Nullable<(target: any) => any>,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        onSuccess?: Nullable<(scene: Scene) => void>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): Promise<Scene> {\r\n        return importAnimationsAsyncCore(rootUrl, sceneFilename, scene, overwriteAnimations, animationGroupLoadingMode, targetConverter, onProgress, pluginExtension, name);\r\n    }\r\n}\r\n", "import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Plane } from \"../../Maths/math.plane\";\r\nimport { useOpenGLOrientationForUV } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a Plane\r\n * @param options an object used to set the following optional parameters for the plane, required but can be empty\r\n * * size sets the width and height of the plane to the value of size, optional default 1\r\n * * width sets the width (x direction) of the plane, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the plane, overwrites the height set by size, optional, default size\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreatePlaneVertexData(options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    const width: number = options.width !== undefined ? options.width : options.size !== undefined ? options.size : 1;\r\n    const height: number = options.height !== undefined ? options.height : options.size !== undefined ? options.size : 1;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // Vertices\r\n    const halfWidth = width / 2.0;\r\n    const halfHeight = height / 2.0;\r\n\r\n    positions.push(-halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, useOpenGLOrientationForUV ? 1.0 : 0.0);\r\n\r\n    positions.push(halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, useOpenGLOrientationForUV ? 1.0 : 0.0);\r\n\r\n    positions.push(halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, useOpenGLOrientationForUV ? 0.0 : 1.0);\r\n\r\n    positions.push(-halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, useOpenGLOrientationForUV ? 0.0 : 1.0);\r\n\r\n    // Indices\r\n    indices.push(0);\r\n    indices.push(1);\r\n    indices.push(2);\r\n\r\n    indices.push(0);\r\n    indices.push(2);\r\n    indices.push(3);\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a plane mesh\r\n * * The parameter `size` sets the size (float) of both sides of the plane at once (default 1)\r\n * * You can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value of `size`)\r\n * * The parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param scene defines the hosting scene\r\n * @returns the plane mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#plane\r\n */\r\nexport function CreatePlane(\r\n    name: string,\r\n    options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4; updatable?: boolean; sourcePlane?: Plane } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const plane = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    plane._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreatePlaneVertexData(options);\r\n\r\n    vertexData.applyToMesh(plane, options.updatable);\r\n\r\n    if (options.sourcePlane) {\r\n        plane.translate(options.sourcePlane.normal, -options.sourcePlane.d);\r\n        plane.setDirection(options.sourcePlane.normal.scale(-1));\r\n    }\r\n\r\n    return plane;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const PlaneBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreatePlane,\r\n};\r\n\r\nVertexData.CreatePlane = CreatePlaneVertexData;\r\nMesh.CreatePlane = (name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        size,\r\n        width: size,\r\n        height: size,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreatePlane(name, options, scene);\r\n};\r\n", "import type { Behavior } from \"../behavior\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to fade in and out\r\n */\r\nexport class FadeInOutBehavior implements Behavior<Mesh> {\r\n    /**\r\n     * Time in milliseconds to delay before fading in (Default: 0)\r\n     */\r\n    public fadeInDelay = 0;\r\n\r\n    /**\r\n     * Time in milliseconds to delay before fading out (Default: 0)\r\n     */\r\n    public fadeOutDelay = 0;\r\n\r\n    /**\r\n     * Time in milliseconds for the mesh to fade in (Default: 300)\r\n     */\r\n    public fadeInTime = 300;\r\n\r\n    /**\r\n     * Time in milliseconds for the mesh to fade out (Default: 300)\r\n     */\r\n    public fadeOutTime = 300;\r\n\r\n    /**\r\n     * Time in milliseconds to delay before fading in (Default: 0)\r\n     * Will set both fade in and out delay to the same value\r\n     */\r\n    public get delay(): number {\r\n        return this.fadeInDelay;\r\n    }\r\n\r\n    public set delay(value: number) {\r\n        this.fadeInDelay = value;\r\n        this.fadeOutDelay = value;\r\n    }\r\n\r\n    private _millisecondsPerFrame = 1000 / 60;\r\n    private _hovered = false;\r\n    private _hoverValue = 0;\r\n    private _ownerNode: Nullable<Mesh> = null;\r\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>> | undefined;\r\n    private _delay: number = 0;\r\n    private _time: number = 300;\r\n\r\n    /**\r\n     * Instantiates the FadeInOutBehavior\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"FadeInOut\";\r\n    }\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the fade behavior on the passed in mesh\r\n     * @param ownerNode The mesh that will be faded in/out once attached\r\n     */\r\n    public attach(ownerNode: Mesh): void {\r\n        this._ownerNode = ownerNode;\r\n        this._setAllVisibility(this._ownerNode, 0);\r\n    }\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this._ownerNode = null;\r\n    }\r\n\r\n    /**\r\n     * Triggers the mesh to begin fading in (or out)\r\n     * @param fadeIn if the object should fade in or out (true to fade in)\r\n     */\r\n    public fadeIn(fadeIn: boolean = true) {\r\n        this._delay = fadeIn ? this.fadeInDelay : this.fadeOutDelay;\r\n        this._time = fadeIn ? this.fadeInTime : this.fadeOutTime;\r\n\r\n        // Cancel any pending updates\r\n        this._detachObserver();\r\n\r\n        // If fading in and already visible or fading out and already not visible do nothing\r\n        if (this._ownerNode && ((fadeIn && this._ownerNode.visibility >= 1) || (!fadeIn && this._ownerNode.visibility <= 0))) {\r\n            return;\r\n        }\r\n\r\n        this._hovered = fadeIn;\r\n        if (!this._hovered) {\r\n            // Make the delay the negative of fadeout delay so the hoverValue is kept above 1 until\r\n            // fadeOutDelay has elapsed\r\n            this._delay *= -1;\r\n        }\r\n\r\n        // Reset the hoverValue.  This is necessary because we may have been fading out, e.g. but not yet reached\r\n        // the delay, so the hover value is greater than 1\r\n        if (this._ownerNode!.visibility >= 1) {\r\n            this._hoverValue = this._time;\r\n        } else if (this._ownerNode!.visibility <= 0) {\r\n            this._hoverValue = 0;\r\n        }\r\n        this._update();\r\n    }\r\n\r\n    /**\r\n     * Triggers the mesh to begin fading out\r\n     */\r\n    public fadeOut() {\r\n        this.fadeIn(false);\r\n    }\r\n\r\n    private _update = () => {\r\n        if (this._ownerNode) {\r\n            this._hoverValue += this._hovered ? this._millisecondsPerFrame : -this._millisecondsPerFrame;\r\n\r\n            this._setAllVisibility(this._ownerNode, (this._hoverValue - this._delay) / this._time);\r\n\r\n            if (this._ownerNode.visibility > 1) {\r\n                this._setAllVisibility(this._ownerNode, 1);\r\n                if (this._hoverValue > this._time) {\r\n                    this._hoverValue = this._time;\r\n                    this._detachObserver();\r\n                    return;\r\n                }\r\n            } else if (this._ownerNode.visibility < 0) {\r\n                this._setAllVisibility(this._ownerNode, 0);\r\n                if (this._hoverValue < 0) {\r\n                    this._hoverValue = 0;\r\n                    this._detachObserver();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this._attachObserver();\r\n        }\r\n    };\r\n\r\n    private _setAllVisibility(mesh: AbstractMesh, value: number) {\r\n        mesh.visibility = value;\r\n        mesh.getChildMeshes().forEach((c) => {\r\n            this._setAllVisibility(c, value);\r\n        });\r\n    }\r\n\r\n    private _attachObserver() {\r\n        if (!this._onBeforeRenderObserver) {\r\n            this._onBeforeRenderObserver = this._ownerNode?.getScene().onBeforeRenderObservable.add(this._update);\r\n        }\r\n    }\r\n\r\n    private _detachObserver() {\r\n        if (this._onBeforeRenderObserver) {\r\n            this._ownerNode?.getScene().onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n            this._onBeforeRenderObserver = null;\r\n        }\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport * as functions from \"./math.scalar.functions\";\r\n\r\nconst HCF: (a: number, b: number) => number = functions.HighestCommonFactor;\r\n\r\n/**\r\n * Scalar computation library\r\n */\r\nexport const Scalar = {\r\n    ...functions,\r\n\r\n    /**\r\n     * Two pi constants convenient for computation.\r\n     */\r\n    TwoPi: Math.PI * 2,\r\n\r\n    /**\r\n     * Returns -1 if value is negative and +1 is value is positive.\r\n     * @param value the value\r\n     * @returns the value itself if it's equal to zero.\r\n     */\r\n    Sign: Math.sign,\r\n\r\n    /**\r\n     * the log2 of value.\r\n     * @param value the value to compute log2 of\r\n     * @returns the log2 of value.\r\n     */\r\n    Log2: Math.log2,\r\n\r\n    /**\r\n     * Returns the highest common factor of two integers.\r\n     * @param a first parameter\r\n     * @param b second parameter\r\n     * @returns HCF of a and b\r\n     */\r\n    HCF,\r\n};\r\n/* eslint-enable @typescript-eslint/naming-convention */\r\n", "import type { Behavior } from \"../behavior\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport { Matrix, Quaternion, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Clamp } from \"../../Maths/math.scalar.functions\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { Epsilon } from \"../../Maths/math.constants\";\r\n\r\n/**\r\n * A behavior that when attached to a mesh will follow a camera\r\n * @since 5.0.0\r\n */\r\nexport class FollowBehavior implements Behavior<TransformNode> {\r\n    private _scene: Scene;\r\n\r\n    // Memory cache to avoid GC usage\r\n    private _tmpQuaternion: Quaternion = new Quaternion();\r\n    private _tmpVectors: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];\r\n    private _tmpMatrix: Matrix = new Matrix();\r\n    private _tmpInvertView: Matrix = new Matrix();\r\n    private _tmpForward: Vector3 = new Vector3();\r\n    private _tmpNodeForward: Vector3 = new Vector3();\r\n    private _tmpPosition: Vector3 = new Vector3();\r\n\r\n    private _followedCamera: Nullable<Camera>;\r\n    private _onBeforeRender: Nullable<Observer<Scene>>;\r\n\r\n    private _workingPosition: Vector3 = new Vector3();\r\n    private _workingQuaternion: Quaternion = new Quaternion();\r\n    private _lastTick: number = -1;\r\n    private _recenterNextUpdate = true;\r\n\r\n    /**\r\n     * Attached node of this behavior\r\n     */\r\n    public attachedNode: Nullable<TransformNode>;\r\n\r\n    /**\r\n     * Set to false if the node should strictly follow the camera without any interpolation time\r\n     */\r\n    public interpolatePose = true;\r\n\r\n    /**\r\n     * Rate of interpolation of position and rotation of the attached node.\r\n     * Higher values will give a slower interpolation.\r\n     */\r\n    public lerpTime = 500;\r\n\r\n    /**\r\n     * If the behavior should ignore the pitch and roll of the camera.\r\n     */\r\n    public ignoreCameraPitchAndRoll = false;\r\n\r\n    /**\r\n     * Pitch offset from camera (relative to Max Distance)\r\n     * Is only effective if `ignoreCameraPitchAndRoll` is set to `true`.\r\n     */\r\n    public pitchOffset = 15;\r\n\r\n    /**\r\n     * The vertical angle from the camera forward axis to the owner will not exceed this value\r\n     */\r\n    public maxViewVerticalDegrees = 30;\r\n\r\n    /**\r\n     * The horizontal angle from the camera forward axis to the owner will not exceed this value\r\n     */\r\n    public maxViewHorizontalDegrees = 30;\r\n    /**\r\n     * The attached node will not reorient until the angle between its forward vector and the vector to the camera is greater than this value\r\n     */\r\n    public orientToCameraDeadzoneDegrees = 60;\r\n    /**\r\n     * Option to ignore distance clamping\r\n     */\r\n    public ignoreDistanceClamp = false;\r\n    /**\r\n     * Option to ignore angle clamping\r\n     */\r\n    public ignoreAngleClamp = false;\r\n    /**\r\n     * Max vertical distance between the attachedNode and camera\r\n     */\r\n    public verticalMaxDistance = 0;\r\n    /**\r\n     *  Default distance from eye to attached node, i.e. the sphere radius\r\n     */\r\n    public defaultDistance = 0.8;\r\n    /**\r\n     *  Max distance from eye to attached node, i.e. the sphere radius\r\n     */\r\n    public maximumDistance = 2;\r\n    /**\r\n     *  Min distance from eye to attached node, i.e. the sphere radius\r\n     */\r\n    public minimumDistance = 0.3;\r\n\r\n    /**\r\n     * Ignore vertical movement and lock the Y position of the object.\r\n     */\r\n    public useFixedVerticalOffset = false;\r\n\r\n    /**\r\n     * Fixed vertical position offset distance.\r\n     */\r\n    public fixedVerticalOffset = 0;\r\n\r\n    /**\r\n     * Enables/disables the behavior\r\n     * @internal\r\n     */\r\n    public _enabled = true;\r\n\r\n    /**\r\n     * The camera that should be followed by this behavior\r\n     */\r\n    public get followedCamera(): Nullable<Camera> {\r\n        return this._followedCamera || this._scene.activeCamera;\r\n    }\r\n\r\n    public set followedCamera(camera: Nullable<Camera>) {\r\n        this._followedCamera = camera;\r\n    }\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"Follow\";\r\n    }\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the follow behavior\r\n     * @param ownerNode The mesh that will be following once attached\r\n     * @param followedCamera The camera that should be followed by the node\r\n     */\r\n    public attach(ownerNode: TransformNode, followedCamera?: Camera): void {\r\n        this._scene = ownerNode.getScene();\r\n        this.attachedNode = ownerNode;\r\n\r\n        if (followedCamera) {\r\n            this.followedCamera = followedCamera;\r\n        }\r\n\r\n        this._addObservables();\r\n    }\r\n\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this.attachedNode = null;\r\n        this._removeObservables();\r\n    }\r\n\r\n    /**\r\n     * Recenters the attached node in front of the camera on the next update\r\n     */\r\n    public recenter() {\r\n        this._recenterNextUpdate = true;\r\n    }\r\n\r\n    private _angleBetweenVectorAndPlane(vector: Vector3, normal: Vector3) {\r\n        // Work on copies\r\n        this._tmpVectors[0].copyFrom(vector);\r\n        vector = this._tmpVectors[0];\r\n        this._tmpVectors[1].copyFrom(normal);\r\n        normal = this._tmpVectors[1];\r\n\r\n        vector.normalize();\r\n        normal.normalize();\r\n\r\n        return Math.PI / 2 - Math.acos(Vector3.Dot(vector, normal));\r\n    }\r\n\r\n    private _length2D(vector: Vector3) {\r\n        return Math.sqrt(vector.x * vector.x + vector.z * vector.z);\r\n    }\r\n\r\n    private _distanceClamp(currentToTarget: Vector3, moveToDefault: boolean = false) {\r\n        let minDistance = this.minimumDistance;\r\n        let maxDistance = this.maximumDistance;\r\n        const defaultDistance = this.defaultDistance;\r\n\r\n        const direction = this._tmpVectors[0];\r\n        direction.copyFrom(currentToTarget);\r\n        let currentDistance = direction.length();\r\n        direction.normalizeFromLength(currentDistance);\r\n\r\n        if (this.ignoreCameraPitchAndRoll) {\r\n            // If we don't account for pitch offset, the casted object will float up/down as the reference\r\n            // gets closer to it because we will still be casting in the direction of the pitched offset.\r\n            // To fix this, only modify the XZ position of the object.\r\n            minDistance = this._length2D(direction) * minDistance;\r\n            maxDistance = this._length2D(direction) * maxDistance;\r\n\r\n            const currentDistance2D = this._length2D(currentToTarget);\r\n            direction.scaleInPlace(currentDistance / currentDistance2D);\r\n            currentDistance = currentDistance2D;\r\n        }\r\n\r\n        let clampedDistance = currentDistance;\r\n\r\n        if (moveToDefault) {\r\n            clampedDistance = defaultDistance;\r\n        } else {\r\n            clampedDistance = Clamp(currentDistance, minDistance, maxDistance);\r\n        }\r\n\r\n        currentToTarget.copyFrom(direction).scaleInPlace(clampedDistance);\r\n\r\n        return currentDistance !== clampedDistance;\r\n    }\r\n\r\n    private _applyVerticalClamp(currentToTarget: Vector3) {\r\n        if (this.verticalMaxDistance !== 0) {\r\n            currentToTarget.y = Clamp(currentToTarget.y, -this.verticalMaxDistance, this.verticalMaxDistance);\r\n        }\r\n    }\r\n\r\n    private _toOrientationQuatToRef(vector: Vector3, quaternion: Quaternion) {\r\n        Quaternion.RotationYawPitchRollToRef(Math.atan2(vector.x, vector.z), Math.atan2(vector.y, Math.sqrt(vector.z * vector.z + vector.x * vector.x)), 0, quaternion);\r\n    }\r\n\r\n    private _applyPitchOffset(invertView: Matrix) {\r\n        const forward = this._tmpVectors[0];\r\n        const right = this._tmpVectors[1];\r\n        forward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\r\n        right.copyFromFloats(1, 0, 0);\r\n        Vector3.TransformNormalToRef(forward, invertView, forward);\r\n        forward.y = 0;\r\n        forward.normalize();\r\n        Vector3.TransformNormalToRef(right, invertView, right);\r\n\r\n        Quaternion.RotationAxisToRef(right, (this.pitchOffset * Math.PI) / 180, this._tmpQuaternion);\r\n        forward.rotateByQuaternionToRef(this._tmpQuaternion, forward);\r\n        this._toOrientationQuatToRef(forward, this._tmpQuaternion);\r\n        this._tmpQuaternion.toRotationMatrix(this._tmpMatrix);\r\n\r\n        // Since we already extracted position from the invert view matrix, we can\r\n        // disregard the position part of the matrix in the copy\r\n        invertView.copyFrom(this._tmpMatrix);\r\n    }\r\n\r\n    private _angularClamp(invertView: Matrix, currentToTarget: Vector3): boolean {\r\n        const forward = this._tmpVectors[5];\r\n        forward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\r\n        const right = this._tmpVectors[6];\r\n        right.copyFromFloats(1, 0, 0);\r\n\r\n        // forward and right are related to camera frame of reference\r\n        Vector3.TransformNormalToRef(forward, invertView, forward);\r\n        Vector3.TransformNormalToRef(right, invertView, right);\r\n\r\n        // Up is global Z\r\n        const up = Vector3.UpReadOnly;\r\n\r\n        const dist = currentToTarget.length();\r\n\r\n        if (dist < Epsilon) {\r\n            return false;\r\n        }\r\n\r\n        let angularClamped = false;\r\n        const rotationQuat = this._tmpQuaternion;\r\n\r\n        // X-axis leashing\r\n        if (this.ignoreCameraPitchAndRoll) {\r\n            const angle = Vector3.GetAngleBetweenVectorsOnPlane(currentToTarget, forward, right);\r\n            Quaternion.RotationAxisToRef(right, angle, rotationQuat);\r\n            currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\r\n        } else {\r\n            const angle = -Vector3.GetAngleBetweenVectorsOnPlane(currentToTarget, forward, right);\r\n            const minMaxAngle = ((this.maxViewVerticalDegrees * Math.PI) / 180) * 0.5;\r\n            if (angle < -minMaxAngle) {\r\n                Quaternion.RotationAxisToRef(right, -angle - minMaxAngle, rotationQuat);\r\n                currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\r\n                angularClamped = true;\r\n            } else if (angle > minMaxAngle) {\r\n                Quaternion.RotationAxisToRef(right, -angle + minMaxAngle, rotationQuat);\r\n                currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\r\n                angularClamped = true;\r\n            }\r\n        }\r\n\r\n        // Y-axis leashing\r\n        const angle = this._angleBetweenVectorAndPlane(currentToTarget, right) * (this._scene.useRightHandedSystem ? -1 : 1);\r\n        const minMaxAngle = ((this.maxViewHorizontalDegrees * Math.PI) / 180) * 0.5;\r\n        if (angle < -minMaxAngle) {\r\n            Quaternion.RotationAxisToRef(up, -angle - minMaxAngle, rotationQuat);\r\n            currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\r\n            angularClamped = true;\r\n        } else if (angle > minMaxAngle) {\r\n            Quaternion.RotationAxisToRef(up, -angle + minMaxAngle, rotationQuat);\r\n            currentToTarget.rotateByQuaternionToRef(rotationQuat, currentToTarget);\r\n            angularClamped = true;\r\n        }\r\n\r\n        return angularClamped;\r\n    }\r\n\r\n    private _orientationClamp(currentToTarget: Vector3, rotationQuaternion: Quaternion) {\r\n        // Construct a rotation quat from up vector and target vector\r\n        const toFollowed = this._tmpVectors[0];\r\n        toFollowed.copyFrom(currentToTarget).scaleInPlace(-1).normalize();\r\n\r\n        const up = this._tmpVectors[1];\r\n        const right = this._tmpVectors[2];\r\n        // We use global up vector to orient the following node (global +Y)\r\n        up.copyFromFloats(0, 1, 0);\r\n\r\n        // Gram-Schmidt to create an orthonormal frame\r\n        Vector3.CrossToRef(toFollowed, up, right);\r\n        const length = right.length();\r\n\r\n        if (length < Epsilon) {\r\n            return;\r\n        }\r\n\r\n        right.normalizeFromLength(length);\r\n\r\n        Vector3.CrossToRef(right, toFollowed, up);\r\n        if (this.attachedNode?.getScene().useRightHandedSystem) {\r\n            Quaternion.FromLookDirectionRHToRef(toFollowed, up, rotationQuaternion);\r\n        } else {\r\n            Quaternion.FromLookDirectionLHToRef(toFollowed, up, rotationQuaternion);\r\n        }\r\n    }\r\n\r\n    private _passedOrientationDeadzone(currentToTarget: Vector3, forward: Vector3) {\r\n        const leashToFollow = this._tmpVectors[5];\r\n        leashToFollow.copyFrom(currentToTarget);\r\n        leashToFollow.normalize();\r\n\r\n        const angle = Math.abs(Vector3.GetAngleBetweenVectorsOnPlane(forward, leashToFollow, Vector3.UpReadOnly));\r\n        return (angle * 180) / Math.PI > this.orientToCameraDeadzoneDegrees;\r\n    }\r\n\r\n    private _updateLeashing(camera: Camera) {\r\n        if (this.attachedNode && this._enabled) {\r\n            const oldParent = this.attachedNode.parent;\r\n            this.attachedNode.setParent(null);\r\n\r\n            const worldMatrix = this.attachedNode.getWorldMatrix();\r\n            const currentToTarget = this._workingPosition;\r\n            const rotationQuaternion = this._workingQuaternion;\r\n            const pivot = this.attachedNode.getPivotPoint();\r\n            const invertView = this._tmpInvertView;\r\n            invertView.copyFrom(camera.getViewMatrix());\r\n            invertView.invert();\r\n\r\n            Vector3.TransformCoordinatesToRef(pivot, worldMatrix, currentToTarget);\r\n            const position = this._tmpPosition;\r\n            position.copyFromFloats(0, 0, 0);\r\n            Vector3.TransformCoordinatesToRef(position, worldMatrix, position);\r\n            position.scaleInPlace(-1).subtractInPlace(pivot);\r\n            currentToTarget.subtractInPlace(camera.globalPosition);\r\n\r\n            if (this.ignoreCameraPitchAndRoll) {\r\n                this._applyPitchOffset(invertView);\r\n            }\r\n\r\n            let angularClamped = false;\r\n            const forward = this._tmpForward;\r\n            forward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\r\n            Vector3.TransformNormalToRef(forward, invertView, forward);\r\n\r\n            const nodeForward = this._tmpNodeForward;\r\n            nodeForward.copyFromFloats(0, 0, this._scene.useRightHandedSystem ? -1 : 1);\r\n            Vector3.TransformNormalToRef(nodeForward, worldMatrix, nodeForward);\r\n\r\n            if (this._recenterNextUpdate) {\r\n                currentToTarget.copyFrom(forward).scaleInPlace(this.defaultDistance);\r\n            } else {\r\n                if (this.ignoreAngleClamp) {\r\n                    const currentDistance = currentToTarget.length();\r\n                    currentToTarget.copyFrom(forward).scaleInPlace(currentDistance);\r\n                } else {\r\n                    angularClamped = this._angularClamp(invertView, currentToTarget);\r\n                }\r\n            }\r\n\r\n            let distanceClamped = false;\r\n            if (!this.ignoreDistanceClamp) {\r\n                distanceClamped = this._distanceClamp(currentToTarget, angularClamped);\r\n                this._applyVerticalClamp(currentToTarget);\r\n            }\r\n\r\n            if (this.useFixedVerticalOffset) {\r\n                currentToTarget.y = position.y - camera.globalPosition.y + this.fixedVerticalOffset;\r\n            }\r\n\r\n            if (angularClamped || distanceClamped || this._passedOrientationDeadzone(currentToTarget, nodeForward) || this._recenterNextUpdate) {\r\n                this._orientationClamp(currentToTarget, rotationQuaternion);\r\n            }\r\n\r\n            this._workingPosition.subtractInPlace(pivot);\r\n            this._recenterNextUpdate = false;\r\n\r\n            this.attachedNode.setParent(oldParent);\r\n        }\r\n    }\r\n\r\n    private _updateTransformToGoal(elapsed: number) {\r\n        if (!this.attachedNode || !this.followedCamera || !this._enabled) {\r\n            return;\r\n        }\r\n\r\n        if (!this.attachedNode.rotationQuaternion) {\r\n            this.attachedNode.rotationQuaternion = Quaternion.Identity();\r\n        }\r\n\r\n        const oldParent = this.attachedNode.parent;\r\n        this.attachedNode.setParent(null);\r\n\r\n        if (!this.interpolatePose) {\r\n            this.attachedNode.position.copyFrom(this.followedCamera.globalPosition).addInPlace(this._workingPosition);\r\n            this.attachedNode.rotationQuaternion.copyFrom(this._workingQuaternion);\r\n            return;\r\n        }\r\n\r\n        // position\r\n        const currentDirection = new Vector3();\r\n        currentDirection.copyFrom(this.attachedNode.position).subtractInPlace(this.followedCamera.globalPosition);\r\n        Vector3.SmoothToRef(currentDirection, this._workingPosition, elapsed, this.lerpTime, currentDirection);\r\n        currentDirection.addInPlace(this.followedCamera.globalPosition);\r\n        this.attachedNode.position.copyFrom(currentDirection);\r\n\r\n        // rotation\r\n        const currentRotation = new Quaternion();\r\n        currentRotation.copyFrom(this.attachedNode.rotationQuaternion);\r\n        Quaternion.SmoothToRef(currentRotation, this._workingQuaternion, elapsed, this.lerpTime, this.attachedNode.rotationQuaternion);\r\n\r\n        this.attachedNode.setParent(oldParent);\r\n    }\r\n\r\n    private _addObservables() {\r\n        this._lastTick = Date.now();\r\n        this._onBeforeRender = this._scene.onBeforeRenderObservable.add(() => {\r\n            if (!this.followedCamera) {\r\n                return;\r\n            }\r\n\r\n            const tick = Date.now();\r\n            this._updateLeashing(this.followedCamera);\r\n            this._updateTransformToGoal(tick - this._lastTick);\r\n            this._lastTick = tick;\r\n        });\r\n    }\r\n\r\n    private _removeObservables() {\r\n        if (this._onBeforeRender) {\r\n            this._scene.onBeforeRenderObservable.remove(this._onBeforeRender);\r\n        }\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Behavior } from \"../../Behaviors/behavior\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Vector3, Quaternion, TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { PickingInfo } from \"../../Collisions/pickingInfo\";\r\nimport { Camera } from \"../../Cameras/camera\";\r\nimport type { Ray } from \"../../Culling/ray\";\r\nimport type { IPointerEvent } from \"../../Events/deviceInputEvents\";\r\nimport type { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\n\r\n/**\r\n * Data store to track virtual pointers movement\r\n */\r\ntype VirtualMeshInfo = {\r\n    dragging: boolean;\r\n    moving: boolean;\r\n    dragMesh: TransformNode;\r\n    originMesh: TransformNode;\r\n    pivotMesh: TransformNode;\r\n    startingPivotPosition: Vector3;\r\n    startingPivotOrientation: Quaternion;\r\n    startingPosition: Vector3;\r\n    startingOrientation: Quaternion;\r\n    lastOriginPosition: Vector3;\r\n    lastDragPosition: Vector3;\r\n};\r\n\r\n/**\r\n * Base behavior for six degrees of freedom interactions in XR experiences.\r\n * Creates virtual meshes that are dragged around\r\n * And observables for position/rotation changes\r\n */\r\nexport class BaseSixDofDragBehavior implements Behavior<Mesh> {\r\n    protected static _virtualScene: Scene;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _attachedToElement: boolean = false;\r\n    protected _virtualMeshesInfo: {\r\n        [id: number]: VirtualMeshInfo;\r\n    } = {};\r\n\r\n    private _tmpVector: Vector3 = new Vector3();\r\n    private _tmpQuaternion: Quaternion = new Quaternion();\r\n\r\n    protected _dragType = {\r\n        NONE: 0,\r\n        DRAG: 1,\r\n        DRAG_WITH_CONTROLLER: 2,\r\n        NEAR_DRAG: 3,\r\n    };\r\n\r\n    protected _scene: Scene;\r\n    protected _moving = false;\r\n    protected _ownerNode: TransformNode;\r\n    protected _dragging = this._dragType.NONE;\r\n\r\n    /**\r\n     * The list of child meshes that can receive drag events\r\n     * If `null`, all child meshes will receive drag event\r\n     */\r\n    public draggableMeshes: Nullable<AbstractMesh[]> = null;\r\n\r\n    /**\r\n     * How much faster the object should move when the controller is moving towards it. This is useful to bring objects that are far away from the user to them faster. Set this to 0 to avoid any speed increase. (Default: 3)\r\n     */\r\n    public zDragFactor = 3;\r\n    /**\r\n     * The id of the pointer that is currently interacting with the behavior (-1 when no pointer is active)\r\n     */\r\n    public get currentDraggingPointerId() {\r\n        if (this.currentDraggingPointerIds[0] !== undefined) {\r\n            return this.currentDraggingPointerIds[0];\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public set currentDraggingPointerId(value: number) {\r\n        this.currentDraggingPointerIds[0] = value;\r\n    }\r\n\r\n    /**\r\n     * In case of multipointer interaction, all pointer ids currently active are stored here\r\n     */\r\n    public currentDraggingPointerIds: number[] = [];\r\n\r\n    /**\r\n     * Get or set the currentDraggingPointerId\r\n     * @deprecated Please use currentDraggingPointerId instead\r\n     */\r\n    public get currentDraggingPointerID(): number {\r\n        return this.currentDraggingPointerId;\r\n    }\r\n    public set currentDraggingPointerID(currentDraggingPointerID: number) {\r\n        this.currentDraggingPointerId = currentDraggingPointerID;\r\n    }\r\n    /**\r\n    /**\r\n     * If camera controls should be detached during the drag\r\n     */\r\n    public detachCameraControls = true;\r\n\r\n    /**\r\n     * Fires each time a drag starts\r\n     */\r\n    public onDragStartObservable = new Observable<{ position: Vector3 }>();\r\n    /**\r\n     * Fires each time a drag happens\r\n     */\r\n    public onDragObservable = new Observable<{ delta: Vector3; position: Vector3; pickInfo: PickingInfo }>();\r\n    /**\r\n     *  Fires each time a drag ends (eg. mouse release after drag)\r\n     */\r\n    public onDragEndObservable = new Observable<{}>();\r\n\r\n    /**\r\n     * Should the behavior allow simultaneous pointers to interact with the owner node.\r\n     */\r\n    public allowMultiPointer: boolean = true;\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"BaseSixDofDrag\";\r\n    }\r\n\r\n    /**\r\n     *  Returns true if the attached mesh is currently moving with this behavior\r\n     */\r\n    public get isMoving(): boolean {\r\n        return this._moving;\r\n    }\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * In the case of multiple active cameras, the cameraToUseForPointers should be used if set instead of active camera\r\n     */\r\n    private get _pointerCamera() {\r\n        if (this._scene.cameraToUseForPointers) {\r\n            return this._scene.cameraToUseForPointers;\r\n        } else {\r\n            return this._scene.activeCamera;\r\n        }\r\n    }\r\n\r\n    private _createVirtualMeshInfo() {\r\n        // Setup virtual meshes to be used for dragging without dirtying the existing scene\r\n\r\n        const dragMesh = new TransformNode(\"\", BaseSixDofDragBehavior._virtualScene);\r\n        dragMesh.rotationQuaternion = new Quaternion();\r\n        const originMesh = new TransformNode(\"\", BaseSixDofDragBehavior._virtualScene);\r\n        originMesh.rotationQuaternion = new Quaternion();\r\n        const pivotMesh = new TransformNode(\"\", BaseSixDofDragBehavior._virtualScene);\r\n        pivotMesh.rotationQuaternion = new Quaternion();\r\n\r\n        return {\r\n            dragging: false,\r\n            moving: false,\r\n            dragMesh,\r\n            originMesh,\r\n            pivotMesh,\r\n            startingPivotPosition: new Vector3(),\r\n            startingPivotOrientation: new Quaternion(),\r\n            startingPosition: new Vector3(),\r\n            startingOrientation: new Quaternion(),\r\n            lastOriginPosition: new Vector3(),\r\n            lastDragPosition: new Vector3(),\r\n        };\r\n    }\r\n\r\n    protected _resetVirtualMeshesPosition() {\r\n        for (let i = 0; i < this.currentDraggingPointerIds.length; i++) {\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].pivotMesh.position.copyFrom(this._ownerNode.getAbsolutePivotPoint());\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].pivotMesh.rotationQuaternion!.copyFrom(this._ownerNode.rotationQuaternion!);\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].startingPivotPosition.copyFrom(\r\n                this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].pivotMesh.position\r\n            );\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].startingPivotOrientation.copyFrom(\r\n                this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].pivotMesh.rotationQuaternion!\r\n            );\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].startingPosition.copyFrom(this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].dragMesh.position);\r\n            this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].startingOrientation.copyFrom(\r\n                this._virtualMeshesInfo[this.currentDraggingPointerIds[i]].dragMesh.rotationQuaternion!\r\n            );\r\n        }\r\n    }\r\n\r\n    private _pointerUpdate2D(ray: Ray, pointerId: number, zDragFactor: number) {\r\n        if (this._pointerCamera && this._pointerCamera.cameraRigMode == Camera.RIG_MODE_NONE && !this._pointerCamera._isLeftCamera && !this._pointerCamera._isRightCamera) {\r\n            ray.origin.copyFrom(this._pointerCamera!.globalPosition);\r\n            zDragFactor = 0;\r\n        }\r\n\r\n        const virtualMeshesInfo = this._virtualMeshesInfo[pointerId];\r\n\r\n        // Calculate controller drag distance in controller space\r\n        const originDragDifference = TmpVectors.Vector3[0];\r\n        ray.origin.subtractToRef(virtualMeshesInfo.lastOriginPosition, originDragDifference);\r\n        virtualMeshesInfo.lastOriginPosition.copyFrom(ray.origin);\r\n        const localOriginDragDifference = -Vector3.Dot(originDragDifference, ray.direction);\r\n\r\n        virtualMeshesInfo.originMesh.addChild(virtualMeshesInfo.dragMesh);\r\n        virtualMeshesInfo.originMesh.addChild(virtualMeshesInfo.pivotMesh);\r\n\r\n        this._applyZOffset(virtualMeshesInfo.dragMesh, localOriginDragDifference, zDragFactor);\r\n        this._applyZOffset(virtualMeshesInfo.pivotMesh, localOriginDragDifference, zDragFactor);\r\n\r\n        // Update the controller position\r\n        virtualMeshesInfo.originMesh.position.copyFrom(ray.origin);\r\n        const lookAt = TmpVectors.Vector3[0];\r\n        ray.origin.addToRef(ray.direction, lookAt);\r\n        virtualMeshesInfo.originMesh.lookAt(lookAt);\r\n\r\n        virtualMeshesInfo.originMesh.removeChild(virtualMeshesInfo.dragMesh);\r\n        virtualMeshesInfo.originMesh.removeChild(virtualMeshesInfo.pivotMesh);\r\n    }\r\n\r\n    private _pointerUpdateXR(controllerAimTransform: TransformNode, controllerGripTransform: Nullable<TransformNode>, pointerId: number, zDragFactor: number) {\r\n        const virtualMeshesInfo = this._virtualMeshesInfo[pointerId];\r\n        virtualMeshesInfo.originMesh.position.copyFrom(controllerAimTransform.position);\r\n        if (this._dragging === this._dragType.NEAR_DRAG && controllerGripTransform) {\r\n            virtualMeshesInfo.originMesh.rotationQuaternion!.copyFrom(controllerGripTransform.rotationQuaternion!);\r\n        } else {\r\n            virtualMeshesInfo.originMesh.rotationQuaternion!.copyFrom(controllerAimTransform.rotationQuaternion!);\r\n        }\r\n\r\n        virtualMeshesInfo.pivotMesh.computeWorldMatrix(true);\r\n        virtualMeshesInfo.dragMesh.computeWorldMatrix(true);\r\n\r\n        // Z scaling logic\r\n        if (zDragFactor !== 0) {\r\n            // Camera.getForwardRay modifies TmpVectors.Vector[0-3], so cache it in advance\r\n            const cameraForwardVec = TmpVectors.Vector3[0];\r\n            const originDragDirection = TmpVectors.Vector3[1];\r\n            cameraForwardVec.copyFrom(this._pointerCamera!.getForwardRay().direction);\r\n            virtualMeshesInfo.originMesh.position.subtractToRef(virtualMeshesInfo.lastOriginPosition, originDragDirection);\r\n            virtualMeshesInfo.lastOriginPosition.copyFrom(virtualMeshesInfo.originMesh.position);\r\n            const controllerDragDistance = originDragDirection.length();\r\n            originDragDirection.normalize();\r\n\r\n            const cameraToDrag = TmpVectors.Vector3[2];\r\n            const controllerToDrag = TmpVectors.Vector3[3];\r\n            virtualMeshesInfo.dragMesh.absolutePosition.subtractToRef(this._pointerCamera!.globalPosition, cameraToDrag);\r\n            virtualMeshesInfo.dragMesh.absolutePosition.subtractToRef(virtualMeshesInfo.originMesh.position, controllerToDrag);\r\n            const controllerToDragDistance = controllerToDrag.length();\r\n            cameraToDrag.normalize();\r\n            controllerToDrag.normalize();\r\n\r\n            const controllerDragScaling = Math.abs(Vector3.Dot(originDragDirection, controllerToDrag)) * Vector3.Dot(originDragDirection, cameraForwardVec);\r\n            let zOffsetScaling = controllerDragScaling * zDragFactor * controllerDragDistance * controllerToDragDistance;\r\n\r\n            // Prevent pulling the mesh through the controller\r\n            const minDistanceFromControllerToDragMesh = 0.01;\r\n            if (zOffsetScaling < 0 && minDistanceFromControllerToDragMesh - controllerToDragDistance > zOffsetScaling) {\r\n                zOffsetScaling = Math.min(minDistanceFromControllerToDragMesh - controllerToDragDistance, 0);\r\n            }\r\n            controllerToDrag.scaleInPlace(zOffsetScaling);\r\n\r\n            controllerToDrag.addToRef(virtualMeshesInfo.pivotMesh.absolutePosition, this._tmpVector);\r\n            virtualMeshesInfo.pivotMesh.setAbsolutePosition(this._tmpVector);\r\n            controllerToDrag.addToRef(virtualMeshesInfo.dragMesh.absolutePosition, this._tmpVector);\r\n            virtualMeshesInfo.dragMesh.setAbsolutePosition(this._tmpVector);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches the scale behavior the passed in mesh\r\n     * @param ownerNode The mesh that will be scaled around once attached\r\n     */\r\n    public attach(ownerNode: TransformNode): void {\r\n        this._ownerNode = ownerNode;\r\n        this._scene = this._ownerNode.getScene();\r\n        if (!BaseSixDofDragBehavior._virtualScene) {\r\n            BaseSixDofDragBehavior._virtualScene = new Scene(this._scene.getEngine(), { virtual: true });\r\n            BaseSixDofDragBehavior._virtualScene.detachControl();\r\n        }\r\n\r\n        const pickPredicate = (m: AbstractMesh) => {\r\n            return this._ownerNode === m || (m.isDescendantOf(this._ownerNode) && (!this.draggableMeshes || this.draggableMeshes.indexOf(m) !== -1));\r\n        };\r\n\r\n        this._pointerObserver = this._scene.onPointerObservable.add((pointerInfo) => {\r\n            const pointerId = (<IPointerEvent>pointerInfo.event).pointerId;\r\n            if (!this._virtualMeshesInfo[pointerId]) {\r\n                this._virtualMeshesInfo[pointerId] = this._createVirtualMeshInfo();\r\n            }\r\n            const virtualMeshesInfo = this._virtualMeshesInfo[pointerId];\r\n            const isXRPointer = (<IPointerEvent>pointerInfo.event).pointerType === \"xr-near\" || (<IPointerEvent>pointerInfo.event).pointerType === \"xr\";\r\n\r\n            if (pointerInfo.type == PointerEventTypes.POINTERDOWN) {\r\n                if (\r\n                    !virtualMeshesInfo.dragging &&\r\n                    pointerInfo.pickInfo &&\r\n                    pointerInfo.pickInfo.hit &&\r\n                    pointerInfo.pickInfo.pickedMesh &&\r\n                    pointerInfo.pickInfo.pickedPoint &&\r\n                    pointerInfo.pickInfo.ray &&\r\n                    (!isXRPointer || pointerInfo.pickInfo.aimTransform) &&\r\n                    pickPredicate(pointerInfo.pickInfo.pickedMesh)\r\n                ) {\r\n                    if ((!this.allowMultiPointer || isXRPointer) && this.currentDraggingPointerIds.length > 0) {\r\n                        return;\r\n                    }\r\n\r\n                    if (\r\n                        this._pointerCamera &&\r\n                        this._pointerCamera.cameraRigMode === Camera.RIG_MODE_NONE &&\r\n                        !this._pointerCamera._isLeftCamera &&\r\n                        !this._pointerCamera._isRightCamera\r\n                    ) {\r\n                        pointerInfo.pickInfo.ray.origin.copyFrom(this._pointerCamera!.globalPosition);\r\n                    }\r\n\r\n                    this._ownerNode.computeWorldMatrix(true);\r\n                    const virtualMeshesInfo = this._virtualMeshesInfo[pointerId];\r\n\r\n                    if (isXRPointer) {\r\n                        this._dragging = pointerInfo.pickInfo.originMesh ? this._dragType.NEAR_DRAG : this._dragType.DRAG_WITH_CONTROLLER;\r\n                        virtualMeshesInfo.originMesh.position.copyFrom(pointerInfo.pickInfo.aimTransform!.position);\r\n                        if (this._dragging === this._dragType.NEAR_DRAG && pointerInfo.pickInfo.gripTransform) {\r\n                            virtualMeshesInfo.originMesh.rotationQuaternion!.copyFrom(pointerInfo.pickInfo.gripTransform.rotationQuaternion!);\r\n                        } else {\r\n                            virtualMeshesInfo.originMesh.rotationQuaternion!.copyFrom(pointerInfo.pickInfo.aimTransform!.rotationQuaternion!);\r\n                        }\r\n                    } else {\r\n                        this._dragging = this._dragType.DRAG;\r\n                        virtualMeshesInfo.originMesh.position.copyFrom(pointerInfo.pickInfo.ray.origin);\r\n                    }\r\n\r\n                    virtualMeshesInfo.lastOriginPosition.copyFrom(virtualMeshesInfo.originMesh.position);\r\n\r\n                    virtualMeshesInfo.dragMesh.position.copyFrom(pointerInfo.pickInfo.pickedPoint);\r\n                    virtualMeshesInfo.lastDragPosition.copyFrom(pointerInfo.pickInfo.pickedPoint);\r\n\r\n                    virtualMeshesInfo.pivotMesh.position.copyFrom(this._ownerNode.getAbsolutePivotPoint());\r\n                    virtualMeshesInfo.pivotMesh.rotationQuaternion!.copyFrom(this._ownerNode.absoluteRotationQuaternion);\r\n\r\n                    virtualMeshesInfo.startingPosition.copyFrom(virtualMeshesInfo.dragMesh.position);\r\n                    virtualMeshesInfo.startingPivotPosition.copyFrom(virtualMeshesInfo.pivotMesh.position);\r\n                    virtualMeshesInfo.startingOrientation.copyFrom(virtualMeshesInfo.dragMesh.rotationQuaternion!);\r\n                    virtualMeshesInfo.startingPivotOrientation.copyFrom(virtualMeshesInfo.pivotMesh.rotationQuaternion!);\r\n\r\n                    if (isXRPointer) {\r\n                        virtualMeshesInfo.originMesh.addChild(virtualMeshesInfo.dragMesh);\r\n                        virtualMeshesInfo.originMesh.addChild(virtualMeshesInfo.pivotMesh);\r\n                    } else {\r\n                        virtualMeshesInfo.originMesh.lookAt(virtualMeshesInfo.dragMesh.position);\r\n                    }\r\n\r\n                    // Update state\r\n                    virtualMeshesInfo.dragging = true;\r\n\r\n                    if (this.currentDraggingPointerIds.indexOf(pointerId) === -1) {\r\n                        this.currentDraggingPointerIds.push(pointerId);\r\n                    }\r\n\r\n                    // Detach camera controls\r\n                    if (this.detachCameraControls && this._pointerCamera && !this._pointerCamera.leftCamera) {\r\n                        if (this._pointerCamera.inputs && this._pointerCamera.inputs.attachedToElement) {\r\n                            this._pointerCamera.detachControl();\r\n                            this._attachedToElement = true;\r\n                        } else if (!this.allowMultiPointer || this.currentDraggingPointerIds.length === 0) {\r\n                            this._attachedToElement = false;\r\n                        }\r\n                    }\r\n\r\n                    this._targetDragStart(virtualMeshesInfo.pivotMesh.position, virtualMeshesInfo.pivotMesh.rotationQuaternion!, pointerId);\r\n                    this.onDragStartObservable.notifyObservers({ position: virtualMeshesInfo.pivotMesh.position });\r\n                }\r\n            } else if (pointerInfo.type == PointerEventTypes.POINTERUP || pointerInfo.type == PointerEventTypes.POINTERDOUBLETAP) {\r\n                const registeredPointerIndex = this.currentDraggingPointerIds.indexOf(pointerId);\r\n\r\n                // Update state\r\n                virtualMeshesInfo.dragging = false;\r\n\r\n                if (registeredPointerIndex !== -1) {\r\n                    this.currentDraggingPointerIds.splice(registeredPointerIndex, 1);\r\n                    if (this.currentDraggingPointerIds.length === 0) {\r\n                        this._moving = false;\r\n                        this._dragging = this._dragType.NONE;\r\n\r\n                        // Reattach camera controls\r\n                        if (this.detachCameraControls && this._attachedToElement && this._pointerCamera && !this._pointerCamera.leftCamera) {\r\n                            this._reattachCameraControls();\r\n                            this._attachedToElement = false;\r\n                        }\r\n                    }\r\n\r\n                    virtualMeshesInfo.originMesh.removeChild(virtualMeshesInfo.dragMesh);\r\n                    virtualMeshesInfo.originMesh.removeChild(virtualMeshesInfo.pivotMesh);\r\n                    this._targetDragEnd(pointerId);\r\n                    this.onDragEndObservable.notifyObservers({});\r\n                }\r\n            } else if (pointerInfo.type == PointerEventTypes.POINTERMOVE) {\r\n                const registeredPointerIndex = this.currentDraggingPointerIds.indexOf(pointerId);\r\n\r\n                if (registeredPointerIndex !== -1 && virtualMeshesInfo.dragging && pointerInfo.pickInfo && (pointerInfo.pickInfo.ray || pointerInfo.pickInfo.aimTransform)) {\r\n                    let zDragFactor = this.zDragFactor;\r\n\r\n                    // 2 pointer interaction should not have a z axis drag factor\r\n                    // as well as near interaction\r\n                    if (this.currentDraggingPointerIds.length > 1 || pointerInfo.pickInfo.originMesh) {\r\n                        zDragFactor = 0;\r\n                    }\r\n\r\n                    this._ownerNode.computeWorldMatrix(true);\r\n                    if (!isXRPointer) {\r\n                        this._pointerUpdate2D(pointerInfo.pickInfo.ray!, pointerId, zDragFactor);\r\n                    } else {\r\n                        this._pointerUpdateXR(pointerInfo.pickInfo.aimTransform!, pointerInfo.pickInfo.gripTransform, pointerId, zDragFactor);\r\n                    }\r\n\r\n                    // Get change in rotation\r\n                    this._tmpQuaternion.copyFrom(virtualMeshesInfo.startingPivotOrientation);\r\n                    this._tmpQuaternion.x = -this._tmpQuaternion.x;\r\n                    this._tmpQuaternion.y = -this._tmpQuaternion.y;\r\n                    this._tmpQuaternion.z = -this._tmpQuaternion.z;\r\n                    virtualMeshesInfo.pivotMesh.absoluteRotationQuaternion!.multiplyToRef(this._tmpQuaternion, this._tmpQuaternion);\r\n                    virtualMeshesInfo.pivotMesh.absolutePosition.subtractToRef(virtualMeshesInfo.startingPivotPosition, this._tmpVector);\r\n\r\n                    this.onDragObservable.notifyObservers({ delta: this._tmpVector, position: virtualMeshesInfo.pivotMesh.position, pickInfo: pointerInfo.pickInfo });\r\n\r\n                    // Notify herited methods and observables\r\n                    this._targetDrag(this._tmpVector, this._tmpQuaternion, pointerId);\r\n                    virtualMeshesInfo.lastDragPosition.copyFrom(virtualMeshesInfo.dragMesh.absolutePosition);\r\n\r\n                    this._moving = true;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _applyZOffset(node: TransformNode, localOriginDragDifference: number, zDragFactor: number) {\r\n        // Determine how much the controller moved to/away towards the dragged object and use this to move the object further when its further away\r\n        node.position.z -= node.position.z < 1 ? localOriginDragDifference * zDragFactor : localOriginDragDifference * zDragFactor * node.position.z;\r\n        if (node.position.z < 0) {\r\n            node.position.z = 0;\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _targetDragStart(worldPosition: Vector3, worldRotation: Quaternion, pointerId: number) {\r\n        // Herited classes can override that\r\n    }\r\n\r\n    protected _targetDrag(worldDeltaPosition: Vector3, worldDeltaRotation: Quaternion, pointerId: number) {\r\n        // Herited classes can override that\r\n    }\r\n\r\n    protected _targetDragEnd(pointerId: number) {\r\n        // Herited classes can override that\r\n    }\r\n\r\n    protected _reattachCameraControls() {\r\n        if (this._pointerCamera) {\r\n            // If the camera is an ArcRotateCamera, preserve the settings from the camera\r\n            // when reattaching control\r\n            if (this._pointerCamera.getClassName() === \"ArcRotateCamera\") {\r\n                const arcRotateCamera = this._pointerCamera as ArcRotateCamera;\r\n                arcRotateCamera.attachControl(\r\n                    arcRotateCamera.inputs ? arcRotateCamera.inputs.noPreventDefault : true,\r\n                    arcRotateCamera._useCtrlForPanning,\r\n                    arcRotateCamera._panningMouseButton\r\n                );\r\n            } else {\r\n                // preserve the settings from the camera when reattaching control\r\n                this._pointerCamera.attachControl(this._pointerCamera.inputs ? this._pointerCamera.inputs.noPreventDefault : true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        if (this._scene) {\r\n            if (this.detachCameraControls && this._attachedToElement && this._pointerCamera && !this._pointerCamera.leftCamera) {\r\n                this._reattachCameraControls();\r\n                this._attachedToElement = false;\r\n            }\r\n            this._scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        for (const pointerId in this._virtualMeshesInfo) {\r\n            this._virtualMeshesInfo[pointerId].originMesh.dispose();\r\n            this._virtualMeshesInfo[pointerId].dragMesh.dispose();\r\n        }\r\n\r\n        this.onDragEndObservable.clear();\r\n        this.onDragObservable.clear();\r\n        this.onDragStartObservable.clear();\r\n    }\r\n}\r\n", "import type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Vector3, Quaternion, Matrix, TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { BaseSixDofDragBehavior } from \"./baseSixDofDragBehavior\";\r\nimport { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { Space } from \"../../Maths/math.axis\";\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to be dragged around based on directions and origin of the pointer's ray\r\n */\r\nexport class SixDofDragBehavior extends BaseSixDofDragBehavior {\r\n    private _sceneRenderObserver: Nullable<Observer<Scene>> = null;\r\n    private _virtualTransformNode: TransformNode;\r\n\r\n    protected _targetPosition = new Vector3(0, 0, 0);\r\n    protected _targetOrientation = new Quaternion();\r\n    protected _targetScaling = new Vector3(1, 1, 1);\r\n    protected _startingPosition = new Vector3(0, 0, 0);\r\n    protected _startingOrientation = new Quaternion();\r\n    protected _startingScaling = new Vector3(1, 1, 1);\r\n\r\n    /**\r\n     * Fires when position is updated\r\n     */\r\n    public onPositionChangedObservable = new Observable<{ position: Vector3 }>();\r\n\r\n    /**\r\n     * The distance towards the target drag position to move each frame. This can be useful to avoid jitter. Set this to 1 for no delay. (Default: 0.2)\r\n     */\r\n    public dragDeltaRatio = 0.2;\r\n\r\n    /**\r\n     * If the object should rotate to face the drag origin\r\n     */\r\n    public rotateDraggedObject = true;\r\n\r\n    /**\r\n     * If `rotateDraggedObject` is set to `true`, this parameter determines if we are only rotating around the y axis (yaw)\r\n     */\r\n    public rotateAroundYOnly = false;\r\n\r\n    /**\r\n     * Should the behavior rotate 1:1 with the motion controller, when one is used.\r\n     */\r\n    public rotateWithMotionController = true;\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public override get name(): string {\r\n        return \"SixDofDrag\";\r\n    }\r\n\r\n    /**\r\n     * Use this flag to update the target but not move the owner node towards the target\r\n     */\r\n    public disableMovement: boolean = false;\r\n\r\n    /**\r\n     * Should the object rotate towards the camera when we start dragging it\r\n     */\r\n    public faceCameraOnDragStart = false;\r\n\r\n    /**\r\n     * Attaches the six DoF drag behavior\r\n     * In XR mode the mesh and its children will have their isNearGrabbable property set to true\r\n     * @param ownerNode The mesh that will be dragged around once attached\r\n     */\r\n    public override attach(ownerNode: Mesh): void {\r\n        super.attach(ownerNode);\r\n\r\n        ownerNode.isNearGrabbable = true;\r\n        // if it has children, make sure they are grabbable too\r\n        ownerNode.getChildMeshes().forEach((m) => {\r\n            m.isNearGrabbable = true;\r\n        });\r\n\r\n        // Node that will save the owner's transform\r\n        this._virtualTransformNode = new TransformNode(\"virtual_sixDof\", BaseSixDofDragBehavior._virtualScene);\r\n        this._virtualTransformNode.rotationQuaternion = Quaternion.Identity();\r\n\r\n        // On every frame move towards target scaling to avoid jitter caused by vr controllers\r\n        this._sceneRenderObserver = ownerNode.getScene().onBeforeRenderObservable.add(() => {\r\n            if (this.currentDraggingPointerIds.length === 1 && this._moving && !this.disableMovement) {\r\n                // 1 pointer only drags mesh\r\n                const deltaToAdd = TmpVectors.Vector3[0];\r\n                deltaToAdd.copyFrom(this._targetPosition).subtractInPlace(ownerNode.absolutePosition).scaleInPlace(this.dragDeltaRatio);\r\n                const deltaToAddTransformed = TmpVectors.Vector3[1];\r\n                deltaToAddTransformed.copyFrom(deltaToAdd);\r\n                // If the node has a parent, transform the delta to local space, so it can be added to the\r\n                // position in local space\r\n                if (ownerNode.parent) {\r\n                    const parentRotationMatrixInverse = TmpVectors.Matrix[0];\r\n                    (ownerNode.parent as TransformNode).absoluteRotationQuaternion.toRotationMatrix(parentRotationMatrixInverse);\r\n                    parentRotationMatrixInverse.invert();\r\n                    Vector3.TransformNormalToRef(deltaToAdd, parentRotationMatrixInverse, deltaToAddTransformed);\r\n                }\r\n                ownerNode.position.addInPlace(deltaToAddTransformed);\r\n\r\n                this.onPositionChangedObservable.notifyObservers({ position: ownerNode.absolutePosition });\r\n\r\n                // Only rotate the mesh if it's parent has uniform scaling\r\n                if (!ownerNode.parent || ((ownerNode.parent as TransformNode).scaling && !(ownerNode.parent as TransformNode).scaling.isNonUniformWithinEpsilon(0.001))) {\r\n                    const rotationToApply = TmpVectors.Quaternion[0];\r\n                    rotationToApply.copyFrom(this._targetOrientation);\r\n                    if (ownerNode.parent) {\r\n                        const parentRotationInverse = TmpVectors.Quaternion[0];\r\n                        parentRotationInverse.copyFrom((ownerNode.parent as TransformNode).absoluteRotationQuaternion);\r\n                        parentRotationInverse.invertInPlace();\r\n                        parentRotationInverse.multiplyToRef(this._targetOrientation, rotationToApply);\r\n                    }\r\n                    Quaternion.SlerpToRef(ownerNode.rotationQuaternion!, rotationToApply, this.dragDeltaRatio, ownerNode.rotationQuaternion!);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getPositionOffsetAround(transformationLocalOrigin: Vector3, scaling: number, rotation: Quaternion): Vector3 {\r\n        const translationMatrix = TmpVectors.Matrix[0]; // T\r\n        const translationMatrixInv = TmpVectors.Matrix[1]; // T'\r\n        const rotationMatrix = TmpVectors.Matrix[2]; // R\r\n        const scaleMatrix = TmpVectors.Matrix[3]; // S\r\n        const finalMatrix = TmpVectors.Matrix[4]; // T' x R x S x T\r\n\r\n        Matrix.TranslationToRef(transformationLocalOrigin.x, transformationLocalOrigin.y, transformationLocalOrigin.z, translationMatrix); // T\r\n        Matrix.TranslationToRef(-transformationLocalOrigin.x, -transformationLocalOrigin.y, -transformationLocalOrigin.z, translationMatrixInv); // T'\r\n        Matrix.FromQuaternionToRef(rotation, rotationMatrix); // R\r\n        Matrix.ScalingToRef(scaling, scaling, scaling, scaleMatrix);\r\n        translationMatrixInv.multiplyToRef(rotationMatrix, finalMatrix); // T' x R\r\n        finalMatrix.multiplyToRef(scaleMatrix, finalMatrix); // T' x R x S\r\n        finalMatrix.multiplyToRef(translationMatrix, finalMatrix); // T' x R x S x T\r\n\r\n        return finalMatrix.getTranslation();\r\n    }\r\n\r\n    private _onePointerPositionUpdated(worldDeltaPosition: Vector3, worldDeltaRotation: Quaternion) {\r\n        const pointerDelta = TmpVectors.Vector3[0];\r\n        pointerDelta.setAll(0);\r\n\r\n        if (this._dragging === this._dragType.DRAG) {\r\n            if (this.rotateDraggedObject) {\r\n                if (this.rotateAroundYOnly) {\r\n                    // Convert change in rotation to only y axis rotation\r\n                    Quaternion.RotationYawPitchRollToRef(worldDeltaRotation.toEulerAngles().y, 0, 0, TmpVectors.Quaternion[0]);\r\n                } else {\r\n                    TmpVectors.Quaternion[0].copyFrom(worldDeltaRotation);\r\n                }\r\n                TmpVectors.Quaternion[0].multiplyToRef(this._startingOrientation, this._targetOrientation);\r\n            }\r\n        } else if (this._dragging === this._dragType.NEAR_DRAG || (this._dragging === this._dragType.DRAG_WITH_CONTROLLER && this.rotateWithMotionController)) {\r\n            worldDeltaRotation.multiplyToRef(this._startingOrientation, this._targetOrientation);\r\n        }\r\n\r\n        this._targetPosition.copyFrom(this._startingPosition).addInPlace(worldDeltaPosition);\r\n    }\r\n\r\n    private _twoPointersPositionUpdated() {\r\n        const startingPosition0 = this._virtualMeshesInfo[this.currentDraggingPointerIds[0]].startingPosition;\r\n        const startingPosition1 = this._virtualMeshesInfo[this.currentDraggingPointerIds[1]].startingPosition;\r\n        const startingCenter = TmpVectors.Vector3[0];\r\n        startingPosition0.addToRef(startingPosition1, startingCenter);\r\n        startingCenter.scaleInPlace(0.5);\r\n        const startingVector = TmpVectors.Vector3[1];\r\n        startingPosition1.subtractToRef(startingPosition0, startingVector);\r\n\r\n        const currentPosition0 = this._virtualMeshesInfo[this.currentDraggingPointerIds[0]].dragMesh.absolutePosition;\r\n        const currentPosition1 = this._virtualMeshesInfo[this.currentDraggingPointerIds[1]].dragMesh.absolutePosition;\r\n        const currentCenter = TmpVectors.Vector3[2];\r\n        currentPosition0.addToRef(currentPosition1, currentCenter);\r\n        currentCenter.scaleInPlace(0.5);\r\n        const currentVector = TmpVectors.Vector3[3];\r\n        currentPosition1.subtractToRef(currentPosition0, currentVector);\r\n\r\n        const scaling = currentVector.length() / startingVector.length();\r\n        const translation = currentCenter.subtract(startingCenter);\r\n        const rotationQuaternion = Quaternion.FromEulerAngles(\r\n            0,\r\n            Vector3.GetAngleBetweenVectorsOnPlane(startingVector.normalize(), currentVector.normalize(), Vector3.UpReadOnly),\r\n            0\r\n        );\r\n\r\n        const oldParent = this._ownerNode.parent;\r\n        this._ownerNode.setParent(null);\r\n\r\n        const positionOffset = this._getPositionOffsetAround(startingCenter.subtract(this._virtualTransformNode.getAbsolutePivotPoint()), scaling, rotationQuaternion);\r\n        this._virtualTransformNode.rotationQuaternion!.multiplyToRef(rotationQuaternion, this._ownerNode.rotationQuaternion!);\r\n        this._virtualTransformNode.scaling.scaleToRef(scaling, this._ownerNode.scaling);\r\n        this._virtualTransformNode.position.addToRef(translation.addInPlace(positionOffset), this._ownerNode.position);\r\n        this.onPositionChangedObservable.notifyObservers({ position: this._ownerNode.position });\r\n\r\n        this._ownerNode.setParent(oldParent);\r\n    }\r\n\r\n    protected override _targetDragStart() {\r\n        const pointerCount = this.currentDraggingPointerIds.length;\r\n\r\n        if (!this._ownerNode.rotationQuaternion) {\r\n            this._ownerNode.rotationQuaternion = Quaternion.RotationYawPitchRoll(this._ownerNode.rotation.y, this._ownerNode.rotation.x, this._ownerNode.rotation.z);\r\n        }\r\n        const worldPivot = this._ownerNode.getAbsolutePivotPoint();\r\n\r\n        if (pointerCount === 1) {\r\n            this._targetPosition.copyFrom(this._ownerNode.absolutePosition);\r\n            this._targetOrientation.copyFrom(this._ownerNode.rotationQuaternion);\r\n            this._targetScaling.copyFrom(this._ownerNode.absoluteScaling);\r\n\r\n            if (this.faceCameraOnDragStart && this._scene.activeCamera) {\r\n                const toCamera = TmpVectors.Vector3[0];\r\n                this._scene.activeCamera.position.subtractToRef(worldPivot, toCamera);\r\n                toCamera.normalize();\r\n                const quat = TmpVectors.Quaternion[0];\r\n                if (this._scene.useRightHandedSystem) {\r\n                    Quaternion.FromLookDirectionRHToRef(toCamera, new Vector3(0, 1, 0), quat);\r\n                } else {\r\n                    Quaternion.FromLookDirectionLHToRef(toCamera, new Vector3(0, 1, 0), quat);\r\n                }\r\n                quat.normalize();\r\n                Quaternion.RotationYawPitchRollToRef(quat.toEulerAngles().y, 0, 0, TmpVectors.Quaternion[0]);\r\n                this._targetOrientation.copyFrom(TmpVectors.Quaternion[0]);\r\n            }\r\n            this._startingPosition.copyFrom(this._targetPosition);\r\n            this._startingOrientation.copyFrom(this._targetOrientation);\r\n            this._startingScaling.copyFrom(this._targetScaling);\r\n        } else if (pointerCount === 2) {\r\n            this._virtualTransformNode.setPivotPoint(new Vector3(0, 0, 0), Space.LOCAL);\r\n            this._virtualTransformNode.position.copyFrom(this._ownerNode.absolutePosition);\r\n            this._virtualTransformNode.scaling.copyFrom(this._ownerNode.absoluteScaling);\r\n            this._virtualTransformNode.rotationQuaternion!.copyFrom(this._ownerNode.absoluteRotationQuaternion);\r\n            this._virtualTransformNode.setPivotPoint(worldPivot, Space.WORLD);\r\n            this._resetVirtualMeshesPosition();\r\n        }\r\n    }\r\n\r\n    protected override _targetDrag(worldDeltaPosition: Vector3, worldDeltaRotation: Quaternion) {\r\n        if (this.currentDraggingPointerIds.length === 1) {\r\n            this._onePointerPositionUpdated(worldDeltaPosition, worldDeltaRotation);\r\n        } else if (this.currentDraggingPointerIds.length === 2) {\r\n            this._twoPointersPositionUpdated();\r\n        }\r\n    }\r\n\r\n    protected override _targetDragEnd() {\r\n        if (this.currentDraggingPointerIds.length === 1) {\r\n            // We still have 1 active pointer, we must simulate a dragstart with a reseted position/orientation\r\n            this._resetVirtualMeshesPosition();\r\n            const previousFaceCameraFlag = this.faceCameraOnDragStart;\r\n            this.faceCameraOnDragStart = false;\r\n            this._targetDragStart();\r\n            this.faceCameraOnDragStart = previousFaceCameraFlag;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public override detach(): void {\r\n        super.detach();\r\n\r\n        if (this._ownerNode) {\r\n            this._ownerNode.getScene().onBeforeRenderObservable.remove(this._sceneRenderObserver);\r\n        }\r\n\r\n        if (this._virtualTransformNode) {\r\n            this._virtualTransformNode.dispose();\r\n        }\r\n    }\r\n}\r\n", "import type { PickingInfo } from \"../../Collisions/pickingInfo\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Quaternion, TmpVectors, Vector3 } from \"../../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Behavior } from \"../behavior\";\r\n\r\n/**\r\n * A behavior that allows a transform node to stick to a surface position/orientation\r\n * @since 5.0.0\r\n */\r\nexport class SurfaceMagnetismBehavior implements Behavior<Mesh> {\r\n    private _scene: Scene;\r\n    private _attachedMesh: Nullable<Mesh>;\r\n    private _attachPointLocalOffset: Vector3 = new Vector3();\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _workingPosition: Vector3 = new Vector3();\r\n    private _workingQuaternion: Quaternion = new Quaternion();\r\n    private _lastTick: number = -1;\r\n    private _onBeforeRender: Nullable<Observer<Scene>>;\r\n    private _hit = false;\r\n\r\n    /**\r\n     * Distance offset from the hit point to place the target at, along the hit normal.\r\n     */\r\n    public hitNormalOffset: number = 0.05;\r\n\r\n    /**\r\n     * Name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"SurfaceMagnetism\";\r\n    }\r\n\r\n    /**\r\n     * Spatial mapping meshes to collide with\r\n     */\r\n    public meshes: AbstractMesh[] = [];\r\n\r\n    /**\r\n     * Function called when the behavior needs to be initialized (after attaching it to a target)\r\n     */\r\n    public init(): void {}\r\n\r\n    /**\r\n     * Set to false if the node should strictly follow the camera without any interpolation time\r\n     */\r\n    public interpolatePose = true;\r\n\r\n    /**\r\n     * Rate of interpolation of position and rotation of the attached node.\r\n     * Higher values will give a slower interpolation.\r\n     */\r\n    public lerpTime = 250;\r\n\r\n    /**\r\n     * If true, pitch and roll are omitted.\r\n     */\r\n    public keepOrientationVertical = true;\r\n\r\n    /**\r\n     * Is this behavior reacting to pointer events\r\n     */\r\n    public enabled = true;\r\n\r\n    /**\r\n     * Maximum distance for the node to stick to the surface\r\n     */\r\n    public maxStickingDistance = 0.8;\r\n\r\n    /**\r\n     * Attaches the behavior to a transform node\r\n     * @param target defines the target where the behavior is attached to\r\n     * @param scene the scene\r\n     */\r\n    public attach(target: Mesh, scene?: Scene): void {\r\n        this._attachedMesh = target;\r\n        this._scene = scene || target.getScene();\r\n        if (!this._attachedMesh.rotationQuaternion) {\r\n            this._attachedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(this._attachedMesh.rotation.y, this._attachedMesh.rotation.x, this._attachedMesh.rotation.z);\r\n        }\r\n        this.updateAttachPoint();\r\n\r\n        this._workingPosition.copyFrom(this._attachedMesh.position);\r\n        this._workingQuaternion.copyFrom(this._attachedMesh.rotationQuaternion);\r\n        this._addObservables();\r\n    }\r\n\r\n    /**\r\n     * Detaches the behavior\r\n     */\r\n    public detach(): void {\r\n        this._attachedMesh = null;\r\n        this._removeObservables();\r\n    }\r\n\r\n    private _getTargetPose(pickingInfo: PickingInfo): Nullable<{ position: Vector3; quaternion: Quaternion }> {\r\n        if (!this._attachedMesh) {\r\n            return null;\r\n        }\r\n\r\n        if (pickingInfo && pickingInfo.hit) {\r\n            const pickedNormal = pickingInfo.getNormal(true, true);\r\n            const pickedPoint = pickingInfo.pickedPoint;\r\n\r\n            if (!pickedNormal || !pickedPoint) {\r\n                return null;\r\n            }\r\n            pickedNormal.normalize();\r\n\r\n            const worldTarget = TmpVectors.Vector3[0];\r\n            worldTarget.copyFrom(pickedNormal);\r\n            worldTarget.scaleInPlace(this.hitNormalOffset);\r\n            worldTarget.addInPlace(pickedPoint);\r\n\r\n            if (this._attachedMesh.parent) {\r\n                TmpVectors.Matrix[0].copyFrom(this._attachedMesh.parent.getWorldMatrix()).invert();\r\n                Vector3.TransformNormalToRef(worldTarget, TmpVectors.Matrix[0], worldTarget);\r\n            }\r\n\r\n            return {\r\n                position: worldTarget,\r\n                quaternion: Quaternion.RotationYawPitchRoll(\r\n                    -Math.atan2(pickedNormal.x, -pickedNormal.z),\r\n                    this.keepOrientationVertical ? 0 : Math.atan2(pickedNormal.y, Math.sqrt(pickedNormal.z * pickedNormal.z + pickedNormal.x * pickedNormal.x)),\r\n                    0\r\n                ),\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Updates the attach point with the current geometry extents of the attached mesh\r\n     */\r\n    public updateAttachPoint() {\r\n        this._getAttachPointOffsetToRef(this._attachPointLocalOffset);\r\n    }\r\n\r\n    /**\r\n     * Finds the intersection point of the given ray onto the meshes and updates the target.\r\n     * Transformation will be interpolated according to `interpolatePose` and `lerpTime` properties.\r\n     * If no mesh of `meshes` are hit, this does nothing.\r\n     * @param pickInfo The input pickingInfo that will be used to intersect the meshes\r\n     * @returns a boolean indicating if we found a hit to stick to\r\n     */\r\n    public findAndUpdateTarget(pickInfo: PickingInfo): boolean {\r\n        this._hit = false;\r\n        if (!pickInfo.ray) {\r\n            return false;\r\n        }\r\n\r\n        const subPicking = pickInfo.ray.intersectsMeshes(this.meshes)[0];\r\n\r\n        if (this._attachedMesh && subPicking && subPicking.hit && subPicking.pickedMesh) {\r\n            const pose = this._getTargetPose(subPicking);\r\n            if (pose && Vector3.Distance(this._attachedMesh.position, pose.position) < this.maxStickingDistance) {\r\n                this._workingPosition.copyFrom(pose.position);\r\n                this._workingQuaternion.copyFrom(pose.quaternion);\r\n                this._hit = true;\r\n            }\r\n        }\r\n\r\n        return this._hit;\r\n    }\r\n\r\n    private _getAttachPointOffsetToRef(ref: Vector3) {\r\n        if (!this._attachedMesh) {\r\n            ref.setAll(0);\r\n            return;\r\n        }\r\n\r\n        const storedQuat = TmpVectors.Quaternion[0];\r\n        storedQuat.copyFrom(this._attachedMesh.rotationQuaternion!);\r\n        this._attachedMesh.rotationQuaternion!.copyFromFloats(0, 0, 0, 1);\r\n        this._attachedMesh.computeWorldMatrix();\r\n        const boundingMinMax = this._attachedMesh.getHierarchyBoundingVectors();\r\n        const center = TmpVectors.Vector3[0];\r\n        boundingMinMax.max.addToRef(boundingMinMax.min, center);\r\n        center.scaleInPlace(0.5);\r\n        center.z = boundingMinMax.max.z;\r\n        // We max the z coordinate because we want the attach point to be on the back of the mesh\r\n        const invWorld = TmpVectors.Matrix[0];\r\n        this._attachedMesh.getWorldMatrix().invertToRef(invWorld);\r\n        Vector3.TransformCoordinatesToRef(center, invWorld, ref);\r\n        this._attachedMesh.rotationQuaternion!.copyFrom(storedQuat);\r\n    }\r\n\r\n    private _updateTransformToGoal(elapsed: number) {\r\n        if (!this._attachedMesh || !this._hit) {\r\n            return;\r\n        }\r\n\r\n        const oldParent = this._attachedMesh.parent;\r\n        this._attachedMesh.setParent(null);\r\n\r\n        const worldOffset = TmpVectors.Vector3[0];\r\n        Vector3.TransformNormalToRef(this._attachPointLocalOffset, this._attachedMesh.getWorldMatrix(), worldOffset);\r\n\r\n        if (!this.interpolatePose) {\r\n            this._attachedMesh.position.copyFrom(this._workingPosition).subtractInPlace(worldOffset);\r\n            this._attachedMesh.rotationQuaternion!.copyFrom(this._workingQuaternion);\r\n            return;\r\n        }\r\n\r\n        // position\r\n        const interpolatedPosition = new Vector3();\r\n        Vector3.SmoothToRef(this._attachedMesh.position, this._workingPosition, elapsed, this.lerpTime, interpolatedPosition);\r\n        this._attachedMesh.position.copyFrom(interpolatedPosition);\r\n\r\n        // rotation\r\n        const currentRotation = new Quaternion();\r\n        currentRotation.copyFrom(this._attachedMesh.rotationQuaternion!);\r\n        Quaternion.SmoothToRef(currentRotation, this._workingQuaternion, elapsed, this.lerpTime, this._attachedMesh.rotationQuaternion!);\r\n\r\n        this._attachedMesh.setParent(oldParent);\r\n    }\r\n\r\n    private _addObservables() {\r\n        this._pointerObserver = this._scene.onPointerObservable.add((pointerInfo) => {\r\n            if (this.enabled && pointerInfo.type == PointerEventTypes.POINTERMOVE && pointerInfo.pickInfo) {\r\n                this.findAndUpdateTarget(pointerInfo.pickInfo);\r\n            }\r\n        });\r\n\r\n        this._lastTick = Date.now();\r\n        this._onBeforeRender = this._scene.onBeforeRenderObservable.add(() => {\r\n            const tick = Date.now();\r\n            this._updateTransformToGoal(tick - this._lastTick);\r\n            this._lastTick = tick;\r\n        });\r\n    }\r\n\r\n    private _removeObservables() {\r\n        this._scene.onPointerObservable.remove(this._pointerObserver);\r\n        this._scene.onBeforeRenderObservable.remove(this._onBeforeRender);\r\n        this._pointerObserver = null;\r\n        this._onBeforeRender = null;\r\n    }\r\n}\r\n", "import { serialize, serializeAsColor3, expandToProperty } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3, TmpColors } from \"../Maths/math.color\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { UniformBuffer } from \"../Materials/uniformBuffer\";\r\nimport type { IShadowGenerator } from \"./Shadows/shadowGenerator\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\nimport type { ISortableLight } from \"./lightConstants\";\r\nimport { LightConstants } from \"./lightConstants\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\n/**\r\n * Base class of all the lights in Babylon. It groups all the generic information about lights.\r\n * Lights are used, as you would expect, to affect how meshes are seen, in terms of both illumination and colour.\r\n * All meshes allow light to pass through them unless shadow generation is activated. The default number of lights allowed is four but this can be increased.\r\n */\r\nexport abstract class Light extends Node implements ISortableLight {\r\n    /**\r\n     * Falloff Default: light is falling off following the material specification:\r\n     * standard material is using standard falloff whereas pbr material can request special falloff per materials.\r\n     */\r\n    public static readonly FALLOFF_DEFAULT = LightConstants.FALLOFF_DEFAULT;\r\n\r\n    /**\r\n     * Falloff Physical: light is falling off following the inverse squared distance law.\r\n     */\r\n    public static readonly FALLOFF_PHYSICAL = LightConstants.FALLOFF_PHYSICAL;\r\n\r\n    /**\r\n     * Falloff gltf: light is falling off as described in the gltf moving to PBR document\r\n     * to enhance interoperability with other engines.\r\n     */\r\n    public static readonly FALLOFF_GLTF = LightConstants.FALLOFF_GLTF;\r\n\r\n    /**\r\n     * Falloff Standard: light is falling off like in the standard material\r\n     * to enhance interoperability with other materials.\r\n     */\r\n    public static readonly FALLOFF_STANDARD = LightConstants.FALLOFF_STANDARD;\r\n\r\n    //lightmapMode Consts\r\n    /**\r\n     * If every light affecting the material is in this lightmapMode,\r\n     * material.lightmapTexture adds or multiplies\r\n     * (depends on material.useLightmapAsShadowmap)\r\n     * after every other light calculations.\r\n     */\r\n    public static readonly LIGHTMAP_DEFAULT = LightConstants.LIGHTMAP_DEFAULT;\r\n    /**\r\n     * material.lightmapTexture as only diffuse lighting from this light\r\n     * adds only specular lighting from this light\r\n     * adds dynamic shadows\r\n     */\r\n    public static readonly LIGHTMAP_SPECULAR = LightConstants.LIGHTMAP_SPECULAR;\r\n    /**\r\n     * material.lightmapTexture as only lighting\r\n     * no light calculation from this light\r\n     * only adds dynamic shadows from this light\r\n     */\r\n    public static readonly LIGHTMAP_SHADOWSONLY = LightConstants.LIGHTMAP_SHADOWSONLY;\r\n\r\n    // Intensity Mode Consts\r\n    /**\r\n     * Each light type uses the default quantity according to its type:\r\n     *      point/spot lights use luminous intensity\r\n     *      directional lights use illuminance\r\n     */\r\n    public static readonly INTENSITYMODE_AUTOMATIC = LightConstants.INTENSITYMODE_AUTOMATIC;\r\n    /**\r\n     * lumen (lm)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINOUSPOWER = LightConstants.INTENSITYMODE_LUMINOUSPOWER;\r\n    /**\r\n     * candela (lm/sr)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINOUSINTENSITY = LightConstants.INTENSITYMODE_LUMINOUSINTENSITY;\r\n    /**\r\n     * lux (lm/m^2)\r\n     */\r\n    public static readonly INTENSITYMODE_ILLUMINANCE = LightConstants.INTENSITYMODE_ILLUMINANCE;\r\n    /**\r\n     * nit (cd/m^2)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINANCE = LightConstants.INTENSITYMODE_LUMINANCE;\r\n\r\n    // Light types ids const.\r\n    /**\r\n     * Light type const id of the point light.\r\n     */\r\n    public static readonly LIGHTTYPEID_POINTLIGHT = LightConstants.LIGHTTYPEID_POINTLIGHT;\r\n    /**\r\n     * Light type const id of the directional light.\r\n     */\r\n    public static readonly LIGHTTYPEID_DIRECTIONALLIGHT = LightConstants.LIGHTTYPEID_DIRECTIONALLIGHT;\r\n    /**\r\n     * Light type const id of the spot light.\r\n     */\r\n    public static readonly LIGHTTYPEID_SPOTLIGHT = LightConstants.LIGHTTYPEID_SPOTLIGHT;\r\n    /**\r\n     * Light type const id of the hemispheric light.\r\n     */\r\n    public static readonly LIGHTTYPEID_HEMISPHERICLIGHT = LightConstants.LIGHTTYPEID_HEMISPHERICLIGHT;\r\n\r\n    /**\r\n     * Light type const id of the area light.\r\n     */\r\n    public static readonly LIGHTTYPEID_RECT_AREALIGHT = LightConstants.LIGHTTYPEID_RECT_AREALIGHT;\r\n\r\n    /**\r\n     * Diffuse gives the basic color to an object.\r\n     */\r\n    @serializeAsColor3()\r\n    public diffuse = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Specular produces a highlight color on an object.\r\n     * Note: This is not affecting PBR materials.\r\n     */\r\n    @serializeAsColor3()\r\n    public specular = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Defines the falloff type for this light. This lets overriding how punctual light are\r\n     * falling off base on range or angle.\r\n     * This can be set to any values in Light.FALLOFF_x.\r\n     *\r\n     * Note: This is only useful for PBR Materials at the moment. This could be extended if required to\r\n     * other types of materials.\r\n     */\r\n    @serialize()\r\n    public falloffType = Light.FALLOFF_DEFAULT;\r\n\r\n    /**\r\n     * Strength of the light.\r\n     * Note: By default it is define in the framework own unit.\r\n     * Note: In PBR materials the intensityMode can be use to chose what unit the intensity is defined in.\r\n     */\r\n    @serialize()\r\n    public intensity = 1.0;\r\n\r\n    private _range = Number.MAX_VALUE;\r\n    protected _inverseSquaredRange = 0;\r\n\r\n    /**\r\n     * Defines how far from the source the light is impacting in scene units.\r\n     * Note: Unused in PBR material as the distance light falloff is defined following the inverse squared falloff.\r\n     */\r\n    @serialize()\r\n    public get range(): number {\r\n        return this._range;\r\n    }\r\n    /**\r\n     * Defines how far from the source the light is impacting in scene units.\r\n     * Note: Unused in PBR material as the distance light falloff is defined following the inverse squared falloff.\r\n     */\r\n    public set range(value: number) {\r\n        this._range = value;\r\n        this._inverseSquaredRange = 1.0 / (this.range * this.range);\r\n    }\r\n\r\n    /**\r\n     * Cached photometric scale default to 1.0 as the automatic intensity mode defaults to 1.0 for every type\r\n     * of light.\r\n     */\r\n    private _photometricScale = 1.0;\r\n\r\n    private _intensityMode: number = Light.INTENSITYMODE_AUTOMATIC;\r\n    /**\r\n     * Gets the photometric scale used to interpret the intensity.\r\n     * This is only relevant with PBR Materials where the light intensity can be defined in a physical way.\r\n     */\r\n    @serialize()\r\n    public get intensityMode(): number {\r\n        return this._intensityMode;\r\n    }\r\n    /**\r\n     * Sets the photometric scale used to interpret the intensity.\r\n     * This is only relevant with PBR Materials where the light intensity can be defined in a physical way.\r\n     */\r\n    public set intensityMode(value: number) {\r\n        this._intensityMode = value;\r\n        this._computePhotometricScale();\r\n    }\r\n\r\n    private _radius = 0.00001;\r\n    /**\r\n     * Gets the light radius used by PBR Materials to simulate soft area lights.\r\n     */\r\n    @serialize()\r\n    public get radius(): number {\r\n        return this._radius;\r\n    }\r\n    /**\r\n     * sets the light radius used by PBR Materials to simulate soft area lights.\r\n     */\r\n    public set radius(value: number) {\r\n        this._radius = value;\r\n        this._computePhotometricScale();\r\n    }\r\n\r\n    @serialize()\r\n    private _renderPriority: number;\r\n    /**\r\n     * Defines the rendering priority of the lights. It can help in case of fallback or number of lights\r\n     * exceeding the number allowed of the materials.\r\n     */\r\n    @expandToProperty(\"_reorderLightsInScene\")\r\n    public renderPriority: number = 0;\r\n\r\n    @serialize(\"shadowEnabled\")\r\n    private _shadowEnabled: boolean = true;\r\n    /**\r\n     * Gets whether or not the shadows are enabled for this light. This can help turning off/on shadow without detaching\r\n     * the current shadow generator.\r\n     */\r\n    public get shadowEnabled(): boolean {\r\n        return this._shadowEnabled;\r\n    }\r\n    /**\r\n     * Sets whether or not the shadows are enabled for this light. This can help turning off/on shadow without detaching\r\n     * the current shadow generator.\r\n     */\r\n    public set shadowEnabled(value: boolean) {\r\n        if (this._shadowEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._shadowEnabled = value;\r\n        this._markMeshesAsLightDirty();\r\n    }\r\n\r\n    private _includedOnlyMeshes: AbstractMesh[];\r\n    /**\r\n     * Gets the only meshes impacted by this light.\r\n     */\r\n    public get includedOnlyMeshes(): AbstractMesh[] {\r\n        return this._includedOnlyMeshes;\r\n    }\r\n    /**\r\n     * Sets the only meshes impacted by this light.\r\n     */\r\n    public set includedOnlyMeshes(value: AbstractMesh[]) {\r\n        this._includedOnlyMeshes = value;\r\n        this._hookArrayForIncludedOnly(value);\r\n    }\r\n\r\n    private _excludedMeshes: AbstractMesh[];\r\n    /**\r\n     * Gets the meshes not impacted by this light.\r\n     */\r\n    public get excludedMeshes(): AbstractMesh[] {\r\n        return this._excludedMeshes;\r\n    }\r\n    /**\r\n     * Sets the meshes not impacted by this light.\r\n     */\r\n    public set excludedMeshes(value: AbstractMesh[]) {\r\n        this._excludedMeshes = value;\r\n        this._hookArrayForExcluded(value);\r\n    }\r\n\r\n    @serialize(\"excludeWithLayerMask\")\r\n    private _excludeWithLayerMask = 0;\r\n    /**\r\n     * Gets the layer id use to find what meshes are not impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public get excludeWithLayerMask(): number {\r\n        return this._excludeWithLayerMask;\r\n    }\r\n    /**\r\n     * Sets the layer id use to find what meshes are not impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public set excludeWithLayerMask(value: number) {\r\n        this._excludeWithLayerMask = value;\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    @serialize(\"includeOnlyWithLayerMask\")\r\n    private _includeOnlyWithLayerMask = 0;\r\n    /**\r\n     * Gets the layer id use to find what meshes are impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public get includeOnlyWithLayerMask(): number {\r\n        return this._includeOnlyWithLayerMask;\r\n    }\r\n    /**\r\n     * Sets the layer id use to find what meshes are impacted by the light.\r\n     * Inactive if 0\r\n     */\r\n    public set includeOnlyWithLayerMask(value: number) {\r\n        this._includeOnlyWithLayerMask = value;\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    @serialize(\"lightmapMode\")\r\n    private _lightmapMode = 0;\r\n    /**\r\n     * Gets the lightmap mode of this light (should be one of the constants defined by Light.LIGHTMAP_x)\r\n     */\r\n    public get lightmapMode(): number {\r\n        return this._lightmapMode;\r\n    }\r\n    /**\r\n     * Sets the lightmap mode of this light (should be one of the constants defined by Light.LIGHTMAP_x)\r\n     */\r\n    public set lightmapMode(value: number) {\r\n        if (this._lightmapMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._lightmapMode = value;\r\n        this._markMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * Returns the view matrix.\r\n     * @param _faceIndex The index of the face for which we want to extract the view matrix. Only used for point light types.\r\n     * @returns The view matrix. Can be null, if a view matrix cannot be defined for the type of light considered (as for a hemispherical light, for example).\r\n     */\r\n    public getViewMatrix(_faceIndex?: number): Nullable<Matrix> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the projection matrix.\r\n     * Note that viewMatrix and renderList are optional and are only used by lights that calculate the projection matrix from a list of meshes (e.g. directional lights with automatic extents calculation).\r\n     * @param _viewMatrix The view transform matrix of the light (optional).\r\n     * @param _renderList The list of meshes to take into account when calculating the projection matrix (optional).\r\n     * @returns The projection matrix. Can be null, if a projection matrix cannot be defined for the type of light considered (as for a hemispherical light, for example).\r\n     */\r\n    public getProjectionMatrix(_viewMatrix?: Matrix, _renderList?: Array<AbstractMesh>): Nullable<Matrix> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Shadow generators associated to the light.\r\n     * @internal Internal use only.\r\n     */\r\n    public _shadowGenerators: Nullable<Map<Nullable<Camera>, IShadowGenerator>> = null;\r\n\r\n    /**\r\n     * @internal Internal use only.\r\n     */\r\n    public _excludedMeshesIds = new Array<string>();\r\n\r\n    /**\r\n     * @internal Internal use only.\r\n     */\r\n    public _includedOnlyMeshesIds = new Array<string>();\r\n\r\n    /**\r\n     * The current light uniform buffer.\r\n     * @internal Internal use only.\r\n     */\r\n    public _uniformBuffer: UniformBuffer;\r\n\r\n    /** @internal */\r\n    public _renderId: number;\r\n\r\n    private _lastUseSpecular: boolean;\r\n\r\n    /**\r\n     * Creates a Light object in the scene.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param scene The scene the light belongs too\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene, false);\r\n        this.getScene().addLight(this);\r\n        this._uniformBuffer = new UniformBuffer(this.getScene().getEngine(), undefined, undefined, name);\r\n        this._buildUniformLayout();\r\n\r\n        this.includedOnlyMeshes = [] as AbstractMesh[];\r\n        this.excludedMeshes = [] as AbstractMesh[];\r\n\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    protected abstract _buildUniformLayout(): void;\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the Light information.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The light\r\n     */\r\n    public abstract transferToEffect(effect: Effect, lightIndex: string): Light;\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the Light textures.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The light\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public transferTexturesToEffect(effect: Effect, lightIndex: string): Light {\r\n        // Do nothing by default.\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Binds the lights information from the scene to the effect for the given mesh.\r\n     * @param lightIndex Light index\r\n     * @param scene The scene where the light belongs to\r\n     * @param effect The effect we are binding the data to\r\n     * @param useSpecular Defines if specular is supported\r\n     * @param receiveShadows Defines if the effect (mesh) we bind the light for receives shadows\r\n     */\r\n    public _bindLight(lightIndex: number, scene: Scene, effect: Effect, useSpecular: boolean, receiveShadows = true): void {\r\n        const iAsString = lightIndex.toString();\r\n        let needUpdate = false;\r\n\r\n        this._uniformBuffer.bindToEffect(effect, \"Light\" + iAsString);\r\n\r\n        if (this._renderId !== scene.getRenderId() || this._lastUseSpecular !== useSpecular || !this._uniformBuffer.useUbo) {\r\n            this._renderId = scene.getRenderId();\r\n            this._lastUseSpecular = useSpecular;\r\n\r\n            const scaledIntensity = this.getScaledIntensity();\r\n\r\n            this.transferToEffect(effect, iAsString);\r\n\r\n            this.diffuse.scaleToRef(scaledIntensity, TmpColors.Color3[0]);\r\n            this._uniformBuffer.updateColor4(\"vLightDiffuse\", TmpColors.Color3[0], this.range, iAsString);\r\n            if (useSpecular) {\r\n                this.specular.scaleToRef(scaledIntensity, TmpColors.Color3[1]);\r\n                this._uniformBuffer.updateColor4(\"vLightSpecular\", TmpColors.Color3[1], this.radius, iAsString);\r\n            }\r\n            needUpdate = true;\r\n        }\r\n\r\n        // Textures might still need to be rebound.\r\n        this.transferTexturesToEffect(effect, iAsString);\r\n\r\n        // Shadows\r\n        if (scene.shadowsEnabled && this.shadowEnabled && receiveShadows) {\r\n            const shadowGenerator = this.getShadowGenerator(scene.activeCamera) ?? this.getShadowGenerator();\r\n            if (shadowGenerator) {\r\n                shadowGenerator.bindShadowLight(iAsString, effect);\r\n                needUpdate = true;\r\n            }\r\n        }\r\n\r\n        if (needUpdate) {\r\n            this._uniformBuffer.update();\r\n        } else {\r\n            this._uniformBuffer.bindUniformBuffer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the Light information.\r\n     * @param effect The effect to update\r\n     * @param lightDataUniformName The uniform used to store light data (position or direction)\r\n     * @returns The light\r\n     */\r\n    public abstract transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string): Light;\r\n\r\n    /**\r\n     * Returns the string \"Light\".\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"Light\";\r\n    }\r\n\r\n    /** @internal */\r\n    public readonly _isLight = true;\r\n\r\n    /**\r\n     * Converts the light information to a readable string for debug purpose.\r\n     * @param fullDetails Supports for multiple levels of logging within scene loading\r\n     * @returns the human readable light info\r\n     */\r\n    public override toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name;\r\n        ret += \", type: \" + [\"Point\", \"Directional\", \"Spot\", \"Hemispheric\"][this.getTypeID()];\r\n        if (this.animations) {\r\n            for (let i = 0; i < this.animations.length; i++) {\r\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /** @internal */\r\n    protected override _syncParentEnabledState() {\r\n        super._syncParentEnabledState();\r\n        if (!this.isDisposed()) {\r\n            this._resyncMeshes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the enabled state of this node.\r\n     * @param value - the new enabled state\r\n     */\r\n    public override setEnabled(value: boolean): void {\r\n        super.setEnabled(value);\r\n\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    /**\r\n     * Returns the Light associated shadow generator if any.\r\n     * @param camera Camera for which the shadow generator should be retrieved (default: null). If null, retrieves the default shadow generator\r\n     * @returns the associated shadow generator.\r\n     */\r\n    public getShadowGenerator(camera: Nullable<Camera> = null): Nullable<IShadowGenerator> {\r\n        if (this._shadowGenerators === null) {\r\n            return null;\r\n        }\r\n\r\n        return this._shadowGenerators.get(camera) ?? null;\r\n    }\r\n\r\n    /**\r\n     * Returns all the shadow generators associated to this light\r\n     * @returns\r\n     */\r\n    public getShadowGenerators(): Nullable<Map<Nullable<Camera>, IShadowGenerator>> {\r\n        return this._shadowGenerators;\r\n    }\r\n\r\n    /**\r\n     * Returns a Vector3, the absolute light position in the World.\r\n     * @returns the world space position of the light\r\n     */\r\n    public getAbsolutePosition(): Vector3 {\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Specifies if the light will affect the passed mesh.\r\n     * @param mesh The mesh to test against the light\r\n     * @returns true the mesh is affected otherwise, false.\r\n     */\r\n    public canAffectMesh(mesh: AbstractMesh): boolean {\r\n        if (!mesh) {\r\n            return true;\r\n        }\r\n\r\n        if (this.includedOnlyMeshes && this.includedOnlyMeshes.length > 0 && this.includedOnlyMeshes.indexOf(mesh) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (this.excludedMeshes && this.excludedMeshes.length > 0 && this.excludedMeshes.indexOf(mesh) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        if (this.includeOnlyWithLayerMask !== 0 && (this.includeOnlyWithLayerMask & mesh.layerMask) === 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this.excludeWithLayerMask !== 0 && this.excludeWithLayerMask & mesh.layerMask) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        if (this._shadowGenerators) {\r\n            const iterator = this._shadowGenerators.values();\r\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                const shadowGenerator = key.value;\r\n                shadowGenerator.dispose();\r\n            }\r\n            this._shadowGenerators = null;\r\n        }\r\n\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.lights.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.lights.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        // Remove from meshes\r\n        for (const mesh of this.getScene().meshes) {\r\n            mesh._removeLightSource(this, true);\r\n        }\r\n\r\n        this._uniformBuffer.dispose();\r\n\r\n        // Remove from scene\r\n        this.getScene().removeLight(this);\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * Returns the light type ID (integer).\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the intensity scaled by the Photometric Scale according to the light type and intensity mode.\r\n     * @returns the scaled intensity in intensity mode unit\r\n     */\r\n    public getScaledIntensity() {\r\n        return this._photometricScale * this.intensity;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Light object, named \"name\", from the current one.\r\n     * @param name The name of the cloned light\r\n     * @param newParent The parent of this light, if it has one\r\n     * @returns the new created light\r\n     */\r\n    public override clone(name: string, newParent: Nullable<Node> = null): Nullable<Light> {\r\n        const constructor = Light.GetConstructorFromName(this.getTypeID(), name, this.getScene());\r\n\r\n        if (!constructor) {\r\n            return null;\r\n        }\r\n        const clonedLight = SerializationHelper.Clone(constructor, this);\r\n        if (name) {\r\n            clonedLight.name = name;\r\n        }\r\n        if (newParent) {\r\n            clonedLight.parent = newParent;\r\n        }\r\n        clonedLight.setEnabled(this.isEnabled());\r\n\r\n        this.onClonedObservable.notifyObservers(clonedLight);\r\n\r\n        return clonedLight;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current light into a Serialization object.\r\n     * @returns the serialized object.\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        // Type\r\n        serializationObject.type = this.getTypeID();\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        // Inclusion / exclusions\r\n        if (this.excludedMeshes.length > 0) {\r\n            serializationObject.excludedMeshesIds = [];\r\n            this.excludedMeshes.forEach((mesh: AbstractMesh) => {\r\n                serializationObject.excludedMeshesIds.push(mesh.id);\r\n            });\r\n        }\r\n\r\n        if (this.includedOnlyMeshes.length > 0) {\r\n            serializationObject.includedOnlyMeshesIds = [];\r\n            this.includedOnlyMeshes.forEach((mesh: AbstractMesh) => {\r\n                serializationObject.includedOnlyMeshesIds.push(mesh.id);\r\n            });\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        serializationObject.isEnabled = this.isEnabled();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a new typed light from the passed type (integer) : point light = 0, directional light = 1, spot light = 2, hemispheric light = 3.\r\n     * This new light is named \"name\" and added to the passed scene.\r\n     * @param type Type according to the types available in Light.LIGHTTYPEID_x\r\n     * @param name The friendly name of the light\r\n     * @param scene The scene the new light will belong to\r\n     * @returns the constructor function\r\n     */\r\n    static GetConstructorFromName(type: number, name: string, scene: Scene): Nullable<() => Light> {\r\n        const constructorFunc = Node.Construct(\"Light_Type_\" + type, name, scene);\r\n\r\n        if (constructorFunc) {\r\n            return <() => Light>constructorFunc;\r\n        }\r\n\r\n        // Default to no light for none present once.\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses the passed \"parsedLight\" and returns a new instanced Light from this parsing.\r\n     * @param parsedLight The JSON representation of the light\r\n     * @param scene The scene to create the parsed light in\r\n     * @returns the created light after parsing\r\n     */\r\n    public static Parse(parsedLight: any, scene: Scene): Nullable<Light> {\r\n        const constructor = Light.GetConstructorFromName(parsedLight.type, parsedLight.name, scene);\r\n\r\n        if (!constructor) {\r\n            return null;\r\n        }\r\n\r\n        const light = SerializationHelper.Parse(constructor, parsedLight, scene);\r\n\r\n        // Inclusion / exclusions\r\n        if (parsedLight.excludedMeshesIds) {\r\n            light._excludedMeshesIds = parsedLight.excludedMeshesIds;\r\n        }\r\n\r\n        if (parsedLight.includedOnlyMeshesIds) {\r\n            light._includedOnlyMeshesIds = parsedLight.includedOnlyMeshesIds;\r\n        }\r\n\r\n        // Parent\r\n        if (parsedLight.parentId !== undefined) {\r\n            light._waitingParentId = parsedLight.parentId;\r\n        }\r\n\r\n        if (parsedLight.parentInstanceIndex !== undefined) {\r\n            light._waitingParentInstanceIndex = parsedLight.parentInstanceIndex;\r\n        }\r\n\r\n        // Falloff\r\n        if (parsedLight.falloffType !== undefined) {\r\n            light.falloffType = parsedLight.falloffType;\r\n        }\r\n\r\n        // Lightmaps\r\n        if (parsedLight.lightmapMode !== undefined) {\r\n            light.lightmapMode = parsedLight.lightmapMode;\r\n        }\r\n\r\n        // Animations\r\n        if (parsedLight.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedLight.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedLight.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    light.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(light, parsedLight, scene);\r\n        }\r\n\r\n        if (parsedLight.autoAnimate) {\r\n            scene.beginAnimation(light, parsedLight.autoAnimateFrom, parsedLight.autoAnimateTo, parsedLight.autoAnimateLoop, parsedLight.autoAnimateSpeed || 1.0);\r\n        }\r\n\r\n        // Check if isEnabled is defined to be back compatible with prior serialized versions.\r\n        if (parsedLight.isEnabled !== undefined) {\r\n            light.setEnabled(parsedLight.isEnabled);\r\n        }\r\n\r\n        return light;\r\n    }\r\n\r\n    private _hookArrayForExcluded(array: AbstractMesh[]): void {\r\n        const oldPush = array.push;\r\n        array.push = (...items: AbstractMesh[]) => {\r\n            const result = oldPush.apply(array, items);\r\n\r\n            for (const item of items) {\r\n                item._resyncLightSource(this);\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        const oldSplice = array.splice;\r\n        array.splice = (index: number, deleteCount?: number) => {\r\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\r\n\r\n            for (const item of deleted) {\r\n                item._resyncLightSource(this);\r\n            }\r\n\r\n            return deleted;\r\n        };\r\n\r\n        for (const item of array) {\r\n            item._resyncLightSource(this);\r\n        }\r\n    }\r\n\r\n    private _hookArrayForIncludedOnly(array: AbstractMesh[]): void {\r\n        const oldPush = array.push;\r\n        array.push = (...items: AbstractMesh[]) => {\r\n            const result = oldPush.apply(array, items);\r\n\r\n            this._resyncMeshes();\r\n\r\n            return result;\r\n        };\r\n\r\n        const oldSplice = array.splice;\r\n        array.splice = (index: number, deleteCount?: number) => {\r\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\r\n\r\n            this._resyncMeshes();\r\n\r\n            return deleted;\r\n        };\r\n\r\n        this._resyncMeshes();\r\n    }\r\n\r\n    private _resyncMeshes() {\r\n        for (const mesh of this.getScene().meshes) {\r\n            mesh._resyncLightSource(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Forces the meshes to update their light related information in their rendering used effects\r\n     * @internal Internal Use Only\r\n     */\r\n    public _markMeshesAsLightDirty() {\r\n        for (const mesh of this.getScene().meshes) {\r\n            if (mesh.lightSources.indexOf(this) !== -1) {\r\n                mesh._markSubMeshesAsLightDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recomputes the cached photometric scale if needed.\r\n     */\r\n    private _computePhotometricScale(): void {\r\n        this._photometricScale = this._getPhotometricScale();\r\n        this.getScene().resetCachedMaterial();\r\n    }\r\n\r\n    /**\r\n     * @returns the Photometric Scale according to the light type and intensity mode.\r\n     */\r\n    private _getPhotometricScale() {\r\n        let photometricScale = 0.0;\r\n        const lightTypeID = this.getTypeID();\r\n\r\n        //get photometric mode\r\n        let photometricMode = this.intensityMode;\r\n        if (photometricMode === Light.INTENSITYMODE_AUTOMATIC) {\r\n            if (lightTypeID === Light.LIGHTTYPEID_DIRECTIONALLIGHT) {\r\n                photometricMode = Light.INTENSITYMODE_ILLUMINANCE;\r\n            } else {\r\n                photometricMode = Light.INTENSITYMODE_LUMINOUSINTENSITY;\r\n            }\r\n        }\r\n\r\n        //compute photometric scale\r\n        switch (lightTypeID) {\r\n            case Light.LIGHTTYPEID_POINTLIGHT:\r\n            case Light.LIGHTTYPEID_SPOTLIGHT:\r\n                switch (photometricMode) {\r\n                    case Light.INTENSITYMODE_LUMINOUSPOWER:\r\n                        photometricScale = 1.0 / (4.0 * Math.PI);\r\n                        break;\r\n                    case Light.INTENSITYMODE_LUMINOUSINTENSITY:\r\n                        photometricScale = 1.0;\r\n                        break;\r\n                    case Light.INTENSITYMODE_LUMINANCE:\r\n                        photometricScale = this.radius * this.radius;\r\n                        break;\r\n                }\r\n                break;\r\n\r\n            case Light.LIGHTTYPEID_DIRECTIONALLIGHT:\r\n                switch (photometricMode) {\r\n                    case Light.INTENSITYMODE_ILLUMINANCE:\r\n                        photometricScale = 1.0;\r\n                        break;\r\n                    case Light.INTENSITYMODE_LUMINANCE: {\r\n                        // When radius (and therefore solid angle) is non-zero a directional lights brightness can be specified via central (peak) luminance.\r\n                        // For a directional light the 'radius' defines the angular radius (in radians) rather than world-space radius (e.g. in metres).\r\n                        let apexAngleRadians = this.radius;\r\n                        // Impose a minimum light angular size to avoid the light becoming an infinitely small angular light source (i.e. a dirac delta function).\r\n                        apexAngleRadians = Math.max(apexAngleRadians, 0.001);\r\n                        const solidAngle = 2.0 * Math.PI * (1.0 - Math.cos(apexAngleRadians));\r\n                        photometricScale = solidAngle;\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case Light.LIGHTTYPEID_HEMISPHERICLIGHT:\r\n                // No fall off in hemispheric light.\r\n                photometricScale = 1.0;\r\n                break;\r\n        }\r\n        return photometricScale;\r\n    }\r\n\r\n    /**\r\n     * Reorder the light in the scene according to their defined priority.\r\n     * @internal Internal Use Only\r\n     */\r\n    public _reorderLightsInScene(): void {\r\n        const scene = this.getScene();\r\n        if (this._renderPriority != 0) {\r\n            scene.requireLightSorting = true;\r\n        }\r\n        this.getScene().sortLightsByPriority();\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public abstract prepareLightSpecificDefines(defines: any, lightIndex: number): void;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _isReady() {\r\n        return true;\r\n    }\r\n}\r\n", "import { serializeAsColor3, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Node } from \"../node\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Light } from \"./light\";\r\nimport type { IShadowGenerator } from \"./Shadows/shadowGenerator\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_3\", (name, scene) => {\r\n    return () => new HemisphericLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * The HemisphericLight simulates the ambient environment light,\r\n * so the passed direction is the light reflection direction, not the incoming direction.\r\n */\r\nexport class HemisphericLight extends Light {\r\n    /**\r\n     * The groundColor is the light in the opposite direction to the one specified during creation.\r\n     * You can think of the diffuse and specular light as coming from the centre of the object in the given direction and the groundColor light in the opposite direction.\r\n     */\r\n    @serializeAsColor3()\r\n    public groundColor = new Color3(0.0, 0.0, 0.0);\r\n\r\n    /**\r\n     * The light reflection direction, not the incoming direction.\r\n     */\r\n    @serializeAsVector3()\r\n    public direction: Vector3;\r\n\r\n    /**\r\n     * Creates a HemisphericLight object in the scene according to the passed direction (Vector3).\r\n     * The HemisphericLight simulates the ambient environment light, so the passed direction is the light reflection direction, not the incoming direction.\r\n     * The HemisphericLight can't cast shadows.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param direction The direction of the light reflection\r\n     * @param scene The scene the light belongs to\r\n     */\r\n    constructor(name: string, direction: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.direction = direction || Vector3.Up();\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightGround\", 3);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"HemisphericLight\".\r\n     * @returns The class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"HemisphericLight\";\r\n    }\r\n\r\n    /**\r\n     * Sets the HemisphericLight direction towards the passed target (Vector3).\r\n     * Returns the updated direction.\r\n     * @param target The target the direction should point to\r\n     * @returns The computed direction\r\n     */\r\n    public setDirectionToTarget(target: Vector3): Vector3 {\r\n        this.direction = Vector3.Normalize(target.subtract(Vector3.Zero()));\r\n        return this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the shadow generator associated to the light.\r\n     * @returns Always null for hemispheric lights because it does not support shadows.\r\n     */\r\n    public override getShadowGenerator(): Nullable<IShadowGenerator> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect object with the HemisphericLight normalized direction and color and the passed name (string).\r\n     * @param _effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The hemispheric light\r\n     */\r\n    public transferToEffect(_effect: Effect, lightIndex: string): HemisphericLight {\r\n        const normalizeDirection = Vector3.Normalize(this.direction);\r\n        this._uniformBuffer.updateFloat4(\"vLightData\", normalizeDirection.x, normalizeDirection.y, normalizeDirection.z, 0.0, lightIndex);\r\n        this._uniformBuffer.updateColor3(\"vLightGround\", this.groundColor.scale(this.intensity), lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        const normalizeDirection = Vector3.Normalize(this.direction);\r\n        effect.setFloat3(lightDataUniformName, normalizeDirection.x, normalizeDirection.y, normalizeDirection.z);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @returns the world matrix\r\n     */\r\n    public override computeWorldMatrix(): Matrix {\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 3.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public override getTypeID(): number {\r\n        return Light.LIGHTTYPEID_HEMISPHERICLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"HEMILIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.HemisphericLight\", HemisphericLight);\r\n", "import type { IDisposable } from \"../scene\";\r\nimport { Scene } from \"../scene\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { PointerInfoPre } from \"../Events/pointerEvents\";\r\nimport { PointerInfo, PointerEventTypes } from \"../Events/pointerEvents\";\r\nimport { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { HemisphericLight } from \"../Lights/hemisphericLight\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport type { IPointerEvent } from \"../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Renders a layer on top of an existing scene\r\n */\r\nexport class UtilityLayerRenderer implements IDisposable {\r\n    private _pointerCaptures: { [pointerId: number]: boolean } = {};\r\n    private _lastPointerEvents: { [pointerId: number]: boolean } = {};\r\n    /** @internal */\r\n    public static _DefaultUtilityLayer: Nullable<UtilityLayerRenderer> = null;\r\n    /** @internal */\r\n    public static _DefaultKeepDepthUtilityLayer: Nullable<UtilityLayerRenderer> = null;\r\n    private _sharedGizmoLight: Nullable<HemisphericLight> = null;\r\n\r\n    private _renderCamera: Nullable<Camera> = null;\r\n\r\n    /**\r\n     * Gets the camera that is used to render the utility layer (when not set, this will be the last active camera)\r\n     * @param getRigParentIfPossible if the current active camera is a rig camera, should its parent camera be returned\r\n     * @returns the camera that is used when rendering the utility layer\r\n     */\r\n    public getRenderCamera(getRigParentIfPossible?: boolean) {\r\n        if (this._renderCamera) {\r\n            return this._renderCamera;\r\n        } else {\r\n            let activeCam: Camera;\r\n            if (this.originalScene.activeCameras && this.originalScene.activeCameras.length > 1) {\r\n                activeCam = this.originalScene.activeCameras[this.originalScene.activeCameras.length - 1];\r\n            } else {\r\n                activeCam = <Camera>this.originalScene.activeCamera!;\r\n            }\r\n\r\n            if (getRigParentIfPossible && activeCam && activeCam.isRigCamera) {\r\n                return activeCam.rigParent!;\r\n            }\r\n            return activeCam;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the camera that should be used when rendering the utility layer (If set to null the last active camera will be used)\r\n     * @param cam the camera that should be used when rendering the utility layer\r\n     */\r\n    public setRenderCamera(cam: Nullable<Camera>) {\r\n        this._renderCamera = cam;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Light which used by gizmos to get light shading\r\n     */\r\n    public _getSharedGizmoLight(): HemisphericLight {\r\n        if (!this._sharedGizmoLight) {\r\n            this._sharedGizmoLight = new HemisphericLight(\"shared gizmo light\", new Vector3(0, 1, 0), this.utilityLayerScene);\r\n            this._sharedGizmoLight.intensity = 2;\r\n            this._sharedGizmoLight.groundColor = Color3.Gray();\r\n        }\r\n        return this._sharedGizmoLight;\r\n    }\r\n\r\n    /**\r\n     * If the picking should be done on the utility layer prior to the actual scene (Default: true)\r\n     */\r\n    public pickUtilitySceneFirst = true;\r\n    /**\r\n     * A shared utility layer that can be used to overlay objects into a scene (Depth map of the previous scene is cleared before drawing on top of it)\r\n     */\r\n    public static get DefaultUtilityLayer(): UtilityLayerRenderer {\r\n        if (UtilityLayerRenderer._DefaultUtilityLayer == null) {\r\n            return UtilityLayerRenderer._CreateDefaultUtilityLayerFromScene(EngineStore.LastCreatedScene!);\r\n        }\r\n\r\n        return UtilityLayerRenderer._DefaultUtilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates an utility layer, and set it as a default utility layer\r\n     * @param scene associated scene\r\n     * @internal\r\n     */\r\n    public static _CreateDefaultUtilityLayerFromScene(scene: Scene): UtilityLayerRenderer {\r\n        UtilityLayerRenderer._DefaultUtilityLayer = new UtilityLayerRenderer(scene);\r\n        UtilityLayerRenderer._DefaultUtilityLayer.originalScene.onDisposeObservable.addOnce(() => {\r\n            UtilityLayerRenderer._DefaultUtilityLayer = null;\r\n        });\r\n\r\n        return UtilityLayerRenderer._DefaultUtilityLayer;\r\n    }\r\n    /**\r\n     * A shared utility layer that can be used to embed objects into a scene (Depth map of the previous scene is not cleared before drawing on top of it)\r\n     */\r\n    public static get DefaultKeepDepthUtilityLayer(): UtilityLayerRenderer {\r\n        if (UtilityLayerRenderer._DefaultKeepDepthUtilityLayer == null) {\r\n            UtilityLayerRenderer._DefaultKeepDepthUtilityLayer = new UtilityLayerRenderer(EngineStore.LastCreatedScene!);\r\n            UtilityLayerRenderer._DefaultKeepDepthUtilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n            UtilityLayerRenderer._DefaultKeepDepthUtilityLayer.originalScene.onDisposeObservable.addOnce(() => {\r\n                UtilityLayerRenderer._DefaultKeepDepthUtilityLayer = null;\r\n            });\r\n        }\r\n        return UtilityLayerRenderer._DefaultKeepDepthUtilityLayer;\r\n    }\r\n\r\n    /**\r\n     * The scene that is rendered on top of the original scene\r\n     */\r\n    public utilityLayerScene: Scene;\r\n\r\n    /**\r\n     *  If the utility layer should automatically be rendered on top of existing scene\r\n     */\r\n    public shouldRender: boolean = true;\r\n    /**\r\n     * If set to true, only pointer down onPointerObservable events will be blocked when picking is occluded by original scene\r\n     */\r\n    public onlyCheckPointerDownEvents = true;\r\n\r\n    /**\r\n     * If set to false, only pointerUp, pointerDown and pointerMove will be sent to the utilityLayerScene (false by default)\r\n     */\r\n    public processAllEvents = false;\r\n\r\n    /**\r\n     * Set to false to disable picking\r\n     */\r\n    public pickingEnabled = true;\r\n\r\n    /**\r\n     * Observable raised when the pointer moves from the utility layer scene to the main scene\r\n     */\r\n    public onPointerOutObservable = new Observable<number>();\r\n\r\n    /** Gets or sets a predicate that will be used to indicate utility meshes present in the main scene */\r\n    public mainSceneTrackerPredicate: (mesh: Nullable<AbstractMesh>) => boolean;\r\n\r\n    private _afterRenderObserver: Nullable<Observer<Camera>>;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _originalPointerObserver: Nullable<Observer<PointerInfoPre>>;\r\n    /**\r\n     * Instantiates a UtilityLayerRenderer\r\n     * @param originalScene the original scene that will be rendered on top of\r\n     * @param handleEvents boolean indicating if the utility layer should handle events\r\n     */\r\n    constructor(\r\n        /** the original scene that will be rendered on top of */\r\n        public originalScene: Scene,\r\n        handleEvents: boolean = true\r\n    ) {\r\n        // Create scene which will be rendered in the foreground and remove it from being referenced by engine to avoid interfering with existing app\r\n        this.utilityLayerScene = new Scene(originalScene.getEngine(), { virtual: true });\r\n        this.utilityLayerScene.useRightHandedSystem = originalScene.useRightHandedSystem;\r\n        this.utilityLayerScene._allowPostProcessClearColor = false;\r\n\r\n        // Deactivate post processes\r\n        this.utilityLayerScene.postProcessesEnabled = false;\r\n\r\n        // Detach controls on utility scene, events will be fired by logic below to handle picking priority\r\n        this.utilityLayerScene.detachControl();\r\n\r\n        if (handleEvents) {\r\n            this._originalPointerObserver = originalScene.onPrePointerObservable.add((prePointerInfo) => {\r\n                if (!this.utilityLayerScene.activeCamera) {\r\n                    return;\r\n                }\r\n                if (!this.pickingEnabled) {\r\n                    return;\r\n                }\r\n\r\n                if (!this.processAllEvents) {\r\n                    if (\r\n                        prePointerInfo.type !== PointerEventTypes.POINTERMOVE &&\r\n                        prePointerInfo.type !== PointerEventTypes.POINTERUP &&\r\n                        prePointerInfo.type !== PointerEventTypes.POINTERDOWN &&\r\n                        prePointerInfo.type !== PointerEventTypes.POINTERDOUBLETAP\r\n                    ) {\r\n                        return;\r\n                    }\r\n                }\r\n                this.utilityLayerScene.pointerX = originalScene.pointerX;\r\n                this.utilityLayerScene.pointerY = originalScene.pointerY;\r\n                const pointerEvent = <IPointerEvent>prePointerInfo.event;\r\n                if (originalScene!.isPointerCaptured(pointerEvent.pointerId)) {\r\n                    this._pointerCaptures[pointerEvent.pointerId] = false;\r\n                    return;\r\n                }\r\n\r\n                const getNearPickDataForScene = (scene: Scene) => {\r\n                    let scenePick = null;\r\n\r\n                    if (prePointerInfo.nearInteractionPickingInfo) {\r\n                        if (prePointerInfo.nearInteractionPickingInfo.pickedMesh!.getScene() == scene) {\r\n                            scenePick = prePointerInfo.nearInteractionPickingInfo;\r\n                        } else {\r\n                            scenePick = new PickingInfo();\r\n                        }\r\n                    } else if (scene !== this.utilityLayerScene && prePointerInfo.originalPickingInfo) {\r\n                        scenePick = prePointerInfo.originalPickingInfo;\r\n                    } else {\r\n                        let previousActiveCamera: Nullable<Camera> = null;\r\n                        // If a camera is set for rendering with this layer\r\n                        // it will also be used for the ray computation\r\n                        // To preserve back compat and because scene.pick always use activeCamera\r\n                        // it's substituted temporarily and a new scenePick is forced.\r\n                        // otherwise, the ray with previously active camera is always used.\r\n                        // It's set back to previous activeCamera after operation.\r\n                        if (this._renderCamera) {\r\n                            previousActiveCamera = scene._activeCamera;\r\n                            scene._activeCamera = this._renderCamera;\r\n                            prePointerInfo.ray = null;\r\n                        }\r\n                        scenePick = prePointerInfo.ray ? scene.pickWithRay(prePointerInfo.ray) : scene.pick(originalScene.pointerX, originalScene.pointerY);\r\n                        if (previousActiveCamera) {\r\n                            scene._activeCamera = previousActiveCamera;\r\n                        }\r\n                    }\r\n\r\n                    return scenePick;\r\n                };\r\n\r\n                const utilityScenePick = getNearPickDataForScene(this.utilityLayerScene);\r\n\r\n                if (!prePointerInfo.ray && utilityScenePick) {\r\n                    prePointerInfo.ray = utilityScenePick.ray;\r\n                }\r\n\r\n                // always fire the prepointer observable\r\n                this.utilityLayerScene.onPrePointerObservable.notifyObservers(prePointerInfo);\r\n\r\n                // allow every non pointer down event to flow to the utility layer\r\n                if (this.onlyCheckPointerDownEvents && prePointerInfo.type != PointerEventTypes.POINTERDOWN) {\r\n                    if (!prePointerInfo.skipOnPointerObservable) {\r\n                        this.utilityLayerScene.onPointerObservable.notifyObservers(\r\n                            new PointerInfo(prePointerInfo.type, prePointerInfo.event, utilityScenePick),\r\n                            prePointerInfo.type\r\n                        );\r\n                    }\r\n                    if (prePointerInfo.type === PointerEventTypes.POINTERUP && this._pointerCaptures[pointerEvent.pointerId]) {\r\n                        this._pointerCaptures[pointerEvent.pointerId] = false;\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                if (this.utilityLayerScene.autoClearDepthAndStencil || this.pickUtilitySceneFirst) {\r\n                    // If this layer is an overlay, check if this layer was hit and if so, skip pointer events for the main scene\r\n                    if (utilityScenePick && utilityScenePick.hit) {\r\n                        if (!prePointerInfo.skipOnPointerObservable) {\r\n                            this.utilityLayerScene.onPointerObservable.notifyObservers(\r\n                                new PointerInfo(prePointerInfo.type, prePointerInfo.event, utilityScenePick),\r\n                                prePointerInfo.type\r\n                            );\r\n                        }\r\n                        prePointerInfo.skipOnPointerObservable = true;\r\n                    }\r\n                } else {\r\n                    const originalScenePick = getNearPickDataForScene(originalScene);\r\n                    const pointerEvent = <IPointerEvent>prePointerInfo.event;\r\n\r\n                    // If the layer can be occluded by the original scene, only fire pointer events to the first layer that hit they ray\r\n                    if (originalScenePick && utilityScenePick) {\r\n                        // No pick in utility scene\r\n                        if (utilityScenePick.distance === 0 && originalScenePick.pickedMesh) {\r\n                            if (this.mainSceneTrackerPredicate && this.mainSceneTrackerPredicate(originalScenePick.pickedMesh)) {\r\n                                // We touched an utility mesh present in the main scene\r\n                                this._notifyObservers(prePointerInfo, originalScenePick, pointerEvent);\r\n                                prePointerInfo.skipOnPointerObservable = true;\r\n                            } else if (prePointerInfo.type === PointerEventTypes.POINTERDOWN) {\r\n                                this._pointerCaptures[pointerEvent.pointerId] = true;\r\n                            } else if (prePointerInfo.type === PointerEventTypes.POINTERMOVE || prePointerInfo.type === PointerEventTypes.POINTERUP) {\r\n                                if (this._lastPointerEvents[pointerEvent.pointerId]) {\r\n                                    // We need to send a last pointerup to the utilityLayerScene to make sure animations can complete\r\n                                    this.onPointerOutObservable.notifyObservers(pointerEvent.pointerId);\r\n                                    delete this._lastPointerEvents[pointerEvent.pointerId];\r\n                                }\r\n                                this._notifyObservers(prePointerInfo, originalScenePick, pointerEvent);\r\n                            }\r\n                        } else if (!this._pointerCaptures[pointerEvent.pointerId] && (utilityScenePick.distance < originalScenePick.distance || originalScenePick.distance === 0)) {\r\n                            // We pick something in utility scene or the pick in utility is closer than the one in main scene\r\n                            this._notifyObservers(prePointerInfo, utilityScenePick, pointerEvent);\r\n                            // If a previous utility layer set this, do not unset this\r\n                            if (!prePointerInfo.skipOnPointerObservable) {\r\n                                prePointerInfo.skipOnPointerObservable = utilityScenePick.distance > 0;\r\n                            }\r\n                        } else if (!this._pointerCaptures[pointerEvent.pointerId] && utilityScenePick.distance >= originalScenePick.distance) {\r\n                            // We have a pick in both scenes but main is closer than utility\r\n\r\n                            // We touched an utility mesh present in the main scene\r\n                            if (this.mainSceneTrackerPredicate && this.mainSceneTrackerPredicate(originalScenePick.pickedMesh)) {\r\n                                this._notifyObservers(prePointerInfo, originalScenePick, pointerEvent);\r\n                                prePointerInfo.skipOnPointerObservable = true;\r\n                            } else {\r\n                                if (prePointerInfo.type === PointerEventTypes.POINTERMOVE || prePointerInfo.type === PointerEventTypes.POINTERUP) {\r\n                                    if (this._lastPointerEvents[pointerEvent.pointerId]) {\r\n                                        // We need to send a last pointerup to the utilityLayerScene to make sure animations can complete\r\n                                        this.onPointerOutObservable.notifyObservers(pointerEvent.pointerId);\r\n                                        delete this._lastPointerEvents[pointerEvent.pointerId];\r\n                                    }\r\n                                }\r\n                                this._notifyObservers(prePointerInfo, utilityScenePick, pointerEvent);\r\n                            }\r\n                        }\r\n\r\n                        if (prePointerInfo.type === PointerEventTypes.POINTERUP && this._pointerCaptures[pointerEvent.pointerId]) {\r\n                            this._pointerCaptures[pointerEvent.pointerId] = false;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            // As a newly added utility layer will be rendered over the screen last, it's pointer events should be processed first\r\n            if (this._originalPointerObserver) {\r\n                originalScene.onPrePointerObservable.makeObserverTopPriority(this._originalPointerObserver);\r\n            }\r\n        }\r\n\r\n        // Render directly on top of existing scene without clearing\r\n        this.utilityLayerScene.autoClear = false;\r\n\r\n        this._afterRenderObserver = this.originalScene.onAfterRenderCameraObservable.add((camera) => {\r\n            // Only render when the render camera finishes rendering\r\n            if (this.shouldRender && camera == this.getRenderCamera()) {\r\n                this.render();\r\n            }\r\n        });\r\n\r\n        this._sceneDisposeObserver = this.originalScene.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        this._updateCamera();\r\n    }\r\n\r\n    private _notifyObservers(prePointerInfo: PointerInfoPre, pickInfo: PickingInfo, pointerEvent: IPointerEvent) {\r\n        if (!prePointerInfo.skipOnPointerObservable) {\r\n            this.utilityLayerScene.onPointerObservable.notifyObservers(new PointerInfo(prePointerInfo.type, prePointerInfo.event, pickInfo), prePointerInfo.type);\r\n            this._lastPointerEvents[pointerEvent.pointerId] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the utility layers scene on top of the original scene\r\n     */\r\n    public render() {\r\n        this._updateCamera();\r\n        if (this.utilityLayerScene.activeCamera) {\r\n            // Set the camera's scene to utility layers scene\r\n            const oldScene = this.utilityLayerScene.activeCamera.getScene();\r\n            const camera = this.utilityLayerScene.activeCamera;\r\n            camera._scene = this.utilityLayerScene;\r\n            if (camera.leftCamera) {\r\n                camera.leftCamera._scene = this.utilityLayerScene;\r\n            }\r\n            if (camera.rightCamera) {\r\n                camera.rightCamera._scene = this.utilityLayerScene;\r\n            }\r\n\r\n            this.utilityLayerScene.render(false);\r\n\r\n            // Reset camera's scene back to original\r\n            camera._scene = oldScene;\r\n            if (camera.leftCamera) {\r\n                camera.leftCamera._scene = oldScene;\r\n            }\r\n            if (camera.rightCamera) {\r\n                camera.rightCamera._scene = oldScene;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the renderer\r\n     */\r\n    public dispose() {\r\n        this.onPointerOutObservable.clear();\r\n\r\n        if (this._afterRenderObserver) {\r\n            this.originalScene.onAfterCameraRenderObservable.remove(this._afterRenderObserver);\r\n        }\r\n        if (this._sceneDisposeObserver) {\r\n            this.originalScene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n        }\r\n        if (this._originalPointerObserver) {\r\n            this.originalScene.onPrePointerObservable.remove(this._originalPointerObserver);\r\n        }\r\n        this.utilityLayerScene.dispose();\r\n    }\r\n\r\n    private _updateCamera() {\r\n        this.utilityLayerScene.cameraToUseForPointers = this.getRenderCamera();\r\n        this.utilityLayerScene.activeCamera = this.getRenderCamera();\r\n    }\r\n}\r\n", "import type { Observer } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { Quaternion, Vector3, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport type { TargetCamera } from \"../Cameras/targetCamera\";\r\nimport type { Node } from \"../node\";\r\nimport type { Bone } from \"../Bones/bone\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../Events/pointerEvents\";\r\nimport type { LinesMesh } from \"../Meshes/linesMesh\";\r\nimport type { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { ShadowLight } from \"../Lights/shadowLight\";\r\nimport { Light } from \"../Lights/light\";\r\n\r\n/**\r\n * Cache built by each axis. Used for managing state between all elements of gizmo for enhanced UI\r\n */\r\nexport interface GizmoAxisCache {\r\n    /** Mesh used to render the Gizmo */\r\n    gizmoMeshes: Mesh[];\r\n    /** Mesh used to detect user interaction with Gizmo */\r\n    colliderMeshes: Mesh[];\r\n    /** Material used to indicate color of gizmo mesh */\r\n    material: StandardMaterial;\r\n    /** Material used to indicate hover state of the Gizmo */\r\n    hoverMaterial: StandardMaterial;\r\n    /** Material used to indicate disabled state of the Gizmo */\r\n    disableMaterial: StandardMaterial;\r\n    /** Used to indicate Active state of the Gizmo */\r\n    active: boolean;\r\n    /** DragBehavior */\r\n    dragBehavior: PointerDragBehavior;\r\n}\r\n\r\n/**\r\n * Anchor options where the Gizmo can be positioned in relation to its anchored node\r\n */\r\nexport const enum GizmoAnchorPoint {\r\n    /** The origin of the attached node */\r\n    Origin,\r\n    /** The pivot point of the attached node*/\r\n    Pivot,\r\n}\r\n\r\n/**\r\n * Coordinates mode: Local or World. Defines how axis is aligned: either on world axis or transform local axis\r\n */\r\nexport const enum GizmoCoordinatesMode {\r\n    World,\r\n    Local,\r\n}\r\n\r\n/**\r\n * Interface for basic gizmo\r\n */\r\nexport interface IGizmo extends IDisposable {\r\n    /** True when the mouse pointer is hovered a gizmo mesh */\r\n    readonly isHovered: boolean;\r\n    /** The root mesh of the gizmo */\r\n    _rootMesh: Mesh;\r\n    /** Ratio for the scale of the gizmo */\r\n    scaleRatio: number;\r\n    /**\r\n     * Mesh that the gizmo will be attached to. (eg. on a drag gizmo the mesh that will be dragged)\r\n     * * When set, interactions will be enabled\r\n     */\r\n    attachedMesh: Nullable<AbstractMesh>;\r\n    /**\r\n     * Node that the gizmo will be attached to. (eg. on a drag gizmo the mesh, bone or NodeTransform that will be dragged)\r\n     * * When set, interactions will be enabled\r\n     */\r\n    attachedNode: Nullable<Node>;\r\n    /**\r\n     * If set the gizmo's rotation will be updated to match the attached mesh each frame (Default: true)\r\n     */\r\n    updateGizmoRotationToMatchAttachedMesh: boolean;\r\n    /** The utility layer the gizmo will be added to */\r\n    gizmoLayer: UtilityLayerRenderer;\r\n    /**\r\n     * If set the gizmo's position will be updated to match the attached mesh each frame (Default: true)\r\n     */\r\n    updateGizmoPositionToMatchAttachedMesh: boolean;\r\n    /**\r\n     * Defines where the gizmo will be positioned if `updateGizmoPositionToMatchAttachedMesh` is enabled.\r\n     * (Default: GizmoAnchorPoint.Origin)\r\n     */\r\n    anchorPoint: GizmoAnchorPoint;\r\n\r\n    /**\r\n     * Set the coordinate mode to use. By default it's local.\r\n     */\r\n    coordinatesMode: GizmoCoordinatesMode;\r\n\r\n    /**\r\n     * When set, the gizmo will always appear the same size no matter where the camera is (default: true)\r\n     */\r\n    updateScale: boolean;\r\n    /**\r\n     * posture that the gizmo will be display\r\n     * When set null, default value will be used (Quaternion(0, 0, 0, 1))\r\n     */\r\n    customRotationQuaternion: Nullable<Quaternion>;\r\n    /**\r\n     * Disposes and replaces the current meshes in the gizmo with the specified mesh\r\n     * @param mesh The mesh to replace the default mesh of the gizmo\r\n     */\r\n    setCustomMesh(mesh: Mesh): void;\r\n\r\n    /**\r\n     * Additional transform applied to the gizmo.\r\n     * It's useful when the gizmo is attached to a bone: if the bone is part of a skeleton attached to a mesh, you should define the mesh as additionalTransformNode if you want the gizmo to be displayed at the bone's correct location.\r\n     * Otherwise, as the gizmo is relative to the skeleton root, the mesh transformation will not be taken into account.\r\n     */\r\n    additionalTransformNode?: TransformNode | undefined;\r\n}\r\n/**\r\n * Renders gizmos on top of an existing scene which provide controls for position, rotation, etc.\r\n */\r\nexport class Gizmo implements IGizmo {\r\n    /**\r\n     * The root mesh of the gizmo\r\n     */\r\n    public _rootMesh: Mesh;\r\n    protected _attachedMesh: Nullable<AbstractMesh> = null;\r\n    protected _attachedNode: Nullable<Node> = null;\r\n    protected _customRotationQuaternion: Nullable<Quaternion> = null;\r\n    protected _additionalTransformNode?: TransformNode;\r\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\r\n    protected _scaleRatio = 1;\r\n\r\n    /**\r\n     * boolean updated by pointermove when a gizmo mesh is hovered\r\n     */\r\n    protected _isHovered = false;\r\n\r\n    /**\r\n     * When enabled, any gizmo operation will perserve scaling sign. Default is off.\r\n     * Only valid for TransformNode derived classes (Mesh, AbstractMesh, ...)\r\n     */\r\n    public static PreserveScaling = false;\r\n\r\n    /**\r\n     * There are 2 ways to preserve scaling: using mesh scaling or absolute scaling. Depending of hierarchy, non uniform scaling and LH or RH coordinates. One is preferable than the other.\r\n     * If the scaling to be preserved is the local scaling, then set this value to false.\r\n     * Default is true which means scaling to be preserved is absolute one (with hierarchy applied)\r\n     */\r\n    public static UseAbsoluteScaling = true;\r\n\r\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\r\n    public set scaleRatio(value: number) {\r\n        this._scaleRatio = value;\r\n    }\r\n\r\n    public get scaleRatio() {\r\n        return this._scaleRatio;\r\n    }\r\n\r\n    /**\r\n     * True when the mouse pointer is hovered a gizmo mesh\r\n     */\r\n    public get isHovered() {\r\n        return this._isHovered;\r\n    }\r\n\r\n    /**\r\n     * If a custom mesh has been set (Default: false)\r\n     */\r\n    protected _customMeshSet = false;\r\n    /**\r\n     * Mesh that the gizmo will be attached to. (eg. on a drag gizmo the mesh that will be dragged)\r\n     * * When set, interactions will be enabled\r\n     */\r\n    public get attachedMesh() {\r\n        return this._attachedMesh;\r\n    }\r\n    public set attachedMesh(value) {\r\n        this._attachedMesh = value;\r\n        if (value) {\r\n            this._attachedNode = value;\r\n        }\r\n        this._rootMesh.setEnabled(value ? true : false);\r\n        this._attachedNodeChanged(value);\r\n    }\r\n    /**\r\n     * Node that the gizmo will be attached to. (eg. on a drag gizmo the mesh, bone or NodeTransform that will be dragged)\r\n     * * When set, interactions will be enabled\r\n     */\r\n    public get attachedNode() {\r\n        return this._attachedNode;\r\n    }\r\n    public set attachedNode(value) {\r\n        this._attachedNode = value;\r\n        this._attachedMesh = null;\r\n        this._rootMesh.setEnabled(value ? true : false);\r\n        this._attachedNodeChanged(value);\r\n    }\r\n\r\n    /**\r\n     * Disposes and replaces the current meshes in the gizmo with the specified mesh\r\n     * @param mesh The mesh to replace the default mesh of the gizmo\r\n     */\r\n    public setCustomMesh(mesh: Mesh) {\r\n        if (mesh.getScene() != this.gizmoLayer.utilityLayerScene) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"When setting a custom mesh on a gizmo, the custom meshes scene must be the same as the gizmos (eg. gizmo.gizmoLayer.utilityLayerScene)\";\r\n        }\r\n        this._rootMesh.getChildMeshes().forEach((c) => {\r\n            c.dispose();\r\n        });\r\n        mesh.parent = this._rootMesh;\r\n        this._customMeshSet = true;\r\n    }\r\n\r\n    /**\r\n     * Additional transform applied to the gizmo.\r\n     * It's useful when the gizmo is attached to a bone: if the bone is part of a skeleton attached to a mesh, you should define the mesh as additionalTransformNode if you want the gizmo to be displayed at the bone's correct location.\r\n     * Otherwise, as the gizmo is relative to the skeleton root, the mesh transformation will not be taken into account.\r\n     */\r\n    public get additionalTransformNode() {\r\n        return this._additionalTransformNode;\r\n    }\r\n\r\n    public set additionalTransformNode(value: TransformNode | undefined) {\r\n        this._additionalTransformNode = value;\r\n    }\r\n\r\n    protected _updateGizmoRotationToMatchAttachedMesh = true;\r\n    protected _updateGizmoPositionToMatchAttachedMesh = true;\r\n    protected _anchorPoint = GizmoAnchorPoint.Origin;\r\n    protected _updateScale = true;\r\n    protected _coordinatesMode = GizmoCoordinatesMode.Local;\r\n\r\n    /**\r\n     * If set the gizmo's rotation will be updated to match the attached mesh each frame (Default: true)\r\n     * NOTE: This is only possible for meshes with uniform scaling, as otherwise it's not possible to decompose the rotation\r\n     */\r\n    public set updateGizmoRotationToMatchAttachedMesh(value: boolean) {\r\n        this._updateGizmoRotationToMatchAttachedMesh = value;\r\n    }\r\n    public get updateGizmoRotationToMatchAttachedMesh() {\r\n        return this._updateGizmoRotationToMatchAttachedMesh;\r\n    }\r\n    /**\r\n     * If set the gizmo's position will be updated to match the attached mesh each frame (Default: true)\r\n     */\r\n    public set updateGizmoPositionToMatchAttachedMesh(value: boolean) {\r\n        this._updateGizmoPositionToMatchAttachedMesh = value;\r\n    }\r\n    public get updateGizmoPositionToMatchAttachedMesh() {\r\n        return this._updateGizmoPositionToMatchAttachedMesh;\r\n    }\r\n\r\n    /**\r\n     * Defines where the gizmo will be positioned if `updateGizmoPositionToMatchAttachedMesh` is enabled.\r\n     * (Default: GizmoAnchorPoint.Origin)\r\n     */\r\n    public set anchorPoint(value: GizmoAnchorPoint) {\r\n        this._anchorPoint = value;\r\n    }\r\n    public get anchorPoint() {\r\n        return this._anchorPoint;\r\n    }\r\n\r\n    /**\r\n     * Set the coordinate system to use. By default it's local.\r\n     * But it's possible for a user to tweak so its local for translation and world for rotation.\r\n     * In that case, setting the coordinate system will change `updateGizmoRotationToMatchAttachedMesh` and `updateGizmoPositionToMatchAttachedMesh`\r\n     */\r\n    public set coordinatesMode(coordinatesMode: GizmoCoordinatesMode) {\r\n        this._coordinatesMode = coordinatesMode;\r\n        const local = coordinatesMode == GizmoCoordinatesMode.Local;\r\n        this.updateGizmoRotationToMatchAttachedMesh = local;\r\n        this.updateGizmoPositionToMatchAttachedMesh = true;\r\n    }\r\n\r\n    public get coordinatesMode() {\r\n        return this._coordinatesMode;\r\n    }\r\n\r\n    /**\r\n     * When set, the gizmo will always appear the same size no matter where the camera is (default: true)\r\n     */\r\n\r\n    public set updateScale(value: boolean) {\r\n        this._updateScale = value;\r\n    }\r\n    public get updateScale() {\r\n        return this._updateScale;\r\n    }\r\n    protected _interactionsEnabled = true;\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _attachedNodeChanged(value: Nullable<Node>) {}\r\n\r\n    protected _beforeRenderObserver: Nullable<Observer<Scene>>;\r\n    private _rightHandtoLeftHandMatrix = Matrix.RotationY(Math.PI);\r\n\r\n    /**\r\n     * Creates a gizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     */\r\n    constructor(\r\n        /** [Object] The utility layer the gizmo will be added to */\r\n        public gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer\r\n    ) {\r\n        this._rootMesh = new Mesh(\"gizmoRootNode\", gizmoLayer.utilityLayerScene);\r\n        this._rootMesh.rotationQuaternion = Quaternion.Identity();\r\n\r\n        this._beforeRenderObserver = this.gizmoLayer.utilityLayerScene.onBeforeRenderObservable.add(() => {\r\n            this._update();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * posture that the gizmo will be display\r\n     * When set null, default value will be used (Quaternion(0, 0, 0, 1))\r\n     */\r\n    public get customRotationQuaternion(): Nullable<Quaternion> {\r\n        return this._customRotationQuaternion;\r\n    }\r\n\r\n    public set customRotationQuaternion(customRotationQuaternion: Nullable<Quaternion>) {\r\n        this._customRotationQuaternion = customRotationQuaternion;\r\n    }\r\n\r\n    /**\r\n     * Updates the gizmo to match the attached mesh's position/rotation\r\n     */\r\n    protected _update() {\r\n        if (this.attachedNode) {\r\n            let effectiveNode = this.attachedNode;\r\n            if (this.attachedMesh) {\r\n                effectiveNode = this.attachedMesh || this.attachedNode;\r\n            }\r\n\r\n            // Position\r\n            if (this.updateGizmoPositionToMatchAttachedMesh) {\r\n                if (this.anchorPoint == GizmoAnchorPoint.Pivot && (<TransformNode>effectiveNode).getAbsolutePivotPoint) {\r\n                    const position = (<TransformNode>effectiveNode).getAbsolutePivotPoint();\r\n                    this._rootMesh.position.copyFrom(position);\r\n                } else {\r\n                    const row = effectiveNode.getWorldMatrix().getRow(3);\r\n                    const position = row ? row.toVector3() : new Vector3(0, 0, 0);\r\n                    this._rootMesh.position.copyFrom(position);\r\n                }\r\n            }\r\n\r\n            // Rotation\r\n            if (this.updateGizmoRotationToMatchAttachedMesh) {\r\n                const supportedNode =\r\n                    (<Mesh>effectiveNode)._isMesh ||\r\n                    effectiveNode.getClassName() === \"AbstractMesh\" ||\r\n                    effectiveNode.getClassName() === \"TransformNode\" ||\r\n                    effectiveNode.getClassName() === \"InstancedMesh\";\r\n                const transformNode = supportedNode ? (effectiveNode as TransformNode) : undefined;\r\n                effectiveNode.getWorldMatrix().decompose(undefined, this._rootMesh.rotationQuaternion!, undefined, Gizmo.PreserveScaling ? transformNode : undefined);\r\n                this._rootMesh.rotationQuaternion!.normalize();\r\n            } else {\r\n                if (this._customRotationQuaternion) {\r\n                    this._rootMesh.rotationQuaternion!.copyFrom(this._customRotationQuaternion);\r\n                } else {\r\n                    this._rootMesh.rotationQuaternion!.set(0, 0, 0, 1);\r\n                }\r\n            }\r\n\r\n            // Scale\r\n            if (this.updateScale) {\r\n                const activeCamera = this.gizmoLayer.utilityLayerScene.activeCamera!;\r\n                const cameraPosition = activeCamera.globalPosition;\r\n                this._rootMesh.position.subtractToRef(cameraPosition, TmpVectors.Vector3[0]);\r\n                let scale = this.scaleRatio;\r\n                if (activeCamera.mode == Camera.ORTHOGRAPHIC_CAMERA) {\r\n                    if (activeCamera.orthoTop && activeCamera.orthoBottom) {\r\n                        const orthoHeight = activeCamera.orthoTop - activeCamera.orthoBottom;\r\n                        scale *= orthoHeight;\r\n                    }\r\n                } else {\r\n                    const camForward = activeCamera.getScene().useRightHandedSystem ? Vector3.RightHandedForwardReadOnly : Vector3.LeftHandedForwardReadOnly;\r\n                    const direction = activeCamera.getDirection(camForward);\r\n                    scale *= Vector3.Dot(TmpVectors.Vector3[0], direction);\r\n                }\r\n                this._rootMesh.scaling.setAll(scale);\r\n\r\n                // Account for handedness, similar to Matrix.decompose\r\n                if (effectiveNode._getWorldMatrixDeterminant() < 0 && !Gizmo.PreserveScaling) {\r\n                    this._rootMesh.scaling.y *= -1;\r\n                }\r\n            } else {\r\n                this._rootMesh.scaling.setAll(this.scaleRatio);\r\n            }\r\n        }\r\n\r\n        if (this.additionalTransformNode) {\r\n            this._rootMesh.computeWorldMatrix(true);\r\n            this._rootMesh.getWorldMatrix().multiplyToRef(this.additionalTransformNode.getWorldMatrix(), TmpVectors.Matrix[0]);\r\n            TmpVectors.Matrix[0].decompose(this._rootMesh.scaling, this._rootMesh.rotationQuaternion!, this._rootMesh.position);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * if transform has a pivot and is not using PostMultiplyPivotMatrix, then the worldMatrix contains the pivot matrix (it's not cancelled at the end)\r\n     * so, when extracting the world matrix component, the translation (and other components) is containing the pivot translation.\r\n     * And the pivot is applied each frame. Removing it anyway here makes it applied only in computeWorldMatrix.\r\n     * @param transform local transform that needs to be transform by the pivot inverse matrix\r\n     * @param localMatrix local matrix that needs to be transform by the pivot inverse matrix\r\n     * @param result resulting matrix transformed by pivot inverse if the transform node is using pivot without using post Multiply Pivot Matrix\r\n     */\r\n    protected _handlePivotMatrixInverse(transform: TransformNode, localMatrix: Matrix, result: Matrix): void {\r\n        if (transform.isUsingPivotMatrix() && !transform.isUsingPostMultiplyPivotMatrix()) {\r\n            transform.getPivotMatrix().invertToRef(TmpVectors.Matrix[5]);\r\n            TmpVectors.Matrix[5].multiplyToRef(localMatrix, result);\r\n            return;\r\n        }\r\n        result.copyFrom(localMatrix);\r\n    }\r\n    /**\r\n     * computes the rotation/scaling/position of the transform once the Node world matrix has changed.\r\n     */\r\n    protected _matrixChanged() {\r\n        if (!this._attachedNode) {\r\n            return;\r\n        }\r\n\r\n        if ((<Camera>this._attachedNode)._isCamera) {\r\n            const camera = this._attachedNode as Camera;\r\n            let worldMatrix;\r\n            let worldMatrixUC;\r\n            if (camera.parent) {\r\n                const parentInv = TmpVectors.Matrix[1];\r\n                camera.parent._worldMatrix.invertToRef(parentInv);\r\n                this._attachedNode._worldMatrix.multiplyToRef(parentInv, TmpVectors.Matrix[0]);\r\n                worldMatrix = TmpVectors.Matrix[0];\r\n            } else {\r\n                worldMatrix = this._attachedNode._worldMatrix;\r\n            }\r\n\r\n            if (camera.getScene().useRightHandedSystem) {\r\n                // avoid desync with RH matrix computation. Otherwise, rotation of PI around Y axis happens each frame resulting in axis flipped because worldMatrix is computed as inverse of viewMatrix.\r\n                this._rightHandtoLeftHandMatrix.multiplyToRef(worldMatrix, TmpVectors.Matrix[1]);\r\n                worldMatrixUC = TmpVectors.Matrix[1];\r\n            } else {\r\n                worldMatrixUC = worldMatrix;\r\n            }\r\n\r\n            worldMatrixUC.decompose(TmpVectors.Vector3[1], TmpVectors.Quaternion[0], TmpVectors.Vector3[0]);\r\n\r\n            const inheritsTargetCamera =\r\n                this._attachedNode.getClassName() === \"FreeCamera\" ||\r\n                this._attachedNode.getClassName() === \"FlyCamera\" ||\r\n                this._attachedNode.getClassName() === \"ArcFollowCamera\" ||\r\n                this._attachedNode.getClassName() === \"TargetCamera\" ||\r\n                this._attachedNode.getClassName() === \"TouchCamera\" ||\r\n                this._attachedNode.getClassName() === \"UniversalCamera\";\r\n\r\n            if (inheritsTargetCamera) {\r\n                const targetCamera = this._attachedNode as TargetCamera;\r\n                targetCamera.rotation = TmpVectors.Quaternion[0].toEulerAngles();\r\n\r\n                if (targetCamera.rotationQuaternion) {\r\n                    targetCamera.rotationQuaternion.copyFrom(TmpVectors.Quaternion[0]);\r\n                    targetCamera.rotationQuaternion.normalize();\r\n                }\r\n            }\r\n\r\n            camera.position.copyFrom(TmpVectors.Vector3[0]);\r\n        } else if (\r\n            (<Mesh>this._attachedNode)._isMesh ||\r\n            this._attachedNode.getClassName() === \"AbstractMesh\" ||\r\n            this._attachedNode.getClassName() === \"TransformNode\" ||\r\n            this._attachedNode.getClassName() === \"InstancedMesh\"\r\n        ) {\r\n            const transform = this._attachedNode as TransformNode;\r\n            if (transform.parent) {\r\n                const parentInv = TmpVectors.Matrix[0];\r\n                const localMat = TmpVectors.Matrix[1];\r\n                transform.parent.getWorldMatrix().invertToRef(parentInv);\r\n                this._attachedNode.getWorldMatrix().multiplyToRef(parentInv, localMat);\r\n                const matrixToDecompose = TmpVectors.Matrix[4];\r\n                this._handlePivotMatrixInverse(transform, localMat, matrixToDecompose);\r\n                matrixToDecompose.decompose(\r\n                    TmpVectors.Vector3[0],\r\n                    TmpVectors.Quaternion[0],\r\n                    transform.position,\r\n                    Gizmo.PreserveScaling ? transform : undefined,\r\n                    Gizmo.UseAbsoluteScaling\r\n                );\r\n                TmpVectors.Quaternion[0].normalize();\r\n                if (transform.isUsingPivotMatrix()) {\r\n                    // Calculate the local matrix without the translation.\r\n                    // Copied from TranslateNode.computeWorldMatrix\r\n                    const r = TmpVectors.Quaternion[1];\r\n                    Quaternion.RotationYawPitchRollToRef(transform.rotation.y, transform.rotation.x, transform.rotation.z, r);\r\n\r\n                    const scaleMatrix = TmpVectors.Matrix[2];\r\n                    Matrix.ScalingToRef(transform.scaling.x, transform.scaling.y, transform.scaling.z, scaleMatrix);\r\n\r\n                    const rotationMatrix = TmpVectors.Matrix[2];\r\n                    r.toRotationMatrix(rotationMatrix);\r\n\r\n                    const pivotMatrix = transform.getPivotMatrix();\r\n                    const invPivotMatrix = TmpVectors.Matrix[3];\r\n                    pivotMatrix.invertToRef(invPivotMatrix);\r\n\r\n                    pivotMatrix.multiplyToRef(scaleMatrix, TmpVectors.Matrix[4]);\r\n                    TmpVectors.Matrix[4].multiplyToRef(rotationMatrix, TmpVectors.Matrix[5]);\r\n                    TmpVectors.Matrix[5].multiplyToRef(invPivotMatrix, TmpVectors.Matrix[6]);\r\n\r\n                    TmpVectors.Matrix[6].getTranslationToRef(TmpVectors.Vector3[1]);\r\n\r\n                    transform.position.subtractInPlace(TmpVectors.Vector3[1]);\r\n                }\r\n            } else {\r\n                const matrixToDecompose = TmpVectors.Matrix[4];\r\n                this._handlePivotMatrixInverse(transform, this._attachedNode._worldMatrix, matrixToDecompose);\r\n                matrixToDecompose.decompose(\r\n                    TmpVectors.Vector3[0],\r\n                    TmpVectors.Quaternion[0],\r\n                    transform.position,\r\n                    Gizmo.PreserveScaling ? transform : undefined,\r\n                    Gizmo.UseAbsoluteScaling\r\n                );\r\n            }\r\n            TmpVectors.Vector3[0].scaleInPlace(1.0 / transform.scalingDeterminant);\r\n            transform.scaling.copyFrom(TmpVectors.Vector3[0]);\r\n            if (!transform.billboardMode) {\r\n                if (transform.rotationQuaternion) {\r\n                    transform.rotationQuaternion.copyFrom(TmpVectors.Quaternion[0]);\r\n                    transform.rotationQuaternion.normalize();\r\n                } else {\r\n                    transform.rotation = TmpVectors.Quaternion[0].toEulerAngles();\r\n                }\r\n            }\r\n        } else if (this._attachedNode.getClassName() === \"Bone\") {\r\n            const bone = this._attachedNode as Bone;\r\n            const parent = bone.getParent();\r\n\r\n            if (parent) {\r\n                const invParent = TmpVectors.Matrix[0];\r\n                const boneLocalMatrix = TmpVectors.Matrix[1];\r\n                parent.getFinalMatrix().invertToRef(invParent);\r\n                bone.getFinalMatrix().multiplyToRef(invParent, boneLocalMatrix);\r\n                const lmat = bone.getLocalMatrix();\r\n                lmat.copyFrom(boneLocalMatrix);\r\n            } else {\r\n                const lmat = bone.getLocalMatrix();\r\n                lmat.copyFrom(bone.getFinalMatrix());\r\n            }\r\n            bone.markAsDirty();\r\n        } else {\r\n            const light = this._attachedNode as ShadowLight;\r\n            if (light.getTypeID) {\r\n                const type = light.getTypeID();\r\n                if (type === Light.LIGHTTYPEID_DIRECTIONALLIGHT || type === Light.LIGHTTYPEID_SPOTLIGHT || type === Light.LIGHTTYPEID_POINTLIGHT) {\r\n                    const parent = light.parent;\r\n\r\n                    if (parent) {\r\n                        const invParent = TmpVectors.Matrix[0];\r\n                        const nodeLocalMatrix = TmpVectors.Matrix[1];\r\n                        parent.getWorldMatrix().invertToRef(invParent);\r\n                        light.getWorldMatrix().multiplyToRef(invParent, nodeLocalMatrix);\r\n                        nodeLocalMatrix.decompose(undefined, TmpVectors.Quaternion[0], TmpVectors.Vector3[0]);\r\n                    } else {\r\n                        this._attachedNode._worldMatrix.decompose(undefined, TmpVectors.Quaternion[0], TmpVectors.Vector3[0]);\r\n                    }\r\n                    // setter doesn't copy values. Need a new Vector3\r\n                    light.position = new Vector3(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z);\r\n                    if (light.direction) {\r\n                        light.direction = new Vector3(light.direction.x, light.direction.y, light.direction.z);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * refresh gizmo mesh material\r\n     * @param gizmoMeshes\r\n     * @param material material to apply\r\n     */\r\n    protected _setGizmoMeshMaterial(gizmoMeshes: Mesh[], material: StandardMaterial) {\r\n        if (gizmoMeshes) {\r\n            gizmoMeshes.forEach((m: Mesh) => {\r\n                m.material = material;\r\n                if ((<LinesMesh>m).color) {\r\n                    (<LinesMesh>m).color = material.diffuseColor;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribes to pointer up, down, and hover events. Used for responsive gizmos.\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param gizmoAxisCache Gizmo axis definition used for reactive gizmo UI\r\n     * @returns {Observer<PointerInfo>} pointerObserver\r\n     */\r\n    public static GizmoAxisPointerObserver(gizmoLayer: UtilityLayerRenderer, gizmoAxisCache: Map<Mesh, GizmoAxisCache>): Observer<PointerInfo> {\r\n        let dragging = false;\r\n\r\n        const pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (pointerInfo.pickInfo) {\r\n                // On Hover Logic\r\n                if (pointerInfo.type === PointerEventTypes.POINTERMOVE) {\r\n                    if (dragging) {\r\n                        return;\r\n                    }\r\n                    gizmoAxisCache.forEach((cache) => {\r\n                        if (cache.colliderMeshes && cache.gizmoMeshes) {\r\n                            const isHovered = cache.colliderMeshes?.indexOf(pointerInfo?.pickInfo?.pickedMesh as Mesh) != -1;\r\n                            const material = cache.dragBehavior.enabled ? (isHovered || cache.active ? cache.hoverMaterial : cache.material) : cache.disableMaterial;\r\n                            cache.gizmoMeshes.forEach((m: Mesh) => {\r\n                                m.material = material;\r\n                                if ((m as LinesMesh).color) {\r\n                                    (m as LinesMesh).color = material.diffuseColor;\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // On Mouse Down\r\n                if (pointerInfo.type === PointerEventTypes.POINTERDOWN) {\r\n                    // If user Clicked Gizmo\r\n                    if (gizmoAxisCache.has(pointerInfo.pickInfo.pickedMesh?.parent as Mesh)) {\r\n                        dragging = true;\r\n                        const statusMap = gizmoAxisCache.get(pointerInfo.pickInfo.pickedMesh?.parent as Mesh);\r\n                        statusMap!.active = true;\r\n                        gizmoAxisCache.forEach((cache) => {\r\n                            const isHovered = cache.colliderMeshes?.indexOf(pointerInfo?.pickInfo?.pickedMesh as Mesh) != -1;\r\n                            const material = (isHovered || cache.active) && cache.dragBehavior.enabled ? cache.hoverMaterial : cache.disableMaterial;\r\n                            cache.gizmoMeshes.forEach((m: Mesh) => {\r\n                                m.material = material;\r\n                                if ((m as LinesMesh).color) {\r\n                                    (m as LinesMesh).color = material.diffuseColor;\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // On Mouse Up\r\n                if (pointerInfo.type === PointerEventTypes.POINTERUP) {\r\n                    gizmoAxisCache.forEach((cache) => {\r\n                        cache.active = false;\r\n                        dragging = false;\r\n                        cache.gizmoMeshes.forEach((m: Mesh) => {\r\n                            m.material = cache.dragBehavior.enabled ? cache.material : cache.disableMaterial;\r\n                            if ((m as LinesMesh).color) {\r\n                                (m as LinesMesh).color = cache.material.diffuseColor;\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        return pointerObserver!;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this._rootMesh.dispose();\r\n        if (this._beforeRenderObserver) {\r\n            this.gizmoLayer.utilityLayerScene.onBeforeRenderObservable.remove(this._beforeRenderObserver);\r\n        }\r\n    }\r\n}\r\n", "import { Vector3, Matrix } from \"../Maths/math.vector\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\n\r\n/**\r\n * Class containing a set of static utilities functions for managing Pivots\r\n * @internal\r\n */\r\nexport class PivotTools {\r\n    // Stores the state of the pivot cache (_oldPivotPoint, _pivotTranslation)\r\n    // store/remove pivot point should only be applied during their outermost calls\r\n    private static _PivotCached = 0;\r\n    private static _OldPivotPoint = new Vector3();\r\n    private static _PivotTranslation = new Vector3();\r\n    private static _PivotTmpVector = new Vector3();\r\n    private static _PivotPostMultiplyPivotMatrix = false;\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _RemoveAndStorePivotPoint(mesh: TransformNode) {\r\n        if (mesh && PivotTools._PivotCached === 0) {\r\n            // Save old pivot and set pivot to 0,0,0\r\n            mesh.getPivotPointToRef(PivotTools._OldPivotPoint);\r\n            PivotTools._PivotPostMultiplyPivotMatrix = mesh._postMultiplyPivotMatrix;\r\n            if (!PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0)) {\r\n                mesh.setPivotMatrix(Matrix.IdentityReadOnly);\r\n                PivotTools._OldPivotPoint.subtractToRef(mesh.getPivotPoint(), PivotTools._PivotTranslation);\r\n                PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\r\n                PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\r\n                PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\r\n                mesh.position.addInPlace(PivotTools._PivotTmpVector);\r\n            }\r\n        }\r\n        PivotTools._PivotCached++;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _RestorePivotPoint(mesh: TransformNode) {\r\n        if (mesh && !PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0) && PivotTools._PivotCached === 1) {\r\n            mesh.setPivotPoint(PivotTools._OldPivotPoint);\r\n            mesh._postMultiplyPivotMatrix = PivotTools._PivotPostMultiplyPivotMatrix;\r\n            PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\r\n            PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\r\n            PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\r\n            mesh.position.subtractInPlace(PivotTools._PivotTmpVector);\r\n        }\r\n        this._PivotCached--;\r\n    }\r\n}\r\n", "import { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Matrix, Vector3, Vector2, Vector4, Quaternion } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { Effect, IEffectCreationOptions, IShaderPath } from \"./effect\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { EffectFallbacks } from \"./effectFallbacks\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\nimport type { ShaderLanguage } from \"./shaderLanguage\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { TextureSampler } from \"./Textures/textureSampler\";\r\nimport type { StorageBuffer } from \"../Buffers/storageBuffer\";\r\nimport { PushMaterial } from \"./pushMaterial\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { addClipPlaneUniforms, bindClipPlane, prepareStringDefinesForClipPlanes } from \"./clipPlaneMaterialHelper\";\r\nimport type { WebGPUEngine } from \"core/Engines/webgpuEngine\";\r\n\r\nimport type { ExternalTexture } from \"./Textures/externalTexture\";\r\nimport {\r\n    BindBonesParameters,\r\n    BindFogParameters,\r\n    BindLogDepth,\r\n    BindMorphTargetParameters,\r\n    BindSceneUniformBuffer,\r\n    PrepareAttributesForBakedVertexAnimation,\r\n    PrepareDefinesAndAttributesForMorphTargets,\r\n    PushAttributesForInstances,\r\n} from \"./materialHelper.functions\";\r\nimport type { IVector2Like, IVector3Like, IVector4Like } from \"core/Maths/math.like\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/**\r\n * Defines the options associated with the creation of a shader material.\r\n */\r\nexport interface IShaderMaterialOptions {\r\n    /**\r\n     * Does the material work in alpha blend mode\r\n     */\r\n    needAlphaBlending: boolean;\r\n\r\n    /**\r\n     * Does the material work in alpha test mode\r\n     */\r\n    needAlphaTesting: boolean;\r\n\r\n    /**\r\n     * The list of attribute names used in the shader\r\n     */\r\n    attributes: string[];\r\n\r\n    /**\r\n     * The list of uniform names used in the shader\r\n     */\r\n    uniforms: string[];\r\n\r\n    /**\r\n     * The list of UBO names used in the shader\r\n     */\r\n    uniformBuffers: string[];\r\n\r\n    /**\r\n     * The list of sampler (texture) names used in the shader\r\n     */\r\n    samplers: string[];\r\n\r\n    /**\r\n     * The list of external texture names used in the shader\r\n     */\r\n    externalTextures: string[];\r\n\r\n    /**\r\n     * The list of sampler object names used in the shader\r\n     */\r\n    samplerObjects: string[];\r\n\r\n    /**\r\n     * The list of storage buffer names used in the shader\r\n     */\r\n    storageBuffers: string[];\r\n\r\n    /**\r\n     * The list of defines used in the shader\r\n     */\r\n    defines: string[];\r\n\r\n    /**\r\n     * Defines if clip planes have to be turned on: true to turn them on, false to turn them off and null to turn them on/off depending on the scene configuration (scene.clipPlaneX)\r\n     */\r\n    useClipPlane: Nullable<boolean>;\r\n\r\n    /**\r\n     * The language the shader is written in (default: GLSL)\r\n     */\r\n    shaderLanguage?: ShaderLanguage;\r\n\r\n    /**\r\n     * Defines additional code to call to prepare the shader code\r\n     */\r\n    extraInitializationsAsync?: () => Promise<void>;\r\n}\r\n\r\n/**\r\n * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\r\n *\r\n * This returned material effects how the mesh will look based on the code in the shaders.\r\n *\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\r\n */\r\nexport class ShaderMaterial extends PushMaterial {\r\n    private _shaderPath: IShaderPath | string;\r\n    private _options: IShaderMaterialOptions;\r\n    private _textures: { [name: string]: BaseTexture } = {};\r\n    private _textureArrays: { [name: string]: BaseTexture[] } = {};\r\n    private _externalTextures: { [name: string]: ExternalTexture } = {};\r\n    private _floats: { [name: string]: number } = {};\r\n    private _ints: { [name: string]: number } = {};\r\n    private _uints: { [name: string]: number } = {};\r\n    private _floatsArrays: { [name: string]: number[] } = {};\r\n    private _colors3: { [name: string]: Color3 } = {};\r\n    private _colors3Arrays: { [name: string]: number[] } = {};\r\n    private _colors4: { [name: string]: Color4 } = {};\r\n    private _colors4Arrays: { [name: string]: number[] } = {};\r\n    private _vectors2: { [name: string]: IVector2Like } = {};\r\n    private _vectors3: { [name: string]: IVector3Like } = {};\r\n    private _vectors4: { [name: string]: IVector4Like } = {};\r\n    private _quaternions: { [name: string]: Quaternion } = {};\r\n    private _quaternionsArrays: { [name: string]: number[] } = {};\r\n    private _matrices: { [name: string]: Matrix } = {};\r\n    private _matrixArrays: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _matrices3x3: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _matrices2x2: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _vectors2Arrays: { [name: string]: number[] } = {};\r\n    private _vectors3Arrays: { [name: string]: number[] } = {};\r\n    private _vectors4Arrays: { [name: string]: number[] } = {};\r\n    private _uniformBuffers: { [name: string]: UniformBuffer } = {};\r\n    private _textureSamplers: { [name: string]: TextureSampler } = {};\r\n    private _storageBuffers: { [name: string]: StorageBuffer } = {};\r\n    private _cachedWorldViewMatrix = new Matrix();\r\n    private _cachedWorldViewProjectionMatrix = new Matrix();\r\n    private _multiview = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _materialHelperNeedsPreviousMatrices = false;\r\n\r\n    /** Define the Url to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Snippet ID if the material was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * Instantiate a new shader material.\r\n     * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\r\n     * This returned material effects how the mesh will look based on the code in the shaders.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belongs to\r\n     * @param shaderPath Defines  the route to the shader code.\r\n     * @param options Define the options used to create the shader\r\n     * @param storeEffectOnSubMeshes true to store effect on submeshes, false to store the effect directly in the material class.\r\n     */\r\n    constructor(name: string, scene: Scene, shaderPath: IShaderPath | string, options: Partial<IShaderMaterialOptions> = {}, storeEffectOnSubMeshes = true) {\r\n        super(name, scene, storeEffectOnSubMeshes);\r\n        this._shaderPath = shaderPath;\r\n\r\n        this._options = {\r\n            needAlphaBlending: false,\r\n            needAlphaTesting: false,\r\n            attributes: [\"position\", \"normal\", \"uv\"],\r\n            uniforms: [\"worldViewProjection\"],\r\n            uniformBuffers: [],\r\n            samplers: [],\r\n            externalTextures: [],\r\n            samplerObjects: [],\r\n            storageBuffers: [],\r\n            defines: [],\r\n            useClipPlane: false,\r\n            ...options,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the shader path used to define the shader code\r\n     * It can be modified to trigger a new compilation\r\n     */\r\n    public get shaderPath() {\r\n        return this._shaderPath;\r\n    }\r\n\r\n    /**\r\n     * Sets the shader path used to define the shader code\r\n     * It can be modified to trigger a new compilation\r\n     */\r\n    public set shaderPath(shaderPath: IShaderPath | string) {\r\n        this._shaderPath = shaderPath;\r\n    }\r\n\r\n    /**\r\n     * Gets the options used to compile the shader.\r\n     * They can be modified to trigger a new compilation\r\n     */\r\n    public get options(): IShaderMaterialOptions {\r\n        return this._options;\r\n    }\r\n\r\n    /**\r\n     * is multiview set to true?\r\n     */\r\n    public get isMultiview(): boolean {\r\n        return this._multiview;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"ShaderMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"ShaderMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public override needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0 || this._options.needAlphaBlending;\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public override needAlphaTesting(): boolean {\r\n        return this._options.needAlphaTesting;\r\n    }\r\n\r\n    private _checkUniform(uniformName: string): void {\r\n        if (this._options.uniforms.indexOf(uniformName) === -1) {\r\n            this._options.uniforms.push(uniformName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the shader.\r\n     * @param name Define the name of the uniform samplers as defined in the shader\r\n     * @param texture Define the texture to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTexture(name: string, texture: BaseTexture): ShaderMaterial {\r\n        if (this._options.samplers.indexOf(name) === -1) {\r\n            this._options.samplers.push(name);\r\n        }\r\n        this._textures[name] = texture;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a texture from the material.\r\n     * @param name Define the name of the texture to remove\r\n     */\r\n    public removeTexture(name: string): void {\r\n        delete this._textures[name];\r\n    }\r\n\r\n    /**\r\n     * Set a texture array in the shader.\r\n     * @param name Define the name of the uniform sampler array as defined in the shader\r\n     * @param textures Define the list of textures to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTextureArray(name: string, textures: BaseTexture[]): ShaderMaterial {\r\n        if (this._options.samplers.indexOf(name) === -1) {\r\n            this._options.samplers.push(name);\r\n        }\r\n\r\n        this._checkUniform(name);\r\n\r\n        this._textureArrays[name] = textures;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set an internal texture in the shader.\r\n     * @param name Define the name of the uniform samplers as defined in the shader\r\n     * @param texture Define the texture to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setExternalTexture(name: string, texture: ExternalTexture): ShaderMaterial {\r\n        if (this._options.externalTextures.indexOf(name) === -1) {\r\n            this._options.externalTextures.push(name);\r\n        }\r\n        this._externalTextures[name] = texture;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a float in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloat(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._floats[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a int in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setInt(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._ints[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a unsigned int in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setUInt(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._uints[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set an array of floats in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloats(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._floatsArrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Color3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor3(name: string, value: Color3): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 array in the shader from a Color3 array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor3Array(name: string, value: Color3[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors3Arrays[name] = value.reduce((arr, color) => {\r\n            color.toArray(arr, arr.length);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Color4.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor4(name: string, value: Color4): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors4[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a Color4 array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor4Array(name: string, value: Color4[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors4Arrays[name] = value.reduce((arr, color) => {\r\n            color.toArray(arr, arr.length);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec2 in the shader from a Vector2.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector2(name: string, value: IVector2Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors2[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Vector3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector3(name: string, value: IVector3Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Vector4.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector4(name: string, value: IVector4Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors4[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Quaternion.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setQuaternion(name: string, value: Quaternion): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._quaternions[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a Quaternion array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setQuaternionArray(name: string, value: Quaternion[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._quaternionsArrays[name] = value.reduce((arr, quaternion) => {\r\n            quaternion.toArray(arr, arr.length);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat4 in the shader from a Matrix.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix(name: string, value: Matrix): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a float32Array in the shader from a matrix array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrices(name: string, value: Matrix[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n\r\n        const float32Array = new Float32Array(value.length * 16);\r\n\r\n        for (let index = 0; index < value.length; index++) {\r\n            const matrix = value[index];\r\n\r\n            matrix.copyToArray(float32Array, index * 16);\r\n        }\r\n\r\n        this._matrixArrays[name] = float32Array;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat3 in the shader from a Float32Array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix3x3(name: string, value: Float32Array | Array<number>): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices3x3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat2 in the shader from a Float32Array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix2x2(name: string, value: Float32Array | Array<number>): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices2x2[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec2 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray2(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors2Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray3(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors3Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray4(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors4Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a uniform buffer in the shader\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param buffer Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setUniformBuffer(name: string, buffer: UniformBuffer): ShaderMaterial {\r\n        if (this._options.uniformBuffers.indexOf(name) === -1) {\r\n            this._options.uniformBuffers.push(name);\r\n        }\r\n        this._uniformBuffers[name] = buffer;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a texture sampler in the shader\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param sampler Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTextureSampler(name: string, sampler: TextureSampler): ShaderMaterial {\r\n        if (this._options.samplerObjects.indexOf(name) === -1) {\r\n            this._options.samplerObjects.push(name);\r\n        }\r\n        this._textureSamplers[name] = sampler;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a storage buffer in the shader\r\n     * @param name Define the name of the storage buffer as defined in the shader\r\n     * @param buffer Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setStorageBuffer(name: string, buffer: StorageBuffer): ShaderMaterial {\r\n        if (this._options.storageBuffers.indexOf(name) === -1) {\r\n            this._options.storageBuffers.push(name);\r\n        }\r\n        this._storageBuffers[name] = buffer;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds, removes, or replaces the specified shader define and value.\r\n     * * setDefine(\"MY_DEFINE\", true); // enables a boolean define\r\n     * * setDefine(\"MY_DEFINE\", \"0.5\"); // adds \"#define MY_DEFINE 0.5\" to the shader (or sets and replaces the value of any existing define with that name)\r\n     * * setDefine(\"MY_DEFINE\", false); // disables and removes the define\r\n     * Note if the active defines do change, the shader will be recompiled and this can be expensive.\r\n     * @param define the define name e.g., \"OUTPUT_TO_SRGB\" or \"#define OUTPUT_TO_SRGB\". If the define was passed into the constructor already, the version used should match that, and in either case, it should not include any appended value.\r\n     * @param value either the value of the define (e.g. a numerical value) or for booleans, true if the define should be enabled or false if it should be disabled\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setDefine(define: string, value: boolean | string): ShaderMaterial {\r\n        // First remove any existing define with this name.\r\n        const defineName = define.trimEnd() + \" \";\r\n        const existingDefineIdx = this.options.defines.findIndex((x) => x === define || x.startsWith(defineName));\r\n        if (existingDefineIdx >= 0) {\r\n            this.options.defines.splice(existingDefineIdx, 1);\r\n        }\r\n\r\n        // Then add the new define value. (If it's a boolean value and false, don't add it.)\r\n        if (typeof value !== \"boolean\" || value) {\r\n            this.options.defines.push(defineName + value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        return this.isReady(mesh, useInstances, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Checks if the material is ready to render the requested mesh\r\n     * @param mesh Define the mesh to render\r\n     * @param useInstances Define whether or not the material is used with instances\r\n     * @param subMesh defines which submesh to render\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public override isReady(mesh?: AbstractMesh, useInstances?: boolean, subMesh?: SubMesh): boolean {\r\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\r\n\r\n        if (this.isFrozen) {\r\n            const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Instances\r\n        const defines = [];\r\n        const attribs = [];\r\n        let fallbacks: Nullable<EffectFallbacks> = null;\r\n\r\n        let shaderName = this._shaderPath,\r\n            uniforms = this._options.uniforms,\r\n            uniformBuffers = this._options.uniformBuffers,\r\n            samplers = this._options.samplers;\r\n\r\n        // global multiview\r\n        if (engine.getCaps().multiview && scene.activeCamera && scene.activeCamera.outputRenderTarget && scene.activeCamera.outputRenderTarget.getViewCount() > 1) {\r\n            this._multiview = true;\r\n            defines.push(\"#define MULTIVIEW\");\r\n            if (uniforms.indexOf(\"viewProjection\") !== -1 && uniforms.indexOf(\"viewProjectionR\") === -1) {\r\n                uniforms.push(\"viewProjectionR\");\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < this._options.defines.length; index++) {\r\n            const defineToAdd = this._options.defines[index].indexOf(\"#define\") === 0 ? this._options.defines[index] : `#define ${this._options.defines[index]}`;\r\n            defines.push(defineToAdd);\r\n        }\r\n\r\n        for (let index = 0; index < this._options.attributes.length; index++) {\r\n            attribs.push(this._options.attributes[index]);\r\n        }\r\n\r\n        if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            if (attribs.indexOf(VertexBuffer.ColorKind) === -1) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n            defines.push(\"#define VERTEXCOLOR\");\r\n        }\r\n\r\n        if (useInstances) {\r\n            defines.push(\"#define INSTANCES\");\r\n            PushAttributesForInstances(attribs, this._materialHelperNeedsPreviousMatrices);\r\n            if (mesh?.hasThinInstances) {\r\n                defines.push(\"#define THIN_INSTANCES\");\r\n                if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind)) {\r\n                    attribs.push(VertexBuffer.ColorInstanceKind);\r\n                    defines.push(\"#define INSTANCESCOLOR\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bones\r\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (mesh.numBoneInfluencers > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n\r\n            const skeleton = mesh.skeleton;\r\n\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n            fallbacks = new EffectFallbacks();\r\n            fallbacks.addCPUSkinningFallback(0, mesh);\r\n\r\n            if (skeleton.isUsingTextureForMatrices) {\r\n                defines.push(\"#define BONETEXTURE\");\r\n\r\n                if (uniforms.indexOf(\"boneTextureWidth\") === -1) {\r\n                    uniforms.push(\"boneTextureWidth\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"boneSampler\") === -1) {\r\n                    this._options.samplers.push(\"boneSampler\");\r\n                }\r\n            } else {\r\n                defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\r\n\r\n                if (uniforms.indexOf(\"mBones\") === -1) {\r\n                    uniforms.push(\"mBones\");\r\n                }\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Morph\r\n        let numInfluencers = 0;\r\n        const manager = mesh ? (<Mesh>mesh).morphTargetManager : null;\r\n        if (manager) {\r\n            const uv = defines.indexOf(\"#define UV1\") !== -1;\r\n            const uv2 = defines.indexOf(\"#define UV2\") !== -1;\r\n            const tangent = defines.indexOf(\"#define TANGENT\") !== -1;\r\n            const normal = defines.indexOf(\"#define NORMAL\") !== -1;\r\n            numInfluencers = PrepareDefinesAndAttributesForMorphTargets(\r\n                manager,\r\n                defines,\r\n                attribs,\r\n                mesh!,\r\n                true, // usePositionMorph\r\n                normal, // useNormalMorph\r\n                tangent, // useTangentMorph\r\n                uv, // useUVMorph\r\n                uv2 // useUV2Morph\r\n            );\r\n            if (manager.isUsingTextureForTargets) {\r\n                if (uniforms.indexOf(\"morphTargetTextureIndices\") === -1) {\r\n                    uniforms.push(\"morphTargetTextureIndices\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"morphTargets\") === -1) {\r\n                    this._options.samplers.push(\"morphTargets\");\r\n                }\r\n            }\r\n            if (numInfluencers > 0) {\r\n                uniforms = uniforms.slice();\r\n                uniforms.push(\"morphTargetInfluences\");\r\n                uniforms.push(\"morphTargetCount\");\r\n                uniforms.push(\"morphTargetTextureInfo\");\r\n                uniforms.push(\"morphTargetTextureIndices\");\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_MORPH_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Baked Vertex Animation\r\n        if (mesh) {\r\n            const bvaManager = (<Mesh>mesh).bakedVertexAnimationManager;\r\n\r\n            if (bvaManager && bvaManager.isEnabled) {\r\n                defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\r\n                if (uniforms.indexOf(\"bakedVertexAnimationSettings\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationSettings\");\r\n                }\r\n                if (uniforms.indexOf(\"bakedVertexAnimationTextureSizeInverted\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationTextureSizeInverted\");\r\n                }\r\n                if (uniforms.indexOf(\"bakedVertexAnimationTime\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationTime\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"bakedVertexAnimationTexture\") === -1) {\r\n                    this._options.samplers.push(\"bakedVertexAnimationTexture\");\r\n                }\r\n            }\r\n\r\n            PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n        }\r\n\r\n        // Textures\r\n        for (const name in this._textures) {\r\n            if (!this._textures[name].isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Alpha test\r\n        if (mesh && this.needAlphaTestingForMesh(mesh)) {\r\n            defines.push(\"#define ALPHATEST\");\r\n        }\r\n\r\n        // Clip planes\r\n        if (this._options.useClipPlane !== false) {\r\n            addClipPlaneUniforms(uniforms);\r\n\r\n            prepareStringDefinesForClipPlanes(this, scene, defines);\r\n        }\r\n\r\n        // Fog\r\n        if (scene.fogEnabled && mesh?.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            defines.push(\"#define FOG\");\r\n            if (uniforms.indexOf(\"view\") === -1) {\r\n                uniforms.push(\"view\");\r\n            }\r\n            if (uniforms.indexOf(\"vFogInfos\") === -1) {\r\n                uniforms.push(\"vFogInfos\");\r\n            }\r\n            if (uniforms.indexOf(\"vFogColor\") === -1) {\r\n                uniforms.push(\"vFogColor\");\r\n            }\r\n        }\r\n\r\n        // Misc\r\n        if (this._useLogarithmicDepth) {\r\n            defines.push(\"#define LOGARITHMICDEPTH\");\r\n            if (uniforms.indexOf(\"logarithmicDepthConstant\") === -1) {\r\n                uniforms.push(\"logarithmicDepthConstant\");\r\n            }\r\n        }\r\n\r\n        if (this.customShaderNameResolve) {\r\n            uniforms = uniforms.slice();\r\n            uniformBuffers = uniformBuffers.slice();\r\n            samplers = samplers.slice();\r\n            shaderName = this.customShaderNameResolve(this.name, uniforms, uniformBuffers, samplers, defines, attribs);\r\n        }\r\n\r\n        const drawWrapper = storeEffectOnSubMeshes ? subMesh._getDrawWrapper(undefined, true) : this._drawWrapper;\r\n        const previousEffect = drawWrapper?.effect ?? null;\r\n        const previousDefines = drawWrapper?.defines ?? null;\r\n        const join = defines.join(\"\\n\");\r\n\r\n        let effect = previousEffect;\r\n        if (previousDefines !== join) {\r\n            effect = engine.createEffect(\r\n                shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousMorphTargets: numInfluencers },\r\n                    shaderLanguage: this._options.shaderLanguage,\r\n                    extraInitializationsAsync: this._options.extraInitializationsAsync,\r\n                },\r\n                engine\r\n            );\r\n\r\n            if (storeEffectOnSubMeshes) {\r\n                subMesh.setEffect(effect, join, this._materialContext);\r\n            } else if (drawWrapper) {\r\n                drawWrapper.setEffect(effect, join);\r\n            }\r\n\r\n            if (this._onEffectCreatedObservable) {\r\n                onCreatedEffectParameters.effect = effect;\r\n                onCreatedEffectParameters.subMesh = subMesh ?? mesh?.subMeshes[0] ?? null;\r\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n            }\r\n        }\r\n\r\n        drawWrapper!._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        if (!effect?.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        if (previousEffect !== effect) {\r\n            scene.resetCachedMaterial();\r\n        }\r\n\r\n        drawWrapper!._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Binds the world matrix to the material\r\n     * @param world defines the world transformation matrix\r\n     * @param effectOverride - If provided, use this effect instead of internal effect\r\n     */\r\n    public override bindOnlyWorldMatrix(world: Matrix, effectOverride?: Nullable<Effect>): void {\r\n        const effect = effectOverride ?? this.getEffect();\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        const uniforms = this._options.uniforms;\r\n        if (uniforms.indexOf(\"world\") !== -1) {\r\n            effect.setMatrix(\"world\", world);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        if (uniforms.indexOf(\"worldView\") !== -1) {\r\n            world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\r\n            effect.setMatrix(\"worldView\", this._cachedWorldViewMatrix);\r\n        }\r\n\r\n        if (uniforms.indexOf(\"worldViewProjection\") !== -1) {\r\n            world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\r\n            effect.setMatrix(\"worldViewProjection\", this._cachedWorldViewProjectionMatrix);\r\n        }\r\n\r\n        if (uniforms.indexOf(\"view\") !== -1) {\r\n            effect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        this.bind(world, mesh, subMesh._drawWrapperOverride?.effect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Binds the material to the mesh\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh to bind the material to\r\n     * @param effectOverride - If provided, use this effect instead of internal effect\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public override bind(world: Matrix, mesh?: AbstractMesh, effectOverride?: Nullable<Effect>, subMesh?: SubMesh): void {\r\n        // Std values\r\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\r\n        const effect = effectOverride ?? (storeEffectOnSubMeshes ? subMesh.effect : this.getEffect());\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n\r\n        this._activeEffect = effect;\r\n\r\n        this.bindOnlyWorldMatrix(world, effectOverride);\r\n\r\n        const uniformBuffers = this._options.uniformBuffers;\r\n\r\n        let useSceneUBO = false;\r\n\r\n        if (effect && uniformBuffers && uniformBuffers.length > 0 && scene.getEngine().supportsUniformBuffers) {\r\n            for (let i = 0; i < uniformBuffers.length; ++i) {\r\n                const bufferName = uniformBuffers[i];\r\n                switch (bufferName) {\r\n                    case \"Mesh\":\r\n                        if (mesh) {\r\n                            mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                            mesh.transferToEffect(world);\r\n                        }\r\n                        break;\r\n                    case \"Scene\":\r\n                        BindSceneUniformBuffer(effect, scene.getSceneUniformBuffer());\r\n                        scene.finalizeSceneUbo();\r\n                        useSceneUBO = true;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const mustRebind = mesh && storeEffectOnSubMeshes ? this._mustRebind(scene, effect, subMesh, mesh.visibility) : scene.getCachedMaterial() !== this;\r\n\r\n        if (effect && mustRebind) {\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"view\") !== -1) {\r\n                effect.setMatrix(\"view\", scene.getViewMatrix());\r\n            }\r\n\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"projection\") !== -1) {\r\n                effect.setMatrix(\"projection\", scene.getProjectionMatrix());\r\n            }\r\n\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"viewProjection\") !== -1) {\r\n                effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n                if (this._multiview) {\r\n                    effect.setMatrix(\"viewProjectionR\", scene._transformMatrixR);\r\n                }\r\n            }\r\n\r\n            if (scene.activeCamera && this._options.uniforms.indexOf(\"cameraPosition\") !== -1) {\r\n                effect.setVector3(\"cameraPosition\", scene.activeCamera!.globalPosition);\r\n            }\r\n\r\n            // Bones\r\n            BindBonesParameters(mesh, effect);\r\n\r\n            // Clip plane\r\n            bindClipPlane(effect, this, scene);\r\n\r\n            // Misc\r\n            if (this._useLogarithmicDepth) {\r\n                BindLogDepth(storeEffectOnSubMeshes ? subMesh.materialDefines : effect.defines, effect, scene);\r\n            }\r\n\r\n            // Fog\r\n            if (mesh) {\r\n                BindFogParameters(scene, mesh, effect);\r\n            }\r\n\r\n            let name: string;\r\n            // Texture\r\n            for (name in this._textures) {\r\n                effect.setTexture(name, this._textures[name]);\r\n            }\r\n\r\n            // Texture arrays\r\n            for (name in this._textureArrays) {\r\n                effect.setTextureArray(name, this._textureArrays[name]);\r\n            }\r\n\r\n            // Int\r\n            for (name in this._ints) {\r\n                effect.setInt(name, this._ints[name]);\r\n            }\r\n\r\n            // UInt\r\n            for (name in this._uints) {\r\n                effect.setUInt(name, this._uints[name]);\r\n            }\r\n\r\n            // Float\r\n            for (name in this._floats) {\r\n                effect.setFloat(name, this._floats[name]);\r\n            }\r\n\r\n            // Floats\r\n            for (name in this._floatsArrays) {\r\n                effect.setArray(name, this._floatsArrays[name]);\r\n            }\r\n\r\n            // Color3\r\n            for (name in this._colors3) {\r\n                effect.setColor3(name, this._colors3[name]);\r\n            }\r\n\r\n            // Color3Array\r\n            for (name in this._colors3Arrays) {\r\n                effect.setArray3(name, this._colors3Arrays[name]);\r\n            }\r\n\r\n            // Color4\r\n            for (name in this._colors4) {\r\n                const color = this._colors4[name];\r\n                effect.setFloat4(name, color.r, color.g, color.b, color.a);\r\n            }\r\n\r\n            // Color4Array\r\n            for (name in this._colors4Arrays) {\r\n                effect.setArray4(name, this._colors4Arrays[name]);\r\n            }\r\n\r\n            // Vector2\r\n            for (name in this._vectors2) {\r\n                effect.setVector2(name, this._vectors2[name]);\r\n            }\r\n\r\n            // Vector3\r\n            for (name in this._vectors3) {\r\n                effect.setVector3(name, this._vectors3[name]);\r\n            }\r\n\r\n            // Vector4\r\n            for (name in this._vectors4) {\r\n                effect.setVector4(name, this._vectors4[name]);\r\n            }\r\n\r\n            // Quaternion\r\n            for (name in this._quaternions) {\r\n                effect.setQuaternion(name, this._quaternions[name]);\r\n            }\r\n\r\n            // Matrix\r\n            for (name in this._matrices) {\r\n                effect.setMatrix(name, this._matrices[name]);\r\n            }\r\n\r\n            // MatrixArray\r\n            for (name in this._matrixArrays) {\r\n                effect.setMatrices(name, this._matrixArrays[name]);\r\n            }\r\n\r\n            // Matrix 3x3\r\n            for (name in this._matrices3x3) {\r\n                effect.setMatrix3x3(name, this._matrices3x3[name]);\r\n            }\r\n\r\n            // Matrix 2x2\r\n            for (name in this._matrices2x2) {\r\n                effect.setMatrix2x2(name, this._matrices2x2[name]);\r\n            }\r\n\r\n            // Vector2Array\r\n            for (name in this._vectors2Arrays) {\r\n                effect.setArray2(name, this._vectors2Arrays[name]);\r\n            }\r\n\r\n            // Vector3Array\r\n            for (name in this._vectors3Arrays) {\r\n                effect.setArray3(name, this._vectors3Arrays[name]);\r\n            }\r\n\r\n            // Vector4Array\r\n            for (name in this._vectors4Arrays) {\r\n                effect.setArray4(name, this._vectors4Arrays[name]);\r\n            }\r\n\r\n            // QuaternionArray\r\n            for (name in this._quaternionsArrays) {\r\n                effect.setArray4(name, this._quaternionsArrays[name]);\r\n            }\r\n\r\n            // Uniform buffers\r\n            for (name in this._uniformBuffers) {\r\n                const buffer = this._uniformBuffers[name].getBuffer();\r\n                if (buffer) {\r\n                    effect.bindUniformBuffer(buffer, name);\r\n                }\r\n            }\r\n\r\n            const engineWebGPU = scene.getEngine() as WebGPUEngine;\r\n\r\n            // External texture\r\n            const setExternalTexture = engineWebGPU.setExternalTexture;\r\n            if (setExternalTexture) {\r\n                for (name in this._externalTextures) {\r\n                    setExternalTexture.call(engineWebGPU, name, this._externalTextures[name]);\r\n                }\r\n            }\r\n\r\n            // Samplers\r\n            const setTextureSampler = engineWebGPU.setTextureSampler;\r\n            if (setTextureSampler) {\r\n                for (name in this._textureSamplers) {\r\n                    setTextureSampler.call(engineWebGPU, name, this._textureSamplers[name]);\r\n                }\r\n            }\r\n\r\n            // Storage buffers\r\n            const setStorageBuffer = engineWebGPU.setStorageBuffer;\r\n            if (setStorageBuffer) {\r\n                for (name in this._storageBuffers) {\r\n                    setStorageBuffer.call(engineWebGPU, name, this._storageBuffers[name]);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (effect && mesh && (mustRebind || !this.isFrozen)) {\r\n            // Morph targets\r\n            BindMorphTargetParameters(mesh, effect);\r\n            if (mesh.morphTargetManager && mesh.morphTargetManager.isUsingTextureForTargets) {\r\n                mesh.morphTargetManager._bind(effect);\r\n            }\r\n\r\n            const bvaManager = (<Mesh>mesh).bakedVertexAnimationManager;\r\n\r\n            if (bvaManager && bvaManager.isEnabled) {\r\n                const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\r\n                mesh.bakedVertexAnimationManager?.bind(effect, !!drawWrapper._wasPreviouslyUsingInstances);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, effect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public override getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        for (const name in this._textures) {\r\n            activeTextures.push(this._textures[name]);\r\n        }\r\n\r\n        for (const name in this._textureArrays) {\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                activeTextures.push(array[index]);\r\n            }\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        for (const name in this._textures) {\r\n            if (this._textures[name] === texture) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        for (const name in this._textureArrays) {\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                if (array[index] === texture) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    public override clone(name: string): ShaderMaterial {\r\n        const result = SerializationHelper.Clone(() => new ShaderMaterial(name, this.getScene(), this._shaderPath, this._options, this._storeEffectOnSubMeshes), this);\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        // Shader code path\r\n        if (typeof result._shaderPath === \"object\") {\r\n            result._shaderPath = { ...result._shaderPath };\r\n        }\r\n\r\n        // Options\r\n        this._options = { ...this._options };\r\n\r\n        (Object.keys(this._options) as Array<keyof IShaderMaterialOptions>).forEach((propName) => {\r\n            const propValue = this._options[propName];\r\n            if (Array.isArray(propValue)) {\r\n                (<string[]>this._options[propName]) = propValue.slice(0);\r\n            }\r\n        });\r\n\r\n        // Stencil\r\n        this.stencil.copyTo(result.stencil);\r\n\r\n        // Texture\r\n        for (const key in this._textures) {\r\n            result.setTexture(key, this._textures[key]);\r\n        }\r\n\r\n        // TextureArray\r\n        for (const key in this._textureArrays) {\r\n            result.setTextureArray(key, this._textureArrays[key]);\r\n        }\r\n\r\n        // External texture\r\n        for (const key in this._externalTextures) {\r\n            result.setExternalTexture(key, this._externalTextures[key]);\r\n        }\r\n\r\n        // Int\r\n        for (const key in this._ints) {\r\n            result.setInt(key, this._ints[key]);\r\n        }\r\n\r\n        // UInt\r\n        for (const key in this._uints) {\r\n            result.setUInt(key, this._uints[key]);\r\n        }\r\n\r\n        // Float\r\n        for (const key in this._floats) {\r\n            result.setFloat(key, this._floats[key]);\r\n        }\r\n\r\n        // Floats\r\n        for (const key in this._floatsArrays) {\r\n            result.setFloats(key, this._floatsArrays[key]);\r\n        }\r\n\r\n        // Color3\r\n        for (const key in this._colors3) {\r\n            result.setColor3(key, this._colors3[key]);\r\n        }\r\n\r\n        // Color3Array\r\n        for (const key in this._colors3Arrays) {\r\n            result._colors3Arrays[key] = this._colors3Arrays[key];\r\n        }\r\n\r\n        // Color4\r\n        for (const key in this._colors4) {\r\n            result.setColor4(key, this._colors4[key]);\r\n        }\r\n\r\n        // Color4Array\r\n        for (const key in this._colors4Arrays) {\r\n            result._colors4Arrays[key] = this._colors4Arrays[key];\r\n        }\r\n\r\n        // Vector2\r\n        for (const key in this._vectors2) {\r\n            result.setVector2(key, this._vectors2[key]);\r\n        }\r\n\r\n        // Vector3\r\n        for (const key in this._vectors3) {\r\n            result.setVector3(key, this._vectors3[key]);\r\n        }\r\n\r\n        // Vector4\r\n        for (const key in this._vectors4) {\r\n            result.setVector4(key, this._vectors4[key]);\r\n        }\r\n\r\n        // Quaternion\r\n        for (const key in this._quaternions) {\r\n            result.setQuaternion(key, this._quaternions[key]);\r\n        }\r\n\r\n        // QuaternionArray\r\n        for (const key in this._quaternionsArrays) {\r\n            result._quaternionsArrays[key] = this._quaternionsArrays[key];\r\n        }\r\n\r\n        // Matrix\r\n        for (const key in this._matrices) {\r\n            result.setMatrix(key, this._matrices[key]);\r\n        }\r\n\r\n        // MatrixArray\r\n        for (const key in this._matrixArrays) {\r\n            result._matrixArrays[key] = this._matrixArrays[key].slice();\r\n        }\r\n\r\n        // Matrix 3x3\r\n        for (const key in this._matrices3x3) {\r\n            result.setMatrix3x3(key, this._matrices3x3[key]);\r\n        }\r\n\r\n        // Matrix 2x2\r\n        for (const key in this._matrices2x2) {\r\n            result.setMatrix2x2(key, this._matrices2x2[key]);\r\n        }\r\n\r\n        // Vector2Array\r\n        for (const key in this._vectors2Arrays) {\r\n            result.setArray2(key, this._vectors2Arrays[key]);\r\n        }\r\n\r\n        // Vector3Array\r\n        for (const key in this._vectors3Arrays) {\r\n            result.setArray3(key, this._vectors3Arrays[key]);\r\n        }\r\n\r\n        // Vector4Array\r\n        for (const key in this._vectors4Arrays) {\r\n            result.setArray4(key, this._vectors4Arrays[key]);\r\n        }\r\n\r\n        // Uniform buffers\r\n        for (const key in this._uniformBuffers) {\r\n            result.setUniformBuffer(key, this._uniformBuffers[key]);\r\n        }\r\n\r\n        // Samplers\r\n        for (const key in this._textureSamplers) {\r\n            result.setTextureSampler(key, this._textureSamplers[key]);\r\n        }\r\n\r\n        // Storag buffers\r\n        for (const key in this._storageBuffers) {\r\n            result.setStorageBuffer(key, this._storageBuffers[key]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\r\n     */\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            let name: string;\r\n            for (name in this._textures) {\r\n                this._textures[name].dispose();\r\n            }\r\n\r\n            for (name in this._textureArrays) {\r\n                const array = this._textureArrays[name];\r\n                for (let index = 0; index < array.length; index++) {\r\n                    array[index].dispose();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._textures = {};\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\r\n    }\r\n\r\n    /**\r\n     * Serializes this material in a JSON representation\r\n     * @returns the serialized material object\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.ShaderMaterial\";\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        serializationObject.options = this._options;\r\n        serializationObject.shaderPath = this._shaderPath;\r\n        serializationObject.storeEffectOnSubMeshes = this._storeEffectOnSubMeshes;\r\n\r\n        let name: string;\r\n\r\n        // Stencil\r\n        serializationObject.stencil = this.stencil.serialize();\r\n\r\n        // Texture\r\n        serializationObject.textures = {};\r\n        for (name in this._textures) {\r\n            serializationObject.textures[name] = this._textures[name].serialize();\r\n        }\r\n\r\n        // Texture arrays\r\n        serializationObject.textureArrays = {};\r\n        for (name in this._textureArrays) {\r\n            serializationObject.textureArrays[name] = [];\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                serializationObject.textureArrays[name].push(array[index].serialize());\r\n            }\r\n        }\r\n\r\n        // Int\r\n        serializationObject.ints = {};\r\n        for (name in this._ints) {\r\n            serializationObject.ints[name] = this._ints[name];\r\n        }\r\n\r\n        // UInt\r\n        serializationObject.uints = {};\r\n        for (name in this._uints) {\r\n            serializationObject.uints[name] = this._uints[name];\r\n        }\r\n\r\n        // Float\r\n        serializationObject.floats = {};\r\n        for (name in this._floats) {\r\n            serializationObject.floats[name] = this._floats[name];\r\n        }\r\n\r\n        // Floats\r\n        serializationObject.floatsArrays = {};\r\n        for (name in this._floatsArrays) {\r\n            serializationObject.floatsArrays[name] = this._floatsArrays[name];\r\n        }\r\n\r\n        // Color3\r\n        serializationObject.colors3 = {};\r\n        for (name in this._colors3) {\r\n            serializationObject.colors3[name] = this._colors3[name].asArray();\r\n        }\r\n\r\n        // Color3 array\r\n        serializationObject.colors3Arrays = {};\r\n        for (name in this._colors3Arrays) {\r\n            serializationObject.colors3Arrays[name] = this._colors3Arrays[name];\r\n        }\r\n\r\n        // Color4\r\n        serializationObject.colors4 = {};\r\n        for (name in this._colors4) {\r\n            serializationObject.colors4[name] = this._colors4[name].asArray();\r\n        }\r\n\r\n        // Color4 array\r\n        serializationObject.colors4Arrays = {};\r\n        for (name in this._colors4Arrays) {\r\n            serializationObject.colors4Arrays[name] = this._colors4Arrays[name];\r\n        }\r\n\r\n        // Vector2\r\n        serializationObject.vectors2 = {};\r\n        for (name in this._vectors2) {\r\n            const v2 = this._vectors2[name];\r\n            serializationObject.vectors2[name] = [v2.x, v2.y];\r\n        }\r\n\r\n        // Vector3\r\n        serializationObject.vectors3 = {};\r\n        for (name in this._vectors3) {\r\n            const v3 = this._vectors3[name];\r\n            serializationObject.vectors3[name] = [v3.x, v3.y, v3.z];\r\n        }\r\n\r\n        // Vector4\r\n        serializationObject.vectors4 = {};\r\n        for (name in this._vectors4) {\r\n            const v4 = this._vectors4[name];\r\n            serializationObject.vectors4[name] = [v4.x, v4.y, v4.z, v4.w];\r\n        }\r\n\r\n        // Quaternion\r\n        serializationObject.quaternions = {};\r\n        for (name in this._quaternions) {\r\n            serializationObject.quaternions[name] = this._quaternions[name].asArray();\r\n        }\r\n\r\n        // Matrix\r\n        serializationObject.matrices = {};\r\n        for (name in this._matrices) {\r\n            serializationObject.matrices[name] = this._matrices[name].asArray();\r\n        }\r\n\r\n        // MatrixArray\r\n        serializationObject.matrixArray = {};\r\n        for (name in this._matrixArrays) {\r\n            serializationObject.matrixArray[name] = this._matrixArrays[name];\r\n        }\r\n\r\n        // Matrix 3x3\r\n        serializationObject.matrices3x3 = {};\r\n        for (name in this._matrices3x3) {\r\n            serializationObject.matrices3x3[name] = this._matrices3x3[name];\r\n        }\r\n\r\n        // Matrix 2x2\r\n        serializationObject.matrices2x2 = {};\r\n        for (name in this._matrices2x2) {\r\n            serializationObject.matrices2x2[name] = this._matrices2x2[name];\r\n        }\r\n\r\n        // Vector2Array\r\n        serializationObject.vectors2Arrays = {};\r\n        for (name in this._vectors2Arrays) {\r\n            serializationObject.vectors2Arrays[name] = this._vectors2Arrays[name];\r\n        }\r\n\r\n        // Vector3Array\r\n        serializationObject.vectors3Arrays = {};\r\n        for (name in this._vectors3Arrays) {\r\n            serializationObject.vectors3Arrays[name] = this._vectors3Arrays[name];\r\n        }\r\n\r\n        // Vector4Array\r\n        serializationObject.vectors4Arrays = {};\r\n        for (name in this._vectors4Arrays) {\r\n            serializationObject.vectors4Arrays[name] = this._vectors4Arrays[name];\r\n        }\r\n\r\n        // QuaternionArray\r\n        serializationObject.quaternionsArrays = {};\r\n        for (name in this._quaternionsArrays) {\r\n            serializationObject.quaternionsArrays[name] = this._quaternionsArrays[name];\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a shader material from parsed shader material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new material\r\n     */\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): ShaderMaterial {\r\n        const material = SerializationHelper.Parse(\r\n            () => new ShaderMaterial(source.name, scene, source.shaderPath, source.options, source.storeEffectOnSubMeshes),\r\n            source,\r\n            scene,\r\n            rootUrl\r\n        );\r\n\r\n        let name: string;\r\n\r\n        // Stencil\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        // Texture\r\n        for (name in source.textures) {\r\n            material.setTexture(name, <Texture>Texture.Parse(source.textures[name], scene, rootUrl));\r\n        }\r\n\r\n        // Texture arrays\r\n        for (name in source.textureArrays) {\r\n            const array = source.textureArrays[name];\r\n            const textureArray: Texture[] = [];\r\n\r\n            for (let index = 0; index < array.length; index++) {\r\n                textureArray.push(<Texture>Texture.Parse(array[index], scene, rootUrl));\r\n            }\r\n            material.setTextureArray(name, textureArray);\r\n        }\r\n\r\n        // Int\r\n        for (name in source.ints) {\r\n            material.setInt(name, source.ints[name]);\r\n        }\r\n\r\n        // UInt\r\n        for (name in source.uints) {\r\n            material.setUInt(name, source.uints[name]);\r\n        }\r\n\r\n        // Float\r\n        for (name in source.floats) {\r\n            material.setFloat(name, source.floats[name]);\r\n        }\r\n\r\n        // Floats\r\n        for (name in source.floatsArrays) {\r\n            material.setFloats(name, source.floatsArrays[name]);\r\n        }\r\n\r\n        // Color3\r\n        for (name in source.colors3) {\r\n            material.setColor3(name, Color3.FromArray(source.colors3[name]));\r\n        }\r\n\r\n        // Color3 arrays\r\n        for (name in source.colors3Arrays) {\r\n            const colors: Color3[] = source.colors3Arrays[name]\r\n                .reduce((arr: Array<Array<number>>, num: number, i: number) => {\r\n                    if (i % 3 === 0) {\r\n                        arr.push([num]);\r\n                    } else {\r\n                        arr[arr.length - 1].push(num);\r\n                    }\r\n                    return arr;\r\n                }, [])\r\n                .map((color: ArrayLike<number>) => Color3.FromArray(color));\r\n            material.setColor3Array(name, colors);\r\n        }\r\n\r\n        // Color4\r\n        for (name in source.colors4) {\r\n            material.setColor4(name, Color4.FromArray(source.colors4[name]));\r\n        }\r\n\r\n        // Color4 arrays\r\n        for (name in source.colors4Arrays) {\r\n            const colors: Color4[] = source.colors4Arrays[name]\r\n                .reduce((arr: Array<Array<number>>, num: number, i: number) => {\r\n                    if (i % 4 === 0) {\r\n                        arr.push([num]);\r\n                    } else {\r\n                        arr[arr.length - 1].push(num);\r\n                    }\r\n                    return arr;\r\n                }, [])\r\n                .map((color: ArrayLike<number>) => Color4.FromArray(color));\r\n            material.setColor4Array(name, colors);\r\n        }\r\n\r\n        // Vector2\r\n        for (name in source.vectors2) {\r\n            material.setVector2(name, Vector2.FromArray(source.vectors2[name]));\r\n        }\r\n\r\n        // Vector3\r\n        for (name in source.vectors3) {\r\n            material.setVector3(name, Vector3.FromArray(source.vectors3[name]));\r\n        }\r\n\r\n        // Vector4\r\n        for (name in source.vectors4) {\r\n            material.setVector4(name, Vector4.FromArray(source.vectors4[name]));\r\n        }\r\n\r\n        // Quaternion\r\n        for (name in source.quaternions) {\r\n            material.setQuaternion(name, Quaternion.FromArray(source.quaternions[name]));\r\n        }\r\n\r\n        // Matrix\r\n        for (name in source.matrices) {\r\n            material.setMatrix(name, Matrix.FromArray(source.matrices[name]));\r\n        }\r\n\r\n        // MatrixArray\r\n        for (name in source.matrixArray) {\r\n            material._matrixArrays[name] = new Float32Array(source.matrixArray[name]);\r\n        }\r\n\r\n        // Matrix 3x3\r\n        for (name in source.matrices3x3) {\r\n            material.setMatrix3x3(name, source.matrices3x3[name]);\r\n        }\r\n\r\n        // Matrix 2x2\r\n        for (name in source.matrices2x2) {\r\n            material.setMatrix2x2(name, source.matrices2x2[name]);\r\n        }\r\n\r\n        // Vector2Array\r\n        for (name in source.vectors2Arrays) {\r\n            material.setArray2(name, source.vectors2Arrays[name]);\r\n        }\r\n\r\n        // Vector3Array\r\n        for (name in source.vectors3Arrays) {\r\n            material.setArray3(name, source.vectors3Arrays[name]);\r\n        }\r\n\r\n        // Vector4Array\r\n        for (name in source.vectors4Arrays) {\r\n            material.setArray4(name, source.vectors4Arrays[name]);\r\n        }\r\n\r\n        // QuaternionArray\r\n        for (name in source.quaternionsArrays) {\r\n            material.setArray4(name, source.quaternionsArrays[name]);\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ShaderMaterial from a snippet saved in a remote file\r\n     * @param name defines the name of the ShaderMaterial to create (can be null or empty to use the one from the json data)\r\n     * @param url defines the url to load from\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static ParseFromFileAsync(name: Nullable<string>, url: string, scene: Scene, rootUrl = \"\"): Promise<ShaderMaterial> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const serializationObject = JSON.parse(request.responseText);\r\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\r\n\r\n                        if (name) {\r\n                            output.name = name;\r\n                        }\r\n\r\n                        resolve(output);\r\n                    } else {\r\n                        reject(\"Unable to load the ShaderMaterial\");\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\r\n     * @param snippetId defines the snippet to load\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static ParseFromSnippetAsync(snippetId: string, scene: Scene, rootUrl = \"\"): Promise<ShaderMaterial> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n                        const serializationObject = JSON.parse(snippet.shaderMaterial);\r\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\r\n\r\n                        output.snippetId = snippetId;\r\n\r\n                        resolve(output);\r\n                    } else {\r\n                        reject(\"Unable to load the snippet \" + snippetId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\r\n     * @deprecated Please use ParseFromSnippetAsync instead\r\n     * @param snippetId defines the snippet to load\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static CreateFromSnippetAsync = ShaderMaterial.ParseFromSnippetAsync;\r\n}\r\n\r\nRegisterClass(\"BABYLON.ShaderMaterial\", ShaderMaterial);\r\n", "import { Epsilon } from \"core/Maths/math.constants\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport { BuildArray } from \"core/Misc/arrayTools\";\r\nimport { IntersectionInfo } from \"../Collisions/intersectionInfo\";\r\nimport type { BoundingBox } from \"./boundingBox\";\r\nimport type { BoundingSphere } from \"./boundingSphere\";\r\nimport type { DeepImmutable, float, Nullable } from \"core/types\";\r\nimport type { Plane } from \"core/Maths/math.plane\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { PickingInfo } from \"core/Collisions/pickingInfo\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { _ImportHelper } from \"core/import.helper\";\r\n\r\n/**\r\n * Type used to define predicate for selecting meshes and instances (if exist)\r\n */\r\nexport type MeshPredicate = (mesh: AbstractMesh, thinInstanceIndex: number) => boolean;\r\n\r\n/**\r\n * Type used to define predicate used to select faces when a mesh intersection is detected\r\n */\r\nexport type TrianglePickingPredicate = (p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray, i0: number, i1: number, i2: number) => boolean;\r\n\r\n/**\r\n * This class allows user to customize internal picking mechanism\r\n */\r\nexport interface IPickingCustomization {\r\n    /**\r\n     * Predicate to select faces when a mesh intersection is detected\r\n     */\r\n    internalPickerForMesh?: (\r\n        pickingInfo: Nullable<PickingInfo>,\r\n        rayFunction: (world: Matrix, enableDistantPicking: boolean) => Ray,\r\n        mesh: AbstractMesh,\r\n        world: Matrix,\r\n        fastCheck?: boolean,\r\n        onlyBoundingInfo?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate,\r\n        skipBoundingInfo?: boolean\r\n    ) => PickingInfo;\r\n}\r\n\r\n/**\r\n * Use this object to customize mesh picking behavior\r\n */\r\nexport const PickingCustomization: IPickingCustomization = {\r\n    internalPickerForMesh: undefined,\r\n};\r\n\r\n/**\r\n * Class representing a ray with position and direction\r\n */\r\nexport class Ray {\r\n    private static readonly _TmpVector3 = BuildArray(6, Vector3.Zero);\r\n    private static _RayDistant = Ray.Zero();\r\n    private _tmpRay: Ray;\r\n\r\n    /**\r\n     * Creates a new ray\r\n     * @param origin origin point\r\n     * @param direction direction\r\n     * @param length length of the ray\r\n     * @param epsilon The epsilon value to use when calculating the ray/triangle intersection (default: 0)\r\n     */\r\n    constructor(\r\n        /** origin point */\r\n        public origin: Vector3,\r\n        /** direction */\r\n        public direction: Vector3,\r\n        /** [Number.MAX_VALUE] length of the ray */\r\n        public length: number = Number.MAX_VALUE,\r\n        /** [Epsilon] The epsilon value to use when calculating the ray/triangle intersection (default: Epsilon from math constants) */\r\n        public epsilon: number = Epsilon\r\n    ) {}\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Clone the current ray\r\n     * @returns a new ray\r\n     */\r\n    public clone(): Ray {\r\n        return new Ray(this.origin.clone(), this.direction.clone(), this.length);\r\n    }\r\n\r\n    /**\r\n     * Checks if the ray intersects a box\r\n     * This does not account for the ray length by design to improve perfs.\r\n     * @param minimum bound of the box\r\n     * @param maximum bound of the box\r\n     * @param intersectionTreshold extra extend to be added to the box in all direction\r\n     * @returns if the box was hit\r\n     */\r\n    public intersectsBoxMinMax(minimum: DeepImmutable<Vector3>, maximum: DeepImmutable<Vector3>, intersectionTreshold: number = 0): boolean {\r\n        const newMinimum = Ray._TmpVector3[0].copyFromFloats(minimum.x - intersectionTreshold, minimum.y - intersectionTreshold, minimum.z - intersectionTreshold);\r\n        const newMaximum = Ray._TmpVector3[1].copyFromFloats(maximum.x + intersectionTreshold, maximum.y + intersectionTreshold, maximum.z + intersectionTreshold);\r\n        let d = 0.0;\r\n        let maxValue = Number.MAX_VALUE;\r\n        let inv: number;\r\n        let min: number;\r\n        let max: number;\r\n        let temp: number;\r\n        if (Math.abs(this.direction.x) < 0.0000001) {\r\n            if (this.origin.x < newMinimum.x || this.origin.x > newMaximum.x) {\r\n                return false;\r\n            }\r\n        } else {\r\n            inv = 1.0 / this.direction.x;\r\n            min = (newMinimum.x - this.origin.x) * inv;\r\n            max = (newMaximum.x - this.origin.x) * inv;\r\n            if (max === -Infinity) {\r\n                max = Infinity;\r\n            }\r\n\r\n            if (min > max) {\r\n                temp = min;\r\n                min = max;\r\n                max = temp;\r\n            }\r\n\r\n            d = Math.max(min, d);\r\n            maxValue = Math.min(max, maxValue);\r\n\r\n            if (d > maxValue) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (Math.abs(this.direction.y) < 0.0000001) {\r\n            if (this.origin.y < newMinimum.y || this.origin.y > newMaximum.y) {\r\n                return false;\r\n            }\r\n        } else {\r\n            inv = 1.0 / this.direction.y;\r\n            min = (newMinimum.y - this.origin.y) * inv;\r\n            max = (newMaximum.y - this.origin.y) * inv;\r\n\r\n            if (max === -Infinity) {\r\n                max = Infinity;\r\n            }\r\n\r\n            if (min > max) {\r\n                temp = min;\r\n                min = max;\r\n                max = temp;\r\n            }\r\n\r\n            d = Math.max(min, d);\r\n            maxValue = Math.min(max, maxValue);\r\n\r\n            if (d > maxValue) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (Math.abs(this.direction.z) < 0.0000001) {\r\n            if (this.origin.z < newMinimum.z || this.origin.z > newMaximum.z) {\r\n                return false;\r\n            }\r\n        } else {\r\n            inv = 1.0 / this.direction.z;\r\n            min = (newMinimum.z - this.origin.z) * inv;\r\n            max = (newMaximum.z - this.origin.z) * inv;\r\n\r\n            if (max === -Infinity) {\r\n                max = Infinity;\r\n            }\r\n\r\n            if (min > max) {\r\n                temp = min;\r\n                min = max;\r\n                max = temp;\r\n            }\r\n\r\n            d = Math.max(min, d);\r\n            maxValue = Math.min(max, maxValue);\r\n\r\n            if (d > maxValue) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if the ray intersects a box\r\n     * This does not account for the ray lenght by design to improve perfs.\r\n     * @param box the bounding box to check\r\n     * @param intersectionTreshold extra extend to be added to the BoundingBox in all direction\r\n     * @returns if the box was hit\r\n     */\r\n    public intersectsBox(box: DeepImmutable<BoundingBox>, intersectionTreshold: number = 0): boolean {\r\n        return this.intersectsBoxMinMax(box.minimum, box.maximum, intersectionTreshold);\r\n    }\r\n\r\n    /**\r\n     * If the ray hits a sphere\r\n     * @param sphere the bounding sphere to check\r\n     * @param intersectionTreshold extra extend to be added to the BoundingSphere in all direction\r\n     * @returns true if it hits the sphere\r\n     */\r\n    public intersectsSphere(sphere: DeepImmutable<BoundingSphere>, intersectionTreshold: number = 0): boolean {\r\n        const x = sphere.center.x - this.origin.x;\r\n        const y = sphere.center.y - this.origin.y;\r\n        const z = sphere.center.z - this.origin.z;\r\n        const pyth = x * x + y * y + z * z;\r\n        const radius = sphere.radius + intersectionTreshold;\r\n        const rr = radius * radius;\r\n\r\n        if (pyth <= rr) {\r\n            return true;\r\n        }\r\n\r\n        const dot = x * this.direction.x + y * this.direction.y + z * this.direction.z;\r\n        if (dot < 0.0) {\r\n            return false;\r\n        }\r\n\r\n        const temp = pyth - dot * dot;\r\n\r\n        return temp <= rr;\r\n    }\r\n\r\n    /**\r\n     * If the ray hits a triange\r\n     * @param vertex0 triangle vertex\r\n     * @param vertex1 triangle vertex\r\n     * @param vertex2 triangle vertex\r\n     * @returns intersection information if hit\r\n     */\r\n    public intersectsTriangle(vertex0: DeepImmutable<Vector3>, vertex1: DeepImmutable<Vector3>, vertex2: DeepImmutable<Vector3>): Nullable<IntersectionInfo> {\r\n        const edge1 = Ray._TmpVector3[0];\r\n        const edge2 = Ray._TmpVector3[1];\r\n        const pvec = Ray._TmpVector3[2];\r\n        const tvec = Ray._TmpVector3[3];\r\n        const qvec = Ray._TmpVector3[4];\r\n\r\n        vertex1.subtractToRef(vertex0, edge1);\r\n        vertex2.subtractToRef(vertex0, edge2);\r\n        Vector3.CrossToRef(this.direction, edge2, pvec);\r\n        const det = Vector3.Dot(edge1, pvec);\r\n\r\n        if (det === 0) {\r\n            return null;\r\n        }\r\n\r\n        const invdet = 1 / det;\r\n\r\n        this.origin.subtractToRef(vertex0, tvec);\r\n\r\n        const bv = Vector3.Dot(tvec, pvec) * invdet;\r\n\r\n        if (bv < -this.epsilon || bv > 1.0 + this.epsilon) {\r\n            return null;\r\n        }\r\n\r\n        Vector3.CrossToRef(tvec, edge1, qvec);\r\n\r\n        const bw = Vector3.Dot(this.direction, qvec) * invdet;\r\n\r\n        if (bw < -this.epsilon || bv + bw > 1.0 + this.epsilon) {\r\n            return null;\r\n        }\r\n\r\n        //check if the distance is longer than the predefined length.\r\n        const distance = Vector3.Dot(edge2, qvec) * invdet;\r\n        if (distance > this.length) {\r\n            return null;\r\n        }\r\n\r\n        return new IntersectionInfo(1 - bv - bw, bv, distance);\r\n    }\r\n\r\n    /**\r\n     * Checks if ray intersects a plane\r\n     * @param plane the plane to check\r\n     * @returns the distance away it was hit\r\n     */\r\n    public intersectsPlane(plane: DeepImmutable<Plane>): Nullable<number> {\r\n        let distance: number;\r\n        const result1 = Vector3.Dot(plane.normal, this.direction);\r\n        if (Math.abs(result1) < 9.99999997475243e-7) {\r\n            return null;\r\n        } else {\r\n            const result2 = Vector3.Dot(plane.normal, this.origin);\r\n            distance = (-plane.d - result2) / result1;\r\n            if (distance < 0.0) {\r\n                if (distance < -9.99999997475243e-7) {\r\n                    return null;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }\r\n\r\n            return distance;\r\n        }\r\n    }\r\n    /**\r\n     * Calculate the intercept of a ray on a given axis\r\n     * @param axis to check 'x' | 'y' | 'z'\r\n     * @param offset from axis interception (i.e. an offset of 1y is intercepted above ground)\r\n     * @returns a vector containing the coordinates where 'axis' is equal to zero (else offset), or null if there is no intercept.\r\n     */\r\n    public intersectsAxis(axis: string, offset: number = 0): Nullable<Vector3> {\r\n        switch (axis) {\r\n            case \"y\": {\r\n                const t = (this.origin.y - offset) / this.direction.y;\r\n                if (t > 0) {\r\n                    return null;\r\n                }\r\n                return new Vector3(this.origin.x + this.direction.x * -t, offset, this.origin.z + this.direction.z * -t);\r\n            }\r\n            case \"x\": {\r\n                const t = (this.origin.x - offset) / this.direction.x;\r\n                if (t > 0) {\r\n                    return null;\r\n                }\r\n                return new Vector3(offset, this.origin.y + this.direction.y * -t, this.origin.z + this.direction.z * -t);\r\n            }\r\n            case \"z\": {\r\n                const t = (this.origin.z - offset) / this.direction.z;\r\n                if (t > 0) {\r\n                    return null;\r\n                }\r\n                return new Vector3(this.origin.x + this.direction.x * -t, this.origin.y + this.direction.y * -t, offset);\r\n            }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if ray intersects a mesh. The ray is defined in WORLD space. A mesh triangle can be picked both from its front and back sides,\r\n     * irrespective of orientation.\r\n     * @param mesh the mesh to check\r\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @param onlyBoundingInfo defines a boolean indicating if picking should only happen using bounding info (false by default)\r\n     * @param worldToUse defines the world matrix to use to get the world coordinate of the intersection point\r\n     * @param skipBoundingInfo a boolean indicating if we should skip the bounding info check\r\n     * @returns picking info of the intersection\r\n     */\r\n    public intersectsMesh(\r\n        mesh: DeepImmutable<AbstractMesh>,\r\n        fastCheck?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate,\r\n        onlyBoundingInfo = false,\r\n        worldToUse?: Matrix,\r\n        skipBoundingInfo = false\r\n    ): PickingInfo {\r\n        const tm = TmpVectors.Matrix[0];\r\n\r\n        mesh.getWorldMatrix().invertToRef(tm);\r\n\r\n        if (this._tmpRay) {\r\n            Ray.TransformToRef(this, tm, this._tmpRay);\r\n        } else {\r\n            this._tmpRay = Ray.Transform(this, tm);\r\n        }\r\n\r\n        return mesh.intersects(this._tmpRay, fastCheck, trianglePredicate, onlyBoundingInfo, worldToUse, skipBoundingInfo);\r\n    }\r\n\r\n    /**\r\n     * Checks if ray intersects a mesh\r\n     * @param meshes the meshes to check\r\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n     * @param results array to store result in\r\n     * @returns Array of picking infos\r\n     */\r\n    public intersectsMeshes(meshes: Array<DeepImmutable<AbstractMesh>>, fastCheck?: boolean, results?: Array<PickingInfo>): Array<PickingInfo> {\r\n        if (results) {\r\n            results.length = 0;\r\n        } else {\r\n            results = [];\r\n        }\r\n\r\n        for (let i = 0; i < meshes.length; i++) {\r\n            const pickInfo = this.intersectsMesh(meshes[i], fastCheck);\r\n\r\n            if (pickInfo.hit) {\r\n                results.push(pickInfo);\r\n            }\r\n        }\r\n\r\n        results.sort(this._comparePickingInfo);\r\n\r\n        return results;\r\n    }\r\n\r\n    private _comparePickingInfo(pickingInfoA: DeepImmutable<PickingInfo>, pickingInfoB: DeepImmutable<PickingInfo>): number {\r\n        if (pickingInfoA.distance < pickingInfoB.distance) {\r\n            return -1;\r\n        } else if (pickingInfoA.distance > pickingInfoB.distance) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    private static _Smallnum = 0.00000001;\r\n    private static _Rayl = 10e8;\r\n\r\n    /**\r\n     * Intersection test between the ray and a given segment within a given tolerance (threshold)\r\n     * @param sega the first point of the segment to test the intersection against\r\n     * @param segb the second point of the segment to test the intersection against\r\n     * @param threshold the tolerance margin, if the ray doesn't intersect the segment but is close to the given threshold, the intersection is successful\r\n     * @returns the distance from the ray origin to the intersection point if there's intersection, or -1 if there's no intersection\r\n     */\r\n    intersectionSegment(sega: DeepImmutable<Vector3>, segb: DeepImmutable<Vector3>, threshold: number): number {\r\n        const o = this.origin;\r\n        const u = TmpVectors.Vector3[0];\r\n        const rsegb = TmpVectors.Vector3[1];\r\n        const v = TmpVectors.Vector3[2];\r\n        const w = TmpVectors.Vector3[3];\r\n\r\n        segb.subtractToRef(sega, u);\r\n\r\n        this.direction.scaleToRef(Ray._Rayl, v);\r\n        o.addToRef(v, rsegb);\r\n\r\n        sega.subtractToRef(o, w);\r\n\r\n        const a = Vector3.Dot(u, u); // always >= 0\r\n        const b = Vector3.Dot(u, v);\r\n        const c = Vector3.Dot(v, v); // always >= 0\r\n        const d = Vector3.Dot(u, w);\r\n        const e = Vector3.Dot(v, w);\r\n        const D = a * c - b * b; // always >= 0\r\n        let sN: number,\r\n            sD = D; // sc = sN / sD, default sD = D >= 0\r\n        let tN: number,\r\n            tD = D; // tc = tN / tD, default tD = D >= 0\r\n\r\n        // compute the line parameters of the two closest points\r\n        if (D < Ray._Smallnum) {\r\n            // the lines are almost parallel\r\n            sN = 0.0; // force using point P0 on segment S1\r\n            sD = 1.0; // to prevent possible division by 0.0 later\r\n            tN = e;\r\n            tD = c;\r\n        } else {\r\n            // get the closest points on the infinite lines\r\n            sN = b * e - c * d;\r\n            tN = a * e - b * d;\r\n            if (sN < 0.0) {\r\n                // sc < 0 => the s=0 edge is visible\r\n                sN = 0.0;\r\n                tN = e;\r\n                tD = c;\r\n            } else if (sN > sD) {\r\n                // sc > 1 => the s=1 edge is visible\r\n                sN = sD;\r\n                tN = e + b;\r\n                tD = c;\r\n            }\r\n        }\r\n\r\n        if (tN < 0.0) {\r\n            // tc < 0 => the t=0 edge is visible\r\n            tN = 0.0;\r\n            // recompute sc for this edge\r\n            if (-d < 0.0) {\r\n                sN = 0.0;\r\n            } else if (-d > a) {\r\n                sN = sD;\r\n            } else {\r\n                sN = -d;\r\n                sD = a;\r\n            }\r\n        } else if (tN > tD) {\r\n            // tc > 1 => the t=1 edge is visible\r\n            tN = tD;\r\n            // recompute sc for this edge\r\n            if (-d + b < 0.0) {\r\n                sN = 0;\r\n            } else if (-d + b > a) {\r\n                sN = sD;\r\n            } else {\r\n                sN = -d + b;\r\n                sD = a;\r\n            }\r\n        }\r\n        // finally do the division to get sc and tc\r\n        const sc = Math.abs(sN) < Ray._Smallnum ? 0.0 : sN / sD;\r\n        const tc = Math.abs(tN) < Ray._Smallnum ? 0.0 : tN / tD;\r\n\r\n        // get the difference of the two closest points\r\n        const qtc = TmpVectors.Vector3[4];\r\n        v.scaleToRef(tc, qtc);\r\n        const qsc = TmpVectors.Vector3[5];\r\n        u.scaleToRef(sc, qsc);\r\n        qsc.addInPlace(w);\r\n        const dP = TmpVectors.Vector3[6];\r\n        qsc.subtractToRef(qtc, dP); // = S1(sc) - S2(tc)\r\n\r\n        const isIntersected = tc > 0 && tc <= this.length && dP.lengthSquared() < threshold * threshold; // return intersection result\r\n\r\n        if (isIntersected) {\r\n            return qsc.length();\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Update the ray from viewport position\r\n     * @param x position\r\n     * @param y y position\r\n     * @param viewportWidth viewport width\r\n     * @param viewportHeight viewport height\r\n     * @param world world matrix\r\n     * @param view view matrix\r\n     * @param projection projection matrix\r\n     * @param enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\r\n     * @returns this ray updated\r\n     */\r\n    public update(\r\n        x: number,\r\n        y: number,\r\n        viewportWidth: number,\r\n        viewportHeight: number,\r\n        world: DeepImmutable<Matrix>,\r\n        view: DeepImmutable<Matrix>,\r\n        projection: DeepImmutable<Matrix>,\r\n        enableDistantPicking: boolean = false\r\n    ): Ray {\r\n        if (enableDistantPicking) {\r\n            // With world matrices having great values (like 8000000000 on 1 or more scaling or position axis),\r\n            // multiplying view/projection/world and doing invert will result in loss of float precision in the matrix.\r\n            // One way to fix it is to compute the ray with world at identity then transform the ray in object space.\r\n            // This is slower (2 matrix inverts instead of 1) but precision is preserved.\r\n            // This is hidden behind `EnableDistantPicking` flag (default is false)\r\n            if (!Ray._RayDistant) {\r\n                Ray._RayDistant = Ray.Zero();\r\n            }\r\n\r\n            Ray._RayDistant.unprojectRayToRef(x, y, viewportWidth, viewportHeight, Matrix.IdentityReadOnly, view, projection);\r\n\r\n            const tm = TmpVectors.Matrix[0];\r\n            world.invertToRef(tm);\r\n            Ray.TransformToRef(Ray._RayDistant, tm, this);\r\n        } else {\r\n            this.unprojectRayToRef(x, y, viewportWidth, viewportHeight, world, view, projection);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a ray with origin and direction of 0,0,0\r\n     * @returns the new ray\r\n     */\r\n    public static Zero(): Ray {\r\n        return new Ray(Vector3.Zero(), Vector3.Zero());\r\n    }\r\n\r\n    /**\r\n     * Creates a new ray from screen space and viewport\r\n     * @param x position\r\n     * @param y y position\r\n     * @param viewportWidth viewport width\r\n     * @param viewportHeight viewport height\r\n     * @param world world matrix\r\n     * @param view view matrix\r\n     * @param projection projection matrix\r\n     * @returns new ray\r\n     */\r\n    public static CreateNew(\r\n        x: number,\r\n        y: number,\r\n        viewportWidth: number,\r\n        viewportHeight: number,\r\n        world: DeepImmutable<Matrix>,\r\n        view: DeepImmutable<Matrix>,\r\n        projection: DeepImmutable<Matrix>\r\n    ): Ray {\r\n        const result = Ray.Zero();\r\n\r\n        return result.update(x, y, viewportWidth, viewportHeight, world, view, projection);\r\n    }\r\n\r\n    /**\r\n     * Function will create a new transformed ray starting from origin and ending at the end point. Ray's length will be set, and ray will be\r\n     * transformed to the given world matrix.\r\n     * @param origin The origin point\r\n     * @param end The end point\r\n     * @param world a matrix to transform the ray to. Default is the identity matrix.\r\n     * @returns the new ray\r\n     */\r\n    public static CreateNewFromTo(origin: Vector3, end: Vector3, world: DeepImmutable<Matrix> = Matrix.IdentityReadOnly): Ray {\r\n        const result = new Ray(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\r\n        return Ray.CreateFromToToRef(origin, end, result, world);\r\n    }\r\n\r\n    /**\r\n     * Function will update a transformed ray starting from origin and ending at the end point. Ray's length will be set, and ray will be\r\n     * transformed to the given world matrix.\r\n     * @param origin The origin point\r\n     * @param end The end point\r\n     * @param result the object to store the result\r\n     * @param world a matrix to transform the ray to. Default is the identity matrix.\r\n     * @returns the ref ray\r\n     */\r\n    public static CreateFromToToRef(origin: Vector3, end: Vector3, result: Ray, world: DeepImmutable<Matrix> = Matrix.IdentityReadOnly): Ray {\r\n        result.origin.copyFrom(origin);\r\n        const direction = end.subtractToRef(origin, result.direction);\r\n        const length = Math.sqrt(direction.x * direction.x + direction.y * direction.y + direction.z * direction.z);\r\n        result.length = length;\r\n        result.direction.normalize();\r\n\r\n        return Ray.TransformToRef(result, world, result);\r\n    }\r\n\r\n    /**\r\n     * Transforms a ray by a matrix\r\n     * @param ray ray to transform\r\n     * @param matrix matrix to apply\r\n     * @returns the resulting new ray\r\n     */\r\n    public static Transform(ray: DeepImmutable<Ray>, matrix: DeepImmutable<Matrix>): Ray {\r\n        const result = new Ray(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\r\n        Ray.TransformToRef(ray, matrix, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Transforms a ray by a matrix\r\n     * @param ray ray to transform\r\n     * @param matrix matrix to apply\r\n     * @param result ray to store result in\r\n     * @returns the updated result ray\r\n     */\r\n    public static TransformToRef(ray: DeepImmutable<Ray>, matrix: DeepImmutable<Matrix>, result: Ray): Ray {\r\n        Vector3.TransformCoordinatesToRef(ray.origin, matrix, result.origin);\r\n        Vector3.TransformNormalToRef(ray.direction, matrix, result.direction);\r\n        result.length = ray.length;\r\n        result.epsilon = ray.epsilon;\r\n\r\n        const dir = result.direction;\r\n        const len = dir.length();\r\n\r\n        if (!(len === 0 || len === 1)) {\r\n            const num = 1.0 / len;\r\n            dir.x *= num;\r\n            dir.y *= num;\r\n            dir.z *= num;\r\n            result.length *= len;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Unproject a ray from screen space to object space\r\n     * @param sourceX defines the screen space x coordinate to use\r\n     * @param sourceY defines the screen space y coordinate to use\r\n     * @param viewportWidth defines the current width of the viewport\r\n     * @param viewportHeight defines the current height of the viewport\r\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n     * @param view defines the view matrix to use\r\n     * @param projection defines the projection matrix to use\r\n     */\r\n    public unprojectRayToRef(\r\n        sourceX: float,\r\n        sourceY: float,\r\n        viewportWidth: number,\r\n        viewportHeight: number,\r\n        world: DeepImmutable<Matrix>,\r\n        view: DeepImmutable<Matrix>,\r\n        projection: DeepImmutable<Matrix>\r\n    ): void {\r\n        const matrix = TmpVectors.Matrix[0];\r\n        world.multiplyToRef(view, matrix);\r\n        matrix.multiplyToRef(projection, matrix);\r\n        matrix.invert();\r\n\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        const nearScreenSource = TmpVectors.Vector3[0];\r\n        nearScreenSource.x = (sourceX / viewportWidth) * 2 - 1;\r\n        nearScreenSource.y = -((sourceY / viewportHeight) * 2 - 1);\r\n        nearScreenSource.z = engine?.useReverseDepthBuffer ? 1 : engine?.isNDCHalfZRange ? 0 : -1;\r\n\r\n        // far Z need to be close but < to 1 or camera projection matrix with maxZ = 0 will NaN\r\n        const farScreenSource = TmpVectors.Vector3[1].copyFromFloats(nearScreenSource.x, nearScreenSource.y, 1.0 - 1e-8);\r\n        const nearVec3 = TmpVectors.Vector3[2];\r\n        const farVec3 = TmpVectors.Vector3[3];\r\n        Vector3._UnprojectFromInvertedMatrixToRef(nearScreenSource, matrix, nearVec3);\r\n        Vector3._UnprojectFromInvertedMatrixToRef(farScreenSource, matrix, farVec3);\r\n\r\n        this.origin.copyFrom(nearVec3);\r\n        farVec3.subtractToRef(nearVec3, this.direction);\r\n        this.direction.normalize();\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a ray that can be used to pick in the scene\r\n * @param scene defines the scene to use for the picking\r\n * @param x defines the x coordinate of the origin (on-screen)\r\n * @param y defines the y coordinate of the origin (on-screen)\r\n * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\r\n * @param camera defines the camera to use for the picking\r\n * @param cameraViewSpace defines if picking will be done in view space (false by default)\r\n * @returns a Ray\r\n */\r\nexport function CreatePickingRay(scene: Scene, x: number, y: number, world: Nullable<Matrix>, camera: Nullable<Camera>, cameraViewSpace = false): Ray {\r\n    const result = Ray.Zero();\r\n\r\n    CreatePickingRayToRef(scene, x, y, world, result, camera, cameraViewSpace);\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Creates a ray that can be used to pick in the scene\r\n * @param scene defines the scene to use for the picking\r\n * @param x defines the x coordinate of the origin (on-screen)\r\n * @param y defines the y coordinate of the origin (on-screen)\r\n * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\r\n * @param result defines the ray where to store the picking ray\r\n * @param camera defines the camera to use for the picking\r\n * @param cameraViewSpace defines if picking will be done in view space (false by default)\r\n * @param enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\r\n * @returns the current scene\r\n */\r\nexport function CreatePickingRayToRef(\r\n    scene: Scene,\r\n    x: number,\r\n    y: number,\r\n    world: Nullable<Matrix>,\r\n    result: Ray,\r\n    camera: Nullable<Camera>,\r\n    cameraViewSpace = false,\r\n    enableDistantPicking = false\r\n): Scene {\r\n    const engine = scene.getEngine();\r\n\r\n    if (!camera && !(camera = scene.activeCamera!)) {\r\n        return scene;\r\n    }\r\n\r\n    const cameraViewport = camera.viewport;\r\n    const renderHeight = engine.getRenderHeight();\r\n    const { x: vx, y: vy, width, height } = cameraViewport.toGlobal(engine.getRenderWidth(), renderHeight);\r\n\r\n    // Moving coordinates to local viewport world\r\n    const levelInv = 1 / engine.getHardwareScalingLevel();\r\n    x = x * levelInv - vx;\r\n    y = y * levelInv - (renderHeight - vy - height);\r\n\r\n    result.update(\r\n        x,\r\n        y,\r\n        width,\r\n        height,\r\n        world ? world : Matrix.IdentityReadOnly,\r\n        cameraViewSpace ? Matrix.IdentityReadOnly : camera.getViewMatrix(),\r\n        camera.getProjectionMatrix(),\r\n        enableDistantPicking\r\n    );\r\n    return scene;\r\n}\r\n\r\n/**\r\n * Creates a ray that can be used to pick in the scene\r\n * @param scene defines the scene to use for the picking\r\n * @param x defines the x coordinate of the origin (on-screen)\r\n * @param y defines the y coordinate of the origin (on-screen)\r\n * @param camera defines the camera to use for the picking\r\n * @returns a Ray\r\n */\r\nexport function CreatePickingRayInCameraSpace(scene: Scene, x: number, y: number, camera?: Camera): Ray {\r\n    const result = Ray.Zero();\r\n\r\n    CreatePickingRayInCameraSpaceToRef(scene, x, y, result, camera);\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Creates a ray that can be used to pick in the scene\r\n * @param scene defines the scene to use for the picking\r\n * @param x defines the x coordinate of the origin (on-screen)\r\n * @param y defines the y coordinate of the origin (on-screen)\r\n * @param result defines the ray where to store the picking ray\r\n * @param camera defines the camera to use for the picking\r\n * @returns the current scene\r\n */\r\nexport function CreatePickingRayInCameraSpaceToRef(scene: Scene, x: number, y: number, result: Ray, camera?: Camera): Scene {\r\n    if (!PickingInfo) {\r\n        return scene;\r\n    }\r\n\r\n    const engine = scene.getEngine();\r\n\r\n    if (!camera && !(camera = scene.activeCamera!)) {\r\n        throw new Error(\"Active camera not set\");\r\n    }\r\n\r\n    const cameraViewport = camera.viewport;\r\n    const renderHeight = engine.getRenderHeight();\r\n    const { x: vx, y: vy, width, height } = cameraViewport.toGlobal(engine.getRenderWidth(), renderHeight);\r\n    const identity = Matrix.Identity();\r\n\r\n    // Moving coordinates to local viewport world\r\n    const levelInv = 1 / engine.getHardwareScalingLevel();\r\n    x = x * levelInv - vx;\r\n    y = y * levelInv - (renderHeight - vy - height);\r\n    result.update(x, y, width, height, identity, identity, camera.getProjectionMatrix());\r\n    return scene;\r\n}\r\n\r\nfunction InternalPickForMesh(\r\n    pickingInfo: Nullable<PickingInfo>,\r\n    rayFunction: (world: Matrix, enableDistantPicking: boolean) => Ray,\r\n    mesh: AbstractMesh,\r\n    world: Matrix,\r\n    fastCheck?: boolean,\r\n    onlyBoundingInfo?: boolean,\r\n    trianglePredicate?: TrianglePickingPredicate,\r\n    skipBoundingInfo?: boolean\r\n) {\r\n    const ray = rayFunction(world, mesh.enableDistantPicking);\r\n\r\n    const result = mesh.intersects(ray, fastCheck, trianglePredicate, onlyBoundingInfo, world, skipBoundingInfo);\r\n    if (!result || !result.hit) {\r\n        return null;\r\n    }\r\n\r\n    if (!fastCheck && pickingInfo != null && result.distance >= pickingInfo.distance) {\r\n        return null;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction InternalPick(\r\n    scene: Scene,\r\n    rayFunction: (world: Matrix, enableDistantPicking: boolean) => Ray,\r\n    predicate?: MeshPredicate,\r\n    fastCheck?: boolean,\r\n    onlyBoundingInfo?: boolean,\r\n    trianglePredicate?: TrianglePickingPredicate\r\n): PickingInfo {\r\n    let pickingInfo = null;\r\n\r\n    const computeWorldMatrixForCamera = !!(scene.activeCameras && scene.activeCameras.length > 1 && scene.cameraToUseForPointers !== scene.activeCamera);\r\n    const currentCamera = scene.cameraToUseForPointers || scene.activeCamera;\r\n    const picker = PickingCustomization.internalPickerForMesh || InternalPickForMesh;\r\n\r\n    for (let meshIndex = 0; meshIndex < scene.meshes.length; meshIndex++) {\r\n        const mesh = scene.meshes[meshIndex];\r\n\r\n        if (predicate) {\r\n            if (!predicate(mesh, -1)) {\r\n                continue;\r\n            }\r\n        } else if (!mesh.isEnabled() || !mesh.isVisible || !mesh.isPickable) {\r\n            continue;\r\n        }\r\n\r\n        const forceCompute = computeWorldMatrixForCamera && mesh.isWorldMatrixCameraDependent();\r\n        const world = mesh.computeWorldMatrix(forceCompute, currentCamera);\r\n\r\n        if (mesh.hasThinInstances && (mesh as Mesh).thinInstanceEnablePicking) {\r\n            // first check if the ray intersects the whole bounding box/sphere of the mesh\r\n            const result = picker(pickingInfo, rayFunction, mesh, world, true, true, trianglePredicate);\r\n            if (result) {\r\n                if (onlyBoundingInfo) {\r\n                    // the user only asked for a bounding info check so we can return\r\n                    return result;\r\n                }\r\n                const tmpMatrix = TmpVectors.Matrix[1];\r\n                const thinMatrices = (mesh as Mesh).thinInstanceGetWorldMatrices();\r\n                for (let index = 0; index < thinMatrices.length; index++) {\r\n                    if (predicate && !predicate(mesh, index)) {\r\n                        continue;\r\n                    }\r\n                    const thinMatrix = thinMatrices[index];\r\n                    thinMatrix.multiplyToRef(world, tmpMatrix);\r\n                    const result = picker(pickingInfo, rayFunction, mesh, tmpMatrix, fastCheck, onlyBoundingInfo, trianglePredicate, true);\r\n\r\n                    if (result) {\r\n                        pickingInfo = result;\r\n                        pickingInfo.thinInstanceIndex = index;\r\n\r\n                        if (fastCheck) {\r\n                            return pickingInfo;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            const result = picker(pickingInfo, rayFunction, mesh, world, fastCheck, onlyBoundingInfo, trianglePredicate);\r\n\r\n            if (result) {\r\n                pickingInfo = result;\r\n\r\n                if (fastCheck) {\r\n                    return pickingInfo;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return pickingInfo || new PickingInfo();\r\n}\r\n\r\nfunction InternalMultiPick(\r\n    scene: Scene,\r\n    rayFunction: (world: Matrix, enableDistantPicking: boolean) => Ray,\r\n    predicate?: MeshPredicate,\r\n    trianglePredicate?: TrianglePickingPredicate\r\n): Nullable<PickingInfo[]> {\r\n    if (!PickingInfo) {\r\n        return null;\r\n    }\r\n    const pickingInfos: PickingInfo[] = [];\r\n    const computeWorldMatrixForCamera = !!(scene.activeCameras && scene.activeCameras.length > 1 && scene.cameraToUseForPointers !== scene.activeCamera);\r\n    const currentCamera = scene.cameraToUseForPointers || scene.activeCamera;\r\n    const picker = PickingCustomization.internalPickerForMesh || InternalPickForMesh;\r\n\r\n    for (let meshIndex = 0; meshIndex < scene.meshes.length; meshIndex++) {\r\n        const mesh = scene.meshes[meshIndex];\r\n\r\n        if (predicate) {\r\n            if (!predicate(mesh, -1)) {\r\n                continue;\r\n            }\r\n        } else if (!mesh.isEnabled() || !mesh.isVisible || !mesh.isPickable) {\r\n            continue;\r\n        }\r\n\r\n        const forceCompute = computeWorldMatrixForCamera && mesh.isWorldMatrixCameraDependent();\r\n        const world = mesh.computeWorldMatrix(forceCompute, currentCamera);\r\n\r\n        if (mesh.hasThinInstances && (mesh as Mesh).thinInstanceEnablePicking) {\r\n            const result = picker(null, rayFunction, mesh, world, true, true, trianglePredicate);\r\n            if (result) {\r\n                const tmpMatrix = TmpVectors.Matrix[1];\r\n                const thinMatrices = (mesh as Mesh).thinInstanceGetWorldMatrices();\r\n                for (let index = 0; index < thinMatrices.length; index++) {\r\n                    if (predicate && !predicate(mesh, index)) {\r\n                        continue;\r\n                    }\r\n                    const thinMatrix = thinMatrices[index];\r\n                    thinMatrix.multiplyToRef(world, tmpMatrix);\r\n                    const result = picker(null, rayFunction, mesh, tmpMatrix, false, false, trianglePredicate, true);\r\n\r\n                    if (result) {\r\n                        result.thinInstanceIndex = index;\r\n                        pickingInfos.push(result);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            const result = picker(null, rayFunction, mesh, world, false, false, trianglePredicate);\r\n\r\n            if (result) {\r\n                pickingInfos.push(result);\r\n            }\r\n        }\r\n    }\r\n\r\n    return pickingInfos;\r\n}\r\n\r\n/** Launch a ray to try to pick a mesh in the scene using only bounding information of the main mesh (not using submeshes)\r\n * @param scene defines the scene to use for the picking\r\n * @param x position on screen\r\n * @param y position on screen\r\n * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\r\n * @returns a PickingInfo (Please note that some info will not be set like distance, bv, bu and everything that cannot be capture by only using bounding infos)\r\n */\r\nexport function PickWithBoundingInfo(scene: Scene, x: number, y: number, predicate?: MeshPredicate, fastCheck?: boolean, camera?: Nullable<Camera>): Nullable<PickingInfo> {\r\n    if (!PickingInfo) {\r\n        return null;\r\n    }\r\n    const result = InternalPick(\r\n        scene,\r\n        (world) => {\r\n            if (!scene._tempPickingRay) {\r\n                scene._tempPickingRay = Ray.Zero();\r\n            }\r\n\r\n            CreatePickingRayToRef(scene, x, y, world, scene._tempPickingRay, camera || null);\r\n            return scene._tempPickingRay;\r\n        },\r\n        predicate,\r\n        fastCheck,\r\n        true\r\n    );\r\n    if (result) {\r\n        result.ray = CreatePickingRay(scene, x, y, Matrix.Identity(), camera || null);\r\n    }\r\n    return result;\r\n}\r\n\r\n/** Launch a ray to try to pick a mesh in the scene\r\n * @param scene defines the scene to use for the picking\r\n * @param x position on screen\r\n * @param y position on screen\r\n * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\r\n * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n * @param _enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\r\n * @returns a PickingInfo\r\n */\r\nexport function Pick(\r\n    scene: Scene,\r\n    x: number,\r\n    y: number,\r\n    predicate?: MeshPredicate,\r\n    fastCheck?: boolean,\r\n    camera?: Nullable<Camera>,\r\n    trianglePredicate?: TrianglePickingPredicate,\r\n    _enableDistantPicking = false\r\n): PickingInfo {\r\n    const result = InternalPick(\r\n        scene,\r\n        (world, enableDistantPicking) => {\r\n            if (!scene._tempPickingRay) {\r\n                scene._tempPickingRay = Ray.Zero();\r\n            }\r\n\r\n            CreatePickingRayToRef(scene, x, y, world, scene._tempPickingRay, camera || null, false, enableDistantPicking);\r\n            return scene._tempPickingRay;\r\n        },\r\n        predicate,\r\n        fastCheck,\r\n        false,\r\n        trianglePredicate\r\n    );\r\n    if (result) {\r\n        result.ray = CreatePickingRay(scene, x, y, Matrix.Identity(), camera || null);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Use the given ray to pick a mesh in the scene. A mesh triangle can be picked both from its front and back sides,\r\n * irrespective of orientation.\r\n * @param scene defines the scene to use for the picking\r\n * @param ray The ray to use to pick meshes\r\n * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must have isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n * @returns a PickingInfo\r\n */\r\nexport function PickWithRay(scene: Scene, ray: Ray, predicate?: MeshPredicate, fastCheck?: boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo> {\r\n    const result = InternalPick(\r\n        scene,\r\n        (world) => {\r\n            if (!scene._pickWithRayInverseMatrix) {\r\n                scene._pickWithRayInverseMatrix = Matrix.Identity();\r\n            }\r\n            world.invertToRef(scene._pickWithRayInverseMatrix);\r\n\r\n            if (!scene._cachedRayForTransform) {\r\n                scene._cachedRayForTransform = Ray.Zero();\r\n            }\r\n\r\n            Ray.TransformToRef(ray, scene._pickWithRayInverseMatrix, scene._cachedRayForTransform);\r\n            return scene._cachedRayForTransform;\r\n        },\r\n        predicate,\r\n        fastCheck,\r\n        false,\r\n        trianglePredicate\r\n    );\r\n    if (result) {\r\n        result.ray = ray;\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Launch a ray to try to pick a mesh in the scene. A mesh triangle can be picked both from its front and back sides,\r\n * irrespective of orientation.\r\n * @param scene defines the scene to use for the picking\r\n * @param x X position on screen\r\n * @param y Y position on screen\r\n * @param predicate Predicate function used to determine eligible meshes and instances. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n * @param camera camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\r\n * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n * @returns an array of PickingInfo\r\n */\r\nexport function MultiPick(scene: Scene, x: number, y: number, predicate?: MeshPredicate, camera?: Camera, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\r\n    return InternalMultiPick(scene, (world) => CreatePickingRay(scene, x, y, world, camera || null), predicate, trianglePredicate);\r\n}\r\n\r\n/**\r\n * Launch a ray to try to pick a mesh in the scene\r\n * @param scene defines the scene to use for the picking\r\n * @param ray Ray to use\r\n * @param predicate Predicate function used to determine eligible meshes and instances. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n * @returns an array of PickingInfo\r\n */\r\nexport function MultiPickWithRay(scene: Scene, ray: Ray, predicate?: MeshPredicate, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\r\n    return InternalMultiPick(\r\n        scene,\r\n        (world) => {\r\n            if (!scene._pickWithRayInverseMatrix) {\r\n                scene._pickWithRayInverseMatrix = Matrix.Identity();\r\n            }\r\n            world.invertToRef(scene._pickWithRayInverseMatrix);\r\n\r\n            if (!scene._cachedRayForTransform) {\r\n                scene._cachedRayForTransform = Ray.Zero();\r\n            }\r\n\r\n            Ray.TransformToRef(ray, scene._pickWithRayInverseMatrix, scene._cachedRayForTransform);\r\n            return scene._cachedRayForTransform;\r\n        },\r\n        predicate,\r\n        trianglePredicate\r\n    );\r\n}\r\n\r\n/**\r\n * Gets a ray in the forward direction from the camera.\r\n * @param camera Defines the camera to use to get the ray from\r\n * @param length Defines the length of the ray to create\r\n * @param transform Defines the transform to apply to the ray, by default the world matrix is used to create a workd space ray\r\n * @param origin Defines the start point of the ray which defaults to the camera position\r\n * @returns the forward ray\r\n */\r\nexport function GetForwardRay(camera: Camera, length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n    return GetForwardRayToRef(camera, new Ray(Vector3.Zero(), Vector3.Zero(), length), length, transform, origin);\r\n}\r\n\r\n/**\r\n * Gets a ray in the forward direction from the camera.\r\n * @param camera Defines the camera to use to get the ray from\r\n * @param refRay the ray to (re)use when setting the values\r\n * @param length Defines the length of the ray to create\r\n * @param transform Defines the transform to apply to the ray, by default the world matrx is used to create a workd space ray\r\n * @param origin Defines the start point of the ray which defaults to the camera position\r\n * @returns the forward ray\r\n */\r\nexport function GetForwardRayToRef(camera: Camera, refRay: Ray, length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n    if (!transform) {\r\n        transform = camera.getWorldMatrix();\r\n    }\r\n    refRay.length = length;\r\n\r\n    if (origin) {\r\n        refRay.origin.copyFrom(origin);\r\n    } else {\r\n        refRay.origin.copyFrom(camera.position);\r\n    }\r\n    const forward = TmpVectors.Vector3[2];\r\n    forward.set(0, 0, camera._scene.useRightHandedSystem ? -1 : 1);\r\n    const worldForward = TmpVectors.Vector3[3];\r\n    Vector3.TransformNormalToRef(forward, transform, worldForward);\r\n    Vector3.NormalizeToRef(worldForward, refRay.direction);\r\n\r\n    return refRay;\r\n}\r\n\r\n/**\r\n * Initialize the minimal interdependecies between the Ray and Scene and Camera\r\n * @param sceneClass defines the scene prototype to use\r\n * @param cameraClass defines the camera prototype to use\r\n */\r\nexport function AddRayExtensions(sceneClass: typeof Scene, cameraClass: typeof Camera): void {\r\n    if (cameraClass) {\r\n        cameraClass.prototype.getForwardRay = function (length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n            return GetForwardRayToRef(this, new Ray(Vector3.Zero(), Vector3.Zero(), length), length, transform, origin);\r\n        };\r\n\r\n        cameraClass.prototype.getForwardRayToRef = function (refRay: Ray, length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n            return GetForwardRayToRef(this, refRay, length, transform, origin);\r\n        };\r\n    }\r\n\r\n    if (!sceneClass) {\r\n        return;\r\n    }\r\n\r\n    _ImportHelper._IsPickingAvailable = true;\r\n\r\n    sceneClass.prototype.createPickingRay = function (x: number, y: number, world: Nullable<Matrix>, camera: Nullable<Camera>, cameraViewSpace = false): Ray {\r\n        return CreatePickingRay(this, x, y, world, camera, cameraViewSpace);\r\n    };\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport type { PickingInfo } from \"../Collisions/pickingInfo\";\r\n\r\nimport { Scene } from \"../scene\";\r\nimport { Camera } from \"../Cameras/camera\";\r\n\r\nimport type { MeshPredicate, TrianglePickingPredicate, Ray } from \"./ray.core\";\r\nimport {\r\n    AddRayExtensions,\r\n    CreatePickingRayInCameraSpace,\r\n    CreatePickingRayInCameraSpaceToRef,\r\n    CreatePickingRayToRef,\r\n    MultiPick,\r\n    MultiPickWithRay,\r\n    Pick,\r\n    PickWithBoundingInfo,\r\n    PickWithRay,\r\n} from \"./ray.core\";\r\n\r\nexport * from \"./ray.core\";\r\n\r\n// Picking\r\nAddRayExtensions(Scene, Camera);\r\n\r\nScene.prototype.createPickingRayToRef = function (\r\n    x: number,\r\n    y: number,\r\n    world: Nullable<Matrix>,\r\n    result: Ray,\r\n    camera: Nullable<Camera>,\r\n    cameraViewSpace = false,\r\n    enableDistantPicking = false\r\n): Scene {\r\n    return CreatePickingRayToRef(this, x, y, world, result, camera, cameraViewSpace, enableDistantPicking);\r\n};\r\n\r\nScene.prototype.createPickingRayInCameraSpace = function (x: number, y: number, camera?: Camera): Ray {\r\n    return CreatePickingRayInCameraSpace(this, x, y, camera);\r\n};\r\n\r\nScene.prototype.createPickingRayInCameraSpaceToRef = function (x: number, y: number, result: Ray, camera?: Camera): Scene {\r\n    return CreatePickingRayInCameraSpaceToRef(this, x, y, result, camera);\r\n};\r\n\r\nScene.prototype.pickWithBoundingInfo = function (x: number, y: number, predicate?: MeshPredicate, fastCheck?: boolean, camera?: Nullable<Camera>): Nullable<PickingInfo> {\r\n    return PickWithBoundingInfo(this, x, y, predicate, fastCheck, camera);\r\n};\r\n\r\nScene.prototype.pick = function (\r\n    x: number,\r\n    y: number,\r\n    predicate?: MeshPredicate,\r\n    fastCheck?: boolean,\r\n    camera?: Nullable<Camera>,\r\n    trianglePredicate?: TrianglePickingPredicate,\r\n    _enableDistantPicking = false\r\n): PickingInfo {\r\n    return Pick(this, x, y, predicate, fastCheck, camera, trianglePredicate, _enableDistantPicking);\r\n};\r\n\r\nScene.prototype.pickWithRay = function (ray: Ray, predicate?: MeshPredicate, fastCheck?: boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo> {\r\n    return PickWithRay(this, ray, predicate, fastCheck, trianglePredicate);\r\n};\r\n\r\nScene.prototype.multiPick = function (x: number, y: number, predicate?: MeshPredicate, camera?: Camera, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\r\n    return MultiPick(this, x, y, predicate, camera, trianglePredicate);\r\n};\r\n\r\nScene.prototype.multiPickWithRay = function (ray: Ray, predicate?: MeshPredicate, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\r\n    return MultiPickWithRay(this, ray, predicate, trianglePredicate);\r\n};\r\n", "import type { Behavior } from \"../../Behaviors/behavior\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { TmpVectors, Vector3 } from \"../../Maths/math.vector\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport { PivotTools } from \"../../Misc/pivotTools\";\r\nimport type { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { CreatePlane } from \"../../Meshes/Builders/planeBuilder\";\r\n\r\nimport type { IPointerEvent } from \"../../Events/deviceInputEvents\";\r\nimport { Epsilon } from \"../../Maths/math.constants\";\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to be dragged around the screen based on pointer events\r\n */\r\nexport class PointerDragBehavior implements Behavior<AbstractMesh> {\r\n    private static _AnyMouseId = -2;\r\n    /**\r\n     * Abstract mesh the behavior is set on\r\n     */\r\n    public attachedNode: AbstractMesh;\r\n    protected _dragPlane: Mesh;\r\n    private _scene: Scene;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _beforeRenderObserver: Nullable<Observer<Scene>>;\r\n    private static _PlaneScene: Scene;\r\n    private _useAlternatePickedPointAboveMaxDragAngleDragSpeed = -1.1;\r\n    private _activeDragButton: number = -1;\r\n    private _activePointerInfo: Nullable<PointerInfo>;\r\n    /**\r\n     * The maximum tolerated angle between the drag plane and dragging pointer rays to trigger pointer events. Set to 0 to allow any angle (default: 0)\r\n     */\r\n    public maxDragAngle = 0;\r\n    /**\r\n     * Butttons that can be used to initiate a drag\r\n     */\r\n    public dragButtons = [0, 1, 2];\r\n    /**\r\n     * @internal\r\n     */\r\n    public _useAlternatePickedPointAboveMaxDragAngle = false;\r\n    /**\r\n     * Get or set the currentDraggingPointerId\r\n     * @deprecated Please use currentDraggingPointerId instead\r\n     */\r\n    public get currentDraggingPointerID(): number {\r\n        return this.currentDraggingPointerId;\r\n    }\r\n    public set currentDraggingPointerID(currentDraggingPointerID: number) {\r\n        this.currentDraggingPointerId = currentDraggingPointerID;\r\n    }\r\n    /**\r\n     * The id of the pointer that is currently interacting with the behavior (-1 when no pointer is active)\r\n     */\r\n    public currentDraggingPointerId = -1;\r\n    /**\r\n     * The last position where the pointer hit the drag plane in world space\r\n     */\r\n    public lastDragPosition: Vector3;\r\n    /**\r\n     * If the behavior is currently in a dragging state\r\n     */\r\n    public dragging = false;\r\n    /**\r\n     * The distance towards the target drag position to move each frame. This can be useful to avoid jitter. Set this to 1 for no delay. (Default: 0.2)\r\n     */\r\n    public dragDeltaRatio = 0.2;\r\n    /**\r\n     * If the drag plane orientation should be updated during the dragging (Default: true)\r\n     */\r\n    public updateDragPlane = true;\r\n    // Debug mode will display drag planes to help visualize behavior\r\n    private _debugMode = false;\r\n    private _moving = false;\r\n    /**\r\n     *  Fires each time the attached mesh is dragged with the pointer\r\n     *  * delta between last drag position and current drag position in world space\r\n     *  * dragDistance along the drag axis\r\n     *  * dragPlaneNormal normal of the current drag plane used during the drag\r\n     *  * dragPlanePoint in world space where the drag intersects the drag plane\r\n     *\r\n     *  (if validatedDrag is used, the position of the attached mesh might not equal dragPlanePoint)\r\n     */\r\n    public onDragObservable = new Observable<{\r\n        delta: Vector3;\r\n        dragPlanePoint: Vector3;\r\n        dragPlaneNormal: Vector3;\r\n        dragDistance: number;\r\n        pointerId: number;\r\n        pointerInfo: Nullable<PointerInfo>;\r\n    }>();\r\n    /**\r\n     *  Fires each time a drag begins (eg. mouse down on mesh)\r\n     *  * dragPlanePoint in world space where the drag intersects the drag plane\r\n     *\r\n     *  (if validatedDrag is used, the position of the attached mesh might not equal dragPlanePoint)\r\n     */\r\n    public onDragStartObservable = new Observable<{ dragPlanePoint: Vector3; pointerId: number; pointerInfo: Nullable<PointerInfo> }>();\r\n    /**\r\n     *  Fires each time a drag ends (eg. mouse release after drag)\r\n     *  * dragPlanePoint in world space where the drag intersects the drag plane\r\n     *\r\n     *  (if validatedDrag is used, the position of the attached mesh might not equal dragPlanePoint)\r\n     */\r\n    public onDragEndObservable = new Observable<{ dragPlanePoint: Vector3; pointerId: number; pointerInfo: Nullable<PointerInfo> }>();\r\n    /**\r\n     *  Fires each time behavior enabled state changes\r\n     */\r\n    public onEnabledObservable = new Observable<boolean>();\r\n\r\n    /**\r\n     *  If the attached mesh should be moved when dragged\r\n     */\r\n    public moveAttached = true;\r\n\r\n    /**\r\n     *  If the drag behavior will react to drag events (Default: true)\r\n     */\r\n    public set enabled(value: boolean) {\r\n        if (value != this._enabled) {\r\n            this.onEnabledObservable.notifyObservers(value);\r\n        }\r\n        this._enabled = value;\r\n    }\r\n\r\n    public get enabled() {\r\n        return this._enabled;\r\n    }\r\n    private _enabled = true;\r\n\r\n    /**\r\n     * If pointer events should start and release the drag (Default: true)\r\n     */\r\n    public startAndReleaseDragOnPointerEvents = true;\r\n    /**\r\n     * If camera controls should be detached during the drag\r\n     */\r\n    public detachCameraControls = true;\r\n\r\n    /**\r\n     * If set, the drag plane/axis will be rotated based on the attached mesh's world rotation (Default: true)\r\n     */\r\n    public useObjectOrientationForDragging = true;\r\n\r\n    private _options: { dragAxis?: Vector3; dragPlaneNormal?: Vector3 };\r\n\r\n    /**\r\n     * Gets the options used by the behavior\r\n     */\r\n    public get options(): { dragAxis?: Vector3; dragPlaneNormal?: Vector3 } {\r\n        return this._options;\r\n    }\r\n\r\n    /**\r\n     * Sets the options used by the behavior\r\n     */\r\n    public set options(options: { dragAxis?: Vector3; dragPlaneNormal?: Vector3 }) {\r\n        this._options = options;\r\n    }\r\n\r\n    /**\r\n     * Creates a pointer drag behavior that can be attached to a mesh\r\n     * @param options The drag axis or normal of the plane that will be dragged across. If no options are specified the drag plane will always face the ray's origin (eg. camera)\r\n     * @param options.dragAxis\r\n     * @param options.dragPlaneNormal\r\n     */\r\n    constructor(options?: { dragAxis?: Vector3; dragPlaneNormal?: Vector3 }) {\r\n        this._options = options ? options : {};\r\n\r\n        let optionCount = 0;\r\n        if (this._options.dragAxis) {\r\n            optionCount++;\r\n        }\r\n        if (this._options.dragPlaneNormal) {\r\n            optionCount++;\r\n        }\r\n        if (optionCount > 1) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw \"Multiple drag modes specified in dragBehavior options. Only one expected\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Predicate to determine if it is valid to move the object to a new position when it is moved.\r\n     * In the case of rotation gizmo, target contains the angle.\r\n     * @param target destination position or desired angle delta\r\n     * @returns boolean for whether or not it is valid to move\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public validateDrag = (target: Vector3) => {\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"PointerDrag\";\r\n    }\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    private _tmpVector = new Vector3(0, 0, 0);\r\n    private _alternatePickedPoint = new Vector3(0, 0, 0);\r\n    private _worldDragAxis = new Vector3(0, 0, 0);\r\n    private _targetPosition = new Vector3(0, 0, 0);\r\n    private _attachedToElement: boolean = false;\r\n    /**\r\n     * Attaches the drag behavior the passed in mesh\r\n     * @param ownerNode The mesh that will be dragged around once attached\r\n     * @param predicate Predicate to use for pick filtering\r\n     */\r\n    public attach(ownerNode: AbstractMesh, predicate?: (m: AbstractMesh) => boolean): void {\r\n        this._scene = ownerNode.getScene();\r\n        ownerNode.isNearGrabbable = true;\r\n        this.attachedNode = ownerNode;\r\n\r\n        // Initialize drag plane to not interfere with existing scene\r\n        if (!PointerDragBehavior._PlaneScene) {\r\n            if (this._debugMode) {\r\n                PointerDragBehavior._PlaneScene = this._scene;\r\n            } else {\r\n                PointerDragBehavior._PlaneScene = new Scene(this._scene.getEngine(), { virtual: true });\r\n                PointerDragBehavior._PlaneScene.detachControl();\r\n                this._scene.onDisposeObservable.addOnce(() => {\r\n                    PointerDragBehavior._PlaneScene.dispose();\r\n                    (<any>PointerDragBehavior._PlaneScene) = null;\r\n                });\r\n            }\r\n        }\r\n        this._dragPlane = CreatePlane(\r\n            \"pointerDragPlane\",\r\n            { size: this._debugMode ? 1 : 10000, updatable: false, sideOrientation: Mesh.DOUBLESIDE },\r\n            PointerDragBehavior._PlaneScene\r\n        );\r\n\r\n        // State of the drag\r\n        this.lastDragPosition = new Vector3(0, 0, 0);\r\n\r\n        const pickPredicate = predicate\r\n            ? predicate\r\n            : (m: AbstractMesh) => {\r\n                  return this.attachedNode == m || m.isDescendantOf(this.attachedNode);\r\n              };\r\n\r\n        this._pointerObserver = this._scene.onPointerObservable.add((pointerInfo) => {\r\n            if (!this.enabled) {\r\n                // If behavior is disabled before releaseDrag is ever called, call it now.\r\n                if (this._attachedToElement) {\r\n                    this.releaseDrag();\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            if (pointerInfo.type == PointerEventTypes.POINTERDOWN) {\r\n                if (\r\n                    this.startAndReleaseDragOnPointerEvents &&\r\n                    !this.dragging &&\r\n                    pointerInfo.pickInfo &&\r\n                    pointerInfo.pickInfo.hit &&\r\n                    pointerInfo.pickInfo.pickedMesh &&\r\n                    pointerInfo.pickInfo.pickedPoint &&\r\n                    pointerInfo.pickInfo.ray &&\r\n                    pickPredicate(pointerInfo.pickInfo.pickedMesh)\r\n                ) {\r\n                    if (this._activeDragButton === -1 && this.dragButtons.indexOf(pointerInfo.event.button) !== -1) {\r\n                        this._activeDragButton = pointerInfo.event.button;\r\n                        this._activePointerInfo = pointerInfo;\r\n                        this._startDrag((<IPointerEvent>pointerInfo.event).pointerId, pointerInfo.pickInfo.ray, pointerInfo.pickInfo.pickedPoint);\r\n                    }\r\n                }\r\n            } else if (pointerInfo.type == PointerEventTypes.POINTERUP) {\r\n                if (\r\n                    this.startAndReleaseDragOnPointerEvents &&\r\n                    this.currentDraggingPointerId == (<IPointerEvent>pointerInfo.event).pointerId &&\r\n                    (this._activeDragButton === pointerInfo.event.button || this._activeDragButton === -1)\r\n                ) {\r\n                    this.releaseDrag();\r\n                }\r\n            } else if (pointerInfo.type == PointerEventTypes.POINTERMOVE) {\r\n                const pointerId = (<IPointerEvent>pointerInfo.event).pointerId;\r\n\r\n                // If drag was started with anyMouseID specified, set pointerID to the next mouse that moved\r\n                if (this.currentDraggingPointerId === PointerDragBehavior._AnyMouseId && pointerId !== PointerDragBehavior._AnyMouseId) {\r\n                    const evt = <IPointerEvent>pointerInfo.event;\r\n                    const isMouseEvent = evt.pointerType === \"mouse\" || (!this._scene.getEngine().hostInformation.isMobile && evt instanceof MouseEvent);\r\n                    if (isMouseEvent) {\r\n                        if (this._lastPointerRay[this.currentDraggingPointerId]) {\r\n                            this._lastPointerRay[pointerId] = this._lastPointerRay[this.currentDraggingPointerId];\r\n                            delete this._lastPointerRay[this.currentDraggingPointerId];\r\n                        }\r\n                        this.currentDraggingPointerId = pointerId;\r\n                    }\r\n                }\r\n\r\n                // Keep track of last pointer ray, this is used simulating the start of a drag in startDrag()\r\n                if (!this._lastPointerRay[pointerId]) {\r\n                    this._lastPointerRay[pointerId] = new Ray(new Vector3(), new Vector3());\r\n                }\r\n                if (pointerInfo.pickInfo && pointerInfo.pickInfo.ray) {\r\n                    this._lastPointerRay[pointerId].origin.copyFrom(pointerInfo.pickInfo.ray.origin);\r\n                    this._lastPointerRay[pointerId].direction.copyFrom(pointerInfo.pickInfo.ray.direction);\r\n\r\n                    if (this.currentDraggingPointerId == pointerId && this.dragging) {\r\n                        this._moveDrag(pointerInfo.pickInfo.ray);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this._beforeRenderObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n            if (this._moving && this.moveAttached) {\r\n                let needMatrixUpdate = false;\r\n                PivotTools._RemoveAndStorePivotPoint(this.attachedNode);\r\n                // Slowly move mesh to avoid jitter\r\n                this._targetPosition.subtractToRef(this.attachedNode.absolutePosition, this._tmpVector);\r\n                this._tmpVector.scaleInPlace(this.dragDeltaRatio);\r\n                this.attachedNode.getAbsolutePosition().addToRef(this._tmpVector, this._tmpVector);\r\n                if (this.validateDrag(this._tmpVector)) {\r\n                    this.attachedNode.setAbsolutePosition(this._tmpVector);\r\n                    needMatrixUpdate = true;\r\n                }\r\n                PivotTools._RestorePivotPoint(this.attachedNode);\r\n                if (needMatrixUpdate) {\r\n                    this.attachedNode.computeWorldMatrix();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Force release the drag action by code.\r\n     */\r\n    public releaseDrag() {\r\n        if (this.dragging) {\r\n            this.dragging = false;\r\n            this.onDragEndObservable.notifyObservers({ dragPlanePoint: this.lastDragPosition, pointerId: this.currentDraggingPointerId, pointerInfo: this._activePointerInfo });\r\n        }\r\n\r\n        this.currentDraggingPointerId = -1;\r\n        this._activeDragButton = -1;\r\n        this._activePointerInfo = null;\r\n        this._moving = false;\r\n\r\n        // Reattach camera controls\r\n        if (this.detachCameraControls && this._attachedToElement && this._scene.activeCamera && !this._scene.activeCamera.leftCamera) {\r\n            if (this._scene.activeCamera.getClassName() === \"ArcRotateCamera\") {\r\n                const arcRotateCamera = this._scene.activeCamera as ArcRotateCamera;\r\n                arcRotateCamera.attachControl(\r\n                    arcRotateCamera.inputs ? arcRotateCamera.inputs.noPreventDefault : true,\r\n                    arcRotateCamera._useCtrlForPanning,\r\n                    arcRotateCamera._panningMouseButton\r\n                );\r\n            } else {\r\n                this._scene.activeCamera.attachControl(this._scene.activeCamera.inputs ? this._scene.activeCamera.inputs.noPreventDefault : true);\r\n            }\r\n            this._attachedToElement = false;\r\n        }\r\n    }\r\n\r\n    private _startDragRay = new Ray(new Vector3(), new Vector3());\r\n    private _lastPointerRay: { [key: number]: Ray } = {};\r\n    /**\r\n     * Simulates the start of a pointer drag event on the behavior\r\n     * @param pointerId pointerID of the pointer that should be simulated (Default: Any mouse pointer ID)\r\n     * @param fromRay initial ray of the pointer to be simulated (Default: Ray from camera to attached mesh)\r\n     * @param startPickedPoint picked point of the pointer to be simulated (Default: attached mesh position)\r\n     */\r\n    public startDrag(pointerId: number = PointerDragBehavior._AnyMouseId, fromRay?: Ray, startPickedPoint?: Vector3) {\r\n        this._startDrag(pointerId, fromRay, startPickedPoint);\r\n\r\n        let lastRay = this._lastPointerRay[pointerId];\r\n        if (pointerId === PointerDragBehavior._AnyMouseId) {\r\n            lastRay = this._lastPointerRay[<any>Object.keys(this._lastPointerRay)[0]];\r\n        }\r\n\r\n        if (lastRay) {\r\n            // if there was a last pointer ray drag the object there\r\n            this._moveDrag(lastRay);\r\n        }\r\n    }\r\n\r\n    protected _startDrag(pointerId: number, fromRay?: Ray, startPickedPoint?: Vector3) {\r\n        if (!this._scene.activeCamera || this.dragging || !this.attachedNode) {\r\n            return;\r\n        }\r\n\r\n        PivotTools._RemoveAndStorePivotPoint(this.attachedNode);\r\n        // Create start ray from the camera to the object\r\n        if (fromRay) {\r\n            this._startDragRay.direction.copyFrom(fromRay.direction);\r\n            this._startDragRay.origin.copyFrom(fromRay.origin);\r\n        } else {\r\n            this._startDragRay.origin.copyFrom(this._scene.activeCamera.position);\r\n            this.attachedNode.getWorldMatrix().getTranslationToRef(this._tmpVector);\r\n            this._tmpVector.subtractToRef(this._scene.activeCamera.position, this._startDragRay.direction);\r\n        }\r\n\r\n        this._updateDragPlanePosition(this._startDragRay, startPickedPoint ? startPickedPoint : this._tmpVector);\r\n\r\n        const pickedPoint = this._pickWithRayOnDragPlane(this._startDragRay);\r\n        if (pickedPoint) {\r\n            this.dragging = true;\r\n            this.currentDraggingPointerId = pointerId;\r\n            this.lastDragPosition.copyFrom(pickedPoint);\r\n            this.onDragStartObservable.notifyObservers({ dragPlanePoint: pickedPoint, pointerId: this.currentDraggingPointerId, pointerInfo: this._activePointerInfo });\r\n            this._targetPosition.copyFrom(this.attachedNode.getAbsolutePosition());\r\n\r\n            // Detatch camera controls\r\n            if (this.detachCameraControls && this._scene.activeCamera && this._scene.activeCamera.inputs && !this._scene.activeCamera.leftCamera) {\r\n                if (this._scene.activeCamera.inputs.attachedToElement) {\r\n                    this._scene.activeCamera.detachControl();\r\n                    this._attachedToElement = true;\r\n                } else {\r\n                    this._attachedToElement = false;\r\n                }\r\n            }\r\n        } else {\r\n            this.releaseDrag();\r\n        }\r\n        PivotTools._RestorePivotPoint(this.attachedNode);\r\n    }\r\n\r\n    private _dragDelta = new Vector3();\r\n    protected _moveDrag(ray: Ray) {\r\n        this._moving = true;\r\n        const pickedPoint = this._pickWithRayOnDragPlane(ray);\r\n\r\n        if (pickedPoint) {\r\n            PivotTools._RemoveAndStorePivotPoint(this.attachedNode);\r\n\r\n            if (this.updateDragPlane) {\r\n                this._updateDragPlanePosition(ray, pickedPoint);\r\n            }\r\n            let dragLength = 0;\r\n            // depending on the drag mode option drag accordingly\r\n            if (this._options.dragAxis) {\r\n                // Convert local drag axis to world if useObjectOrientationForDragging\r\n                this.useObjectOrientationForDragging\r\n                    ? Vector3.TransformCoordinatesToRef(this._options.dragAxis, this.attachedNode.getWorldMatrix().getRotationMatrix(), this._worldDragAxis)\r\n                    : this._worldDragAxis.copyFrom(this._options.dragAxis);\r\n                // Project delta drag from the drag plane onto the drag axis\r\n                pickedPoint.subtractToRef(this.lastDragPosition, this._tmpVector);\r\n\r\n                this._worldDragAxis.normalize();\r\n                dragLength = Vector3.Dot(this._tmpVector, this._worldDragAxis);\r\n                this._worldDragAxis.scaleToRef(dragLength, this._dragDelta);\r\n            } else {\r\n                dragLength = this._dragDelta.length();\r\n                pickedPoint.subtractToRef(this.lastDragPosition, this._dragDelta);\r\n            }\r\n            this._targetPosition.addInPlace(this._dragDelta);\r\n            this.onDragObservable.notifyObservers({\r\n                dragDistance: dragLength,\r\n                delta: this._dragDelta,\r\n                dragPlanePoint: pickedPoint,\r\n                dragPlaneNormal: this._dragPlane.forward,\r\n                pointerId: this.currentDraggingPointerId,\r\n                pointerInfo: this._activePointerInfo,\r\n            });\r\n            this.lastDragPosition.copyFrom(pickedPoint);\r\n\r\n            PivotTools._RestorePivotPoint(this.attachedNode);\r\n        }\r\n    }\r\n\r\n    private _pickWithRayOnDragPlane(ray: Nullable<Ray>) {\r\n        if (!ray) {\r\n            return null;\r\n        }\r\n\r\n        // Calculate angle between plane normal and ray\r\n        let angle = Math.acos(Vector3.Dot(this._dragPlane.forward, ray.direction));\r\n        // Correct if ray is casted from oposite side\r\n        if (angle > Math.PI / 2) {\r\n            angle = Math.PI - angle;\r\n        }\r\n\r\n        // If the angle is too perpendicular to the plane pick another point on the plane where it is looking\r\n        if (this.maxDragAngle > 0 && angle > this.maxDragAngle) {\r\n            if (this._useAlternatePickedPointAboveMaxDragAngle) {\r\n                // Invert ray direction along the towards object axis\r\n                this._tmpVector.copyFrom(ray.direction);\r\n                this.attachedNode.absolutePosition.subtractToRef(ray.origin, this._alternatePickedPoint);\r\n                this._alternatePickedPoint.normalize();\r\n                this._alternatePickedPoint.scaleInPlace(this._useAlternatePickedPointAboveMaxDragAngleDragSpeed * Vector3.Dot(this._alternatePickedPoint, this._tmpVector));\r\n                this._tmpVector.addInPlace(this._alternatePickedPoint);\r\n\r\n                // Project resulting vector onto the drag plane and add it to the attached nodes absolute position to get a picked point\r\n                const dot = Vector3.Dot(this._dragPlane.forward, this._tmpVector);\r\n                this._dragPlane.forward.scaleToRef(-dot, this._alternatePickedPoint);\r\n                this._alternatePickedPoint.addInPlace(this._tmpVector);\r\n                this._alternatePickedPoint.addInPlace(this.attachedNode.absolutePosition);\r\n                return this._alternatePickedPoint;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        // use an infinite plane instead of ray picking a mesh that must be updated every frame\r\n        const planeNormal = this._dragPlane.forward;\r\n        const planePosition = this._dragPlane.position;\r\n        const dotProduct = ray.direction.dot(planeNormal);\r\n        if (Math.abs(dotProduct) < Epsilon) {\r\n            // Ray and plane are parallel, no intersection\r\n            return null;\r\n        }\r\n\r\n        planePosition.subtractToRef(ray.origin, TmpVectors.Vector3[0]);\r\n        const t = TmpVectors.Vector3[0].dot(planeNormal) / dotProduct;\r\n        // Ensure the intersection point is in front of the ray (t must be positive)\r\n        if (t < 0) {\r\n            // Intersection point is behind the ray\r\n            return null;\r\n        }\r\n\r\n        // Calculate the intersection point using the parameter t\r\n        ray.direction.scaleToRef(t, TmpVectors.Vector3[0]);\r\n        const intersectionPoint = ray.origin.add(TmpVectors.Vector3[0]);\r\n        return intersectionPoint;\r\n    }\r\n\r\n    // Variables to avoid instantiation in the below method\r\n    private _pointA = new Vector3(0, 0, 0);\r\n    private _pointC = new Vector3(0, 0, 0);\r\n    private _localAxis = new Vector3(0, 0, 0);\r\n    private _lookAt = new Vector3(0, 0, 0);\r\n    // Position the drag plane based on the attached mesh position, for single axis rotate the plane along the axis to face the camera\r\n    private _updateDragPlanePosition(ray: Ray, dragPlanePosition: Vector3) {\r\n        this._pointA.copyFrom(dragPlanePosition);\r\n        if (this._options.dragAxis) {\r\n            this.useObjectOrientationForDragging\r\n                ? Vector3.TransformCoordinatesToRef(this._options.dragAxis, this.attachedNode.getWorldMatrix().getRotationMatrix(), this._localAxis)\r\n                : this._localAxis.copyFrom(this._options.dragAxis);\r\n\r\n            // Calculate plane normal that is the cross product of local axis and (eye-dragPlanePosition)\r\n            ray.origin.subtractToRef(this._pointA, this._pointC);\r\n            this._pointC.normalize();\r\n            if (Math.abs(Vector3.Dot(this._localAxis, this._pointC)) > 0.999) {\r\n                // the drag axis is colinear with the (eye to position) ray. The cross product will give jittered values.\r\n                // A new axis vector need to be computed\r\n                if (Math.abs(Vector3.Dot(Vector3.UpReadOnly, this._pointC)) > 0.999) {\r\n                    this._lookAt.copyFrom(Vector3.Right());\r\n                } else {\r\n                    this._lookAt.copyFrom(Vector3.UpReadOnly);\r\n                }\r\n            } else {\r\n                Vector3.CrossToRef(this._localAxis, this._pointC, this._lookAt);\r\n                // Get perpendicular line from previous result and drag axis to adjust lineB to be perpendicular to camera\r\n                Vector3.CrossToRef(this._localAxis, this._lookAt, this._lookAt);\r\n                this._lookAt.normalize();\r\n            }\r\n\r\n            this._dragPlane.position.copyFrom(this._pointA);\r\n            this._pointA.addToRef(this._lookAt, this._lookAt);\r\n            this._dragPlane.lookAt(this._lookAt);\r\n        } else if (this._options.dragPlaneNormal) {\r\n            this.useObjectOrientationForDragging\r\n                ? Vector3.TransformCoordinatesToRef(this._options.dragPlaneNormal, this.attachedNode.getWorldMatrix().getRotationMatrix(), this._localAxis)\r\n                : this._localAxis.copyFrom(this._options.dragPlaneNormal);\r\n            this._dragPlane.position.copyFrom(this._pointA);\r\n            this._pointA.addToRef(this._localAxis, this._lookAt);\r\n            this._dragPlane.lookAt(this._lookAt);\r\n        } else {\r\n            this._dragPlane.position.copyFrom(this._pointA);\r\n            this._dragPlane.lookAt(ray.origin);\r\n        }\r\n        // Update the position of the drag plane so it doesn't get out of sync with the node (eg. when moving back and forth quickly)\r\n        this._dragPlane.position.copyFrom(this.attachedNode.getAbsolutePosition());\r\n\r\n        this._dragPlane.computeWorldMatrix(true);\r\n    }\r\n\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this._lastPointerRay = {};\r\n        if (this.attachedNode) {\r\n            this.attachedNode.isNearGrabbable = false;\r\n        }\r\n        if (this._pointerObserver) {\r\n            this._scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n        if (this._beforeRenderObserver) {\r\n            this._scene.onBeforeRenderObservable.remove(this._beforeRenderObserver);\r\n        }\r\n        if (this._dragPlane) {\r\n            this._dragPlane.dispose();\r\n        }\r\n        this.releaseDrag();\r\n    }\r\n}\r\n", "/**\r\n * Represents the range of an animation\r\n */\r\nexport class AnimationRange {\r\n    /**\r\n     * Initializes the range of an animation\r\n     * @param name The name of the animation range\r\n     * @param from The starting frame of the animation\r\n     * @param to The ending frame of the animation\r\n     */\r\n    constructor(\r\n        /**The name of the animation range**/\r\n        public name: string,\r\n        /**The starting frame of the animation */\r\n        public from: number,\r\n        /**The ending frame of the animation*/\r\n        public to: number\r\n    ) {}\r\n\r\n    /**\r\n     * Makes a copy of the animation range\r\n     * @returns A copy of the animation range\r\n     */\r\n    public clone(): AnimationRange {\r\n        return new AnimationRange(this.name, this.from, this.to);\r\n    }\r\n}\r\n", "import type { IEasingFunction, EasingFunction } from \"./easing\";\r\nimport { Vector3, Quaternion, Vector2, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Hermite, Lerp } from \"../Maths/math.scalar.functions\";\r\nimport type { DeepImmutable, Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { IAnimationKey } from \"./animationKey\";\r\nimport { AnimationKeyInterpolation } from \"./animationKey\";\r\nimport { AnimationRange } from \"./animationRange\";\r\nimport type { AnimationEvent } from \"./animationEvent\";\r\nimport { Node } from \"../node\";\r\nimport type { IAnimatable } from \"./animatable.interface\";\r\nimport { Size } from \"../Maths/math.size\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Animatable } from \"./animatable\";\r\nimport type { RuntimeAnimation } from \"./runtimeAnimation\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\n\r\n// Static values to help the garbage collector\r\n\r\n// Quaternion\r\nexport const _staticOffsetValueQuaternion: DeepImmutable<Quaternion> = Object.freeze(new Quaternion(0, 0, 0, 0));\r\n\r\n// Vector3\r\nexport const _staticOffsetValueVector3: DeepImmutable<Vector3> = Object.freeze(Vector3.Zero());\r\n\r\n// Vector2\r\nexport const _staticOffsetValueVector2: DeepImmutable<Vector2> = Object.freeze(Vector2.Zero());\r\n\r\n// Size\r\nexport const _staticOffsetValueSize: DeepImmutable<Size> = Object.freeze(Size.Zero());\r\n\r\n// Color3\r\nexport const _staticOffsetValueColor3: DeepImmutable<Color3> = Object.freeze(Color3.Black());\r\n\r\n// Color4\r\nexport const _staticOffsetValueColor4: DeepImmutable<Color4> = Object.freeze(new Color4(0, 0, 0, 0));\r\n\r\n/**\r\n * Options to be used when creating an additive animation\r\n */\r\nexport interface IMakeAnimationAdditiveOptions {\r\n    /**\r\n     * The frame that the animation should be relative to (if not provided, 0 will be used)\r\n     */\r\n    referenceFrame?: number;\r\n    /**\r\n     * The name of the animation range to convert to additive. If not provided, fromFrame / toFrame will be used\r\n     * If fromFrame / toFrame are not provided either, the whole animation will be converted to additive\r\n     */\r\n    range?: string;\r\n    /**\r\n     * If true, the original animation will be cloned and converted to additive. If false, the original animation will be converted to additive (default is false)\r\n     */\r\n    cloneOriginalAnimation?: boolean;\r\n    /**\r\n     * The name of the cloned animation if cloneOriginalAnimation is true. If not provided, use the original animation name\r\n     */\r\n    clonedAnimationName?: string;\r\n    /**\r\n     * Together with toFrame, defines the range of the animation to convert to additive. Will only be used if range is not provided\r\n     * If range and fromFrame / toFrame are not provided, the whole animation will be converted to additive\r\n     */\r\n    fromFrame?: number;\r\n    /**\r\n     * Together with fromFrame, defines the range of the animation to convert to additive.\r\n     */\r\n    toFrame?: number;\r\n    /**\r\n     * If true, the key frames will be clipped to the range specified by range or fromFrame / toFrame (default is false)\r\n     */\r\n    clipKeys?: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface _IAnimationState {\r\n    key: number;\r\n    repeatCount: number;\r\n    workValue?: any;\r\n    loopMode?: number;\r\n    offsetValue?: any;\r\n    highLimitValue?: any;\r\n}\r\n\r\nconst evaluateAnimationState: _IAnimationState = {\r\n    key: 0,\r\n    repeatCount: 0,\r\n    loopMode: 2 /*Animation.ANIMATIONLOOPMODE_CONSTANT*/,\r\n};\r\n\r\n/**\r\n * Class used to store any kind of animation\r\n */\r\nexport class Animation {\r\n    private static _UniqueIdGenerator = 0;\r\n\r\n    /**\r\n     * Use matrix interpolation instead of using direct key value when animating matrices\r\n     */\r\n    public static AllowMatricesInterpolation = false;\r\n\r\n    /**\r\n     * When matrix interpolation is enabled, this boolean forces the system to use Matrix.DecomposeLerp instead of Matrix.Lerp. Interpolation is more precise but slower\r\n     */\r\n    public static AllowMatrixDecomposeForInterpolation = true;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the animation (the uniqueness is solely among other animations)\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /** Define the Url to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Snippet ID if the animation was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * Stores the key frames of the animation\r\n     */\r\n    private _keys: Array<IAnimationKey>;\r\n\r\n    /**\r\n     * Stores the easing function of the animation\r\n     */\r\n    private _easingFunction: Nullable<IEasingFunction> = null;\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _runtimeAnimations = new Array<RuntimeAnimation>();\r\n\r\n    /**\r\n     * The set of event that will be linked to this animation\r\n     */\r\n    private _events = new Array<AnimationEvent>();\r\n\r\n    /**\r\n     * Stores an array of target property paths\r\n     */\r\n    public targetPropertyPath: string[];\r\n\r\n    /**\r\n     * Stores the blending speed of the animation\r\n     */\r\n    public blendingSpeed = 0.01;\r\n\r\n    /**\r\n     * Stores the animation ranges for the animation\r\n     */\r\n    private _ranges: { [name: string]: Nullable<AnimationRange> } = {};\r\n\r\n    /**\r\n     * @internal Internal use\r\n     */\r\n    public static _PrepareAnimation(\r\n        name: string,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction\r\n    ): Nullable<Animation> {\r\n        let dataType = undefined;\r\n\r\n        if (!isNaN(parseFloat(from)) && isFinite(from)) {\r\n            dataType = Animation.ANIMATIONTYPE_FLOAT;\r\n        } else if (from instanceof Quaternion) {\r\n            dataType = Animation.ANIMATIONTYPE_QUATERNION;\r\n        } else if (from instanceof Vector3) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR3;\r\n        } else if (from instanceof Vector2) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR2;\r\n        } else if (from instanceof Color3) {\r\n            dataType = Animation.ANIMATIONTYPE_COLOR3;\r\n        } else if (from instanceof Color4) {\r\n            dataType = Animation.ANIMATIONTYPE_COLOR4;\r\n        } else if (from instanceof Size) {\r\n            dataType = Animation.ANIMATIONTYPE_SIZE;\r\n        }\r\n\r\n        if (dataType == undefined) {\r\n            return null;\r\n        }\r\n\r\n        const animation = new Animation(name, targetProperty, framePerSecond, dataType, loopMode);\r\n\r\n        const keys: Array<IAnimationKey> = [\r\n            { frame: 0, value: from },\r\n            { frame: totalFrame, value: to },\r\n        ];\r\n        animation.setKeys(keys);\r\n\r\n        if (easingFunction !== undefined) {\r\n            animation.setEasingFunction(easingFunction);\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Sets up an animation\r\n     * @param property The property to animate\r\n     * @param animationType The animation type to apply\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param easingFunction The easing function used in the animation\r\n     * @returns The created animation\r\n     */\r\n    public static CreateAnimation(property: string, animationType: number, framePerSecond: number, easingFunction: EasingFunction): Animation {\r\n        const animation: Animation = new Animation(property + \"Animation\", property, framePerSecond, animationType, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        animation.setEasingFunction(easingFunction);\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Create and start an animation on a node\r\n     * @param name defines the name of the global animation that will be run on all nodes\r\n     * @param target defines the target where the animation will take place\r\n     * @param targetProperty defines property to animate\r\n     * @param framePerSecond defines the number of frame per second yo use\r\n     * @param totalFrame defines the number of frames in total\r\n     * @param from defines the initial value\r\n     * @param to defines the final value\r\n     * @param loopMode defines which loop mode you want to use (off by default)\r\n     * @param easingFunction defines the easing function to use (linear by default)\r\n     * @param onAnimationEnd defines the callback to call when animation end\r\n     * @param scene defines the hosting scene\r\n     * @returns the animatable created for this animation\r\n     */\r\n    public static CreateAndStartAnimation(\r\n        name: string,\r\n        target: any,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void,\r\n        scene?: Scene\r\n    ): Nullable<Animatable> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        if (target.getScene) {\r\n            scene = target.getScene();\r\n        }\r\n\r\n        if (!scene) {\r\n            return null;\r\n        }\r\n\r\n        return scene.beginDirectAnimation(target, [animation], 0, totalFrame, animation.loopMode !== Animation.ANIMATIONLOOPMODE_CONSTANT, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Create and start an animation on a node and its descendants\r\n     * @param name defines the name of the global animation that will be run on all nodes\r\n     * @param node defines the root node where the animation will take place\r\n     * @param directDescendantsOnly if true only direct descendants will be used, if false direct and also indirect (children of children, an so on in a recursive manner) descendants will be used\r\n     * @param targetProperty defines property to animate\r\n     * @param framePerSecond defines the number of frame per second to use\r\n     * @param totalFrame defines the number of frames in total\r\n     * @param from defines the initial value\r\n     * @param to defines the final value\r\n     * @param loopMode defines which loop mode you want to use (off by default)\r\n     * @param easingFunction defines the easing function to use (linear by default)\r\n     * @param onAnimationEnd defines the callback to call when an animation ends (will be called once per node)\r\n     * @returns the list of animatables created for all nodes\r\n     * @example https://www.babylonjs-playground.com/#MH0VLI\r\n     */\r\n    public static CreateAndStartHierarchyAnimation(\r\n        name: string,\r\n        node: Node,\r\n        directDescendantsOnly: boolean,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void\r\n    ): Nullable<Animatable[]> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        const scene = node.getScene();\r\n        return scene.beginDirectHierarchyAnimation(node, directDescendantsOnly, [animation], 0, totalFrame, animation.loopMode === 1, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation, merges it with the existing animations and starts it\r\n     * @param name Name of the animation\r\n     * @param node Node which contains the scene that begins the animations\r\n     * @param targetProperty Specifies which property to animate\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param totalFrame The total number of frames\r\n     * @param from The frame at the beginning of the animation\r\n     * @param to The frame at the end of the animation\r\n     * @param loopMode Specifies the loop mode of the animation\r\n     * @param easingFunction (Optional) The easing function of the animation, which allow custom mathematical formulas for animations\r\n     * @param onAnimationEnd Callback to run once the animation is complete\r\n     * @returns Nullable animation\r\n     */\r\n    public static CreateMergeAndStartAnimation(\r\n        name: string,\r\n        node: Node,\r\n        targetProperty: string,\r\n        framePerSecond: number,\r\n        totalFrame: number,\r\n        from: any,\r\n        to: any,\r\n        loopMode?: number,\r\n        easingFunction?: EasingFunction,\r\n        onAnimationEnd?: () => void\r\n    ): Nullable<Animatable> {\r\n        const animation = Animation._PrepareAnimation(name, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction);\r\n\r\n        if (!animation) {\r\n            return null;\r\n        }\r\n\r\n        node.animations.push(animation);\r\n\r\n        return node.getScene().beginAnimation(node, 0, totalFrame, animation.loopMode === 1, 1.0, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Convert the keyframes of an animation to be relative to a given reference frame.\r\n     * @param sourceAnimation defines the Animation containing keyframes to convert\r\n     * @param referenceFrame defines the frame that keyframes in the range will be relative to (default: 0)\r\n     * @param range defines the name of the AnimationRange belonging to the Animation to convert\r\n     * @param cloneOriginal defines whether or not to clone the animation and convert the clone or convert the original animation (default is false)\r\n     * @param clonedName defines the name of the resulting cloned Animation if cloneOriginal is true\r\n     * @returns a new Animation if cloneOriginal is true or the original Animation if cloneOriginal is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimation: Animation, referenceFrame?: number, range?: string, cloneOriginal?: boolean, clonedName?: string): Animation;\r\n\r\n    /**\r\n     * Convert the keyframes of an animation to be relative to a given reference frame.\r\n     * @param sourceAnimation defines the Animation containing keyframes to convert\r\n     * @param options defines the options to use when converting ey keyframes\r\n     * @returns a new Animation if options.cloneOriginalAnimation is true or the original Animation if options.cloneOriginalAnimation is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimation: Animation, options?: IMakeAnimationAdditiveOptions): Animation;\r\n\r\n    /** @internal */\r\n    public static MakeAnimationAdditive(\r\n        sourceAnimation: Animation,\r\n        referenceFrameOrOptions?: number | IMakeAnimationAdditiveOptions,\r\n        range?: string,\r\n        cloneOriginal = false,\r\n        clonedName?: string\r\n    ): Animation {\r\n        let options: IMakeAnimationAdditiveOptions;\r\n\r\n        if (typeof referenceFrameOrOptions === \"object\") {\r\n            options = referenceFrameOrOptions;\r\n        } else {\r\n            options = {\r\n                referenceFrame: referenceFrameOrOptions ?? 0,\r\n                range: range,\r\n                cloneOriginalAnimation: cloneOriginal,\r\n                clonedAnimationName: clonedName,\r\n            };\r\n        }\r\n\r\n        let animation = sourceAnimation;\r\n\r\n        if (options.cloneOriginalAnimation) {\r\n            animation = sourceAnimation.clone();\r\n            animation.name = options.clonedAnimationName || animation.name;\r\n        }\r\n\r\n        if (!animation._keys.length) {\r\n            return animation;\r\n        }\r\n\r\n        const referenceFrame = options.referenceFrame && options.referenceFrame >= 0 ? options.referenceFrame : 0;\r\n        let startIndex = 0;\r\n        const firstKey = animation._keys[0];\r\n        let endIndex = animation._keys.length - 1;\r\n        const lastKey = animation._keys[endIndex];\r\n        const valueStore = {\r\n            referenceValue: firstKey.value,\r\n            referencePosition: TmpVectors.Vector3[0],\r\n            referenceQuaternion: TmpVectors.Quaternion[0],\r\n            referenceScaling: TmpVectors.Vector3[1],\r\n            keyPosition: TmpVectors.Vector3[2],\r\n            keyQuaternion: TmpVectors.Quaternion[1],\r\n            keyScaling: TmpVectors.Vector3[3],\r\n        };\r\n        let from = firstKey.frame;\r\n        let to = lastKey.frame;\r\n        if (options.range) {\r\n            const rangeValue = animation.getRange(options.range);\r\n\r\n            if (rangeValue) {\r\n                from = rangeValue.from;\r\n                to = rangeValue.to;\r\n            }\r\n        } else {\r\n            from = options.fromFrame ?? from;\r\n            to = options.toFrame ?? to;\r\n        }\r\n\r\n        if (from !== firstKey.frame) {\r\n            startIndex = animation.createKeyForFrame(from);\r\n        }\r\n\r\n        if (to !== lastKey.frame) {\r\n            endIndex = animation.createKeyForFrame(to);\r\n        }\r\n\r\n        // There's only one key, so use it\r\n        if (animation._keys.length === 1) {\r\n            const value = animation._getKeyValue(animation._keys[0]);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Reference frame is before the first frame, so just use the first frame\r\n        else if (referenceFrame <= firstKey.frame) {\r\n            const value = animation._getKeyValue(firstKey.value);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Reference frame is after the last frame, so just use the last frame\r\n        else if (referenceFrame >= lastKey.frame) {\r\n            const value = animation._getKeyValue(lastKey.value);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Interpolate the reference value from the animation\r\n        else {\r\n            evaluateAnimationState.key = 0;\r\n            const value = animation._interpolate(referenceFrame, evaluateAnimationState);\r\n            valueStore.referenceValue = value.clone ? value.clone() : value;\r\n        }\r\n\r\n        // Conjugate the quaternion\r\n        if (animation.dataType === Animation.ANIMATIONTYPE_QUATERNION) {\r\n            valueStore.referenceValue.normalize().conjugateInPlace();\r\n        }\r\n\r\n        // Decompose matrix and conjugate the quaternion\r\n        else if (animation.dataType === Animation.ANIMATIONTYPE_MATRIX) {\r\n            valueStore.referenceValue.decompose(valueStore.referenceScaling, valueStore.referenceQuaternion, valueStore.referencePosition);\r\n            valueStore.referenceQuaternion.normalize().conjugateInPlace();\r\n        }\r\n\r\n        let startFrame = Number.MAX_VALUE;\r\n        const clippedKeys: Nullable<IAnimationKey[]> = options.clipKeys ? [] : null;\r\n\r\n        // Subtract the reference value from all of the key values\r\n        for (let index = startIndex; index <= endIndex; index++) {\r\n            let key = animation._keys[index];\r\n\r\n            if (clippedKeys || options.cloneOriginalAnimation) {\r\n                key = {\r\n                    frame: key.frame,\r\n                    value: key.value.clone ? key.value.clone() : key.value,\r\n                    inTangent: key.inTangent,\r\n                    outTangent: key.outTangent,\r\n                    interpolation: key.interpolation,\r\n                    lockedTangent: key.lockedTangent,\r\n                };\r\n                if (clippedKeys) {\r\n                    if (startFrame === Number.MAX_VALUE) {\r\n                        startFrame = key.frame;\r\n                    }\r\n                    key.frame -= startFrame;\r\n                    clippedKeys.push(key);\r\n                }\r\n            }\r\n\r\n            // If this key was duplicated to create a frame 0 key, skip it because its value has already been updated\r\n            if (index && animation.dataType !== Animation.ANIMATIONTYPE_FLOAT && key.value === firstKey.value) {\r\n                continue;\r\n            }\r\n\r\n            switch (animation.dataType) {\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                    key.value.decompose(valueStore.keyScaling, valueStore.keyQuaternion, valueStore.keyPosition);\r\n                    valueStore.keyPosition.subtractInPlace(valueStore.referencePosition);\r\n                    valueStore.keyScaling.divideInPlace(valueStore.referenceScaling);\r\n                    valueStore.referenceQuaternion.multiplyToRef(valueStore.keyQuaternion, valueStore.keyQuaternion);\r\n                    Matrix.ComposeToRef(valueStore.keyScaling, valueStore.keyQuaternion, valueStore.keyPosition, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                    valueStore.referenceValue.multiplyToRef(key.value, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_VECTOR2:\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    key.value.subtractToRef(valueStore.referenceValue, key.value);\r\n                    break;\r\n\r\n                case Animation.ANIMATIONTYPE_SIZE:\r\n                    key.value.width -= valueStore.referenceValue.width;\r\n                    key.value.height -= valueStore.referenceValue.height;\r\n                    break;\r\n\r\n                default:\r\n                    key.value -= valueStore.referenceValue;\r\n            }\r\n        }\r\n\r\n        if (clippedKeys) {\r\n            animation.setKeys(clippedKeys, true);\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Transition property of an host to the target Value\r\n     * @param property The property to transition\r\n     * @param targetValue The target Value of the property\r\n     * @param host The object where the property to animate belongs\r\n     * @param scene Scene used to run the animation\r\n     * @param frameRate Framerate (in frame/s) to use\r\n     * @param transition The transition type we want to use\r\n     * @param duration The duration of the animation, in milliseconds\r\n     * @param onAnimationEnd Callback trigger at the end of the animation\r\n     * @returns Nullable animation\r\n     */\r\n    public static TransitionTo(\r\n        property: string,\r\n        targetValue: any,\r\n        host: any,\r\n        scene: Scene,\r\n        frameRate: number,\r\n        transition: Animation,\r\n        duration: number,\r\n        onAnimationEnd: Nullable<() => void> = null\r\n    ): Nullable<Animatable> {\r\n        if (duration <= 0) {\r\n            host[property] = targetValue;\r\n            if (onAnimationEnd) {\r\n                onAnimationEnd();\r\n            }\r\n            return null;\r\n        }\r\n\r\n        const endFrame: number = frameRate * (duration / 1000);\r\n\r\n        transition.setKeys([\r\n            {\r\n                frame: 0,\r\n                value: host[property].clone ? host[property].clone() : host[property],\r\n            },\r\n            {\r\n                frame: endFrame,\r\n                value: targetValue,\r\n            },\r\n        ]);\r\n\r\n        if (!host.animations) {\r\n            host.animations = [];\r\n        }\r\n\r\n        host.animations.push(transition);\r\n\r\n        const animation: Animatable = scene.beginAnimation(host, 0, endFrame, false);\r\n        animation.onAnimationEnd = onAnimationEnd;\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Return the array of runtime animations currently using this animation\r\n     */\r\n    public get runtimeAnimations(): RuntimeAnimation[] {\r\n        return this._runtimeAnimations;\r\n    }\r\n\r\n    /**\r\n     * Specifies if any of the runtime animations are currently running\r\n     */\r\n    public get hasRunningRuntimeAnimations(): boolean {\r\n        for (const runtimeAnimation of this._runtimeAnimations) {\r\n            if (!runtimeAnimation.isStopped()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Initializes the animation\r\n     * @param name Name of the animation\r\n     * @param targetProperty Property to animate\r\n     * @param framePerSecond The frames per second of the animation\r\n     * @param dataType The data type of the animation\r\n     * @param loopMode The loop mode of the animation\r\n     * @param enableBlending Specifies if blending should be enabled\r\n     */\r\n    constructor(\r\n        /**Name of the animation */\r\n        public name: string,\r\n        /**Property to animate */\r\n        public targetProperty: string,\r\n        /**The frames per second of the animation */\r\n        public framePerSecond: number,\r\n        /**The data type of the animation */\r\n        public dataType: number,\r\n        /**The loop mode of the animation */\r\n        public loopMode?: number,\r\n        /**Specifies if blending should be enabled */\r\n        public enableBlending?: boolean\r\n    ) {\r\n        this.targetPropertyPath = targetProperty.split(\".\");\r\n        this.dataType = dataType;\r\n        this.loopMode = loopMode === undefined ? Animation.ANIMATIONLOOPMODE_CYCLE : loopMode;\r\n        this.uniqueId = Animation._UniqueIdGenerator++;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Converts the animation to a string\r\n     * @param fullDetails support for multiple levels of logging within scene loading\r\n     * @returns String form of the animation\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name + \", property: \" + this.targetProperty;\r\n        ret += \", datatype: \" + [\"Float\", \"Vector3\", \"Quaternion\", \"Matrix\", \"Color3\", \"Vector2\"][this.dataType];\r\n        ret += \", nKeys: \" + (this._keys ? this._keys.length : \"none\");\r\n        ret += \", nRanges: \" + (this._ranges ? Object.keys(this._ranges).length : \"none\");\r\n        if (fullDetails) {\r\n            ret += \", Ranges: {\";\r\n            let first = true;\r\n            for (const name in this._ranges) {\r\n                if (first) {\r\n                    ret += \", \";\r\n                    first = false;\r\n                }\r\n                ret += name;\r\n            }\r\n            ret += \"}\";\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Add an event to this animation\r\n     * @param event Event to add\r\n     */\r\n    public addEvent(event: AnimationEvent): void {\r\n        this._events.push(event);\r\n        this._events.sort((a, b) => a.frame - b.frame);\r\n    }\r\n\r\n    /**\r\n     * Remove all events found at the given frame\r\n     * @param frame The frame to remove events from\r\n     */\r\n    public removeEvents(frame: number): void {\r\n        for (let index = 0; index < this._events.length; index++) {\r\n            if (this._events[index].frame === frame) {\r\n                this._events.splice(index, 1);\r\n                index--;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves all the events from the animation\r\n     * @returns Events from the animation\r\n     */\r\n    public getEvents(): AnimationEvent[] {\r\n        return this._events;\r\n    }\r\n\r\n    /**\r\n     * Creates an animation range\r\n     * @param name Name of the animation range\r\n     * @param from Starting frame of the animation range\r\n     * @param to Ending frame of the animation\r\n     */\r\n    public createRange(name: string, from: number, to: number): void {\r\n        // check name not already in use; could happen for bones after serialized\r\n        if (!this._ranges[name]) {\r\n            this._ranges[name] = new AnimationRange(name, from, to);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes an animation range by name\r\n     * @param name Name of the animation range to delete\r\n     * @param deleteFrames Specifies if the key frames for the range should also be deleted (true) or not (false)\r\n     */\r\n    public deleteRange(name: string, deleteFrames = true): void {\r\n        const range = this._ranges[name];\r\n        if (!range) {\r\n            return;\r\n        }\r\n        if (deleteFrames) {\r\n            const from = range.from;\r\n            const to = range.to;\r\n\r\n            // this loop MUST go high to low for multiple splices to work\r\n            for (let key = this._keys.length - 1; key >= 0; key--) {\r\n                if (this._keys[key].frame >= from && this._keys[key].frame <= to) {\r\n                    this._keys.splice(key, 1);\r\n                }\r\n            }\r\n        }\r\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\r\n    }\r\n\r\n    /**\r\n     * Gets the animation range by name, or null if not defined\r\n     * @param name Name of the animation range\r\n     * @returns Nullable animation range\r\n     */\r\n    public getRange(name: string): Nullable<AnimationRange> {\r\n        return this._ranges[name];\r\n    }\r\n\r\n    /**\r\n     * Gets the key frames from the animation\r\n     * @returns The key frames of the animation\r\n     */\r\n    public getKeys(): Array<IAnimationKey> {\r\n        return this._keys;\r\n    }\r\n\r\n    /**\r\n     * Gets the highest frame of the animation\r\n     * @returns Highest frame of the animation\r\n     */\r\n    public getHighestFrame(): number {\r\n        let ret = 0;\r\n\r\n        for (let key = 0, nKeys = this._keys.length; key < nKeys; key++) {\r\n            if (ret < this._keys[key].frame) {\r\n                ret = this._keys[key].frame;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the easing function of the animation\r\n     * @returns Easing function of the animation\r\n     */\r\n    public getEasingFunction(): Nullable<IEasingFunction> {\r\n        return this._easingFunction;\r\n    }\r\n\r\n    /**\r\n     * Sets the easing function of the animation\r\n     * @param easingFunction A custom mathematical formula for animation\r\n     */\r\n    public setEasingFunction(easingFunction: Nullable<IEasingFunction>): void {\r\n        this._easingFunction = easingFunction;\r\n    }\r\n\r\n    /**\r\n     * Interpolates a scalar linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public floatInterpolateFunction(startValue: number, endValue: number, gradient: number): number {\r\n        return Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a scalar cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public floatInterpolateFunctionWithTangents(startValue: number, outTangent: number, endValue: number, inTangent: number, gradient: number): number {\r\n        return Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a quaternion using a spherical linear interpolation\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated quaternion value\r\n     */\r\n    public quaternionInterpolateFunction(startValue: Quaternion, endValue: Quaternion, gradient: number): Quaternion {\r\n        return Quaternion.Slerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a quaternion cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated quaternion value\r\n     */\r\n    public quaternionInterpolateFunctionWithTangents(startValue: Quaternion, outTangent: Quaternion, endValue: Quaternion, inTangent: Quaternion, gradient: number): Quaternion {\r\n        return Quaternion.Hermite(startValue, outTangent, endValue, inTangent, gradient).normalize();\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector3 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated scalar value\r\n     */\r\n    public vector3InterpolateFunction(startValue: Vector3, endValue: Vector3, gradient: number): Vector3 {\r\n        return Vector3.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector3 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns InterpolatedVector3 value\r\n     */\r\n    public vector3InterpolateFunctionWithTangents(startValue: Vector3, outTangent: Vector3, endValue: Vector3, inTangent: Vector3, gradient: number): Vector3 {\r\n        return Vector3.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector2 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated Vector2 value\r\n     */\r\n    public vector2InterpolateFunction(startValue: Vector2, endValue: Vector2, gradient: number): Vector2 {\r\n        return Vector2.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Vector2 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate (value between 0 and 1)\r\n     * @returns Interpolated Vector2 value\r\n     */\r\n    public vector2InterpolateFunctionWithTangents(startValue: Vector2, outTangent: Vector2, endValue: Vector2, inTangent: Vector2, gradient: number): Vector2 {\r\n        return Vector2.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a size linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Size value\r\n     */\r\n    public sizeInterpolateFunction(startValue: Size, endValue: Size, gradient: number): Size {\r\n        return Size.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color3 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Color3 value\r\n     */\r\n    public color3InterpolateFunction(startValue: Color3, endValue: Color3, gradient: number): Color3 {\r\n        return Color3.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color3 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns interpolated value\r\n     */\r\n    public color3InterpolateFunctionWithTangents(startValue: Color3, outTangent: Color3, endValue: Color3, inTangent: Color3, gradient: number): Color3 {\r\n        return Color3.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color4 linearly\r\n     * @param startValue Start value of the animation curve\r\n     * @param endValue End value of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns Interpolated Color3 value\r\n     */\r\n    public color4InterpolateFunction(startValue: Color4, endValue: Color4, gradient: number): Color4 {\r\n        return Color4.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Interpolates a Color4 cubically\r\n     * @param startValue Start value of the animation curve\r\n     * @param outTangent End tangent of the animation\r\n     * @param endValue End value of the animation curve\r\n     * @param inTangent Start tangent of the animation curve\r\n     * @param gradient Scalar amount to interpolate\r\n     * @returns interpolated value\r\n     */\r\n    public color4InterpolateFunctionWithTangents(startValue: Color4, outTangent: Color4, endValue: Color4, inTangent: Color4, gradient: number): Color4 {\r\n        return Color4.Hermite(startValue, outTangent, endValue, inTangent, gradient);\r\n    }\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _getKeyValue(value: any): any {\r\n        if (typeof value === \"function\") {\r\n            return value();\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Evaluate the animation value at a given frame\r\n     * @param currentFrame defines the frame where we want to evaluate the animation\r\n     * @returns the animation value\r\n     */\r\n    public evaluate(currentFrame: number) {\r\n        evaluateAnimationState.key = 0;\r\n        return this._interpolate(currentFrame, evaluateAnimationState);\r\n    }\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _interpolate(currentFrame: number, state: _IAnimationState, searchClosestKeyOnly = false): any {\r\n        if (state.loopMode === Animation.ANIMATIONLOOPMODE_CONSTANT && state.repeatCount > 0) {\r\n            return state.highLimitValue.clone ? state.highLimitValue.clone() : state.highLimitValue;\r\n        }\r\n\r\n        const keys = this._keys;\r\n        const keysLength = keys.length;\r\n\r\n        let key = state.key;\r\n\r\n        while (key >= 0 && currentFrame < keys[key].frame) {\r\n            --key;\r\n        }\r\n\r\n        while (key + 1 <= keysLength - 1 && currentFrame >= keys[key + 1].frame) {\r\n            ++key;\r\n        }\r\n\r\n        state.key = key;\r\n\r\n        if (key < 0) {\r\n            return searchClosestKeyOnly ? undefined : this._getKeyValue(keys[0].value);\r\n        } else if (key + 1 > keysLength - 1) {\r\n            return searchClosestKeyOnly ? undefined : this._getKeyValue(keys[keysLength - 1].value);\r\n        }\r\n\r\n        const startKey = keys[key];\r\n        const endKey = keys[key + 1];\r\n\r\n        if (searchClosestKeyOnly && (currentFrame === startKey.frame || currentFrame === endKey.frame)) {\r\n            return undefined;\r\n        }\r\n\r\n        const startValue = this._getKeyValue(startKey.value);\r\n        const endValue = this._getKeyValue(endKey.value);\r\n        if (startKey.interpolation === AnimationKeyInterpolation.STEP) {\r\n            if (endKey.frame > currentFrame) {\r\n                return startValue;\r\n            } else {\r\n                return endValue;\r\n            }\r\n        }\r\n\r\n        const useTangent = startKey.outTangent !== undefined && endKey.inTangent !== undefined;\r\n        const frameDelta = endKey.frame - startKey.frame;\r\n\r\n        // gradient : percent of currentFrame between the frame inf and the frame sup\r\n        let gradient = (currentFrame - startKey.frame) / frameDelta;\r\n\r\n        // check for easingFunction and correction of gradient\r\n        const easingFunction = startKey.easingFunction || this.getEasingFunction();\r\n        if (easingFunction !== null) {\r\n            gradient = easingFunction.ease(gradient);\r\n        }\r\n\r\n        switch (this.dataType) {\r\n            // Float\r\n            case Animation.ANIMATIONTYPE_FLOAT: {\r\n                const floatValue = useTangent\r\n                    ? this.floatInterpolateFunctionWithTangents(startValue, startKey.outTangent * frameDelta, endValue, endKey.inTangent * frameDelta, gradient)\r\n                    : this.floatInterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return floatValue;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return (state.offsetValue ?? 0) * state.repeatCount + floatValue;\r\n                }\r\n                break;\r\n            }\r\n            // Quaternion\r\n            case Animation.ANIMATIONTYPE_QUATERNION: {\r\n                const quatValue = useTangent\r\n                    ? this.quaternionInterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.quaternionInterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return quatValue;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return quatValue.addInPlace((state.offsetValue || _staticOffsetValueQuaternion).scale(state.repeatCount));\r\n                }\r\n\r\n                return quatValue;\r\n            }\r\n            // Vector3\r\n            case Animation.ANIMATIONTYPE_VECTOR3: {\r\n                const vec3Value = useTangent\r\n                    ? this.vector3InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.vector3InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return vec3Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return vec3Value.add((state.offsetValue || _staticOffsetValueVector3).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Vector2\r\n            case Animation.ANIMATIONTYPE_VECTOR2: {\r\n                const vec2Value = useTangent\r\n                    ? this.vector2InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.vector2InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return vec2Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return vec2Value.add((state.offsetValue || _staticOffsetValueVector2).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Size\r\n            case Animation.ANIMATIONTYPE_SIZE: {\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return this.sizeInterpolateFunction(startValue, endValue, gradient);\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return this.sizeInterpolateFunction(startValue, endValue, gradient).add((state.offsetValue || _staticOffsetValueSize).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Color3\r\n            case Animation.ANIMATIONTYPE_COLOR3: {\r\n                const color3Value = useTangent\r\n                    ? this.color3InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.color3InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return color3Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return color3Value.add((state.offsetValue || _staticOffsetValueColor3).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Color4\r\n            case Animation.ANIMATIONTYPE_COLOR4: {\r\n                const color4Value = useTangent\r\n                    ? this.color4InterpolateFunctionWithTangents(startValue, startKey.outTangent.scale(frameDelta), endValue, endKey.inTangent.scale(frameDelta), gradient)\r\n                    : this.color4InterpolateFunction(startValue, endValue, gradient);\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO:\r\n                        return color4Value;\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT:\r\n                        return color4Value.add((state.offsetValue || _staticOffsetValueColor4).scale(state.repeatCount));\r\n                }\r\n                break;\r\n            }\r\n            // Matrix\r\n            case Animation.ANIMATIONTYPE_MATRIX: {\r\n                switch (state.loopMode) {\r\n                    case Animation.ANIMATIONLOOPMODE_CYCLE:\r\n                    case Animation.ANIMATIONLOOPMODE_CONSTANT:\r\n                    case Animation.ANIMATIONLOOPMODE_YOYO: {\r\n                        if (Animation.AllowMatricesInterpolation) {\r\n                            return this.matrixInterpolateFunction(startValue, endValue, gradient, state.workValue);\r\n                        }\r\n                        return startValue;\r\n                    }\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE:\r\n                    case Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT: {\r\n                        return startValue;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Defines the function to use to interpolate matrices\r\n     * @param startValue defines the start matrix\r\n     * @param endValue defines the end matrix\r\n     * @param gradient defines the gradient between both matrices\r\n     * @param result defines an optional target matrix where to store the interpolation\r\n     * @returns the interpolated matrix\r\n     */\r\n    public matrixInterpolateFunction(startValue: Matrix, endValue: Matrix, gradient: number, result?: Matrix): Matrix {\r\n        if (Animation.AllowMatrixDecomposeForInterpolation) {\r\n            if (result) {\r\n                Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\r\n                return result;\r\n            }\r\n            return Matrix.DecomposeLerp(startValue, endValue, gradient);\r\n        }\r\n\r\n        if (result) {\r\n            Matrix.LerpToRef(startValue, endValue, gradient, result);\r\n            return result;\r\n        }\r\n        return Matrix.Lerp(startValue, endValue, gradient);\r\n    }\r\n\r\n    /**\r\n     * Makes a copy of the animation\r\n     * @returns Cloned animation\r\n     */\r\n    public clone(): Animation {\r\n        const clone = new Animation(this.name, this.targetPropertyPath.join(\".\"), this.framePerSecond, this.dataType, this.loopMode);\r\n\r\n        clone.enableBlending = this.enableBlending;\r\n        clone.blendingSpeed = this.blendingSpeed;\r\n\r\n        if (this._keys) {\r\n            clone.setKeys(this._keys);\r\n        }\r\n\r\n        if (this._ranges) {\r\n            clone._ranges = {};\r\n            for (const name in this._ranges) {\r\n                const range = this._ranges[name];\r\n                if (!range) {\r\n                    continue;\r\n                }\r\n                clone._ranges[name] = range.clone();\r\n            }\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Sets the key frames of the animation\r\n     * @param values The animation key frames to set\r\n     * @param dontClone Whether to clone the keys or not (default is false, so the array of keys is cloned)\r\n     */\r\n    public setKeys(values: Array<IAnimationKey>, dontClone = false): void {\r\n        this._keys = !dontClone ? values.slice(0) : values;\r\n    }\r\n\r\n    /**\r\n     * Creates a key for the frame passed as a parameter and adds it to the animation IF a key doesn't already exist for that frame\r\n     * @param frame Frame number\r\n     * @returns The key index if the key was added or the index of the pre existing key if the frame passed as parameter already has a corresponding key\r\n     */\r\n    public createKeyForFrame(frame: number) {\r\n        // Find the key corresponding to frame\r\n        evaluateAnimationState.key = 0;\r\n        const value = this._interpolate(frame, evaluateAnimationState, true);\r\n\r\n        if (!value) {\r\n            // A key corresponding to this frame already exists\r\n            return this._keys[evaluateAnimationState.key].frame === frame ? evaluateAnimationState.key : evaluateAnimationState.key + 1;\r\n        }\r\n\r\n        // The frame is between two keys, so create a new key\r\n        const newKey: IAnimationKey = {\r\n            frame,\r\n            value: value.clone ? value.clone() : value,\r\n        };\r\n\r\n        this._keys.splice(evaluateAnimationState.key + 1, 0, newKey);\r\n\r\n        return evaluateAnimationState.key + 1;\r\n    }\r\n\r\n    /**\r\n     * Serializes the animation to an object\r\n     * @returns Serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.property = this.targetProperty;\r\n        serializationObject.framePerSecond = this.framePerSecond;\r\n        serializationObject.dataType = this.dataType;\r\n        serializationObject.loopBehavior = this.loopMode;\r\n        serializationObject.enableBlending = this.enableBlending;\r\n        serializationObject.blendingSpeed = this.blendingSpeed;\r\n\r\n        const dataType = this.dataType;\r\n        serializationObject.keys = [];\r\n        const keys = this.getKeys();\r\n        for (let index = 0; index < keys.length; index++) {\r\n            const animationKey = keys[index];\r\n\r\n            const key: any = {};\r\n            key.frame = animationKey.frame;\r\n\r\n            switch (dataType) {\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    key.values = [animationKey.value];\r\n                    if (animationKey.inTangent !== undefined) {\r\n                        key.values.push(animationKey.inTangent);\r\n                    }\r\n                    if (animationKey.outTangent !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.outTangent);\r\n                    }\r\n                    if (animationKey.interpolation !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        if (animationKey.outTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.interpolation);\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    key.values = animationKey.value.asArray();\r\n                    if (animationKey.inTangent != undefined) {\r\n                        key.values.push(animationKey.inTangent.asArray());\r\n                    }\r\n                    if (animationKey.outTangent != undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.outTangent.asArray());\r\n                    }\r\n                    if (animationKey.interpolation !== undefined) {\r\n                        if (animationKey.inTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        if (animationKey.outTangent === undefined) {\r\n                            key.values.push(undefined);\r\n                        }\r\n                        key.values.push(animationKey.interpolation);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            serializationObject.keys.push(key);\r\n        }\r\n\r\n        serializationObject.ranges = [];\r\n        for (const name in this._ranges) {\r\n            const source = this._ranges[name];\r\n\r\n            if (!source) {\r\n                continue;\r\n            }\r\n            const range: any = {};\r\n            range.name = name;\r\n            range.from = source.from;\r\n            range.to = source.to;\r\n            serializationObject.ranges.push(range);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Float animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_FLOAT = 0;\r\n    /**\r\n     * Vector3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_VECTOR3 = 1;\r\n    /**\r\n     * Quaternion animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_QUATERNION = 2;\r\n    /**\r\n     * Matrix animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_MATRIX = 3;\r\n    /**\r\n     * Color3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_COLOR3 = 4;\r\n    /**\r\n     * Color3 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_COLOR4 = 7;\r\n    /**\r\n     * Vector2 animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_VECTOR2 = 5;\r\n    /**\r\n     * Size animation type\r\n     */\r\n    public static readonly ANIMATIONTYPE_SIZE = 6;\r\n    /**\r\n     * Relative Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_RELATIVE = 0;\r\n    /**\r\n     * Cycle Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_CYCLE = 1;\r\n    /**\r\n     * Constant Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_CONSTANT = 2;\r\n    /**\r\n     * Yoyo Loop Mode\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_YOYO = 4;\r\n    /**\r\n     * Relative Loop Mode (add to current value of animated object, unlike ANIMATIONLOOPMODE_RELATIVE)\r\n     */\r\n    public static readonly ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT = 5;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _UniversalLerp(left: any, right: any, amount: number): any {\r\n        const constructor = left.constructor;\r\n        if (constructor.Lerp) {\r\n            // Lerp supported\r\n            return constructor.Lerp(left, right, amount);\r\n        } else if (constructor.Slerp) {\r\n            // Slerp supported\r\n            return constructor.Slerp(left, right, amount);\r\n        } else if (left.toFixed) {\r\n            // Number\r\n            return left * (1.0 - amount) + amount * right;\r\n        } else {\r\n            // Blending not supported\r\n            return right;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses an animation object and creates an animation\r\n     * @param parsedAnimation Parsed animation object\r\n     * @returns Animation object\r\n     */\r\n    public static Parse(parsedAnimation: any): Animation {\r\n        const animation = new Animation(parsedAnimation.name, parsedAnimation.property, parsedAnimation.framePerSecond, parsedAnimation.dataType, parsedAnimation.loopBehavior);\r\n\r\n        const dataType = parsedAnimation.dataType;\r\n        const keys: Array<IAnimationKey> = [];\r\n        let data;\r\n        let index: number;\r\n\r\n        if (parsedAnimation.enableBlending) {\r\n            animation.enableBlending = parsedAnimation.enableBlending;\r\n        }\r\n\r\n        if (parsedAnimation.blendingSpeed) {\r\n            animation.blendingSpeed = parsedAnimation.blendingSpeed;\r\n        }\r\n\r\n        for (index = 0; index < parsedAnimation.keys.length; index++) {\r\n            const key = parsedAnimation.keys[index];\r\n            let inTangent: any = undefined;\r\n            let outTangent: any = undefined;\r\n            let interpolation: any = undefined;\r\n\r\n            switch (dataType) {\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    data = key.values[0];\r\n                    if (key.values.length >= 2) {\r\n                        inTangent = key.values[1];\r\n                    }\r\n                    if (key.values.length >= 3) {\r\n                        outTangent = key.values[2];\r\n                    }\r\n                    if (key.values.length >= 4) {\r\n                        interpolation = key.values[3];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                    data = Quaternion.FromArray(key.values);\r\n                    if (key.values.length >= 8) {\r\n                        const _inTangent = Quaternion.FromArray(key.values.slice(4, 8));\r\n                        if (!_inTangent.equals(Quaternion.Zero())) {\r\n                            inTangent = _inTangent;\r\n                        }\r\n                    }\r\n                    if (key.values.length >= 12) {\r\n                        const _outTangent = Quaternion.FromArray(key.values.slice(8, 12));\r\n                        if (!_outTangent.equals(Quaternion.Zero())) {\r\n                            outTangent = _outTangent;\r\n                        }\r\n                    }\r\n                    if (key.values.length >= 13) {\r\n                        interpolation = key.values[12];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_MATRIX:\r\n                    data = Matrix.FromArray(key.values);\r\n                    if (key.values.length >= 17) {\r\n                        interpolation = key.values[16];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                    data = Color3.FromArray(key.values);\r\n                    if (key.values[3]) {\r\n                        inTangent = Color3.FromArray(key.values[3]);\r\n                    }\r\n                    if (key.values[4]) {\r\n                        outTangent = Color3.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        interpolation = key.values[5];\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    data = Color4.FromArray(key.values);\r\n                    if (key.values[4]) {\r\n                        inTangent = Color4.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        outTangent = Color4.FromArray(key.values[5]);\r\n                    }\r\n                    if (key.values[6]) {\r\n                        interpolation = Color4.FromArray(key.values[6]);\r\n                    }\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                default:\r\n                    data = Vector3.FromArray(key.values);\r\n                    if (key.values[3]) {\r\n                        inTangent = Vector3.FromArray(key.values[3]);\r\n                    }\r\n                    if (key.values[4]) {\r\n                        outTangent = Vector3.FromArray(key.values[4]);\r\n                    }\r\n                    if (key.values[5]) {\r\n                        interpolation = key.values[5];\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            const keyData: any = {};\r\n            keyData.frame = key.frame;\r\n            keyData.value = data;\r\n\r\n            if (inTangent != undefined) {\r\n                keyData.inTangent = inTangent;\r\n            }\r\n            if (outTangent != undefined) {\r\n                keyData.outTangent = outTangent;\r\n            }\r\n            if (interpolation != undefined) {\r\n                keyData.interpolation = interpolation;\r\n            }\r\n            keys.push(keyData);\r\n        }\r\n\r\n        animation.setKeys(keys);\r\n\r\n        if (parsedAnimation.ranges) {\r\n            for (index = 0; index < parsedAnimation.ranges.length; index++) {\r\n                data = parsedAnimation.ranges[index];\r\n                animation.createRange(data.name, data.from, data.to);\r\n            }\r\n        }\r\n\r\n        return animation;\r\n    }\r\n\r\n    /**\r\n     * Appends the serialized animations from the source animations\r\n     * @param source Source containing the animations\r\n     * @param destination Target to store the animations\r\n     */\r\n    public static AppendSerializedAnimations(source: IAnimatable, destination: any): void {\r\n        SerializationHelper.AppendSerializedAnimations(source, destination);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation or an array of animations from a snippet saved in a remote file\r\n     * @param name defines the name of the animation to create (can be null or empty to use the one from the json data)\r\n     * @param url defines the url to load from\r\n     * @returns a promise that will resolve to the new animation or an array of animations\r\n     */\r\n    public static ParseFromFileAsync(name: Nullable<string>, url: string): Promise<Animation | Array<Animation>> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        let serializationObject = JSON.parse(request.responseText);\r\n                        if (serializationObject.animations) {\r\n                            serializationObject = serializationObject.animations;\r\n                        }\r\n\r\n                        if (serializationObject.length) {\r\n                            const output: Animation[] = [];\r\n                            for (const serializedAnimation of serializationObject) {\r\n                                output.push(this.Parse(serializedAnimation));\r\n                            }\r\n\r\n                            resolve(output);\r\n                        } else {\r\n                            const output = this.Parse(serializationObject);\r\n\r\n                            if (name) {\r\n                                output.name = name;\r\n                            }\r\n\r\n                            resolve(output);\r\n                        }\r\n                    } else {\r\n                        reject(\"Unable to load the animation\");\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an animation or an array of animations from a snippet saved by the Inspector\r\n     * @param snippetId defines the snippet to load\r\n     * @returns a promise that will resolve to the new animation or a new array of animations\r\n     */\r\n    public static ParseFromSnippetAsync(snippetId: string): Promise<Animation | Array<Animation>> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n\r\n                        if (snippet.animations) {\r\n                            const serializationObject = JSON.parse(snippet.animations);\r\n                            const outputs: Animation[] = [];\r\n                            for (const serializedAnimation of serializationObject.animations) {\r\n                                const output = this.Parse(serializedAnimation);\r\n                                output.snippetId = snippetId;\r\n                                outputs.push(output);\r\n                            }\r\n\r\n                            resolve(outputs);\r\n                        } else {\r\n                            const serializationObject = JSON.parse(snippet.animation);\r\n                            const output = this.Parse(serializationObject);\r\n\r\n                            output.snippetId = snippetId;\r\n\r\n                            resolve(output);\r\n                        }\r\n                    } else {\r\n                        reject(\"Unable to load the snippet \" + snippetId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an animation or an array of animations from a snippet saved by the Inspector\r\n     * @deprecated Please use ParseFromSnippetAsync instead\r\n     * @param snippetId defines the snippet to load\r\n     * @returns a promise that will resolve to the new animation or a new array of animations\r\n     */\r\n    public static CreateFromSnippetAsync = Animation.ParseFromSnippetAsync;\r\n}\r\n\r\nRegisterClass(\"BABYLON.Animation\", Animation);\r\nNode._AnimationRangeFactory = (name: string, from: number, to: number) => new AnimationRange(name, from, to);\r\n", "import type { Skeleton } from \"./skeleton\";\r\nimport { Vector3, Quaternion, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport { BuildArray } from \"../Misc/arrayTools\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { Node } from \"../node\";\r\nimport { Space } from \"../Maths/math.axis\";\r\n\r\nimport type { Animation } from \"../Animations/animation\";\r\nimport type { AnimationPropertiesOverride } from \"../Animations/animationPropertiesOverride\";\r\n\r\n/**\r\n * Class used to store bone information\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\r\n */\r\nexport class Bone extends Node {\r\n    private static _TmpVecs: Vector3[] = BuildArray(2, Vector3.Zero);\r\n    private static _TmpQuat = Quaternion.Identity();\r\n    private static _TmpMats: Matrix[] = BuildArray(5, Matrix.Identity);\r\n\r\n    /**\r\n     * Gets the list of child bones\r\n     */\r\n    public children: Bone[] = [];\r\n\r\n    /** Gets the animations associated with this bone */\r\n    public override animations: Animation[] = [];\r\n\r\n    /**\r\n     * Gets or sets bone length\r\n     */\r\n    public length: number;\r\n\r\n    /**\r\n     * @internal Internal only\r\n     * Set this value to map this bone to a different index in the transform matrices\r\n     * Set this value to -1 to exclude the bone from the transform matrices\r\n     */\r\n    public _index: Nullable<number> = null;\r\n\r\n    private _skeleton: Skeleton;\r\n    private _localMatrix: Matrix; // transformation of the bone, in local space\r\n    private _absoluteMatrix: Matrix; // transformation of the bone, in world space (relative to the skeleton root)\r\n    private _bindMatrix: Matrix; // the bind matrix, in local space\r\n    private _absoluteBindMatrix: Matrix; // the bind matrix, in world space (relative to the skeleton root)\r\n    private _absoluteInverseBindMatrix: Matrix; // the inverse of the bind matrix, in world space (relative to the skeleton root)\r\n    private _finalMatrix: Matrix; // the final matrix used to transform vertices of the mesh according to the bone, in world space (relative to the skeleton root). It is the multiplication of _absoluteInverseBindMatrix with _absoluteMatrix.\r\n    private _restMatrix: Matrix; // a matrix for the exclusive use of the end user (not used internally by the framework), in local space\r\n    private _scalingDeterminant = 1;\r\n\r\n    private _localScaling: Vector3;\r\n    private _localRotation: Quaternion;\r\n    private _localPosition: Vector3;\r\n    private _needToDecompose = true;\r\n    private _needToCompose = false;\r\n\r\n    /** @internal */\r\n    public _linkedTransformNode: Nullable<TransformNode> = null;\r\n\r\n    /** @internal */\r\n    public _waitingTransformNodeId: Nullable<string> = null;\r\n\r\n    /** @internal */\r\n    get _matrix(): Matrix {\r\n        this._compose();\r\n        return this._localMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    set _matrix(value: Matrix) {\r\n        // skip if the matrices are the same\r\n        if (value.updateFlag === this._localMatrix.updateFlag && !this._needToCompose) {\r\n            return;\r\n        }\r\n\r\n        this._needToCompose = false; // in case there was a pending compose\r\n\r\n        this._localMatrix.copyFrom(value);\r\n        this._markAsDirtyAndDecompose();\r\n    }\r\n\r\n    /**\r\n     * Create a new bone\r\n     * @param name defines the bone name\r\n     * @param skeleton defines the parent skeleton\r\n     * @param parentBone defines the parent (can be null if the bone is the root)\r\n     * @param localMatrix defines the local matrix (default: identity)\r\n     * @param restMatrix defines the rest matrix (default: localMatrix)\r\n     * @param bindMatrix defines the bind matrix (default: localMatrix)\r\n     * @param index defines index of the bone in the hierarchy (default: null)\r\n     */\r\n    constructor(\r\n        /**\r\n         * defines the bone name\r\n         */\r\n        public override name: string,\r\n        skeleton: Skeleton,\r\n        parentBone: Nullable<Bone> = null,\r\n        localMatrix: Nullable<Matrix> = null,\r\n        restMatrix: Nullable<Matrix> = null,\r\n        bindMatrix: Nullable<Matrix> = null,\r\n        index: Nullable<number> = null\r\n    ) {\r\n        super(name, skeleton.getScene(), false);\r\n        this._skeleton = skeleton;\r\n        this._localMatrix = localMatrix?.clone() ?? Matrix.Identity();\r\n        this._restMatrix = restMatrix ?? this._localMatrix.clone();\r\n        this._bindMatrix = bindMatrix ?? this._localMatrix.clone();\r\n        this._index = index;\r\n\r\n        this._absoluteMatrix = new Matrix();\r\n        this._absoluteBindMatrix = new Matrix();\r\n        this._absoluteInverseBindMatrix = new Matrix();\r\n        this._finalMatrix = new Matrix();\r\n\r\n        skeleton.bones.push(this);\r\n\r\n        this.setParent(parentBone, false);\r\n\r\n        this._updateAbsoluteBindMatrices();\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"Bone\";\r\n    }\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Gets the parent skeleton\r\n     * @returns a skeleton\r\n     */\r\n    public getSkeleton(): Skeleton {\r\n        return this._skeleton;\r\n    }\r\n\r\n    public override get parent(): Bone {\r\n        return this._parentNode as Bone;\r\n    }\r\n\r\n    /**\r\n     * Gets parent bone\r\n     * @returns a bone or null if the bone is the root of the bone hierarchy\r\n     */\r\n    public getParent(): Nullable<Bone> {\r\n        return this.parent;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the children of the bone\r\n     * @returns an array containing the children of the bone (can be empty if the bone has no children)\r\n     */\r\n    public override getChildren(): Array<Bone> {\r\n        return this.children;\r\n    }\r\n\r\n    /**\r\n     * Gets the node index in matrix array generated for rendering\r\n     * @returns the node index\r\n     */\r\n    public getIndex(): number {\r\n        return this._index === null ? this.getSkeleton().bones.indexOf(this) : this._index;\r\n    }\r\n\r\n    public override set parent(newParent: Nullable<Bone>) {\r\n        this.setParent(newParent);\r\n    }\r\n\r\n    /**\r\n     * Sets the parent bone\r\n     * @param parent defines the parent (can be null if the bone is the root)\r\n     * @param updateAbsoluteBindMatrices defines if the absolute bind and absolute inverse bind matrices must be updated\r\n     */\r\n    public setParent(parent: Nullable<Bone>, updateAbsoluteBindMatrices: boolean = true): void {\r\n        if (this.parent === parent) {\r\n            return;\r\n        }\r\n\r\n        if (this.parent) {\r\n            const index = this.parent.children.indexOf(this);\r\n            if (index !== -1) {\r\n                this.parent.children.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        this._parentNode = parent;\r\n\r\n        if (this.parent) {\r\n            this.parent.children.push(this);\r\n        }\r\n\r\n        if (updateAbsoluteBindMatrices) {\r\n            this._updateAbsoluteBindMatrices();\r\n        }\r\n\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets the local matrix\r\n     * @returns the local matrix\r\n     */\r\n    public getLocalMatrix(): Matrix {\r\n        this._compose();\r\n        return this._localMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the bind matrix\r\n     * @returns the bind matrix\r\n     */\r\n    public getBindMatrix(): Matrix {\r\n        return this._bindMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the bind matrix.\r\n     * @returns the bind matrix\r\n     * @deprecated Please use getBindMatrix instead\r\n     */\r\n    public getBaseMatrix(): Matrix {\r\n        return this.getBindMatrix();\r\n    }\r\n\r\n    /**\r\n     * Gets the rest matrix\r\n     * @returns the rest matrix\r\n     */\r\n    public getRestMatrix(): Matrix {\r\n        return this._restMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the rest matrix\r\n     * @returns the rest matrix\r\n     * @deprecated Please use getRestMatrix instead\r\n     */\r\n    public getRestPose(): Matrix {\r\n        return this.getRestMatrix();\r\n    }\r\n\r\n    /**\r\n     * Sets the rest matrix\r\n     * @param matrix the local-space rest matrix to set for this bone\r\n     */\r\n    public setRestMatrix(matrix: Matrix): void {\r\n        this._restMatrix.copyFrom(matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets the rest matrix\r\n     * @param matrix the local-space rest to set for this bone\r\n     * @deprecated Please use setRestMatrix instead\r\n     */\r\n    public setRestPose(matrix: Matrix): void {\r\n        this.setRestMatrix(matrix);\r\n    }\r\n\r\n    /**\r\n     * Gets the bind matrix\r\n     * @returns the bind matrix\r\n     * @deprecated Please use getBindMatrix instead\r\n     */\r\n    public getBindPose(): Matrix {\r\n        return this.getBindMatrix();\r\n    }\r\n\r\n    /**\r\n     * Sets the bind matrix\r\n     * This will trigger a recomputation of the absolute bind and absolute inverse bind matrices for this bone and its children\r\n     * Note that the local matrix will also be set with the matrix passed in parameter!\r\n     * @param matrix the local-space bind matrix to set for this bone\r\n     */\r\n    public setBindMatrix(matrix: Matrix): void {\r\n        this.updateMatrix(matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets the bind matrix\r\n     * @param matrix the local-space bind to set for this bone\r\n     * @deprecated Please use setBindMatrix instead\r\n     */\r\n    public setBindPose(matrix: Matrix): void {\r\n        this.setBindMatrix(matrix);\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix used to store the final world transformation of the bone (ie. the matrix sent to shaders)\r\n     * @returns the final world matrix\r\n     */\r\n    public getFinalMatrix(): Matrix {\r\n        return this._finalMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix used to store the final world transformation of the bone (ie. the matrix sent to shaders)\r\n     * @deprecated Please use getFinalMatrix instead\r\n     * @returns the final world matrix\r\n     */\r\n    public override getWorldMatrix(): Matrix {\r\n        return this.getFinalMatrix();\r\n    }\r\n\r\n    /**\r\n     * Sets the local matrix to the rest matrix\r\n     */\r\n    public returnToRest(): void {\r\n        if (this._linkedTransformNode) {\r\n            const localScaling = TmpVectors.Vector3[0];\r\n            const localRotation = TmpVectors.Quaternion[0];\r\n            const localPosition = TmpVectors.Vector3[1];\r\n\r\n            this.getRestMatrix().decompose(localScaling, localRotation, localPosition);\r\n\r\n            this._linkedTransformNode.position.copyFrom(localPosition);\r\n            this._linkedTransformNode.rotationQuaternion = this._linkedTransformNode.rotationQuaternion ?? Quaternion.Identity();\r\n            this._linkedTransformNode.rotationQuaternion.copyFrom(localRotation);\r\n            this._linkedTransformNode.scaling.copyFrom(localScaling);\r\n        } else {\r\n            this._matrix = this._restMatrix;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the inverse of the bind matrix, in world space (relative to the skeleton root)\r\n     * @returns the inverse bind matrix, in world space\r\n     */\r\n    public getAbsoluteInverseBindMatrix(): Matrix {\r\n        return this._absoluteInverseBindMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the inverse of the bind matrix, in world space (relative to the skeleton root)\r\n     * @returns the inverse bind matrix, in world space\r\n     * @deprecated Please use getAbsoluteInverseBindMatrix instead\r\n     */\r\n    public getInvertedAbsoluteTransform(): Matrix {\r\n        return this.getAbsoluteInverseBindMatrix();\r\n    }\r\n\r\n    /**\r\n     * Gets the bone matrix, in world space (relative to the skeleton root)\r\n     * @returns the bone matrix, in world space\r\n     */\r\n    public getAbsoluteMatrix(): Matrix {\r\n        return this._absoluteMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the bone matrix, in world space (relative to the skeleton root)\r\n     * @returns the bone matrix, in world space\r\n     * @deprecated Please use getAbsoluteMatrix instead\r\n     */\r\n    public getAbsoluteTransform(): Matrix {\r\n        return this._absoluteMatrix;\r\n    }\r\n\r\n    /**\r\n     * Links with the given transform node.\r\n     * The local matrix of this bone is overwritten by the transform of the node every frame.\r\n     * @param transformNode defines the transform node to link to\r\n     */\r\n    public linkTransformNode(transformNode: Nullable<TransformNode>): void {\r\n        if (this._linkedTransformNode) {\r\n            this._skeleton._numBonesWithLinkedTransformNode--;\r\n        }\r\n\r\n        this._linkedTransformNode = transformNode;\r\n\r\n        if (this._linkedTransformNode) {\r\n            this._skeleton._numBonesWithLinkedTransformNode++;\r\n        }\r\n    }\r\n\r\n    // Properties (matches TransformNode properties)\r\n\r\n    /**\r\n     * Gets the node used to drive the bone's transformation\r\n     * @returns a transform node or null\r\n     */\r\n    public getTransformNode() {\r\n        return this._linkedTransformNode;\r\n    }\r\n\r\n    /** Gets or sets current position (in local space) */\r\n    public get position(): Vector3 {\r\n        this._decompose();\r\n        return this._localPosition;\r\n    }\r\n\r\n    public set position(newPosition: Vector3) {\r\n        this._decompose();\r\n        this._localPosition.copyFrom(newPosition);\r\n\r\n        this._markAsDirtyAndCompose();\r\n    }\r\n\r\n    /** Gets or sets current rotation (in local space) */\r\n    public get rotation(): Vector3 {\r\n        return this.getRotation();\r\n    }\r\n\r\n    public set rotation(newRotation: Vector3) {\r\n        this.setRotation(newRotation);\r\n    }\r\n\r\n    /** Gets or sets current rotation quaternion (in local space) */\r\n    public get rotationQuaternion() {\r\n        this._decompose();\r\n        return this._localRotation;\r\n    }\r\n\r\n    public set rotationQuaternion(newRotation: Quaternion) {\r\n        this.setRotationQuaternion(newRotation);\r\n    }\r\n\r\n    /** Gets or sets current scaling (in local space) */\r\n    public get scaling(): Vector3 {\r\n        return this.getScale();\r\n    }\r\n\r\n    public set scaling(newScaling: Vector3) {\r\n        this.setScale(newScaling);\r\n    }\r\n\r\n    /**\r\n     * Gets the animation properties override\r\n     */\r\n    public override get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        return this._skeleton.animationPropertiesOverride;\r\n    }\r\n\r\n    // Methods\r\n    private _decompose() {\r\n        if (!this._needToDecompose) {\r\n            return;\r\n        }\r\n\r\n        this._needToDecompose = false;\r\n\r\n        if (!this._localScaling) {\r\n            this._localScaling = Vector3.Zero();\r\n            this._localRotation = Quaternion.Zero();\r\n            this._localPosition = Vector3.Zero();\r\n        }\r\n        this._localMatrix.decompose(this._localScaling, this._localRotation, this._localPosition);\r\n    }\r\n\r\n    private _compose() {\r\n        if (!this._needToCompose) {\r\n            return;\r\n        }\r\n\r\n        if (!this._localScaling) {\r\n            this._needToCompose = false;\r\n            return;\r\n        }\r\n\r\n        this._needToCompose = false;\r\n        Matrix.ComposeToRef(this._localScaling, this._localRotation, this._localPosition, this._localMatrix);\r\n    }\r\n\r\n    /**\r\n     * Update the bind (and optionally the local) matrix\r\n     * @param bindMatrix defines the new matrix to set to the bind/local matrix, in local space\r\n     * @param updateAbsoluteBindMatrices defines if the absolute bind and absolute inverse bind matrices must be recomputed (default: true)\r\n     * @param updateLocalMatrix defines if the local matrix should also be updated with the matrix passed in parameter (default: true)\r\n     */\r\n    public updateMatrix(bindMatrix: Matrix, updateAbsoluteBindMatrices = true, updateLocalMatrix = true): void {\r\n        this._bindMatrix.copyFrom(bindMatrix);\r\n\r\n        if (updateAbsoluteBindMatrices) {\r\n            this._updateAbsoluteBindMatrices();\r\n        }\r\n\r\n        if (updateLocalMatrix) {\r\n            this._matrix = bindMatrix;\r\n        } else {\r\n            this.markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateAbsoluteBindMatrices(bindMatrix?: Matrix, updateChildren = true): void {\r\n        if (!bindMatrix) {\r\n            bindMatrix = this._bindMatrix;\r\n        }\r\n\r\n        if (this.parent) {\r\n            bindMatrix.multiplyToRef(this.parent._absoluteBindMatrix, this._absoluteBindMatrix);\r\n        } else {\r\n            this._absoluteBindMatrix.copyFrom(bindMatrix);\r\n        }\r\n\r\n        this._absoluteBindMatrix.invertToRef(this._absoluteInverseBindMatrix);\r\n\r\n        if (updateChildren) {\r\n            for (let index = 0; index < this.children.length; index++) {\r\n                this.children[index]._updateAbsoluteBindMatrices();\r\n            }\r\n        }\r\n\r\n        this._scalingDeterminant = this._absoluteBindMatrix.determinant() < 0 ? -1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Flag the bone as dirty (Forcing it to update everything)\r\n     * @returns this bone\r\n     */\r\n    public override markAsDirty(): Bone {\r\n        this._currentRenderId++;\r\n        this._childUpdateId++;\r\n        this._skeleton._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAsDirtyAndCompose() {\r\n        this.markAsDirty();\r\n        this._needToCompose = true;\r\n    }\r\n\r\n    private _markAsDirtyAndDecompose() {\r\n        this.markAsDirty();\r\n        this._needToDecompose = true;\r\n    }\r\n\r\n    private _updatePosition(vec: Vector3, space = Space.LOCAL, tNode?: TransformNode, translationMode = true): void {\r\n        const lm = this.getLocalMatrix();\r\n\r\n        if (space == Space.LOCAL) {\r\n            if (translationMode) {\r\n                lm.addAtIndex(12, vec.x);\r\n                lm.addAtIndex(13, vec.y);\r\n                lm.addAtIndex(14, vec.z);\r\n            } else {\r\n                lm.setTranslationFromFloats(vec.x, vec.y, vec.z);\r\n            }\r\n        } else {\r\n            let wm: Nullable<Matrix> = null;\r\n\r\n            //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteMatrices()\r\n            if (tNode) {\r\n                wm = tNode.getWorldMatrix();\r\n            }\r\n\r\n            this._skeleton.computeAbsoluteMatrices();\r\n\r\n            const tmat = Bone._TmpMats[0];\r\n            const tvec = Bone._TmpVecs[0];\r\n\r\n            if (this.parent) {\r\n                if (tNode && wm) {\r\n                    tmat.copyFrom(this.parent.getAbsoluteMatrix());\r\n                    tmat.multiplyToRef(wm, tmat);\r\n                } else {\r\n                    tmat.copyFrom(this.parent.getAbsoluteMatrix());\r\n                }\r\n            } else {\r\n                Matrix.IdentityToRef(tmat);\r\n            }\r\n\r\n            if (translationMode) {\r\n                tmat.setTranslationFromFloats(0, 0, 0);\r\n            }\r\n            tmat.invert();\r\n            Vector3.TransformCoordinatesToRef(vec, tmat, tvec);\r\n\r\n            if (translationMode) {\r\n                lm.addAtIndex(12, tvec.x);\r\n                lm.addAtIndex(13, tvec.y);\r\n                lm.addAtIndex(14, tvec.z);\r\n            } else {\r\n                lm.setTranslationFromFloats(tvec.x, tvec.y, tvec.z);\r\n            }\r\n        }\r\n\r\n        this._markAsDirtyAndDecompose();\r\n    }\r\n\r\n    /**\r\n     * Translate the bone in local or world space\r\n     * @param vec The amount to translate the bone\r\n     * @param space The space that the translation is in (default: Space.LOCAL)\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public translate(vec: Vector3, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        this._updatePosition(vec, space, tNode, true);\r\n    }\r\n\r\n    /**\r\n     * Set the position of the bone in local or world space\r\n     * @param position The position to set the bone\r\n     * @param space The space that the position is in (default: Space.LOCAL)\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setPosition(position: Vector3, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        this._updatePosition(position, space, tNode, false);\r\n    }\r\n\r\n    /**\r\n     * Set the absolute position of the bone (world space)\r\n     * @param position The position to set the bone\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setAbsolutePosition(position: Vector3, tNode?: TransformNode) {\r\n        this.setPosition(position, Space.WORLD, tNode);\r\n    }\r\n\r\n    /**\r\n     * Scale the bone on the x, y and z axes (in local space)\r\n     * @param x The amount to scale the bone on the x axis\r\n     * @param y The amount to scale the bone on the y axis\r\n     * @param z The amount to scale the bone on the z axis\r\n     * @param scaleChildren sets this to true if children of the bone should be scaled as well (false by default)\r\n     */\r\n    public scale(x: number, y: number, z: number, scaleChildren = false): void {\r\n        const locMat = this.getLocalMatrix();\r\n\r\n        // Apply new scaling on top of current local matrix\r\n        const scaleMat = Bone._TmpMats[0];\r\n        Matrix.ScalingToRef(x, y, z, scaleMat);\r\n        scaleMat.multiplyToRef(locMat, locMat);\r\n\r\n        // Invert scaling matrix and apply the inverse to all children\r\n        scaleMat.invert();\r\n\r\n        for (const child of this.children) {\r\n            const cm = child.getLocalMatrix();\r\n            cm.multiplyToRef(scaleMat, cm);\r\n            cm.multiplyAtIndex(12, x);\r\n            cm.multiplyAtIndex(13, y);\r\n            cm.multiplyAtIndex(14, z);\r\n\r\n            child._markAsDirtyAndDecompose();\r\n        }\r\n\r\n        this._markAsDirtyAndDecompose();\r\n\r\n        if (scaleChildren) {\r\n            for (const child of this.children) {\r\n                child.scale(x, y, z, scaleChildren);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the bone scaling in local space\r\n     * @param scale defines the scaling vector\r\n     */\r\n    public setScale(scale: Vector3): void {\r\n        this._decompose();\r\n        this._localScaling.copyFrom(scale);\r\n        this._markAsDirtyAndCompose();\r\n    }\r\n\r\n    /**\r\n     * Gets the current scaling in local space\r\n     * @returns the current scaling vector\r\n     */\r\n    public getScale(): Vector3 {\r\n        this._decompose();\r\n        return this._localScaling;\r\n    }\r\n\r\n    /**\r\n     * Gets the current scaling in local space and stores it in a target vector\r\n     * @param result defines the target vector\r\n     */\r\n    public getScaleToRef(result: Vector3) {\r\n        this._decompose();\r\n        result.copyFrom(this._localScaling);\r\n    }\r\n\r\n    /**\r\n     * Set the yaw, pitch, and roll of the bone in local or world space\r\n     * @param yaw The rotation of the bone on the y axis\r\n     * @param pitch The rotation of the bone on the x axis\r\n     * @param roll The rotation of the bone on the z axis\r\n     * @param space The space that the axes of rotation are in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setYawPitchRoll(yaw: number, pitch: number, roll: number, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        if (space === Space.LOCAL) {\r\n            const quat = Bone._TmpQuat;\r\n            Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, quat);\r\n            this.setRotationQuaternion(quat, space, tNode);\r\n            return;\r\n        }\r\n\r\n        const rotMatInv = Bone._TmpMats[0];\r\n        if (!this._getAbsoluteInverseMatrixUnscaledToRef(rotMatInv, tNode)) {\r\n            return;\r\n        }\r\n\r\n        const rotMat = Bone._TmpMats[1];\r\n        Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, rotMat);\r\n\r\n        rotMatInv.multiplyToRef(rotMat, rotMat);\r\n        this._rotateWithMatrix(rotMat, space, tNode);\r\n    }\r\n\r\n    /**\r\n     * Add a rotation to the bone on an axis in local or world space\r\n     * @param axis The axis to rotate the bone on\r\n     * @param amount The amount to rotate the bone\r\n     * @param space The space that the axis is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public rotate(axis: Vector3, amount: number, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        const rmat = Bone._TmpMats[0];\r\n        rmat.setTranslationFromFloats(0, 0, 0);\r\n        Matrix.RotationAxisToRef(axis, amount, rmat);\r\n        this._rotateWithMatrix(rmat, space, tNode);\r\n    }\r\n\r\n    /**\r\n     * Set the rotation of the bone to a particular axis angle in local or world space\r\n     * @param axis The axis to rotate the bone on\r\n     * @param angle The angle that the bone should be rotated to\r\n     * @param space The space that the axis is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setAxisAngle(axis: Vector3, angle: number, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        if (space === Space.LOCAL) {\r\n            const quat = Bone._TmpQuat;\r\n            Quaternion.RotationAxisToRef(axis, angle, quat);\r\n\r\n            this.setRotationQuaternion(quat, space, tNode);\r\n            return;\r\n        }\r\n\r\n        const rotMatInv = Bone._TmpMats[0];\r\n        if (!this._getAbsoluteInverseMatrixUnscaledToRef(rotMatInv, tNode)) {\r\n            return;\r\n        }\r\n\r\n        const rotMat = Bone._TmpMats[1];\r\n        Matrix.RotationAxisToRef(axis, angle, rotMat);\r\n\r\n        rotMatInv.multiplyToRef(rotMat, rotMat);\r\n        this._rotateWithMatrix(rotMat, space, tNode);\r\n    }\r\n\r\n    /**\r\n     * Set the euler rotation of the bone in local or world space\r\n     * @param rotation The euler rotation that the bone should be set to\r\n     * @param space The space that the rotation is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setRotation(rotation: Vector3, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        this.setYawPitchRoll(rotation.y, rotation.x, rotation.z, space, tNode);\r\n    }\r\n\r\n    /**\r\n     * Set the quaternion rotation of the bone in local or world space\r\n     * @param quat The quaternion rotation that the bone should be set to\r\n     * @param space The space that the rotation is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setRotationQuaternion(quat: Quaternion, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        if (space === Space.LOCAL) {\r\n            this._decompose();\r\n            this._localRotation.copyFrom(quat);\r\n\r\n            this._markAsDirtyAndCompose();\r\n\r\n            return;\r\n        }\r\n\r\n        const rotMatInv = Bone._TmpMats[0];\r\n        if (!this._getAbsoluteInverseMatrixUnscaledToRef(rotMatInv, tNode)) {\r\n            return;\r\n        }\r\n\r\n        const rotMat = Bone._TmpMats[1];\r\n        Matrix.FromQuaternionToRef(quat, rotMat);\r\n\r\n        rotMatInv.multiplyToRef(rotMat, rotMat);\r\n\r\n        this._rotateWithMatrix(rotMat, space, tNode);\r\n    }\r\n\r\n    /**\r\n     * Set the rotation matrix of the bone in local or world space\r\n     * @param rotMat The rotation matrix that the bone should be set to\r\n     * @param space The space that the rotation is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     */\r\n    public setRotationMatrix(rotMat: Matrix, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        if (space === Space.LOCAL) {\r\n            const quat = Bone._TmpQuat;\r\n            Quaternion.FromRotationMatrixToRef(rotMat, quat);\r\n            this.setRotationQuaternion(quat, space, tNode);\r\n            return;\r\n        }\r\n\r\n        const rotMatInv = Bone._TmpMats[0];\r\n        if (!this._getAbsoluteInverseMatrixUnscaledToRef(rotMatInv, tNode)) {\r\n            return;\r\n        }\r\n\r\n        const rotMat2 = Bone._TmpMats[1];\r\n        rotMat2.copyFrom(rotMat);\r\n\r\n        rotMatInv.multiplyToRef(rotMat, rotMat2);\r\n\r\n        this._rotateWithMatrix(rotMat2, space, tNode);\r\n    }\r\n\r\n    private _rotateWithMatrix(rmat: Matrix, space = Space.LOCAL, tNode?: TransformNode): void {\r\n        const lmat = this.getLocalMatrix();\r\n        const lx = lmat.m[12];\r\n        const ly = lmat.m[13];\r\n        const lz = lmat.m[14];\r\n        const parent = this.getParent();\r\n        const parentScale = Bone._TmpMats[3];\r\n        const parentScaleInv = Bone._TmpMats[4];\r\n\r\n        if (parent && space == Space.WORLD) {\r\n            if (tNode) {\r\n                parentScale.copyFrom(tNode.getWorldMatrix());\r\n                parent.getAbsoluteMatrix().multiplyToRef(parentScale, parentScale);\r\n            } else {\r\n                parentScale.copyFrom(parent.getAbsoluteMatrix());\r\n            }\r\n            parentScaleInv.copyFrom(parentScale);\r\n            parentScaleInv.invert();\r\n            lmat.multiplyToRef(parentScale, lmat);\r\n            lmat.multiplyToRef(rmat, lmat);\r\n            lmat.multiplyToRef(parentScaleInv, lmat);\r\n        } else {\r\n            if (space == Space.WORLD && tNode) {\r\n                parentScale.copyFrom(tNode.getWorldMatrix());\r\n                parentScaleInv.copyFrom(parentScale);\r\n                parentScaleInv.invert();\r\n                lmat.multiplyToRef(parentScale, lmat);\r\n                lmat.multiplyToRef(rmat, lmat);\r\n                lmat.multiplyToRef(parentScaleInv, lmat);\r\n            } else {\r\n                lmat.multiplyToRef(rmat, lmat);\r\n            }\r\n        }\r\n\r\n        lmat.setTranslationFromFloats(lx, ly, lz);\r\n\r\n        this.computeAbsoluteMatrices();\r\n        this._markAsDirtyAndDecompose();\r\n    }\r\n\r\n    private _getAbsoluteInverseMatrixUnscaledToRef(rotMatInv: Matrix, tNode?: TransformNode): boolean {\r\n        const scaleMatrix = Bone._TmpMats[2];\r\n        rotMatInv.copyFrom(this.getAbsoluteMatrix());\r\n\r\n        if (tNode) {\r\n            rotMatInv.multiplyToRef(tNode.getWorldMatrix(), rotMatInv);\r\n            Matrix.ScalingToRef(tNode.scaling.x, tNode.scaling.y, tNode.scaling.z, scaleMatrix);\r\n        } else {\r\n            Matrix.IdentityToRef(scaleMatrix);\r\n        }\r\n\r\n        rotMatInv.invert();\r\n        if (isNaN(rotMatInv.m[0])) {\r\n            // Matrix failed to invert.\r\n            // This can happen if scale is zero for example.\r\n            return false;\r\n        }\r\n\r\n        scaleMatrix.multiplyAtIndex(0, this._scalingDeterminant);\r\n        rotMatInv.multiplyToRef(scaleMatrix, rotMatInv);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the position of the bone in local or world space\r\n     * @param space The space that the returned position is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The position of the bone\r\n     */\r\n    public getPosition(space = Space.LOCAL, tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const pos = Vector3.Zero();\r\n\r\n        this.getPositionToRef(space, tNode, pos);\r\n\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * Copy the position of the bone to a vector3 in local or world space\r\n     * @param space The space that the returned position is in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 to copy the position to\r\n     */\r\n    public getPositionToRef(space = Space.LOCAL, tNode: Nullable<TransformNode>, result: Vector3): void {\r\n        if (space == Space.LOCAL) {\r\n            const lm = this.getLocalMatrix();\r\n\r\n            result.x = lm.m[12];\r\n            result.y = lm.m[13];\r\n            result.z = lm.m[14];\r\n        } else {\r\n            let wm: Nullable<Matrix> = null;\r\n\r\n            //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteMatrices()\r\n            if (tNode) {\r\n                wm = tNode.getWorldMatrix();\r\n            }\r\n\r\n            this._skeleton.computeAbsoluteMatrices();\r\n\r\n            let tmat = Bone._TmpMats[0];\r\n\r\n            if (tNode && wm) {\r\n                tmat.copyFrom(this.getAbsoluteMatrix());\r\n                tmat.multiplyToRef(wm, tmat);\r\n            } else {\r\n                tmat = this.getAbsoluteMatrix();\r\n            }\r\n\r\n            result.x = tmat.m[12];\r\n            result.y = tmat.m[13];\r\n            result.z = tmat.m[14];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the absolute position of the bone (world space)\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The absolute position of the bone\r\n     */\r\n    public getAbsolutePosition(tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const pos = Vector3.Zero();\r\n\r\n        this.getPositionToRef(Space.WORLD, tNode, pos);\r\n\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * Copy the absolute position of the bone (world space) to the result param\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 to copy the absolute position to\r\n     */\r\n    public getAbsolutePositionToRef(tNode: TransformNode, result: Vector3) {\r\n        this.getPositionToRef(Space.WORLD, tNode, result);\r\n    }\r\n\r\n    /**\r\n     * Compute the absolute matrices of this bone and its children\r\n     */\r\n    public computeAbsoluteMatrices(): void {\r\n        this._compose();\r\n\r\n        if (this.parent) {\r\n            this._localMatrix.multiplyToRef(this.parent._absoluteMatrix, this._absoluteMatrix);\r\n        } else {\r\n            this._absoluteMatrix.copyFrom(this._localMatrix);\r\n\r\n            const poseMatrix = this._skeleton.getPoseMatrix();\r\n\r\n            if (poseMatrix) {\r\n                this._absoluteMatrix.multiplyToRef(poseMatrix, this._absoluteMatrix);\r\n            }\r\n        }\r\n\r\n        const children = this.children;\r\n        const len = children.length;\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            children[i].computeAbsoluteMatrices();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute the absolute matrices of this bone and its children\r\n     * @deprecated Please use computeAbsoluteMatrices instead\r\n     */\r\n    public computeAbsoluteTransforms(): void {\r\n        this.computeAbsoluteMatrices();\r\n    }\r\n\r\n    /**\r\n     * Get the world direction from an axis that is in the local space of the bone\r\n     * @param localAxis The local direction that is used to compute the world direction\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The world direction\r\n     */\r\n    public getDirection(localAxis: Vector3, tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getDirectionToRef(localAxis, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copy the world direction to a vector3 from an axis that is in the local space of the bone\r\n     * @param localAxis The local direction that is used to compute the world direction\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 that the world direction will be copied to\r\n     */\r\n    public getDirectionToRef(localAxis: Vector3, tNode: Nullable<TransformNode> = null, result: Vector3): void {\r\n        let wm: Nullable<Matrix> = null;\r\n\r\n        //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteMatrices()\r\n        if (tNode) {\r\n            wm = tNode.getWorldMatrix();\r\n        }\r\n\r\n        this._skeleton.computeAbsoluteMatrices();\r\n\r\n        const mat = Bone._TmpMats[0];\r\n\r\n        mat.copyFrom(this.getAbsoluteMatrix());\r\n\r\n        if (tNode && wm) {\r\n            mat.multiplyToRef(wm, mat);\r\n        }\r\n\r\n        Vector3.TransformNormalToRef(localAxis, mat, result);\r\n\r\n        result.normalize();\r\n    }\r\n\r\n    /**\r\n     * Get the euler rotation of the bone in local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The euler rotation\r\n     */\r\n    public getRotation(space = Space.LOCAL, tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getRotationToRef(space, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copy the euler rotation of the bone to a vector3.  The rotation can be in either local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 that the rotation should be copied to\r\n     */\r\n    public getRotationToRef(space = Space.LOCAL, tNode: Nullable<TransformNode> = null, result: Vector3): void {\r\n        const quat = Bone._TmpQuat;\r\n\r\n        this.getRotationQuaternionToRef(space, tNode, quat);\r\n\r\n        quat.toEulerAnglesToRef(result);\r\n    }\r\n\r\n    /**\r\n     * Get the quaternion rotation of the bone in either local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The quaternion rotation\r\n     */\r\n    public getRotationQuaternion(space = Space.LOCAL, tNode: Nullable<TransformNode> = null): Quaternion {\r\n        const result = Quaternion.Identity();\r\n\r\n        this.getRotationQuaternionToRef(space, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copy the quaternion rotation of the bone to a quaternion.  The rotation can be in either local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The quaternion that the rotation should be copied to\r\n     */\r\n    public getRotationQuaternionToRef(space = Space.LOCAL, tNode: Nullable<TransformNode> = null, result: Quaternion): void {\r\n        if (space == Space.LOCAL) {\r\n            this._decompose();\r\n            result.copyFrom(this._localRotation);\r\n        } else {\r\n            const mat = Bone._TmpMats[0];\r\n            const amat = this.getAbsoluteMatrix();\r\n\r\n            if (tNode) {\r\n                amat.multiplyToRef(tNode.getWorldMatrix(), mat);\r\n            } else {\r\n                mat.copyFrom(amat);\r\n            }\r\n\r\n            mat.multiplyAtIndex(0, this._scalingDeterminant);\r\n            mat.multiplyAtIndex(1, this._scalingDeterminant);\r\n            mat.multiplyAtIndex(2, this._scalingDeterminant);\r\n\r\n            mat.decompose(undefined, result, undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the rotation matrix of the bone in local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The rotation matrix\r\n     */\r\n    public getRotationMatrix(space = Space.LOCAL, tNode: TransformNode): Matrix {\r\n        const result = Matrix.Identity();\r\n\r\n        this.getRotationMatrixToRef(space, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Copy the rotation matrix of the bone to a matrix.  The rotation can be in either local or world space\r\n     * @param space The space that the rotation should be in\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The quaternion that the rotation should be copied to\r\n     */\r\n    public getRotationMatrixToRef(space = Space.LOCAL, tNode: TransformNode, result: Matrix): void {\r\n        if (space == Space.LOCAL) {\r\n            this.getLocalMatrix().getRotationMatrixToRef(result);\r\n        } else {\r\n            const mat = Bone._TmpMats[0];\r\n            const amat = this.getAbsoluteMatrix();\r\n\r\n            if (tNode) {\r\n                amat.multiplyToRef(tNode.getWorldMatrix(), mat);\r\n            } else {\r\n                mat.copyFrom(amat);\r\n            }\r\n\r\n            mat.multiplyAtIndex(0, this._scalingDeterminant);\r\n            mat.multiplyAtIndex(1, this._scalingDeterminant);\r\n            mat.multiplyAtIndex(2, this._scalingDeterminant);\r\n\r\n            mat.getRotationMatrixToRef(result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the world position of a point that is in the local space of the bone\r\n     * @param position The local position\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The world position\r\n     */\r\n    public getAbsolutePositionFromLocal(position: Vector3, tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getAbsolutePositionFromLocalToRef(position, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the world position of a point that is in the local space of the bone and copy it to the result param\r\n     * @param position The local position\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 that the world position should be copied to\r\n     */\r\n    public getAbsolutePositionFromLocalToRef(position: Vector3, tNode: Nullable<TransformNode> = null, result: Vector3): void {\r\n        let wm: Nullable<Matrix> = null;\r\n\r\n        //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteMatrices()\r\n        if (tNode) {\r\n            wm = tNode.getWorldMatrix();\r\n        }\r\n\r\n        this._skeleton.computeAbsoluteMatrices();\r\n\r\n        const tmat = Bone._TmpMats[0];\r\n\r\n        tmat.copyFrom(this.getAbsoluteMatrix());\r\n\r\n        if (tNode && wm) {\r\n            tmat.multiplyToRef(wm, tmat);\r\n        }\r\n\r\n        Vector3.TransformCoordinatesToRef(position, tmat, result);\r\n    }\r\n\r\n    /**\r\n     * Get the local position of a point that is in world space\r\n     * @param position The world position\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @returns The local position\r\n     */\r\n    public getLocalPositionFromAbsolute(position: Vector3, tNode: Nullable<TransformNode> = null): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getLocalPositionFromAbsoluteToRef(position, tNode, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the local position of a point that is in world space and copy it to the result param\r\n     * @param position The world position\r\n     * @param tNode A TransformNode whose world matrix is to be applied to the calculated absolute matrix. In most cases, you'll want to pass the mesh associated with the skeleton from which this bone comes. Used only when space=Space.WORLD\r\n     * @param result The vector3 that the local position should be copied to\r\n     */\r\n    public getLocalPositionFromAbsoluteToRef(position: Vector3, tNode: Nullable<TransformNode> = null, result: Vector3): void {\r\n        let wm: Nullable<Matrix> = null;\r\n\r\n        //tNode.getWorldMatrix() needs to be called before skeleton.computeAbsoluteMatrices()\r\n        if (tNode) {\r\n            wm = tNode.getWorldMatrix();\r\n        }\r\n\r\n        this._skeleton.computeAbsoluteMatrices();\r\n\r\n        const tmat = Bone._TmpMats[0];\r\n\r\n        tmat.copyFrom(this.getAbsoluteMatrix());\r\n\r\n        if (tNode && wm) {\r\n            tmat.multiplyToRef(wm, tmat);\r\n        }\r\n\r\n        tmat.invert();\r\n\r\n        Vector3.TransformCoordinatesToRef(position, tmat, result);\r\n    }\r\n\r\n    /**\r\n     * Set the current local matrix as the restMatrix for this bone.\r\n     */\r\n    public setCurrentPoseAsRest(): void {\r\n        this.setRestMatrix(this.getLocalMatrix());\r\n    }\r\n\r\n    /**\r\n     * Releases associated resources\r\n     */\r\n    public override dispose(): void {\r\n        this._linkedTransformNode = null;\r\n\r\n        const index = this._skeleton.bones.indexOf(this);\r\n        if (index !== -1) {\r\n            this._skeleton.bones.splice(index, 1);\r\n        }\r\n\r\n        if (this._parentNode && (this._parentNode as Bone).children) {\r\n            const children = (this._parentNode as Bone).children;\r\n            const index = children.indexOf(this);\r\n            if (index !== -1) {\r\n                children.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        super.dispose();\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport { Matrix } from \"../Maths/math.vector\";\r\nimport type { _IAnimationState } from \"./animation\";\r\nimport {\r\n    Animation,\r\n    _staticOffsetValueColor3,\r\n    _staticOffsetValueColor4,\r\n    _staticOffsetValueQuaternion,\r\n    _staticOffsetValueSize,\r\n    _staticOffsetValueVector2,\r\n    _staticOffsetValueVector3,\r\n} from \"./animation\";\r\nimport type { AnimationEvent } from \"./animationEvent\";\r\nimport type { Animatable } from \"./animatable\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { IAnimationKey } from \"./animationKey\";\r\n\r\n/**\r\n * Defines a runtime animation\r\n */\r\nexport class RuntimeAnimation {\r\n    private _events = new Array<AnimationEvent>();\r\n\r\n    /**\r\n     * The current frame of the runtime animation\r\n     */\r\n    private _currentFrame: number = 0;\r\n\r\n    /**\r\n     * The animation used by the runtime animation\r\n     */\r\n    private _animation: Animation;\r\n\r\n    /**\r\n     * The target of the runtime animation\r\n     */\r\n    private _target: any;\r\n\r\n    /**\r\n     * The initiating animatable\r\n     */\r\n    private _host: Animatable;\r\n\r\n    /**\r\n     * The original value of the runtime animation\r\n     */\r\n    private _originalValue = new Array<any>();\r\n\r\n    /**\r\n     * The original blend value of the runtime animation\r\n     */\r\n    private _originalBlendValue: Nullable<any> = null;\r\n\r\n    /**\r\n     * The offsets cache of the runtime animation\r\n     */\r\n    private _offsetsCache: { [key: string]: any } = {};\r\n\r\n    /**\r\n     * The high limits cache of the runtime animation\r\n     */\r\n    private _highLimitsCache: { [key: string]: any } = {};\r\n\r\n    /**\r\n     * Specifies if the runtime animation has been stopped\r\n     */\r\n    private _stopped = false;\r\n\r\n    /**\r\n     * The blending factor of the runtime animation\r\n     */\r\n    private _blendingFactor = 0;\r\n\r\n    /**\r\n     * The BabylonJS scene\r\n     */\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * The current value of the runtime animation\r\n     */\r\n    private _currentValue: Nullable<any> = null;\r\n\r\n    /** @internal */\r\n    public _animationState: _IAnimationState;\r\n\r\n    /**\r\n     * The active target of the runtime animation\r\n     */\r\n    private _activeTargets: any[];\r\n    private _currentActiveTarget: Nullable<any> = null;\r\n    private _directTarget: Nullable<any> = null;\r\n\r\n    /**\r\n     * The target path of the runtime animation\r\n     */\r\n    private _targetPath: string = \"\";\r\n\r\n    /**\r\n     * The weight of the runtime animation\r\n     */\r\n    private _weight = 1.0;\r\n\r\n    /**\r\n     * The absolute frame offset of the runtime animation\r\n     */\r\n    private _absoluteFrameOffset = 0;\r\n\r\n    /**\r\n     * The previous elapsed time (since start of animation) of the runtime animation\r\n     */\r\n    private _previousElapsedTime: number = 0;\r\n\r\n    private _yoyoDirection: number = 1;\r\n\r\n    /**\r\n     * The previous absolute frame of the runtime animation (meaning, without taking into account the from/to values, only the elapsed time and the fps)\r\n     */\r\n    private _previousAbsoluteFrame: number = 0;\r\n\r\n    private _enableBlending: boolean;\r\n\r\n    private _keys: IAnimationKey[];\r\n    private _minFrame: number;\r\n    private _maxFrame: number;\r\n    private _minValue: any;\r\n    private _maxValue: any;\r\n    private _targetIsArray = false;\r\n\r\n    /**\r\n     * Gets the current frame of the runtime animation\r\n     */\r\n    public get currentFrame(): number {\r\n        return this._currentFrame;\r\n    }\r\n\r\n    /**\r\n     * Gets the weight of the runtime animation\r\n     */\r\n    public get weight(): number {\r\n        return this._weight;\r\n    }\r\n\r\n    /**\r\n     * Gets the current value of the runtime animation\r\n     */\r\n    public get currentValue(): any {\r\n        return this._currentValue;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the target path of the runtime animation\r\n     */\r\n    public get targetPath(): string {\r\n        return this._targetPath;\r\n    }\r\n\r\n    /**\r\n     * Gets the actual target of the runtime animation\r\n     */\r\n    public get target(): any {\r\n        return this._currentActiveTarget;\r\n    }\r\n\r\n    /**\r\n     * Gets the additive state of the runtime animation\r\n     */\r\n    public get isAdditive(): boolean {\r\n        return this._host && this._host.isAdditive;\r\n    }\r\n\r\n    /** @internal */\r\n    public _onLoop: () => void;\r\n\r\n    /**\r\n     * Create a new RuntimeAnimation object\r\n     * @param target defines the target of the animation\r\n     * @param animation defines the source animation object\r\n     * @param scene defines the hosting scene\r\n     * @param host defines the initiating Animatable\r\n     */\r\n    public constructor(target: any, animation: Animation, scene: Scene, host: Animatable) {\r\n        this._animation = animation;\r\n        this._target = target;\r\n        this._scene = scene;\r\n        this._host = host;\r\n        this._activeTargets = [];\r\n\r\n        animation._runtimeAnimations.push(this);\r\n\r\n        // State\r\n        this._animationState = {\r\n            key: 0,\r\n            repeatCount: 0,\r\n            loopMode: this._getCorrectLoopMode(),\r\n        };\r\n\r\n        if (this._animation.dataType === Animation.ANIMATIONTYPE_MATRIX) {\r\n            this._animationState.workValue = Matrix.Zero();\r\n        }\r\n\r\n        // Limits\r\n        this._keys = this._animation.getKeys();\r\n        this._minFrame = this._keys[0].frame;\r\n        this._maxFrame = this._keys[this._keys.length - 1].frame;\r\n        this._minValue = this._keys[0].value;\r\n        this._maxValue = this._keys[this._keys.length - 1].value;\r\n\r\n        // Add a start key at frame 0 if missing\r\n        if (this._minFrame !== 0) {\r\n            const newKey = { frame: 0, value: this._minValue };\r\n            this._keys.splice(0, 0, newKey);\r\n        }\r\n\r\n        // Check data\r\n        if (this._target instanceof Array) {\r\n            let index = 0;\r\n            for (const target of this._target) {\r\n                this._preparePath(target, index);\r\n                this._getOriginalValues(index);\r\n                index++;\r\n            }\r\n            this._targetIsArray = true;\r\n        } else {\r\n            this._preparePath(this._target);\r\n            this._getOriginalValues();\r\n            this._targetIsArray = false;\r\n            this._directTarget = this._activeTargets[0];\r\n        }\r\n\r\n        // Cloning events locally\r\n        const events = animation.getEvents();\r\n        if (events && events.length > 0) {\r\n            events.forEach((e) => {\r\n                this._events.push(e._clone());\r\n            });\r\n        }\r\n\r\n        this._enableBlending = target && target.animationPropertiesOverride ? target.animationPropertiesOverride.enableBlending : this._animation.enableBlending;\r\n    }\r\n\r\n    private _preparePath(target: any, targetIndex = 0) {\r\n        const targetPropertyPath = this._animation.targetPropertyPath;\r\n\r\n        if (targetPropertyPath.length > 1) {\r\n            let property = target;\r\n            for (let index = 0; index < targetPropertyPath.length - 1; index++) {\r\n                const name = targetPropertyPath[index];\r\n                property = property[name];\r\n                if (property === undefined) {\r\n                    throw new Error(`Invalid property (${name}) in property path (${targetPropertyPath.join(\".\")})`);\r\n                }\r\n            }\r\n\r\n            this._targetPath = targetPropertyPath[targetPropertyPath.length - 1];\r\n            this._activeTargets[targetIndex] = property;\r\n        } else {\r\n            this._targetPath = targetPropertyPath[0];\r\n            this._activeTargets[targetIndex] = target;\r\n        }\r\n\r\n        if (this._activeTargets[targetIndex][this._targetPath] === undefined) {\r\n            throw new Error(`Invalid property (${this._targetPath}) in property path (${targetPropertyPath.join(\".\")})`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the animation from the runtime animation\r\n     */\r\n    public get animation(): Animation {\r\n        return this._animation;\r\n    }\r\n\r\n    /**\r\n     * Resets the runtime animation to the beginning\r\n     * @param restoreOriginal defines whether to restore the target property to the original value\r\n     */\r\n    public reset(restoreOriginal = false): void {\r\n        if (restoreOriginal) {\r\n            if (this._target instanceof Array) {\r\n                let index = 0;\r\n                for (const target of this._target) {\r\n                    if (this._originalValue[index] !== undefined) {\r\n                        this._setValue(target, this._activeTargets[index], this._originalValue[index], -1, index);\r\n                    }\r\n                    index++;\r\n                }\r\n            } else {\r\n                if (this._originalValue[0] !== undefined) {\r\n                    this._setValue(this._target, this._directTarget, this._originalValue[0], -1, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._offsetsCache = {};\r\n        this._highLimitsCache = {};\r\n        this._currentFrame = 0;\r\n        this._blendingFactor = 0;\r\n\r\n        // Events\r\n        for (let index = 0; index < this._events.length; index++) {\r\n            this._events[index].isDone = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if the runtime animation is stopped\r\n     * @returns Boolean specifying if the runtime animation is stopped\r\n     */\r\n    public isStopped(): boolean {\r\n        return this._stopped;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the runtime animation\r\n     */\r\n    public dispose(): void {\r\n        const index = this._animation.runtimeAnimations.indexOf(this);\r\n\r\n        if (index > -1) {\r\n            this._animation.runtimeAnimations.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply the interpolated value to the target\r\n     * @param currentValue defines the value computed by the animation\r\n     * @param weight defines the weight to apply to this value (Defaults to 1.0)\r\n     */\r\n    public setValue(currentValue: any, weight: number) {\r\n        if (this._targetIsArray) {\r\n            for (let index = 0; index < this._target.length; index++) {\r\n                const target = this._target[index];\r\n                this._setValue(target, this._activeTargets[index], currentValue, weight, index);\r\n            }\r\n            return;\r\n        }\r\n        this._setValue(this._target, this._directTarget, currentValue, weight, 0);\r\n    }\r\n\r\n    private _getOriginalValues(targetIndex = 0) {\r\n        let originalValue: any;\r\n        const target = this._activeTargets[targetIndex];\r\n\r\n        if (target.getLocalMatrix && this._targetPath === \"_matrix\") {\r\n            // For bones\r\n            originalValue = target.getLocalMatrix();\r\n        } else {\r\n            originalValue = target[this._targetPath];\r\n        }\r\n\r\n        if (originalValue && originalValue.clone) {\r\n            this._originalValue[targetIndex] = originalValue.clone();\r\n        } else {\r\n            this._originalValue[targetIndex] = originalValue;\r\n        }\r\n    }\r\n\r\n    private _registerTargetForLateAnimationBinding(runtimeAnimation: RuntimeAnimation, originalValue: any): void {\r\n        const target = runtimeAnimation.target;\r\n        this._scene._registeredForLateAnimationBindings.pushNoDuplicate(target);\r\n\r\n        if (!target._lateAnimationHolders) {\r\n            target._lateAnimationHolders = {};\r\n        }\r\n\r\n        if (!target._lateAnimationHolders[runtimeAnimation.targetPath]) {\r\n            target._lateAnimationHolders[runtimeAnimation.targetPath] = {\r\n                totalWeight: 0,\r\n                totalAdditiveWeight: 0,\r\n                animations: [],\r\n                additiveAnimations: [],\r\n                originalValue: originalValue,\r\n            };\r\n        }\r\n\r\n        if (runtimeAnimation.isAdditive) {\r\n            target._lateAnimationHolders[runtimeAnimation.targetPath].additiveAnimations.push(runtimeAnimation);\r\n            target._lateAnimationHolders[runtimeAnimation.targetPath].totalAdditiveWeight += runtimeAnimation.weight;\r\n        } else {\r\n            target._lateAnimationHolders[runtimeAnimation.targetPath].animations.push(runtimeAnimation);\r\n            target._lateAnimationHolders[runtimeAnimation.targetPath].totalWeight += runtimeAnimation.weight;\r\n        }\r\n    }\r\n\r\n    private _setValue(target: any, destination: any, currentValue: any, weight: number, targetIndex: number): void {\r\n        // Set value\r\n        this._currentActiveTarget = destination;\r\n\r\n        this._weight = weight;\r\n\r\n        if (this._enableBlending && this._blendingFactor <= 1.0) {\r\n            if (!this._originalBlendValue) {\r\n                const originalValue = destination[this._targetPath];\r\n\r\n                if (originalValue.clone) {\r\n                    this._originalBlendValue = originalValue.clone();\r\n                } else {\r\n                    this._originalBlendValue = originalValue;\r\n                }\r\n            }\r\n\r\n            if (this._originalBlendValue.m) {\r\n                // Matrix\r\n                if (Animation.AllowMatrixDecomposeForInterpolation) {\r\n                    if (this._currentValue) {\r\n                        Matrix.DecomposeLerpToRef(this._originalBlendValue, currentValue, this._blendingFactor, this._currentValue);\r\n                    } else {\r\n                        this._currentValue = Matrix.DecomposeLerp(this._originalBlendValue, currentValue, this._blendingFactor);\r\n                    }\r\n                } else {\r\n                    if (this._currentValue) {\r\n                        Matrix.LerpToRef(this._originalBlendValue, currentValue, this._blendingFactor, this._currentValue);\r\n                    } else {\r\n                        this._currentValue = Matrix.Lerp(this._originalBlendValue, currentValue, this._blendingFactor);\r\n                    }\r\n                }\r\n            } else {\r\n                this._currentValue = Animation._UniversalLerp(this._originalBlendValue, currentValue, this._blendingFactor);\r\n            }\r\n\r\n            const blendingSpeed = target && target.animationPropertiesOverride ? target.animationPropertiesOverride.blendingSpeed : this._animation.blendingSpeed;\r\n            this._blendingFactor += blendingSpeed;\r\n        } else {\r\n            if (!this._currentValue) {\r\n                if (currentValue?.clone) {\r\n                    this._currentValue = currentValue.clone();\r\n                } else {\r\n                    this._currentValue = currentValue;\r\n                }\r\n            } else if (this._currentValue.copyFrom) {\r\n                this._currentValue.copyFrom(currentValue);\r\n            } else {\r\n                this._currentValue = currentValue;\r\n            }\r\n        }\r\n\r\n        if (weight !== -1.0) {\r\n            this._registerTargetForLateAnimationBinding(this, this._originalValue[targetIndex]);\r\n        } else {\r\n            if (this._animationState.loopMode === Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT) {\r\n                if (this._currentValue.addToRef) {\r\n                    this._currentValue.addToRef(this._originalValue[targetIndex], destination[this._targetPath]);\r\n                } else {\r\n                    destination[this._targetPath] = this._originalValue[targetIndex] + this._currentValue;\r\n                }\r\n            } else {\r\n                destination[this._targetPath] = this._currentValue;\r\n            }\r\n        }\r\n\r\n        if (target.markAsDirty) {\r\n            target.markAsDirty(this._animation.targetProperty);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the loop pmode of the runtime animation\r\n     * @returns Loop Mode\r\n     */\r\n    private _getCorrectLoopMode(): number | undefined {\r\n        if (this._target && this._target.animationPropertiesOverride) {\r\n            return this._target.animationPropertiesOverride.loopMode;\r\n        }\r\n\r\n        return this._animation.loopMode;\r\n    }\r\n\r\n    /**\r\n     * Move the current animation to a given frame\r\n     * @param frame defines the frame to move to\r\n     * @param weight defines the weight to apply to the animation (-1.0 by default)\r\n     */\r\n    public goToFrame(frame: number, weight = -1): void {\r\n        const keys = this._animation.getKeys();\r\n\r\n        if (frame < keys[0].frame) {\r\n            frame = keys[0].frame;\r\n        } else if (frame > keys[keys.length - 1].frame) {\r\n            frame = keys[keys.length - 1].frame;\r\n        }\r\n\r\n        // Need to reset animation events\r\n        const events = this._events;\r\n        if (events.length) {\r\n            for (let index = 0; index < events.length; index++) {\r\n                if (!events[index].onlyOnce) {\r\n                    // reset events in the future\r\n                    events[index].isDone = events[index].frame < frame;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._currentFrame = frame;\r\n        const currentValue = this._animation._interpolate(frame, this._animationState);\r\n\r\n        this.setValue(currentValue, weight);\r\n    }\r\n\r\n    /**\r\n     * @internal Internal use only\r\n     */\r\n    public _prepareForSpeedRatioChange(newSpeedRatio: number): void {\r\n        const newAbsoluteFrame = (this._previousElapsedTime * (this._animation.framePerSecond * newSpeedRatio)) / 1000.0;\r\n\r\n        this._absoluteFrameOffset = this._previousAbsoluteFrame - newAbsoluteFrame;\r\n    }\r\n\r\n    /**\r\n     * Execute the current animation\r\n     * @param elapsedTimeSinceAnimationStart defines the elapsed time (in milliseconds) since the animation was started\r\n     * @param from defines the lower frame of the animation range\r\n     * @param to defines the upper frame of the animation range\r\n     * @param loop defines if the current animation must loop\r\n     * @param speedRatio defines the current speed ratio\r\n     * @param weight defines the weight of the animation (default is -1 so no weight)\r\n     * @returns a boolean indicating if the animation is running\r\n     */\r\n    public animate(elapsedTimeSinceAnimationStart: number, from: number, to: number, loop: boolean, speedRatio: number, weight = -1.0): boolean {\r\n        const animation = this._animation;\r\n        const targetPropertyPath = animation.targetPropertyPath;\r\n        if (!targetPropertyPath || targetPropertyPath.length < 1) {\r\n            this._stopped = true;\r\n            return false;\r\n        }\r\n\r\n        let returnValue = true;\r\n\r\n        // Check limits\r\n        if (from < this._minFrame || from > this._maxFrame) {\r\n            from = this._minFrame;\r\n        }\r\n        if (to < this._minFrame || to > this._maxFrame) {\r\n            to = this._maxFrame;\r\n        }\r\n\r\n        const frameRange = to - from;\r\n        let offsetValue: any;\r\n\r\n        // Compute the frame according to the elapsed time and the fps of the animation (\"from\" and \"to\" are not factored in!)\r\n        let absoluteFrame = (elapsedTimeSinceAnimationStart * (animation.framePerSecond * speedRatio)) / 1000.0 + this._absoluteFrameOffset;\r\n        let highLimitValue = 0;\r\n\r\n        // Apply the yoyo function if required\r\n        let yoyoLoop = false;\r\n        const yoyoMode = loop && this._animationState.loopMode === Animation.ANIMATIONLOOPMODE_YOYO;\r\n        if (yoyoMode) {\r\n            const position = (absoluteFrame - from) / frameRange;\r\n\r\n            // Apply the yoyo curve\r\n            const sin = Math.sin(position * Math.PI);\r\n            const yoyoPosition = Math.abs(sin);\r\n\r\n            // Map the yoyo position back to the range\r\n            absoluteFrame = yoyoPosition * frameRange + from;\r\n\r\n            const direction = sin >= 0 ? 1 : -1;\r\n            if (this._yoyoDirection !== direction) {\r\n                yoyoLoop = true;\r\n            }\r\n\r\n            this._yoyoDirection = direction;\r\n        }\r\n\r\n        this._previousElapsedTime = elapsedTimeSinceAnimationStart;\r\n        this._previousAbsoluteFrame = absoluteFrame;\r\n\r\n        if (!loop && to >= from && ((absoluteFrame >= frameRange && speedRatio > 0) || (absoluteFrame <= 0 && speedRatio < 0))) {\r\n            // If we are out of range and not looping get back to caller\r\n            returnValue = false;\r\n            highLimitValue = animation._getKeyValue(this._maxValue);\r\n        } else if (!loop && from >= to && ((absoluteFrame <= frameRange && speedRatio < 0) || (absoluteFrame >= 0 && speedRatio > 0))) {\r\n            returnValue = false;\r\n            highLimitValue = animation._getKeyValue(this._minValue);\r\n        } else if (this._animationState.loopMode !== Animation.ANIMATIONLOOPMODE_CYCLE) {\r\n            const keyOffset = to.toString() + from.toString();\r\n            if (!this._offsetsCache[keyOffset]) {\r\n                this._animationState.repeatCount = 0;\r\n                this._animationState.loopMode = Animation.ANIMATIONLOOPMODE_CYCLE; // force a specific codepath in animation._interpolate()!\r\n                const fromValue = animation._interpolate(from, this._animationState);\r\n                const toValue = animation._interpolate(to, this._animationState);\r\n\r\n                this._animationState.loopMode = this._getCorrectLoopMode();\r\n                switch (animation.dataType) {\r\n                    // Float\r\n                    case Animation.ANIMATIONTYPE_FLOAT:\r\n                        this._offsetsCache[keyOffset] = toValue - fromValue;\r\n                        break;\r\n                    // Quaternion\r\n                    case Animation.ANIMATIONTYPE_QUATERNION:\r\n                        this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\r\n                        break;\r\n                    // Vector3\r\n                    case Animation.ANIMATIONTYPE_VECTOR3:\r\n                        this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\r\n                        break;\r\n                    // Vector2\r\n                    case Animation.ANIMATIONTYPE_VECTOR2:\r\n                        this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\r\n                        break;\r\n                    // Size\r\n                    case Animation.ANIMATIONTYPE_SIZE:\r\n                        this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\r\n                        break;\r\n                    // Color3\r\n                    case Animation.ANIMATIONTYPE_COLOR3:\r\n                        this._offsetsCache[keyOffset] = toValue.subtract(fromValue);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                this._highLimitsCache[keyOffset] = toValue;\r\n            }\r\n\r\n            highLimitValue = this._highLimitsCache[keyOffset];\r\n            offsetValue = this._offsetsCache[keyOffset];\r\n        }\r\n\r\n        if (offsetValue === undefined) {\r\n            switch (animation.dataType) {\r\n                // Float\r\n                case Animation.ANIMATIONTYPE_FLOAT:\r\n                    offsetValue = 0;\r\n                    break;\r\n                // Quaternion\r\n                case Animation.ANIMATIONTYPE_QUATERNION:\r\n                    offsetValue = _staticOffsetValueQuaternion;\r\n                    break;\r\n                // Vector3\r\n                case Animation.ANIMATIONTYPE_VECTOR3:\r\n                    offsetValue = _staticOffsetValueVector3;\r\n                    break;\r\n                // Vector2\r\n                case Animation.ANIMATIONTYPE_VECTOR2:\r\n                    offsetValue = _staticOffsetValueVector2;\r\n                    break;\r\n                // Size\r\n                case Animation.ANIMATIONTYPE_SIZE:\r\n                    offsetValue = _staticOffsetValueSize;\r\n                    break;\r\n                // Color3\r\n                case Animation.ANIMATIONTYPE_COLOR3:\r\n                    offsetValue = _staticOffsetValueColor3;\r\n                    break;\r\n                case Animation.ANIMATIONTYPE_COLOR4:\r\n                    offsetValue = _staticOffsetValueColor4;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Compute value\r\n        let currentFrame: number;\r\n\r\n        if (this._host && this._host.syncRoot) {\r\n            // If we must sync with an animatable, calculate the current frame based on the frame of the root animatable\r\n            const syncRoot = this._host.syncRoot;\r\n            const hostNormalizedFrame = (syncRoot.masterFrame - syncRoot.fromFrame) / (syncRoot.toFrame - syncRoot.fromFrame);\r\n            currentFrame = from + frameRange * hostNormalizedFrame;\r\n        } else {\r\n            if ((absoluteFrame > 0 && from > to) || (absoluteFrame < 0 && from < to)) {\r\n                currentFrame = returnValue && frameRange !== 0 ? to + (absoluteFrame % frameRange) : from;\r\n            } else {\r\n                currentFrame = returnValue && frameRange !== 0 ? from + (absoluteFrame % frameRange) : to;\r\n            }\r\n        }\r\n\r\n        const events = this._events;\r\n\r\n        // Reset event/state if looping\r\n        if ((!yoyoMode && ((speedRatio > 0 && this.currentFrame > currentFrame) || (speedRatio < 0 && this.currentFrame < currentFrame))) || (yoyoMode && yoyoLoop)) {\r\n            this._onLoop();\r\n\r\n            // Need to reset animation events\r\n            for (let index = 0; index < events.length; index++) {\r\n                if (!events[index].onlyOnce) {\r\n                    // reset event, the animation is looping\r\n                    events[index].isDone = false;\r\n                }\r\n            }\r\n\r\n            this._animationState.key = speedRatio > 0 ? 0 : animation.getKeys().length - 1;\r\n        }\r\n        this._currentFrame = currentFrame;\r\n        this._animationState.repeatCount = frameRange === 0 ? 0 : (absoluteFrame / frameRange) >> 0;\r\n        this._animationState.highLimitValue = highLimitValue;\r\n        this._animationState.offsetValue = offsetValue;\r\n\r\n        const currentValue = animation._interpolate(currentFrame, this._animationState);\r\n\r\n        // Set value\r\n        this.setValue(currentValue, weight);\r\n\r\n        // Check events\r\n        if (events.length) {\r\n            for (let index = 0; index < events.length; index++) {\r\n                // Make sure current frame has passed event frame and that event frame is within the current range\r\n                // Also, handle both forward and reverse animations\r\n                if (\r\n                    (frameRange >= 0 && currentFrame >= events[index].frame && events[index].frame >= from) ||\r\n                    (frameRange < 0 && currentFrame <= events[index].frame && events[index].frame <= from)\r\n                ) {\r\n                    const event = events[index];\r\n                    if (!event.isDone) {\r\n                        // If event should be done only once, remove it.\r\n                        if (event.onlyOnce) {\r\n                            events.splice(index, 1);\r\n                            index--;\r\n                        }\r\n                        event.isDone = true;\r\n                        event.action(currentFrame);\r\n                    } // Don't do anything if the event has already been done.\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!returnValue) {\r\n            this._stopped = true;\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n", "import { Observable } from \"core/Misc/observable\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { RuntimeAnimation } from \"./runtimeAnimation\";\r\nimport { Animation } from \"./animation\";\r\nimport { PrecisionDate } from \"core/Misc/precisionDate\";\r\nimport { Matrix, Quaternion, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Bone } from \"core/Bones/bone\";\r\nimport type { Node } from \"../node\";\r\n\r\n/**\r\n * Class used to store an actual running animation\r\n */\r\nexport class Animatable {\r\n    private _localDelayOffset: Nullable<number> = null;\r\n    private _pausedDelay: Nullable<number> = null;\r\n    private _manualJumpDelay: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _runtimeAnimations = new Array<RuntimeAnimation>();\r\n    private _paused = false;\r\n    private _scene: Scene;\r\n    private _speedRatio = 1;\r\n    private _weight = -1.0;\r\n    private _syncRoot: Nullable<Animatable> = null;\r\n    private _frameToSyncFromJump: Nullable<number> = null;\r\n    private _goToFrame: Nullable<number> = null;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the animatable must be disposed and removed at the end of the animation.\r\n     * This will only apply for non looping animation (default is true)\r\n     */\r\n    public disposeOnEnd = true;\r\n\r\n    /**\r\n     * Gets a boolean indicating if the animation has started\r\n     */\r\n    public animationStarted = false;\r\n\r\n    /**\r\n     * Observer raised when the animation ends\r\n     */\r\n    public onAnimationEndObservable = new Observable<Animatable>();\r\n\r\n    /**\r\n     * Observer raised when the animation loops\r\n     */\r\n    public onAnimationLoopObservable = new Observable<Animatable>();\r\n\r\n    /**\r\n     * Gets the root Animatable used to synchronize and normalize animations\r\n     */\r\n    public get syncRoot(): Nullable<Animatable> {\r\n        return this._syncRoot;\r\n    }\r\n\r\n    /**\r\n     * Gets the current frame of the first RuntimeAnimation\r\n     * Used to synchronize Animatables\r\n     */\r\n    public get masterFrame(): number {\r\n        if (this._runtimeAnimations.length === 0) {\r\n            return 0;\r\n        }\r\n\r\n        return this._runtimeAnimations[0].currentFrame;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the animatable weight (-1.0 by default meaning not weighted)\r\n     */\r\n    public get weight(): number {\r\n        return this._weight;\r\n    }\r\n\r\n    public set weight(value: number) {\r\n        if (value === -1) {\r\n            // -1 is ok and means no weight\r\n            this._weight = -1;\r\n            return;\r\n        }\r\n\r\n        // Else weight must be in [0, 1] range\r\n        this._weight = Math.min(Math.max(value, 0), 1.0);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the speed ratio to apply to the animatable (1.0 by default)\r\n     */\r\n    public get speedRatio(): number {\r\n        return this._speedRatio;\r\n    }\r\n\r\n    public set speedRatio(value: number) {\r\n        for (let index = 0; index < this._runtimeAnimations.length; index++) {\r\n            const animation = this._runtimeAnimations[index];\r\n\r\n            animation._prepareForSpeedRatioChange(value);\r\n        }\r\n        this._speedRatio = value;\r\n\r\n        // Resync _manualJumpDelay in case goToFrame was called before speedRatio was set.\r\n        if (this._goToFrame !== null) {\r\n            this.goToFrame(this._goToFrame);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the elapsed time since the animatable started in milliseconds\r\n     */\r\n    public get elapsedTime(): number {\r\n        return this._localDelayOffset === null ? 0 : this._scene._animationTime - this._localDelayOffset;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Animatable\r\n     * @param scene defines the hosting scene\r\n     * @param target defines the target object\r\n     * @param fromFrame defines the starting frame number (default is 0)\r\n     * @param toFrame defines the ending frame number (default is 100)\r\n     * @param loopAnimation defines if the animation must loop (default is false)\r\n     * @param speedRatio defines the factor to apply to animation speed (default is 1)\r\n     * @param onAnimationEnd defines a callback to call when animation ends if it is not looping\r\n     * @param animations defines a group of animation to add to the new Animatable\r\n     * @param onAnimationLoop defines a callback to call when animation loops\r\n     * @param isAdditive defines whether the animation should be evaluated additively\r\n     * @param playOrder defines the order in which this animatable should be processed in the list of active animatables (default: 0)\r\n     */\r\n    constructor(\r\n        scene: Scene,\r\n        /** defines the target object */\r\n        public target: any,\r\n        /** [0] defines the starting frame number (default is 0) */\r\n        public fromFrame: number = 0,\r\n        /** [100] defines the ending frame number (default is 100) */\r\n        public toFrame: number = 100,\r\n        /** [false] defines if the animation must loop (default is false)  */\r\n        public loopAnimation: boolean = false,\r\n        speedRatio: number = 1.0,\r\n        /** defines a callback to call when animation ends if it is not looping */\r\n        public onAnimationEnd?: Nullable<() => void>,\r\n        animations?: Animation[],\r\n        /** defines a callback to call when animation loops */\r\n        public onAnimationLoop?: Nullable<() => void>,\r\n        /** [false] defines whether the animation should be evaluated additively */\r\n        public isAdditive: boolean = false,\r\n        /** [0] defines the order in which this animatable should be processed in the list of active animatables (default: 0) */\r\n        public playOrder = 0\r\n    ) {\r\n        this._scene = scene;\r\n        if (animations) {\r\n            this.appendAnimations(target, animations);\r\n        }\r\n\r\n        this._speedRatio = speedRatio;\r\n        scene._activeAnimatables.push(this);\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Synchronize and normalize current Animatable with a source Animatable\r\n     * This is useful when using animation weights and when animations are not of the same length\r\n     * @param root defines the root Animatable to synchronize with (null to stop synchronizing)\r\n     * @returns the current Animatable\r\n     */\r\n    public syncWith(root: Nullable<Animatable>): Animatable {\r\n        this._syncRoot = root;\r\n\r\n        if (root) {\r\n            // Make sure this animatable will animate after the root\r\n            const index = this._scene._activeAnimatables.indexOf(this);\r\n            if (index > -1) {\r\n                this._scene._activeAnimatables.splice(index, 1);\r\n                this._scene._activeAnimatables.push(this);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of runtime animations\r\n     * @returns an array of RuntimeAnimation\r\n     */\r\n    public getAnimations(): RuntimeAnimation[] {\r\n        return this._runtimeAnimations;\r\n    }\r\n\r\n    /**\r\n     * Adds more animations to the current animatable\r\n     * @param target defines the target of the animations\r\n     * @param animations defines the new animations to add\r\n     */\r\n    public appendAnimations(target: any, animations: Animation[]): void {\r\n        for (let index = 0; index < animations.length; index++) {\r\n            const animation = animations[index];\r\n\r\n            const newRuntimeAnimation = new RuntimeAnimation(target, animation, this._scene, this);\r\n            newRuntimeAnimation._onLoop = () => {\r\n                this.onAnimationLoopObservable.notifyObservers(this);\r\n                if (this.onAnimationLoop) {\r\n                    this.onAnimationLoop();\r\n                }\r\n            };\r\n\r\n            this._runtimeAnimations.push(newRuntimeAnimation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the source animation for a specific property\r\n     * @param property defines the property to look for\r\n     * @returns null or the source animation for the given property\r\n     */\r\n    public getAnimationByTargetProperty(property: string): Nullable<Animation> {\r\n        const runtimeAnimations = this._runtimeAnimations;\r\n\r\n        for (let index = 0; index < runtimeAnimations.length; index++) {\r\n            if (runtimeAnimations[index].animation.targetProperty === property) {\r\n                return runtimeAnimations[index].animation;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the runtime animation for a specific property\r\n     * @param property defines the property to look for\r\n     * @returns null or the runtime animation for the given property\r\n     */\r\n    public getRuntimeAnimationByTargetProperty(property: string): Nullable<RuntimeAnimation> {\r\n        const runtimeAnimations = this._runtimeAnimations;\r\n\r\n        for (let index = 0; index < runtimeAnimations.length; index++) {\r\n            if (runtimeAnimations[index].animation.targetProperty === property) {\r\n                return runtimeAnimations[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Resets the animatable to its original state\r\n     */\r\n    public reset(): void {\r\n        const runtimeAnimations = this._runtimeAnimations;\r\n\r\n        for (let index = 0; index < runtimeAnimations.length; index++) {\r\n            runtimeAnimations[index].reset(true);\r\n        }\r\n\r\n        this._localDelayOffset = null;\r\n        this._pausedDelay = null;\r\n    }\r\n\r\n    /**\r\n     * Allows the animatable to blend with current running animations\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#animation-blending\r\n     * @param blendingSpeed defines the blending speed to use\r\n     */\r\n    public enableBlending(blendingSpeed: number): void {\r\n        const runtimeAnimations = this._runtimeAnimations;\r\n\r\n        for (let index = 0; index < runtimeAnimations.length; index++) {\r\n            runtimeAnimations[index].animation.enableBlending = true;\r\n            runtimeAnimations[index].animation.blendingSpeed = blendingSpeed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disable animation blending\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#animation-blending\r\n     */\r\n    public disableBlending(): void {\r\n        const runtimeAnimations = this._runtimeAnimations;\r\n\r\n        for (let index = 0; index < runtimeAnimations.length; index++) {\r\n            runtimeAnimations[index].animation.enableBlending = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Jump directly to a given frame\r\n     * @param frame defines the frame to jump to\r\n     * @param useWeight defines whether the animation weight should be applied to the image to be jumped to (false by default)\r\n     */\r\n    public goToFrame(frame: number, useWeight = false): void {\r\n        const runtimeAnimations = this._runtimeAnimations;\r\n\r\n        if (runtimeAnimations[0]) {\r\n            const fps = runtimeAnimations[0].animation.framePerSecond;\r\n            this._frameToSyncFromJump = this._frameToSyncFromJump ?? runtimeAnimations[0].currentFrame;\r\n            const delay = this.speedRatio === 0 ? 0 : (((frame - this._frameToSyncFromJump) / fps) * 1000) / this.speedRatio;\r\n            this._manualJumpDelay = -delay;\r\n        }\r\n\r\n        for (let index = 0; index < runtimeAnimations.length; index++) {\r\n            runtimeAnimations[index].goToFrame(frame, useWeight ? this._weight : -1);\r\n        }\r\n\r\n        this._goToFrame = frame;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the animations for this animatable are paused\r\n     */\r\n    public get paused() {\r\n        return this._paused;\r\n    }\r\n\r\n    /**\r\n     * Pause the animation\r\n     */\r\n    public pause(): void {\r\n        if (this._paused) {\r\n            return;\r\n        }\r\n        this._paused = true;\r\n    }\r\n\r\n    /**\r\n     * Restart the animation\r\n     */\r\n    public restart(): void {\r\n        this._paused = false;\r\n    }\r\n\r\n    private _raiseOnAnimationEnd() {\r\n        if (this.onAnimationEnd) {\r\n            this.onAnimationEnd();\r\n        }\r\n\r\n        this.onAnimationEndObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Stop and delete the current animation\r\n     * @param animationName defines a string used to only stop some of the runtime animations instead of all\r\n     * @param targetMask a function that determines if the animation should be stopped based on its target (all animations will be stopped if both this and animationName are empty)\r\n     * @param useGlobalSplice if true, the animatables will be removed by the caller of this function (false by default)\r\n     * @param skipOnAnimationEnd defines if the system should not raise onAnimationEnd. Default is false\r\n     */\r\n    public stop(animationName?: string, targetMask?: (target: any) => boolean, useGlobalSplice = false, skipOnAnimationEnd = false): void {\r\n        if (animationName || targetMask) {\r\n            const idx = this._scene._activeAnimatables.indexOf(this);\r\n\r\n            if (idx > -1) {\r\n                const runtimeAnimations = this._runtimeAnimations;\r\n\r\n                for (let index = runtimeAnimations.length - 1; index >= 0; index--) {\r\n                    const runtimeAnimation = runtimeAnimations[index];\r\n                    if (animationName && runtimeAnimation.animation.name != animationName) {\r\n                        continue;\r\n                    }\r\n                    if (targetMask && !targetMask(runtimeAnimation.target)) {\r\n                        continue;\r\n                    }\r\n\r\n                    runtimeAnimation.dispose();\r\n                    runtimeAnimations.splice(index, 1);\r\n                }\r\n\r\n                if (runtimeAnimations.length == 0) {\r\n                    if (!useGlobalSplice) {\r\n                        this._scene._activeAnimatables.splice(idx, 1);\r\n                    }\r\n                    if (!skipOnAnimationEnd) {\r\n                        this._raiseOnAnimationEnd();\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            const index = this._scene._activeAnimatables.indexOf(this);\r\n\r\n            if (index > -1) {\r\n                if (!useGlobalSplice) {\r\n                    this._scene._activeAnimatables.splice(index, 1);\r\n                }\r\n                const runtimeAnimations = this._runtimeAnimations;\r\n\r\n                for (let index = 0; index < runtimeAnimations.length; index++) {\r\n                    runtimeAnimations[index].dispose();\r\n                }\r\n\r\n                this._runtimeAnimations.length = 0;\r\n\r\n                if (!skipOnAnimationEnd) {\r\n                    this._raiseOnAnimationEnd();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wait asynchronously for the animation to end\r\n     * @returns a promise which will be fulfilled when the animation ends\r\n     */\r\n    public waitAsync(): Promise<Animatable> {\r\n        return new Promise((resolve) => {\r\n            this.onAnimationEndObservable.add(\r\n                () => {\r\n                    resolve(this);\r\n                },\r\n                undefined,\r\n                undefined,\r\n                this,\r\n                true\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _animate(delay: number): boolean {\r\n        if (this._paused) {\r\n            this.animationStarted = false;\r\n            if (this._pausedDelay === null) {\r\n                this._pausedDelay = delay;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        if (this._localDelayOffset === null) {\r\n            this._localDelayOffset = delay;\r\n            this._pausedDelay = null;\r\n        } else if (this._pausedDelay !== null) {\r\n            this._localDelayOffset += delay - this._pausedDelay;\r\n            this._pausedDelay = null;\r\n        }\r\n\r\n        if (this._manualJumpDelay !== null) {\r\n            this._localDelayOffset += this._manualJumpDelay;\r\n            this._manualJumpDelay = null;\r\n            this._frameToSyncFromJump = null;\r\n        }\r\n\r\n        this._goToFrame = null;\r\n\r\n        if (this._weight === 0) {\r\n            // We consider that an animatable with a weight === 0 is \"actively\" paused\r\n            return true;\r\n        }\r\n\r\n        // Animating\r\n        let running = false;\r\n        const runtimeAnimations = this._runtimeAnimations;\r\n        let index: number;\r\n\r\n        for (index = 0; index < runtimeAnimations.length; index++) {\r\n            const animation = runtimeAnimations[index];\r\n            const isRunning = animation.animate(delay - this._localDelayOffset, this.fromFrame, this.toFrame, this.loopAnimation, this._speedRatio, this._weight);\r\n            running = running || isRunning;\r\n        }\r\n\r\n        this.animationStarted = running;\r\n\r\n        if (!running) {\r\n            if (this.disposeOnEnd) {\r\n                // Remove from active animatables\r\n                index = this._scene._activeAnimatables.indexOf(this);\r\n                this._scene._activeAnimatables.splice(index, 1);\r\n\r\n                // Dispose all runtime animations\r\n                for (index = 0; index < runtimeAnimations.length; index++) {\r\n                    runtimeAnimations[index].dispose();\r\n                }\r\n            }\r\n\r\n            this._raiseOnAnimationEnd();\r\n\r\n            if (this.disposeOnEnd) {\r\n                this.onAnimationEnd = null;\r\n                this.onAnimationLoop = null;\r\n                this.onAnimationLoopObservable.clear();\r\n                this.onAnimationEndObservable.clear();\r\n            }\r\n        }\r\n\r\n        return running;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nfunction ProcessLateAnimationBindingsForMatrices(holder: {\r\n    totalWeight: number;\r\n    totalAdditiveWeight: number;\r\n    animations: RuntimeAnimation[];\r\n    additiveAnimations: RuntimeAnimation[];\r\n    originalValue: Matrix;\r\n}): any {\r\n    if (holder.totalWeight === 0 && holder.totalAdditiveWeight === 0) {\r\n        return holder.originalValue;\r\n    }\r\n\r\n    let normalizer = 1.0;\r\n    const finalPosition = TmpVectors.Vector3[0];\r\n    const finalScaling = TmpVectors.Vector3[1];\r\n    const finalQuaternion = TmpVectors.Quaternion[0];\r\n    let startIndex = 0;\r\n    const originalAnimation = holder.animations[0];\r\n    const originalValue = holder.originalValue;\r\n\r\n    let scale = 1;\r\n    let skipOverride = false;\r\n    if (holder.totalWeight < 1.0) {\r\n        // We need to mix the original value in\r\n        scale = 1.0 - holder.totalWeight;\r\n        originalValue.decompose(finalScaling, finalQuaternion, finalPosition);\r\n    } else {\r\n        startIndex = 1;\r\n        // We need to normalize the weights\r\n        normalizer = holder.totalWeight;\r\n        scale = originalAnimation.weight / normalizer;\r\n        if (scale == 1) {\r\n            if (holder.totalAdditiveWeight) {\r\n                skipOverride = true;\r\n            } else {\r\n                return originalAnimation.currentValue;\r\n            }\r\n        }\r\n\r\n        originalAnimation.currentValue.decompose(finalScaling, finalQuaternion, finalPosition);\r\n    }\r\n\r\n    // Add up the override animations\r\n    if (!skipOverride) {\r\n        finalScaling.scaleInPlace(scale);\r\n        finalPosition.scaleInPlace(scale);\r\n        finalQuaternion.scaleInPlace(scale);\r\n\r\n        for (let animIndex = startIndex; animIndex < holder.animations.length; animIndex++) {\r\n            const runtimeAnimation = holder.animations[animIndex];\r\n            if (runtimeAnimation.weight === 0) {\r\n                continue;\r\n            }\r\n\r\n            scale = runtimeAnimation.weight / normalizer;\r\n            const currentPosition = TmpVectors.Vector3[2];\r\n            const currentScaling = TmpVectors.Vector3[3];\r\n            const currentQuaternion = TmpVectors.Quaternion[1];\r\n\r\n            runtimeAnimation.currentValue.decompose(currentScaling, currentQuaternion, currentPosition);\r\n\r\n            currentScaling.scaleAndAddToRef(scale, finalScaling);\r\n            currentQuaternion.scaleAndAddToRef(Quaternion.Dot(finalQuaternion, currentQuaternion) > 0 ? scale : -scale, finalQuaternion);\r\n            currentPosition.scaleAndAddToRef(scale, finalPosition);\r\n        }\r\n\r\n        finalQuaternion.normalize();\r\n    }\r\n\r\n    // Add up the additive animations\r\n    for (let animIndex = 0; animIndex < holder.additiveAnimations.length; animIndex++) {\r\n        const runtimeAnimation = holder.additiveAnimations[animIndex];\r\n        if (runtimeAnimation.weight === 0) {\r\n            continue;\r\n        }\r\n\r\n        const currentPosition = TmpVectors.Vector3[2];\r\n        const currentScaling = TmpVectors.Vector3[3];\r\n        const currentQuaternion = TmpVectors.Quaternion[1];\r\n\r\n        runtimeAnimation.currentValue.decompose(currentScaling, currentQuaternion, currentPosition);\r\n        currentScaling.multiplyToRef(finalScaling, currentScaling);\r\n        Vector3.LerpToRef(finalScaling, currentScaling, runtimeAnimation.weight, finalScaling);\r\n        finalQuaternion.multiplyToRef(currentQuaternion, currentQuaternion);\r\n        Quaternion.SlerpToRef(finalQuaternion, currentQuaternion, runtimeAnimation.weight, finalQuaternion);\r\n        currentPosition.scaleAndAddToRef(runtimeAnimation.weight, finalPosition);\r\n    }\r\n\r\n    const workValue = originalAnimation ? originalAnimation._animationState.workValue : TmpVectors.Matrix[0].clone();\r\n    Matrix.ComposeToRef(finalScaling, finalQuaternion, finalPosition, workValue);\r\n    return workValue;\r\n}\r\n\r\n/** @internal */\r\nfunction ProcessLateAnimationBindingsForQuaternions(\r\n    holder: {\r\n        totalWeight: number;\r\n        totalAdditiveWeight: number;\r\n        animations: RuntimeAnimation[];\r\n        additiveAnimations: RuntimeAnimation[];\r\n        originalValue: Quaternion;\r\n    },\r\n    refQuaternion: Quaternion\r\n): Quaternion {\r\n    if (holder.totalWeight === 0 && holder.totalAdditiveWeight === 0) {\r\n        return refQuaternion;\r\n    }\r\n\r\n    const originalAnimation = holder.animations[0];\r\n    const originalValue = holder.originalValue;\r\n    let cumulativeQuaternion = refQuaternion;\r\n\r\n    if (holder.totalWeight === 0 && holder.totalAdditiveWeight > 0) {\r\n        cumulativeQuaternion.copyFrom(originalValue);\r\n    } else if (holder.animations.length === 1) {\r\n        Quaternion.SlerpToRef(originalValue, originalAnimation.currentValue, Math.min(1.0, holder.totalWeight), cumulativeQuaternion);\r\n\r\n        if (holder.totalAdditiveWeight === 0) {\r\n            return cumulativeQuaternion;\r\n        }\r\n    } else if (holder.animations.length > 1) {\r\n        // Add up the override animations\r\n        let normalizer = 1.0;\r\n        let quaternions: Array<Quaternion>;\r\n        let weights: Array<number>;\r\n\r\n        if (holder.totalWeight < 1.0) {\r\n            const scale = 1.0 - holder.totalWeight;\r\n\r\n            quaternions = [];\r\n            weights = [];\r\n\r\n            quaternions.push(originalValue);\r\n            weights.push(scale);\r\n        } else {\r\n            if (holder.animations.length === 2) {\r\n                // Slerp as soon as we can\r\n                Quaternion.SlerpToRef(holder.animations[0].currentValue, holder.animations[1].currentValue, holder.animations[1].weight / holder.totalWeight, refQuaternion);\r\n\r\n                if (holder.totalAdditiveWeight === 0) {\r\n                    return refQuaternion;\r\n                }\r\n            }\r\n\r\n            quaternions = [];\r\n            weights = [];\r\n            normalizer = holder.totalWeight;\r\n        }\r\n\r\n        for (let animIndex = 0; animIndex < holder.animations.length; animIndex++) {\r\n            const runtimeAnimation = holder.animations[animIndex];\r\n            quaternions.push(runtimeAnimation.currentValue);\r\n            weights.push(runtimeAnimation.weight / normalizer);\r\n        }\r\n\r\n        // https://gamedev.stackexchange.com/questions/62354/method-for-interpolation-between-3-quaternions\r\n\r\n        let cumulativeAmount = 0;\r\n        for (let index = 0; index < quaternions.length; ) {\r\n            if (!index) {\r\n                Quaternion.SlerpToRef(quaternions[index], quaternions[index + 1], weights[index + 1] / (weights[index] + weights[index + 1]), refQuaternion);\r\n                cumulativeQuaternion = refQuaternion;\r\n                cumulativeAmount = weights[index] + weights[index + 1];\r\n                index += 2;\r\n                continue;\r\n            }\r\n            cumulativeAmount += weights[index];\r\n            Quaternion.SlerpToRef(cumulativeQuaternion, quaternions[index], weights[index] / cumulativeAmount, cumulativeQuaternion);\r\n            index++;\r\n        }\r\n    }\r\n\r\n    // Add up the additive animations\r\n    for (let animIndex = 0; animIndex < holder.additiveAnimations.length; animIndex++) {\r\n        const runtimeAnimation = holder.additiveAnimations[animIndex];\r\n        if (runtimeAnimation.weight === 0) {\r\n            continue;\r\n        }\r\n\r\n        cumulativeQuaternion.multiplyToRef(runtimeAnimation.currentValue, TmpVectors.Quaternion[0]);\r\n        Quaternion.SlerpToRef(cumulativeQuaternion, TmpVectors.Quaternion[0], runtimeAnimation.weight, cumulativeQuaternion);\r\n    }\r\n\r\n    return cumulativeQuaternion!;\r\n}\r\n\r\n/** @internal */\r\nfunction ProcessLateAnimationBindings(scene: Scene): void {\r\n    if (!scene._registeredForLateAnimationBindings.length) {\r\n        return;\r\n    }\r\n    for (let index = 0; index < scene._registeredForLateAnimationBindings.length; index++) {\r\n        const target = scene._registeredForLateAnimationBindings.data[index];\r\n\r\n        for (const path in target._lateAnimationHolders) {\r\n            const holder = target._lateAnimationHolders[path];\r\n            const originalAnimation: RuntimeAnimation = holder.animations[0];\r\n            const originalValue = holder.originalValue;\r\n            if (originalValue === undefined || originalValue === null) {\r\n                continue;\r\n            }\r\n            const matrixDecomposeMode = Animation.AllowMatrixDecomposeForInterpolation && originalValue.m; // ie. data is matrix\r\n\r\n            let finalValue: any = target[path];\r\n            if (matrixDecomposeMode) {\r\n                finalValue = ProcessLateAnimationBindingsForMatrices(holder);\r\n            } else {\r\n                const quaternionMode = originalValue.w !== undefined;\r\n                if (quaternionMode) {\r\n                    finalValue = ProcessLateAnimationBindingsForQuaternions(holder, finalValue || Quaternion.Identity());\r\n                } else {\r\n                    let startIndex = 0;\r\n                    let normalizer = 1.0;\r\n\r\n                    const originalAnimationIsLoopRelativeFromCurrent =\r\n                        originalAnimation && originalAnimation._animationState.loopMode === Animation.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT;\r\n\r\n                    if (holder.totalWeight < 1.0) {\r\n                        // We need to mix the original value in\r\n                        if (originalAnimationIsLoopRelativeFromCurrent) {\r\n                            finalValue = originalValue.clone ? originalValue.clone() : originalValue;\r\n                        } else if (originalAnimation && originalValue.scale) {\r\n                            finalValue = originalValue.scale(1.0 - holder.totalWeight);\r\n                        } else if (originalAnimation) {\r\n                            finalValue = originalValue * (1.0 - holder.totalWeight);\r\n                        } else if (originalValue.clone) {\r\n                            finalValue = originalValue.clone();\r\n                        } else {\r\n                            finalValue = originalValue;\r\n                        }\r\n                    } else if (originalAnimation) {\r\n                        // We need to normalize the weights\r\n                        normalizer = holder.totalWeight;\r\n                        const scale = originalAnimation.weight / normalizer;\r\n                        if (scale !== 1) {\r\n                            if (originalAnimation.currentValue.scale) {\r\n                                finalValue = originalAnimation.currentValue.scale(scale);\r\n                            } else {\r\n                                finalValue = originalAnimation.currentValue * scale;\r\n                            }\r\n                        } else {\r\n                            finalValue = originalAnimation.currentValue;\r\n                        }\r\n\r\n                        if (originalAnimationIsLoopRelativeFromCurrent) {\r\n                            if (finalValue.addToRef) {\r\n                                finalValue.addToRef(originalValue, finalValue);\r\n                            } else {\r\n                                finalValue += originalValue;\r\n                            }\r\n                        }\r\n\r\n                        startIndex = 1;\r\n                    }\r\n\r\n                    // Add up the override animations\r\n                    for (let animIndex = startIndex; animIndex < holder.animations.length; animIndex++) {\r\n                        const runtimeAnimation = holder.animations[animIndex];\r\n                        const scale = runtimeAnimation.weight / normalizer;\r\n\r\n                        if (!scale) {\r\n                            continue;\r\n                        } else if (runtimeAnimation.currentValue.scaleAndAddToRef) {\r\n                            runtimeAnimation.currentValue.scaleAndAddToRef(scale, finalValue);\r\n                        } else {\r\n                            finalValue += runtimeAnimation.currentValue * scale;\r\n                        }\r\n                    }\r\n\r\n                    // Add up the additive animations\r\n                    for (let animIndex = 0; animIndex < holder.additiveAnimations.length; animIndex++) {\r\n                        const runtimeAnimation = holder.additiveAnimations[animIndex];\r\n                        const scale: number = runtimeAnimation.weight;\r\n\r\n                        if (!scale) {\r\n                            continue;\r\n                        } else if (runtimeAnimation.currentValue.scaleAndAddToRef) {\r\n                            runtimeAnimation.currentValue.scaleAndAddToRef(scale, finalValue);\r\n                        } else {\r\n                            finalValue += runtimeAnimation.currentValue * scale;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            target[path] = finalValue;\r\n        }\r\n\r\n        target._lateAnimationHolders = {};\r\n    }\r\n    scene._registeredForLateAnimationBindings.reset();\r\n}\r\n\r\n/** @internal */\r\nexport function RegisterTargetForLateAnimationBinding(scene: Scene, runtimeAnimation: RuntimeAnimation, originalValue: any): void {\r\n    const target = runtimeAnimation.target;\r\n    scene._registeredForLateAnimationBindings.pushNoDuplicate(target);\r\n\r\n    if (!target._lateAnimationHolders) {\r\n        target._lateAnimationHolders = {};\r\n    }\r\n\r\n    if (!target._lateAnimationHolders[runtimeAnimation.targetPath]) {\r\n        target._lateAnimationHolders[runtimeAnimation.targetPath] = {\r\n            totalWeight: 0,\r\n            totalAdditiveWeight: 0,\r\n            animations: [],\r\n            additiveAnimations: [],\r\n            originalValue: originalValue,\r\n        };\r\n    }\r\n\r\n    if (runtimeAnimation.isAdditive) {\r\n        target._lateAnimationHolders[runtimeAnimation.targetPath].additiveAnimations.push(runtimeAnimation);\r\n        target._lateAnimationHolders[runtimeAnimation.targetPath].totalAdditiveWeight += runtimeAnimation.weight;\r\n    } else {\r\n        target._lateAnimationHolders[runtimeAnimation.targetPath].animations.push(runtimeAnimation);\r\n        target._lateAnimationHolders[runtimeAnimation.targetPath].totalWeight += runtimeAnimation.weight;\r\n    }\r\n}\r\n\r\n/**\r\n * Initialize all the inter dependecies between the animations and Scene and Bone\r\n * @param sceneClass defines the scene prototype to use\r\n * @param boneClass defines the bone prototype to use\r\n */\r\nexport function AddAnimationExtensions(sceneClass: typeof Scene, boneClass: typeof Bone): void {\r\n    if (boneClass) {\r\n        boneClass.prototype.copyAnimationRange = function (\r\n            source: Bone,\r\n            rangeName: string,\r\n            frameOffset: number,\r\n            rescaleAsRequired = false,\r\n            skelDimensionsRatio: Nullable<Vector3> = null\r\n        ): boolean {\r\n            // all animation may be coming from a library skeleton, so may need to create animation\r\n            if (this.animations.length === 0) {\r\n                this.animations.push(new Animation(this.name, \"_matrix\", source.animations[0].framePerSecond, Animation.ANIMATIONTYPE_MATRIX, 0));\r\n                this.animations[0].setKeys([]);\r\n            }\r\n\r\n            // get animation info / verify there is such a range from the source bone\r\n            const sourceRange = source.animations[0].getRange(rangeName);\r\n            if (!sourceRange) {\r\n                return false;\r\n            }\r\n            const from = sourceRange.from;\r\n            const to = sourceRange.to;\r\n            const sourceKeys = source.animations[0].getKeys();\r\n\r\n            // rescaling prep\r\n            const sourceBoneLength = source.length;\r\n            const sourceParent = source.getParent();\r\n            const parent = this.getParent();\r\n            const parentScalingReqd = rescaleAsRequired && sourceParent && sourceBoneLength && this.length && sourceBoneLength !== this.length;\r\n            const parentRatio = parentScalingReqd && parent && sourceParent ? parent.length / sourceParent.length : 1;\r\n\r\n            const dimensionsScalingReqd =\r\n                rescaleAsRequired && !parent && skelDimensionsRatio && (skelDimensionsRatio.x !== 1 || skelDimensionsRatio.y !== 1 || skelDimensionsRatio.z !== 1);\r\n\r\n            const destKeys = this.animations[0].getKeys();\r\n\r\n            // loop vars declaration\r\n            let orig: { frame: number; value: Matrix };\r\n            let origTranslation: Vector3;\r\n            let mat: Matrix;\r\n\r\n            for (let key = 0, nKeys = sourceKeys.length; key < nKeys; key++) {\r\n                orig = sourceKeys[key];\r\n                if (orig.frame >= from && orig.frame <= to) {\r\n                    if (rescaleAsRequired) {\r\n                        mat = orig.value.clone();\r\n\r\n                        // scale based on parent ratio, when bone has parent\r\n                        if (parentScalingReqd) {\r\n                            origTranslation = mat.getTranslation();\r\n                            mat.setTranslation(origTranslation.scaleInPlace(parentRatio));\r\n\r\n                            // scale based on skeleton dimension ratio when root bone, and value is passed\r\n                        } else if (dimensionsScalingReqd && skelDimensionsRatio) {\r\n                            origTranslation = mat.getTranslation();\r\n                            mat.setTranslation(origTranslation.multiplyInPlace(skelDimensionsRatio));\r\n\r\n                            // use original when root bone, and no data for skelDimensionsRatio\r\n                        } else {\r\n                            mat = orig.value;\r\n                        }\r\n                    } else {\r\n                        mat = orig.value;\r\n                    }\r\n                    destKeys.push({ frame: orig.frame + frameOffset, value: mat });\r\n                }\r\n            }\r\n            this.animations[0].createRange(rangeName, from + frameOffset, to + frameOffset);\r\n            return true;\r\n        };\r\n    }\r\n\r\n    if (!sceneClass) {\r\n        return;\r\n    }\r\n\r\n    sceneClass.prototype._animate = function (customDeltaTime?: number): void {\r\n        if (!this.animationsEnabled) {\r\n            return;\r\n        }\r\n\r\n        // Getting time\r\n        const now = PrecisionDate.Now;\r\n        if (!this._animationTimeLast) {\r\n            if (this._pendingData.length > 0) {\r\n                return;\r\n            }\r\n            this._animationTimeLast = now;\r\n        }\r\n\r\n        this.deltaTime = customDeltaTime !== undefined ? customDeltaTime : this.useConstantAnimationDeltaTime ? 16.0 : (now - this._animationTimeLast) * this.animationTimeScale;\r\n        this._animationTimeLast = now;\r\n\r\n        const animatables = this._activeAnimatables;\r\n        if (animatables.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this._animationTime += this.deltaTime;\r\n        const animationTime = this._animationTime;\r\n\r\n        for (let index = 0; index < animatables.length; index++) {\r\n            const animatable = animatables[index];\r\n\r\n            if (!animatable._animate(animationTime) && animatable.disposeOnEnd) {\r\n                index--; // Array was updated\r\n            }\r\n        }\r\n\r\n        // Late animation bindings\r\n        ProcessLateAnimationBindings(this);\r\n    };\r\n\r\n    sceneClass.prototype.sortActiveAnimatables = function (): void {\r\n        this._activeAnimatables.sort((a, b) => {\r\n            return a.playOrder - b.playOrder;\r\n        });\r\n    };\r\n\r\n    sceneClass.prototype.beginWeightedAnimation = function (\r\n        target: any,\r\n        from: number,\r\n        to: number,\r\n        weight = 1.0,\r\n        loop?: boolean,\r\n        speedRatio: number = 1.0,\r\n        onAnimationEnd?: () => void,\r\n        animatable?: Animatable,\r\n        targetMask?: (target: any) => boolean,\r\n        onAnimationLoop?: () => void,\r\n        isAdditive = false\r\n    ): Animatable {\r\n        const returnedAnimatable = this.beginAnimation(target, from, to, loop, speedRatio, onAnimationEnd, animatable, false, targetMask, onAnimationLoop, isAdditive);\r\n        returnedAnimatable.weight = weight;\r\n\r\n        return returnedAnimatable;\r\n    };\r\n\r\n    sceneClass.prototype.beginAnimation = function (\r\n        target: any,\r\n        from: number,\r\n        to: number,\r\n        loop?: boolean,\r\n        speedRatio: number = 1.0,\r\n        onAnimationEnd?: () => void,\r\n        animatable?: Animatable,\r\n        stopCurrent = true,\r\n        targetMask?: (target: any) => boolean,\r\n        onAnimationLoop?: () => void,\r\n        isAdditive = false\r\n    ): Animatable {\r\n        // get speed speedRatio, to and from, based on the sign and value(s)\r\n        if (speedRatio < 0) {\r\n            const tmp = from;\r\n            from = to;\r\n            to = tmp;\r\n            speedRatio = -speedRatio;\r\n        }\r\n        // if from > to switch speed ratio\r\n        if (from > to) {\r\n            speedRatio = -speedRatio;\r\n        }\r\n        if (stopCurrent) {\r\n            this.stopAnimation(target, undefined, targetMask);\r\n        }\r\n\r\n        if (!animatable) {\r\n            animatable = new Animatable(this, target, from, to, loop, speedRatio, onAnimationEnd, undefined, onAnimationLoop, isAdditive);\r\n        }\r\n\r\n        const shouldRunTargetAnimations = targetMask ? targetMask(target) : true;\r\n        // Local animations\r\n        if (target.animations && shouldRunTargetAnimations) {\r\n            animatable.appendAnimations(target, target.animations);\r\n        }\r\n\r\n        // Children animations\r\n        if (target.getAnimatables) {\r\n            const animatables = target.getAnimatables();\r\n            for (let index = 0; index < animatables.length; index++) {\r\n                this.beginAnimation(animatables[index], from, to, loop, speedRatio, onAnimationEnd, animatable, stopCurrent, targetMask, onAnimationLoop);\r\n            }\r\n        }\r\n\r\n        animatable.reset();\r\n\r\n        return animatable;\r\n    };\r\n\r\n    sceneClass.prototype.beginHierarchyAnimation = function (\r\n        target: any,\r\n        directDescendantsOnly: boolean,\r\n        from: number,\r\n        to: number,\r\n        loop?: boolean,\r\n        speedRatio: number = 1.0,\r\n        onAnimationEnd?: () => void,\r\n        animatable?: Animatable,\r\n        stopCurrent = true,\r\n        targetMask?: (target: any) => boolean,\r\n        onAnimationLoop?: () => void,\r\n        isAdditive = false\r\n    ): Animatable[] {\r\n        const children = target.getDescendants(directDescendantsOnly);\r\n\r\n        const result = [];\r\n        result.push(this.beginAnimation(target, from, to, loop, speedRatio, onAnimationEnd, animatable, stopCurrent, targetMask, undefined, isAdditive));\r\n        for (const child of children) {\r\n            result.push(this.beginAnimation(child, from, to, loop, speedRatio, onAnimationEnd, animatable, stopCurrent, targetMask, undefined, isAdditive));\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    sceneClass.prototype.beginDirectAnimation = function (\r\n        target: any,\r\n        animations: Animation[],\r\n        from: number,\r\n        to: number,\r\n        loop?: boolean,\r\n        speedRatio: number = 1.0,\r\n        onAnimationEnd?: () => void,\r\n        onAnimationLoop?: () => void,\r\n        isAdditive = false\r\n    ): Animatable {\r\n        // get speed speedRatio, to and from, based on the sign and value(s)\r\n        if (speedRatio < 0) {\r\n            const tmp = from;\r\n            from = to;\r\n            to = tmp;\r\n            speedRatio = -speedRatio;\r\n        }\r\n        // if from > to switch speed ratio\r\n        if (from > to) {\r\n            speedRatio = -speedRatio;\r\n        }\r\n        const animatable = new Animatable(this, target, from, to, loop, speedRatio, onAnimationEnd, animations, onAnimationLoop, isAdditive);\r\n\r\n        return animatable;\r\n    };\r\n\r\n    sceneClass.prototype.beginDirectHierarchyAnimation = function (\r\n        target: Node,\r\n        directDescendantsOnly: boolean,\r\n        animations: Animation[],\r\n        from: number,\r\n        to: number,\r\n        loop?: boolean,\r\n        speedRatio?: number,\r\n        onAnimationEnd?: () => void,\r\n        onAnimationLoop?: () => void,\r\n        isAdditive = false\r\n    ): Animatable[] {\r\n        const children = target.getDescendants(directDescendantsOnly);\r\n\r\n        const result = [];\r\n        result.push(this.beginDirectAnimation(target, animations, from, to, loop, speedRatio, onAnimationEnd, onAnimationLoop, isAdditive));\r\n        for (const child of children) {\r\n            result.push(this.beginDirectAnimation(child, animations, from, to, loop, speedRatio, onAnimationEnd, onAnimationLoop, isAdditive));\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    sceneClass.prototype.getAnimatableByTarget = function (target: any): Nullable<Animatable> {\r\n        for (let index = 0; index < this._activeAnimatables.length; index++) {\r\n            if (this._activeAnimatables[index].target === target) {\r\n                return this._activeAnimatables[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    sceneClass.prototype.getAllAnimatablesByTarget = function (target: any): Array<Animatable> {\r\n        const result = [];\r\n        for (let index = 0; index < this._activeAnimatables.length; index++) {\r\n            if (this._activeAnimatables[index].target === target) {\r\n                result.push(this._activeAnimatables[index]);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    sceneClass.prototype.stopAnimation = function (target: any, animationName?: string, targetMask?: (target: any) => boolean): void {\r\n        const animatables = this.getAllAnimatablesByTarget(target);\r\n\r\n        for (const animatable of animatables) {\r\n            animatable.stop(animationName, targetMask);\r\n        }\r\n    };\r\n\r\n    sceneClass.prototype.stopAllAnimations = function (): void {\r\n        if (this._activeAnimatables) {\r\n            for (let i = 0; i < this._activeAnimatables.length; i++) {\r\n                this._activeAnimatables[i].stop(undefined, undefined, true);\r\n            }\r\n            this._activeAnimatables.length = 0;\r\n        }\r\n\r\n        for (const group of this.animationGroups) {\r\n            group.stop();\r\n        }\r\n    };\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Vector3 } from \"../Maths/math.vector\";\r\nimport { Bone } from \"../Bones/bone\";\r\nimport type { Node } from \"../node\";\r\nimport { AddAnimationExtensions } from \"./animatable.core\";\r\nimport type { Animatable } from \"./animatable.core\";\r\nimport type { Animation } from \"./animation\";\r\nimport { Scene } from \"core/scene\";\r\n\r\nexport * from \"./animatable.core\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * Sort active animatables based on their playOrder property\r\n         */\r\n        sortActiveAnimatables(): void;\r\n\r\n        /**\r\n         * Will start the animation sequence of a given target\r\n         * @param target defines the target\r\n         * @param from defines from which frame should animation start\r\n         * @param to defines until which frame should animation run.\r\n         * @param weight defines the weight to apply to the animation (1.0 by default)\r\n         * @param loop defines if the animation loops\r\n         * @param speedRatio defines the speed in which to run the animation (1.0 by default)\r\n         * @param onAnimationEnd defines the function to be executed when the animation ends\r\n         * @param animatable defines an animatable object. If not provided a new one will be created from the given params\r\n         * @param targetMask defines if the target should be animated if animations are present (this is called recursively on descendant animatables regardless of return value)\r\n         * @param onAnimationLoop defines the callback to call when an animation loops\r\n         * @param isAdditive defines whether the animation should be evaluated additively (false by default)\r\n         * @returns the animatable object created for this animation\r\n         */\r\n        beginWeightedAnimation(\r\n            target: any,\r\n            from: number,\r\n            to: number,\r\n            weight: number,\r\n            loop?: boolean,\r\n            speedRatio?: number,\r\n            onAnimationEnd?: () => void,\r\n            animatable?: Animatable,\r\n            targetMask?: (target: any) => boolean,\r\n            onAnimationLoop?: () => void,\r\n            isAdditive?: boolean\r\n        ): Animatable;\r\n\r\n        /**\r\n         * Will start the animation sequence of a given target\r\n         *\r\n         * Note that it is possible that the value(s) of speedRatio from and to will be changed if the animation is inverted\r\n         * @param target defines the target\r\n         * @param from defines from which frame should animation start\r\n         * @param to defines until which frame should animation run.\r\n         * @param loop defines if the animation loops\r\n         * @param speedRatio defines the speed in which to run the animation (1.0 by default)\r\n         * @param onAnimationEnd defines the function to be executed when the animation ends\r\n         * @param animatable defines an animatable object. If not provided a new one will be created from the given params\r\n         * @param stopCurrent defines if the current animations must be stopped first (true by default)\r\n         * @param targetMask defines if the target should be animate if animations are present (this is called recursively on descendant animatables regardless of return value)\r\n         * @param onAnimationLoop defines the callback to call when an animation loops\r\n         * @param isAdditive defines whether the animation should be evaluated additively (false by default)\r\n         * @returns the animatable object created for this animation\r\n         */\r\n        beginAnimation(\r\n            target: any,\r\n            from: number,\r\n            to: number,\r\n            loop?: boolean,\r\n            speedRatio?: number,\r\n            onAnimationEnd?: () => void,\r\n            animatable?: Animatable,\r\n            stopCurrent?: boolean,\r\n            targetMask?: (target: any) => boolean,\r\n            onAnimationLoop?: () => void,\r\n            isAdditive?: boolean\r\n        ): Animatable;\r\n\r\n        /**\r\n         * Will start the animation sequence of a given target and its hierarchy\r\n         * @param target defines the target\r\n         * @param directDescendantsOnly if true only direct descendants will be used, if false direct and also indirect (children of children, an so on in a recursive manner) descendants will be used.\r\n         * @param from defines from which frame should animation start\r\n         * @param to defines until which frame should animation run.\r\n         * @param loop defines if the animation loops\r\n         * @param speedRatio defines the speed in which to run the animation (1.0 by default)\r\n         * @param onAnimationEnd defines the function to be executed when the animation ends\r\n         * @param animatable defines an animatable object. If not provided a new one will be created from the given params\r\n         * @param stopCurrent defines if the current animations must be stopped first (true by default)\r\n         * @param targetMask defines if the target should be animated if animations are present (this is called recursively on descendant animatables regardless of return value)\r\n         * @param onAnimationLoop defines the callback to call when an animation loops\r\n         * @param isAdditive defines whether the animation should be evaluated additively (false by default)\r\n         * @returns the list of created animatables\r\n         */\r\n        beginHierarchyAnimation(\r\n            target: any,\r\n            directDescendantsOnly: boolean,\r\n            from: number,\r\n            to: number,\r\n            loop?: boolean,\r\n            speedRatio?: number,\r\n            onAnimationEnd?: () => void,\r\n            animatable?: Animatable,\r\n            stopCurrent?: boolean,\r\n            targetMask?: (target: any) => boolean,\r\n            onAnimationLoop?: () => void,\r\n            isAdditive?: boolean\r\n        ): Animatable[];\r\n\r\n        /**\r\n         * Begin a new animation on a given node\r\n         *\r\n         * Note that it is possible that the value(s) of speedRatio from and to will be changed if the animation is inverted\r\n         * @param target defines the target where the animation will take place\r\n         * @param animations defines the list of animations to start\r\n         * @param from defines the initial value\r\n         * @param to defines the final value\r\n         * @param loop defines if you want animation to loop (off by default)\r\n         * @param speedRatio defines the speed ratio to apply to all animations\r\n         * @param onAnimationEnd defines the callback to call when an animation ends (will be called once per node)\r\n         * @param onAnimationLoop defines the callback to call when an animation loops\r\n         * @param isAdditive defines whether the animation should be evaluated additively (false by default)\r\n         * @returns the list of created animatables\r\n         */\r\n        beginDirectAnimation(\r\n            target: any,\r\n            animations: Animation[],\r\n            from: number,\r\n            to: number,\r\n            loop?: boolean,\r\n            speedRatio?: number,\r\n            onAnimationEnd?: () => void,\r\n            onAnimationLoop?: () => void,\r\n            isAdditive?: boolean\r\n        ): Animatable;\r\n\r\n        /**\r\n         * Begin a new animation on a given node and its hierarchy\r\n         * @param target defines the root node where the animation will take place\r\n         * @param directDescendantsOnly if true only direct descendants will be used, if false direct and also indirect (children of children, an so on in a recursive manner) descendants will be used.\r\n         * @param animations defines the list of animations to start\r\n         * @param from defines the initial value\r\n         * @param to defines the final value\r\n         * @param loop defines if you want animation to loop (off by default)\r\n         * @param speedRatio defines the speed ratio to apply to all animations\r\n         * @param onAnimationEnd defines the callback to call when an animation ends (will be called once per node)\r\n         * @param onAnimationLoop defines the callback to call when an animation loops\r\n         * @param isAdditive defines whether the animation should be evaluated additively (false by default)\r\n         * @returns the list of animatables created for all nodes\r\n         */\r\n        beginDirectHierarchyAnimation(\r\n            target: Node,\r\n            directDescendantsOnly: boolean,\r\n            animations: Animation[],\r\n            from: number,\r\n            to: number,\r\n            loop?: boolean,\r\n            speedRatio?: number,\r\n            onAnimationEnd?: () => void,\r\n            onAnimationLoop?: () => void,\r\n            isAdditive?: boolean\r\n        ): Animatable[];\r\n\r\n        /**\r\n         * Gets the animatable associated with a specific target\r\n         * @param target defines the target of the animatable\r\n         * @returns the required animatable if found\r\n         */\r\n        getAnimatableByTarget(target: any): Nullable<Animatable>;\r\n\r\n        /**\r\n         * Gets all animatables associated with a given target\r\n         * @param target defines the target to look animatables for\r\n         * @returns an array of Animatables\r\n         */\r\n        getAllAnimatablesByTarget(target: any): Array<Animatable>;\r\n\r\n        /**\r\n         * Stops and removes all animations that have been applied to the scene\r\n         */\r\n        stopAllAnimations(): void;\r\n    }\r\n}\r\n\r\ndeclare module \"../Bones/bone\" {\r\n    export interface Bone {\r\n        /**\r\n         * Copy an animation range from another bone\r\n         * @param source defines the source bone\r\n         * @param rangeName defines the range name to copy\r\n         * @param frameOffset defines the frame offset\r\n         * @param rescaleAsRequired defines if rescaling must be applied if required\r\n         * @param skelDimensionsRatio defines the scaling ratio\r\n         * @returns true if operation was successful\r\n         */\r\n        copyAnimationRange(source: Bone, rangeName: string, frameOffset: number, rescaleAsRequired: boolean, skelDimensionsRatio: Nullable<Vector3>): boolean;\r\n    }\r\n}\r\n\r\n// Connect everything!\r\nAddAnimationExtensions(Scene, Bone);\r\n", "import type { Animatable } from \"./animatable.core\";\r\nimport { Animation } from \"./animation\";\r\nimport type { IMakeAnimationAdditiveOptions } from \"./animation\";\r\nimport type { IAnimationKey } from \"./animationKey\";\r\n\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\nimport { Tags } from \"../Misc/tags\";\r\nimport type { AnimationGroupMask } from \"./animationGroupMask\";\r\nimport \"./animatable\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\n\r\n/**\r\n * This class defines the direct association between an animation and a target\r\n */\r\nexport class TargetedAnimation {\r\n    /**\r\n     * Animation to perform\r\n     */\r\n    public animation: Animation;\r\n    /**\r\n     * Target to animate\r\n     */\r\n    public target: any;\r\n\r\n    /**\r\n     * Returns the string \"TargetedAnimation\"\r\n     * @returns \"TargetedAnimation\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"TargetedAnimation\";\r\n    }\r\n\r\n    /**\r\n     * Serialize the object\r\n     * @returns the JSON object representing the current entity\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n        serializationObject.animation = this.animation.serialize();\r\n        serializationObject.targetId = this.target.id;\r\n\r\n        return serializationObject;\r\n    }\r\n}\r\n\r\n/**\r\n * Options to be used when creating an additive group animation\r\n */\r\nexport interface IMakeAnimationGroupAdditiveOptions extends IMakeAnimationAdditiveOptions {\r\n    /**\r\n     * Defines if the animation group should be cloned or not (default is false)\r\n     */\r\n    cloneOriginalAnimationGroup?: boolean;\r\n    /**\r\n     * The name of the cloned animation group if cloneOriginalAnimationGroup is true\r\n     */\r\n    clonedAnimationGroupName?: string;\r\n}\r\n\r\n/**\r\n * Use this class to create coordinated animations on multiple targets\r\n */\r\nexport class AnimationGroup implements IDisposable {\r\n    private _scene: Scene;\r\n\r\n    private _targetedAnimations = new Array<TargetedAnimation>();\r\n    private _animatables = new Array<Animatable>();\r\n    private _from = Number.MAX_VALUE;\r\n    private _to = -Number.MAX_VALUE;\r\n    private _isStarted: boolean;\r\n    private _isPaused: boolean;\r\n    private _speedRatio = 1;\r\n    private _loopAnimation = false;\r\n    private _isAdditive = false;\r\n    private _weight = -1;\r\n    private _playOrder = 0;\r\n    private _enableBlending: Nullable<boolean> = null;\r\n    private _blendingSpeed: Nullable<number> = null;\r\n    private _numActiveAnimatables = 0;\r\n    private _shouldStart = true;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<IAssetContainer> = null;\r\n\r\n    /**\r\n     * Gets or sets the unique id of the node\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * This observable will notify when one animation have ended\r\n     */\r\n    public onAnimationEndObservable = new Observable<TargetedAnimation>();\r\n\r\n    /**\r\n     * Observer raised when one animation loops\r\n     */\r\n    public onAnimationLoopObservable = new Observable<TargetedAnimation>();\r\n\r\n    /**\r\n     * Observer raised when all animations have looped\r\n     */\r\n    public onAnimationGroupLoopObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * This observable will notify when all animations have ended.\r\n     */\r\n    public onAnimationGroupEndObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * This observable will notify when all animations have paused.\r\n     */\r\n    public onAnimationGroupPauseObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * This observable will notify when all animations are playing.\r\n     */\r\n    public onAnimationGroupPlayObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the node\r\n     */\r\n    public metadata: any = null;\r\n\r\n    private _mask: Nullable<AnimationGroupMask> = null;\r\n\r\n    /**\r\n     * Gets or sets the mask associated with this animation group. This mask is used to filter which objects should be animated.\r\n     */\r\n    public get mask() {\r\n        return this._mask;\r\n    }\r\n\r\n    public set mask(value: Nullable<AnimationGroupMask>) {\r\n        if (this._mask === value) {\r\n            return;\r\n        }\r\n\r\n        this._mask = value;\r\n\r\n        this.syncWithMask(true);\r\n    }\r\n\r\n    /**\r\n     * Makes sure that the animations are either played or stopped according to the animation group mask.\r\n     * Note however that the call won't have any effect if the animation group has not been started yet.\r\n     * @param forceUpdate If true, forces to loop over the animatables even if no mask is defined (used internally, you shouldn't need to use it). Default: false.\r\n     */\r\n    public syncWithMask(forceUpdate = false) {\r\n        if (!this.mask && !forceUpdate) {\r\n            this._numActiveAnimatables = this._targetedAnimations.length;\r\n            return;\r\n        }\r\n\r\n        this._numActiveAnimatables = 0;\r\n\r\n        for (let i = 0; i < this._animatables.length; ++i) {\r\n            const animatable = this._animatables[i];\r\n\r\n            if (!this.mask || this.mask.disabled || this.mask.retainsTarget(animatable.target.name)) {\r\n                this._numActiveAnimatables++;\r\n                if (animatable.paused) {\r\n                    animatable.restart();\r\n                }\r\n            } else {\r\n                if (!animatable.paused) {\r\n                    animatable.pause();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all animations for the targets not retained by the animation group mask.\r\n     * Use this function if you know you won't need those animations anymore and if you want to free memory.\r\n     */\r\n    public removeUnmaskedAnimations() {\r\n        if (!this.mask || this.mask.disabled) {\r\n            return;\r\n        }\r\n\r\n        // Removes all animatables (in case the animation group has already been started)\r\n        for (let i = 0; i < this._animatables.length; ++i) {\r\n            const animatable = this._animatables[i];\r\n\r\n            if (!this.mask.retainsTarget(animatable.target.name)) {\r\n                animatable.stop();\r\n                this._animatables.splice(i, 1);\r\n                --i;\r\n            }\r\n        }\r\n\r\n        // Removes the targeted animations\r\n        for (let index = 0; index < this._targetedAnimations.length; index++) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n\r\n            if (!this.mask.retainsTarget(targetedAnimation.target.name)) {\r\n                this._targetedAnimations.splice(index, 1);\r\n                --index;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the first frame\r\n     */\r\n    public get from(): number {\r\n        return this._from;\r\n    }\r\n\r\n    public set from(value: number) {\r\n        if (this._from === value) {\r\n            return;\r\n        }\r\n\r\n        this._from = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.fromFrame = this._from;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the last frame\r\n     */\r\n    public get to(): number {\r\n        return this._to;\r\n    }\r\n\r\n    public set to(value: number) {\r\n        if (this._to === value) {\r\n            return;\r\n        }\r\n\r\n        this._to = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.toFrame = this._to;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Define if the animations are started\r\n     */\r\n    public get isStarted(): boolean {\r\n        return this._isStarted;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating that the current group is playing\r\n     */\r\n    public get isPlaying(): boolean {\r\n        return this._isStarted && !this._isPaused;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the speed ratio to use for all animations\r\n     */\r\n    public get speedRatio(): number {\r\n        return this._speedRatio;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the speed ratio to use for all animations\r\n     */\r\n    public set speedRatio(value: number) {\r\n        if (this._speedRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._speedRatio = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.speedRatio = this._speedRatio;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets if all animations should loop or not\r\n     */\r\n    public get loopAnimation(): boolean {\r\n        return this._loopAnimation;\r\n    }\r\n\r\n    public set loopAnimation(value: boolean) {\r\n        if (this._loopAnimation === value) {\r\n            return;\r\n        }\r\n\r\n        this._loopAnimation = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.loopAnimation = this._loopAnimation;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets if all animations should be evaluated additively\r\n     */\r\n    public get isAdditive(): boolean {\r\n        return this._isAdditive;\r\n    }\r\n\r\n    public set isAdditive(value: boolean) {\r\n        if (this._isAdditive === value) {\r\n            return;\r\n        }\r\n\r\n        this._isAdditive = value;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.isAdditive = this._isAdditive;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the weight to apply to all animations of the group\r\n     */\r\n    public get weight(): number {\r\n        return this._weight;\r\n    }\r\n\r\n    public set weight(value: number) {\r\n        if (this._weight === value) {\r\n            return;\r\n        }\r\n\r\n        this._weight = value;\r\n        this.setWeightForAllAnimatables(this._weight);\r\n    }\r\n\r\n    /**\r\n     * Gets the targeted animations for this animation group\r\n     */\r\n    public get targetedAnimations(): Array<TargetedAnimation> {\r\n        return this._targetedAnimations;\r\n    }\r\n\r\n    /**\r\n     * returning the list of animatables controlled by this animation group.\r\n     */\r\n    public get animatables(): Array<Animatable> {\r\n        return this._animatables;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of target animations\r\n     */\r\n    public get children() {\r\n        return this._targetedAnimations;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the order of play of the animation group (default: 0)\r\n     */\r\n    public get playOrder() {\r\n        return this._playOrder;\r\n    }\r\n\r\n    public set playOrder(value: number) {\r\n        if (this._playOrder === value) {\r\n            return;\r\n        }\r\n\r\n        this._playOrder = value;\r\n\r\n        if (this._animatables.length > 0) {\r\n            for (let i = 0; i < this._animatables.length; i++) {\r\n                this._animatables[i].playOrder = this._playOrder;\r\n            }\r\n\r\n            this._scene.sortActiveAnimatables();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allows the animations of the animation group to blend with current running animations\r\n     * Note that a null value means that each animation will use their own existing blending configuration (Animation.enableBlending)\r\n     */\r\n    public get enableBlending() {\r\n        return this._enableBlending;\r\n    }\r\n\r\n    public set enableBlending(value: Nullable<boolean>) {\r\n        if (this._enableBlending === value) {\r\n            return;\r\n        }\r\n\r\n        this._enableBlending = value;\r\n\r\n        if (value !== null) {\r\n            for (let i = 0; i < this._targetedAnimations.length; ++i) {\r\n                this._targetedAnimations[i].animation.enableBlending = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the animation blending speed\r\n     * Note that a null value means that each animation will use their own existing blending configuration (Animation.blendingSpeed)\r\n     */\r\n    public get blendingSpeed() {\r\n        return this._blendingSpeed;\r\n    }\r\n\r\n    public set blendingSpeed(value: Nullable<number>) {\r\n        if (this._blendingSpeed === value) {\r\n            return;\r\n        }\r\n\r\n        this._blendingSpeed = value;\r\n\r\n        if (value !== null) {\r\n            for (let i = 0; i < this._targetedAnimations.length; ++i) {\r\n                this._targetedAnimations[i].animation.blendingSpeed = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the length (in seconds) of the animation group\r\n     * This function assumes that all animations are played at the same framePerSecond speed!\r\n     * Note: you can only call this method after you've added at least one targeted animation!\r\n     * @param from Starting frame range (default is AnimationGroup.from)\r\n     * @param to Ending frame range (default is AnimationGroup.to)\r\n     * @returns The length in seconds\r\n     */\r\n    public getLength(from?: number, to?: number): number {\r\n        from = from ?? this._from;\r\n        to = to ?? this._to;\r\n\r\n        const fps = this.targetedAnimations[0].animation.framePerSecond * this._speedRatio;\r\n\r\n        return (to - from) / fps;\r\n    }\r\n\r\n    /**\r\n     * Merge the array of animation groups into a new animation group\r\n     * @param animationGroups List of animation groups to merge\r\n     * @param disposeSource If true, animation groups will be disposed after being merged (default: true)\r\n     * @param normalize If true, animation groups will be normalized before being merged, so that all animations have the same \"from\" and \"to\" frame (default: false)\r\n     * @param weight Weight for the new animation group. If not provided, it will inherit the weight from the first animation group of the array\r\n     * @returns The new animation group or null if no animation groups were passed\r\n     */\r\n    public static MergeAnimationGroups(animationGroups: Array<AnimationGroup>, disposeSource = true, normalize = false, weight?: number): Nullable<AnimationGroup> {\r\n        if (animationGroups.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        weight = weight ?? animationGroups[0].weight;\r\n\r\n        let beginFrame = Number.MAX_VALUE;\r\n        let endFrame = -Number.MAX_VALUE;\r\n\r\n        if (normalize) {\r\n            for (const animationGroup of animationGroups) {\r\n                if (animationGroup.from < beginFrame) {\r\n                    beginFrame = animationGroup.from;\r\n                }\r\n\r\n                if (animationGroup.to > endFrame) {\r\n                    endFrame = animationGroup.to;\r\n                }\r\n            }\r\n        }\r\n\r\n        const mergedAnimationGroup = new AnimationGroup(animationGroups[0].name + \"_merged\", animationGroups[0]._scene, weight);\r\n\r\n        for (const animationGroup of animationGroups) {\r\n            if (normalize) {\r\n                animationGroup.normalize(beginFrame, endFrame);\r\n            }\r\n\r\n            for (const targetedAnimation of animationGroup.targetedAnimations) {\r\n                mergedAnimationGroup.addTargetedAnimation(targetedAnimation.animation, targetedAnimation.target);\r\n            }\r\n\r\n            if (disposeSource) {\r\n                animationGroup.dispose();\r\n            }\r\n        }\r\n\r\n        return mergedAnimationGroup;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new Animation Group.\r\n     * This helps managing several animations at once.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/groupAnimations\r\n     * @param name Defines the name of the group\r\n     * @param scene Defines the scene the group belongs to\r\n     * @param weight Defines the weight to use for animations in the group (-1.0 by default, meaning \"no weight\")\r\n     * @param playOrder Defines the order of play of the animation group (default is 0)\r\n     */\r\n    public constructor(\r\n        /** The name of the animation group */\r\n        public name: string,\r\n        scene: Nullable<Scene> = null,\r\n        weight = -1,\r\n        playOrder = 0\r\n    ) {\r\n        this._scene = scene || EngineStore.LastCreatedScene!;\r\n        this._weight = weight;\r\n        this._playOrder = playOrder;\r\n        this.uniqueId = this._scene.getUniqueId();\r\n\r\n        this._scene.addAnimationGroup(this);\r\n    }\r\n\r\n    /**\r\n     * Add an animation (with its target) in the group\r\n     * @param animation defines the animation we want to add\r\n     * @param target defines the target of the animation\r\n     * @returns the TargetedAnimation object\r\n     */\r\n    public addTargetedAnimation(animation: Animation, target: any): TargetedAnimation {\r\n        const targetedAnimation = new TargetedAnimation();\r\n        targetedAnimation.animation = animation;\r\n        targetedAnimation.target = target;\r\n\r\n        const keys = animation.getKeys();\r\n        if (this._from > keys[0].frame) {\r\n            this._from = keys[0].frame;\r\n        }\r\n\r\n        if (this._to < keys[keys.length - 1].frame) {\r\n            this._to = keys[keys.length - 1].frame;\r\n        }\r\n\r\n        if (this._enableBlending !== null) {\r\n            animation.enableBlending = this._enableBlending;\r\n        }\r\n\r\n        if (this._blendingSpeed !== null) {\r\n            animation.blendingSpeed = this._blendingSpeed;\r\n        }\r\n\r\n        this._targetedAnimations.push(targetedAnimation);\r\n        this._shouldStart = true;\r\n\r\n        return targetedAnimation;\r\n    }\r\n\r\n    /**\r\n     * Remove an animation from the group\r\n     * @param animation defines the animation we want to remove\r\n     */\r\n    public removeTargetedAnimation(animation: Animation) {\r\n        for (let index = this._targetedAnimations.length - 1; index > -1; index--) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n            if (targetedAnimation.animation === animation) {\r\n                this._targetedAnimations.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will normalize every animation in the group to make sure they all go from beginFrame to endFrame\r\n     * It can add constant keys at begin or end\r\n     * @param beginFrame defines the new begin frame for all animations or the smallest begin frame of all animations if null (defaults to null)\r\n     * @param endFrame defines the new end frame for all animations or the largest end frame of all animations if null (defaults to null)\r\n     * @returns the animation group\r\n     */\r\n    public normalize(beginFrame: Nullable<number> = null, endFrame: Nullable<number> = null): AnimationGroup {\r\n        if (beginFrame == null) {\r\n            beginFrame = this._from;\r\n        }\r\n        if (endFrame == null) {\r\n            endFrame = this._to;\r\n        }\r\n\r\n        for (let index = 0; index < this._targetedAnimations.length; index++) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n            const keys = targetedAnimation.animation.getKeys();\r\n            const startKey = keys[0];\r\n            const endKey = keys[keys.length - 1];\r\n\r\n            if (startKey.frame > beginFrame) {\r\n                const newKey: IAnimationKey = {\r\n                    frame: beginFrame,\r\n                    value: startKey.value,\r\n                    inTangent: startKey.inTangent,\r\n                    outTangent: startKey.outTangent,\r\n                    interpolation: startKey.interpolation,\r\n                };\r\n                keys.splice(0, 0, newKey);\r\n            }\r\n\r\n            if (endKey.frame < endFrame) {\r\n                const newKey: IAnimationKey = {\r\n                    frame: endFrame,\r\n                    value: endKey.value,\r\n                    inTangent: endKey.inTangent,\r\n                    outTangent: endKey.outTangent,\r\n                    interpolation: endKey.interpolation,\r\n                };\r\n                keys.push(newKey);\r\n            }\r\n        }\r\n\r\n        this._from = beginFrame;\r\n        this._to = endFrame;\r\n\r\n        return this;\r\n    }\r\n\r\n    private _animationLoopCount: number;\r\n    private _animationLoopFlags: boolean[] = [];\r\n\r\n    private _processLoop(animatable: Animatable, targetedAnimation: TargetedAnimation, index: number) {\r\n        animatable.onAnimationLoop = () => {\r\n            this.onAnimationLoopObservable.notifyObservers(targetedAnimation);\r\n\r\n            if (this._animationLoopFlags[index]) {\r\n                return;\r\n            }\r\n\r\n            this._animationLoopFlags[index] = true;\r\n\r\n            this._animationLoopCount++;\r\n            if (this._animationLoopCount === this._numActiveAnimatables) {\r\n                this.onAnimationGroupLoopObservable.notifyObservers(this);\r\n                this._animationLoopCount = 0;\r\n                this._animationLoopFlags.length = 0;\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Start all animations on given targets\r\n     * @param loop defines if animations must loop\r\n     * @param speedRatio defines the ratio to apply to animation speed (1 by default)\r\n     * @param from defines the from key (optional)\r\n     * @param to defines the to key (optional)\r\n     * @param isAdditive defines the additive state for the resulting animatables (optional)\r\n     * @returns the current animation group\r\n     */\r\n    public start(loop = false, speedRatio = 1, from?: number, to?: number, isAdditive?: boolean): AnimationGroup {\r\n        if (this._isStarted || this._targetedAnimations.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        this._loopAnimation = loop;\r\n\r\n        this._shouldStart = false;\r\n        this._animationLoopCount = 0;\r\n        this._animationLoopFlags.length = 0;\r\n\r\n        for (let index = 0; index < this._targetedAnimations.length; index++) {\r\n            const targetedAnimation = this._targetedAnimations[index];\r\n            const animatable = this._scene.beginDirectAnimation(\r\n                targetedAnimation.target,\r\n                [targetedAnimation.animation],\r\n                from !== undefined ? from : this._from,\r\n                to !== undefined ? to : this._to,\r\n                loop,\r\n                speedRatio,\r\n                undefined,\r\n                undefined,\r\n                isAdditive !== undefined ? isAdditive : this._isAdditive\r\n            );\r\n            animatable.weight = this._weight;\r\n            animatable.playOrder = this._playOrder;\r\n            animatable.onAnimationEnd = () => {\r\n                this.onAnimationEndObservable.notifyObservers(targetedAnimation);\r\n                this._checkAnimationGroupEnded(animatable);\r\n            };\r\n\r\n            this._processLoop(animatable, targetedAnimation, index);\r\n            this._animatables.push(animatable);\r\n        }\r\n\r\n        this.syncWithMask();\r\n\r\n        this._scene.sortActiveAnimatables();\r\n\r\n        this._speedRatio = speedRatio;\r\n\r\n        this._isStarted = true;\r\n        this._isPaused = false;\r\n\r\n        this.onAnimationGroupPlayObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Pause all animations\r\n     * @returns the animation group\r\n     */\r\n    public pause(): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        this._isPaused = true;\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.pause();\r\n        }\r\n\r\n        this.onAnimationGroupPauseObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Play all animations to initial state\r\n     * This function will start() the animations if they were not started or will restart() them if they were paused\r\n     * @param loop defines if animations must loop\r\n     * @returns the animation group\r\n     */\r\n    public play(loop?: boolean): AnimationGroup {\r\n        // only if there are animatable available\r\n        if (this.isStarted && this._animatables.length && !this._shouldStart) {\r\n            if (loop !== undefined) {\r\n                this.loopAnimation = loop;\r\n            }\r\n            this.restart();\r\n        } else {\r\n            this.stop();\r\n            this.start(loop, this._speedRatio);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reset all animations to initial state\r\n     * @returns the animation group\r\n     */\r\n    public reset(): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            this.play();\r\n            this.goToFrame(0);\r\n            this.stop(true);\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.reset();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Restart animations from after pausing it\r\n     * @returns the animation group\r\n     */\r\n    public restart(): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.restart();\r\n        }\r\n\r\n        this.syncWithMask();\r\n\r\n        this._isPaused = false;\r\n\r\n        this.onAnimationGroupPlayObservable.notifyObservers(this);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Stop all animations\r\n     * @param skipOnAnimationEnd defines if the system should not raise onAnimationEnd. Default is false\r\n     * @returns the animation group\r\n     */\r\n    public stop(skipOnAnimationEnd = false): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        const list = this._animatables.slice();\r\n        for (let index = 0; index < list.length; index++) {\r\n            list[index].stop(undefined, undefined, true, skipOnAnimationEnd);\r\n        }\r\n\r\n        // We will take care of removing all stopped animatables\r\n        let curIndex = 0;\r\n        for (let index = 0; index < this._scene._activeAnimatables.length; index++) {\r\n            const animatable = this._scene._activeAnimatables[index];\r\n            if (animatable._runtimeAnimations.length > 0) {\r\n                this._scene._activeAnimatables[curIndex++] = animatable;\r\n            } else if (skipOnAnimationEnd) {\r\n                // We normally rely on the onAnimationEnd callback (assigned in the start function) to be notified when an animatable\r\n                // ends and should be removed from the active animatables array. However, if the animatable is stopped with the skipOnAnimationEnd\r\n                // flag set to true, then we need to explicitly remove it from the active animatables array.\r\n                this._checkAnimationGroupEnded(animatable, skipOnAnimationEnd);\r\n            }\r\n        }\r\n        this._scene._activeAnimatables.length = curIndex;\r\n\r\n        this._isStarted = false;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set animation weight for all animatables\r\n     *\r\n     * @since 6.12.4\r\n     *  You can pass the weight to the AnimationGroup constructor, or use the weight property to set it after the group has been created,\r\n     *  making it easier to define the overall animation weight than calling setWeightForAllAnimatables() after the animation group has been started\r\n     * @param weight defines the weight to use\r\n     * @returns the animationGroup\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#animation-weights\r\n     */\r\n    public setWeightForAllAnimatables(weight: number): AnimationGroup {\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.weight = weight;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Synchronize and normalize all animatables with a source animatable\r\n     * @param root defines the root animatable to synchronize with (null to stop synchronizing)\r\n     * @returns the animationGroup\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#animation-weights\r\n     */\r\n    public syncAllAnimationsWith(root: Nullable<Animatable>): AnimationGroup {\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.syncWith(root);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Goes to a specific frame in this animation group. Note that the animation group must be in playing or paused status\r\n     * @param frame the frame number to go to\r\n     * @param useWeight defines whether the animation weight should be applied to the image to be jumped to (false by default)\r\n     * @returns the animationGroup\r\n     */\r\n    public goToFrame(frame: number, useWeight = false): AnimationGroup {\r\n        if (!this._isStarted) {\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < this._animatables.length; index++) {\r\n            const animatable = this._animatables[index];\r\n            animatable.goToFrame(frame, useWeight);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Helper to get the current frame. This will return 0 if the AnimationGroup is not running, and it might return wrong results if multiple animations are running in different frames.\r\n     * @returns current animation frame.\r\n     */\r\n    public getCurrentFrame(): number {\r\n        return this.animatables[0]?.masterFrame || 0;\r\n    }\r\n\r\n    /**\r\n     * Dispose all associated resources\r\n     */\r\n    public dispose(): void {\r\n        if (this.isStarted) {\r\n            this.stop();\r\n        }\r\n        this._targetedAnimations.length = 0;\r\n        this._animatables.length = 0;\r\n\r\n        // Remove from scene\r\n        const index = this._scene.animationGroups.indexOf(this);\r\n\r\n        if (index > -1) {\r\n            this._scene.animationGroups.splice(index, 1);\r\n        }\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.animationGroups.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.animationGroups.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        this.onAnimationEndObservable.clear();\r\n        this.onAnimationGroupEndObservable.clear();\r\n        this.onAnimationGroupPauseObservable.clear();\r\n        this.onAnimationGroupPlayObservable.clear();\r\n        this.onAnimationLoopObservable.clear();\r\n        this.onAnimationGroupLoopObservable.clear();\r\n    }\r\n\r\n    private _checkAnimationGroupEnded(animatable: Animatable, skipOnAnimationEnd = false) {\r\n        // animatable should be taken out of the array\r\n        const idx = this._animatables.indexOf(animatable);\r\n        if (idx > -1) {\r\n            this._animatables.splice(idx, 1);\r\n        }\r\n\r\n        // all animatables were removed? animation group ended!\r\n        if (this._animatables.length === this._targetedAnimations.length - this._numActiveAnimatables) {\r\n            this._isStarted = false;\r\n            if (!skipOnAnimationEnd) {\r\n                this.onAnimationGroupEndObservable.notifyObservers(this);\r\n            }\r\n            this._animatables.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone the current animation group and returns a copy\r\n     * @param newName defines the name of the new group\r\n     * @param targetConverter defines an optional function used to convert current animation targets to new ones\r\n     * @param cloneAnimations defines if the animations should be cloned or referenced\r\n     * @returns the new animation group\r\n     */\r\n    public clone(newName: string, targetConverter?: (oldTarget: any) => any, cloneAnimations = false): AnimationGroup {\r\n        const newGroup = new AnimationGroup(newName || this.name, this._scene, this._weight, this._playOrder);\r\n\r\n        newGroup._from = this.from;\r\n        newGroup._to = this.to;\r\n        newGroup._speedRatio = this.speedRatio;\r\n        newGroup._loopAnimation = this.loopAnimation;\r\n        newGroup._isAdditive = this.isAdditive;\r\n        newGroup._enableBlending = this.enableBlending;\r\n        newGroup._blendingSpeed = this.blendingSpeed;\r\n        newGroup.metadata = this.metadata;\r\n        newGroup.mask = this.mask;\r\n\r\n        for (const targetAnimation of this._targetedAnimations) {\r\n            newGroup.addTargetedAnimation(\r\n                cloneAnimations ? targetAnimation.animation.clone() : targetAnimation.animation,\r\n                targetConverter ? targetConverter(targetAnimation.target) : targetAnimation.target\r\n            );\r\n        }\r\n\r\n        return newGroup;\r\n    }\r\n\r\n    /**\r\n     * Serializes the animationGroup to an object\r\n     * @returns Serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.from = this.from;\r\n        serializationObject.to = this.to;\r\n        serializationObject.speedRatio = this.speedRatio;\r\n        serializationObject.loopAnimation = this.loopAnimation;\r\n        serializationObject.isAdditive = this.isAdditive;\r\n        serializationObject.weight = this.weight;\r\n        serializationObject.playOrder = this.playOrder;\r\n        serializationObject.enableBlending = this.enableBlending;\r\n        serializationObject.blendingSpeed = this.blendingSpeed;\r\n\r\n        serializationObject.targetedAnimations = [];\r\n        for (let targetedAnimationIndex = 0; targetedAnimationIndex < this.targetedAnimations.length; targetedAnimationIndex++) {\r\n            const targetedAnimation = this.targetedAnimations[targetedAnimationIndex];\r\n            serializationObject.targetedAnimations[targetedAnimationIndex] = targetedAnimation.serialize();\r\n        }\r\n\r\n        if (Tags && Tags.HasTags(this)) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n\r\n        // Metadata\r\n        if (this.metadata) {\r\n            serializationObject.metadata = this.metadata;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Returns a new AnimationGroup object parsed from the source provided.\r\n     * @param parsedAnimationGroup defines the source\r\n     * @param scene defines the scene that will receive the animationGroup\r\n     * @returns a new AnimationGroup\r\n     */\r\n    public static Parse(parsedAnimationGroup: any, scene: Scene): AnimationGroup {\r\n        const animationGroup = new AnimationGroup(parsedAnimationGroup.name, scene, parsedAnimationGroup.weight, parsedAnimationGroup.playOrder);\r\n        for (let i = 0; i < parsedAnimationGroup.targetedAnimations.length; i++) {\r\n            const targetedAnimation = parsedAnimationGroup.targetedAnimations[i];\r\n            const animation = Animation.Parse(targetedAnimation.animation);\r\n            const id = targetedAnimation.targetId;\r\n            if (targetedAnimation.animation.property === \"influence\") {\r\n                // morph target animation\r\n                const morphTarget = scene.getMorphTargetById(id);\r\n                if (morphTarget) {\r\n                    animationGroup.addTargetedAnimation(animation, morphTarget);\r\n                }\r\n            } else {\r\n                const targetNode = scene.getNodeById(id);\r\n\r\n                if (targetNode != null) {\r\n                    animationGroup.addTargetedAnimation(animation, targetNode);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(animationGroup, parsedAnimationGroup.tags);\r\n        }\r\n\r\n        if (parsedAnimationGroup.from !== null && parsedAnimationGroup.to !== null) {\r\n            animationGroup.normalize(parsedAnimationGroup.from, parsedAnimationGroup.to);\r\n        }\r\n\r\n        if (parsedAnimationGroup.speedRatio !== undefined) {\r\n            animationGroup._speedRatio = parsedAnimationGroup.speedRatio;\r\n        }\r\n        if (parsedAnimationGroup.loopAnimation !== undefined) {\r\n            animationGroup._loopAnimation = parsedAnimationGroup.loopAnimation;\r\n        }\r\n\r\n        if (parsedAnimationGroup.isAdditive !== undefined) {\r\n            animationGroup._isAdditive = parsedAnimationGroup.isAdditive;\r\n        }\r\n\r\n        if (parsedAnimationGroup.weight !== undefined) {\r\n            animationGroup._weight = parsedAnimationGroup.weight;\r\n        }\r\n\r\n        if (parsedAnimationGroup.playOrder !== undefined) {\r\n            animationGroup._playOrder = parsedAnimationGroup.playOrder;\r\n        }\r\n\r\n        if (parsedAnimationGroup.enableBlending !== undefined) {\r\n            animationGroup._enableBlending = parsedAnimationGroup.enableBlending;\r\n        }\r\n\r\n        if (parsedAnimationGroup.blendingSpeed !== undefined) {\r\n            animationGroup._blendingSpeed = parsedAnimationGroup.blendingSpeed;\r\n        }\r\n\r\n        if (parsedAnimationGroup.metadata !== undefined) {\r\n            animationGroup.metadata = parsedAnimationGroup.metadata;\r\n        }\r\n\r\n        return animationGroup;\r\n    }\r\n\r\n    /**\r\n     * Convert the keyframes for all animations belonging to the group to be relative to a given reference frame.\r\n     * @param sourceAnimationGroup defines the AnimationGroup containing animations to convert\r\n     * @param referenceFrame defines the frame that keyframes in the range will be relative to (default: 0)\r\n     * @param range defines the name of the AnimationRange belonging to the animations in the group to convert\r\n     * @param cloneOriginal defines whether or not to clone the group and convert the clone or convert the original group (default is false)\r\n     * @param clonedName defines the name of the resulting cloned AnimationGroup if cloneOriginal is true\r\n     * @returns a new AnimationGroup if cloneOriginal is true or the original AnimationGroup if cloneOriginal is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimationGroup: AnimationGroup, referenceFrame: number, range?: string, cloneOriginal?: boolean, clonedName?: string): AnimationGroup;\r\n\r\n    /**\r\n     * Convert the keyframes for all animations belonging to the group to be relative to a given reference frame.\r\n     * @param sourceAnimationGroup defines the AnimationGroup containing animations to convert\r\n     * @param options defines the options to use when converting keyframes\r\n     * @returns a new AnimationGroup if options.cloneOriginalAnimationGroup is true or the original AnimationGroup if options.cloneOriginalAnimationGroup is false\r\n     */\r\n    public static MakeAnimationAdditive(sourceAnimationGroup: AnimationGroup, options?: IMakeAnimationGroupAdditiveOptions): AnimationGroup;\r\n\r\n    /** @internal */\r\n    public static MakeAnimationAdditive(\r\n        sourceAnimationGroup: AnimationGroup,\r\n        referenceFrameOrOptions?: number | IMakeAnimationGroupAdditiveOptions,\r\n        range?: string,\r\n        cloneOriginal = false,\r\n        clonedName?: string\r\n    ): AnimationGroup {\r\n        let options: IMakeAnimationGroupAdditiveOptions;\r\n\r\n        if (typeof referenceFrameOrOptions === \"object\") {\r\n            options = referenceFrameOrOptions;\r\n        } else {\r\n            options = {\r\n                referenceFrame: referenceFrameOrOptions,\r\n                range: range,\r\n                cloneOriginalAnimationGroup: cloneOriginal,\r\n                clonedAnimationName: clonedName,\r\n            };\r\n        }\r\n\r\n        let animationGroup = sourceAnimationGroup;\r\n        if (options.cloneOriginalAnimationGroup) {\r\n            animationGroup = sourceAnimationGroup.clone(options.clonedAnimationGroupName || animationGroup.name);\r\n        }\r\n\r\n        const targetedAnimations = animationGroup.targetedAnimations;\r\n        for (let index = 0; index < targetedAnimations.length; index++) {\r\n            const targetedAnimation = targetedAnimations[index];\r\n            targetedAnimation.animation = Animation.MakeAnimationAdditive(targetedAnimation.animation, options);\r\n        }\r\n\r\n        animationGroup.isAdditive = true;\r\n\r\n        if (options.clipKeys) {\r\n            // We need to recalculate the from/to frames for the animation group because some keys may have been removed\r\n            let from = Number.MAX_VALUE;\r\n            let to = -Number.MAX_VALUE;\r\n\r\n            const targetedAnimations = animationGroup.targetedAnimations;\r\n            for (let index = 0; index < targetedAnimations.length; index++) {\r\n                const targetedAnimation = targetedAnimations[index];\r\n                const animation = targetedAnimation.animation;\r\n                const keys = animation.getKeys();\r\n\r\n                if (from > keys[0].frame) {\r\n                    from = keys[0].frame;\r\n                }\r\n\r\n                if (to < keys[keys.length - 1].frame) {\r\n                    to = keys[keys.length - 1].frame;\r\n                }\r\n            }\r\n\r\n            animationGroup._from = from;\r\n            animationGroup._to = to;\r\n        }\r\n\r\n        return animationGroup;\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation, keeping only the keys that are inside a given key range\r\n     * @param sourceAnimationGroup defines the animation group on which to operate\r\n     * @param fromKey defines the lower bound of the range\r\n     * @param toKey defines the upper bound of the range\r\n     * @param name defines the name of the new animation group. If not provided, use the same name as animationGroup\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the keys. Default is false, so animations will be cloned\r\n     * @returns a new animation group stripped from all the keys outside the given range\r\n     */\r\n    public static ClipKeys(sourceAnimationGroup: AnimationGroup, fromKey: number, toKey: number, name?: string, dontCloneAnimations?: boolean): AnimationGroup {\r\n        const animationGroup = sourceAnimationGroup.clone(name || sourceAnimationGroup.name);\r\n\r\n        return AnimationGroup.ClipKeysInPlace(animationGroup, fromKey, toKey, dontCloneAnimations);\r\n    }\r\n\r\n    /**\r\n     * Updates an existing animation, keeping only the keys that are inside a given key range\r\n     * @param animationGroup defines the animation group on which to operate\r\n     * @param fromKey defines the lower bound of the range\r\n     * @param toKey defines the upper bound of the range\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the keys. Default is false, so animations will be cloned\r\n     * @returns the animationGroup stripped from all the keys outside the given range\r\n     */\r\n    public static ClipKeysInPlace(animationGroup: AnimationGroup, fromKey: number, toKey: number, dontCloneAnimations?: boolean): AnimationGroup {\r\n        return AnimationGroup.ClipInPlace(animationGroup, fromKey, toKey, dontCloneAnimations, false);\r\n    }\r\n\r\n    /**\r\n     * Creates a new animation, keeping only the frames that are inside a given frame range\r\n     * @param sourceAnimationGroup defines the animation group on which to operate\r\n     * @param fromFrame defines the lower bound of the range\r\n     * @param toFrame defines the upper bound of the range\r\n     * @param name defines the name of the new animation group. If not provided, use the same name as animationGroup\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the frames. Default is false, so animations will be cloned\r\n     * @returns a new animation group stripped from all the frames outside the given range\r\n     */\r\n    public static ClipFrames(sourceAnimationGroup: AnimationGroup, fromFrame: number, toFrame: number, name?: string, dontCloneAnimations?: boolean): AnimationGroup {\r\n        const animationGroup = sourceAnimationGroup.clone(name || sourceAnimationGroup.name);\r\n\r\n        return AnimationGroup.ClipFramesInPlace(animationGroup, fromFrame, toFrame, dontCloneAnimations);\r\n    }\r\n\r\n    /**\r\n     * Updates an existing animation, keeping only the frames that are inside a given frame range\r\n     * @param animationGroup defines the animation group on which to operate\r\n     * @param fromFrame defines the lower bound of the range\r\n     * @param toFrame defines the upper bound of the range\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the frames. Default is false, so animations will be cloned\r\n     * @returns the animationGroup stripped from all the frames outside the given range\r\n     */\r\n    public static ClipFramesInPlace(animationGroup: AnimationGroup, fromFrame: number, toFrame: number, dontCloneAnimations?: boolean): AnimationGroup {\r\n        return AnimationGroup.ClipInPlace(animationGroup, fromFrame, toFrame, dontCloneAnimations, true);\r\n    }\r\n\r\n    /**\r\n     * Updates an existing animation, keeping only the keys that are inside a given key or frame range\r\n     * @param animationGroup defines the animation group on which to operate\r\n     * @param start defines the lower bound of the range\r\n     * @param end defines the upper bound of the range\r\n     * @param dontCloneAnimations defines whether or not the animations should be cloned before clipping the keys. Default is false, so animations will be cloned\r\n     * @param useFrame defines if the range is defined by frame numbers or key indices (default is false which means use key indices)\r\n     * @returns the animationGroup stripped from all the keys outside the given range\r\n     */\r\n    public static ClipInPlace(animationGroup: AnimationGroup, start: number, end: number, dontCloneAnimations?: boolean, useFrame = false): AnimationGroup {\r\n        let from = Number.MAX_VALUE;\r\n        let to = -Number.MAX_VALUE;\r\n\r\n        const targetedAnimations = animationGroup.targetedAnimations;\r\n        for (let index = 0; index < targetedAnimations.length; index++) {\r\n            const targetedAnimation = targetedAnimations[index];\r\n            const animation = dontCloneAnimations ? targetedAnimation.animation : targetedAnimation.animation.clone();\r\n\r\n            if (useFrame) {\r\n                // Make sure we have keys corresponding to the bounds of the frame range\r\n                animation.createKeyForFrame(start);\r\n                animation.createKeyForFrame(end);\r\n            }\r\n\r\n            const keys = animation.getKeys();\r\n            const newKeys: IAnimationKey[] = [];\r\n\r\n            let startFrame = Number.MAX_VALUE;\r\n            for (let k = 0; k < keys.length; k++) {\r\n                const key = keys[k];\r\n                if ((!useFrame && k >= start && k <= end) || (useFrame && key.frame >= start && key.frame <= end)) {\r\n                    const newKey: IAnimationKey = {\r\n                        frame: key.frame,\r\n                        value: key.value.clone ? key.value.clone() : key.value,\r\n                        inTangent: key.inTangent,\r\n                        outTangent: key.outTangent,\r\n                        interpolation: key.interpolation,\r\n                        lockedTangent: key.lockedTangent,\r\n                    };\r\n                    if (startFrame === Number.MAX_VALUE) {\r\n                        startFrame = newKey.frame;\r\n                    }\r\n                    newKey.frame -= startFrame;\r\n                    newKeys.push(newKey);\r\n                }\r\n            }\r\n\r\n            if (newKeys.length === 0) {\r\n                targetedAnimations.splice(index, 1);\r\n                index--;\r\n                continue;\r\n            }\r\n\r\n            if (from > newKeys[0].frame) {\r\n                from = newKeys[0].frame;\r\n            }\r\n\r\n            if (to < newKeys[newKeys.length - 1].frame) {\r\n                to = newKeys[newKeys.length - 1].frame;\r\n            }\r\n\r\n            animation.setKeys(newKeys, true);\r\n            targetedAnimation.animation = animation; // in case the animation has been cloned\r\n        }\r\n\r\n        animationGroup._from = from;\r\n        animationGroup._to = to;\r\n\r\n        return animationGroup;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"AnimationGroup\"\r\n     * @returns \"AnimationGroup\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"AnimationGroup\";\r\n    }\r\n\r\n    /**\r\n     * Creates a detailed string about the object\r\n     * @param fullDetails defines if the output string will support multiple levels of logging within scene loading\r\n     * @returns a string representing the object\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name;\r\n        ret += \", type: \" + this.getClassName();\r\n        if (fullDetails) {\r\n            ret += \", from: \" + this._from;\r\n            ret += \", to: \" + this._to;\r\n            ret += \", isStarted: \" + this._isStarted;\r\n            ret += \", speedRatio: \" + this._speedRatio;\r\n            ret += \", targetedAnimations length: \" + this._targetedAnimations.length;\r\n            ret += \", animatables length: \" + this._animatables;\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["_a", "transform", "translation", "kind", "applySkeleton", "applyMorph", "index", "observer", "NodeRenderGraphBlockConnectionPointTypes", "NodeRenderGraphConnectionPointCompatibilityStates", "NodeRenderGraphConnectionPointDirection", "i", "index", "index", "observer", "applyMorph", "subMesh", "data", "vertexData", "plugin", "code", "factory", "GeometryRenderingTextureClearType", "featureName", "HandConstraintZone", "HandConstraintOrientation", "HandConstraintVisibility", "SceneLoaderAnimationGroupLoadingMode", "_a", "request", "scene", "angle", "minMaxAngle", "virtualMeshesInfo", "pointerEvent", "GizmoAnchorPoint", "GizmoCoordinatesMode", "_a", "_b", "onCreatedEffectParameters", "drawWrapper", "result", "index", "target", "index", "index", "targetedAnimations"]
}
