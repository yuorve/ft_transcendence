{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/tga.ts", "../../../dev/core/src/Materials/Textures/Loaders/tgaTextureLoader.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\n//private static _TYPE_NO_DATA = 0;\r\nconst _TYPE_INDEXED = 1;\r\nconst _TYPE_RGB = 2;\r\nconst _TYPE_GREY = 3;\r\nconst _TYPE_RLE_INDEXED = 9;\r\nconst _TYPE_RLE_RGB = 10;\r\nconst _TYPE_RLE_GREY = 11;\r\nconst _ORIGIN_MASK = 0x30;\r\nconst _ORIGIN_SHIFT = 0x04;\r\nconst _ORIGIN_BL = 0x00;\r\nconst _ORIGIN_BR = 0x01;\r\nconst _ORIGIN_UL = 0x02;\r\nconst _ORIGIN_UR = 0x03;\r\n\r\n/**\r\n * Gets the header of a TGA file\r\n * @param data defines the TGA data\r\n * @returns the header\r\n */\r\nexport function GetTGAHeader(data: Uint8Array): any {\r\n    let offset = 0;\r\n\r\n    const header = {\r\n        id_length: data[offset++],\r\n        colormap_type: data[offset++],\r\n        image_type: data[offset++],\r\n        colormap_index: data[offset++] | (data[offset++] << 8),\r\n        colormap_length: data[offset++] | (data[offset++] << 8),\r\n        colormap_size: data[offset++],\r\n        origin: [data[offset++] | (data[offset++] << 8), data[offset++] | (data[offset++] << 8)],\r\n        width: data[offset++] | (data[offset++] << 8),\r\n        height: data[offset++] | (data[offset++] << 8),\r\n        pixel_size: data[offset++],\r\n        flags: data[offset++],\r\n    };\r\n\r\n    return header;\r\n}\r\n\r\n/**\r\n * Uploads TGA content to a Babylon Texture\r\n * @internal\r\n */\r\nexport function UploadContent(texture: InternalTexture, data: Uint8Array): void {\r\n    // Not enough data to contain header ?\r\n    if (data.length < 19) {\r\n        Logger.Error(\"Unable to load TGA file - Not enough data to contain header\");\r\n        return;\r\n    }\r\n\r\n    // Read Header\r\n    let offset = 18;\r\n    const header = GetTGAHeader(data);\r\n\r\n    // Assume it's a valid Targa file.\r\n    if (header.id_length + offset > data.length) {\r\n        Logger.Error(\"Unable to load TGA file - Not enough data\");\r\n        return;\r\n    }\r\n\r\n    // Skip not needed data\r\n    offset += header.id_length;\r\n\r\n    let use_rle = false;\r\n    let use_pal = false;\r\n    let use_grey = false;\r\n\r\n    // Get some informations.\r\n    switch (header.image_type) {\r\n        case _TYPE_RLE_INDEXED:\r\n            use_rle = true;\r\n        // eslint-disable-next-line no-fallthrough\r\n        case _TYPE_INDEXED:\r\n            use_pal = true;\r\n            break;\r\n\r\n        case _TYPE_RLE_RGB:\r\n            use_rle = true;\r\n        // eslint-disable-next-line no-fallthrough\r\n        case _TYPE_RGB:\r\n            // use_rgb = true;\r\n            break;\r\n\r\n        case _TYPE_RLE_GREY:\r\n            use_rle = true;\r\n        // eslint-disable-next-line no-fallthrough\r\n        case _TYPE_GREY:\r\n            use_grey = true;\r\n            break;\r\n    }\r\n\r\n    let pixel_data;\r\n\r\n    // var numAlphaBits = header.flags & 0xf;\r\n    const pixel_size = header.pixel_size >> 3;\r\n    const pixel_total = header.width * header.height * pixel_size;\r\n\r\n    // Read palettes\r\n    let palettes;\r\n\r\n    if (use_pal) {\r\n        palettes = data.subarray(offset, (offset += header.colormap_length * (header.colormap_size >> 3)));\r\n    }\r\n\r\n    // Read LRE\r\n    if (use_rle) {\r\n        pixel_data = new Uint8Array(pixel_total);\r\n\r\n        let c, count, i;\r\n        let localOffset = 0;\r\n        const pixels = new Uint8Array(pixel_size);\r\n\r\n        while (offset < pixel_total && localOffset < pixel_total) {\r\n            c = data[offset++];\r\n            count = (c & 0x7f) + 1;\r\n\r\n            // RLE pixels\r\n            if (c & 0x80) {\r\n                // Bind pixel tmp array\r\n                for (i = 0; i < pixel_size; ++i) {\r\n                    pixels[i] = data[offset++];\r\n                }\r\n\r\n                // Copy pixel array\r\n                for (i = 0; i < count; ++i) {\r\n                    pixel_data.set(pixels, localOffset + i * pixel_size);\r\n                }\r\n\r\n                localOffset += pixel_size * count;\r\n            }\r\n            // Raw pixels\r\n            else {\r\n                count *= pixel_size;\r\n                for (i = 0; i < count; ++i) {\r\n                    pixel_data[localOffset + i] = data[offset++];\r\n                }\r\n                localOffset += count;\r\n            }\r\n        }\r\n    }\r\n    // RAW Pixels\r\n    else {\r\n        pixel_data = data.subarray(offset, (offset += use_pal ? header.width * header.height : pixel_total));\r\n    }\r\n\r\n    // Load to texture\r\n    let x_start, y_start, x_step, y_step, y_end, x_end;\r\n\r\n    switch ((header.flags & _ORIGIN_MASK) >> _ORIGIN_SHIFT) {\r\n        default:\r\n        case _ORIGIN_UL:\r\n            x_start = 0;\r\n            x_step = 1;\r\n            x_end = header.width;\r\n            y_start = 0;\r\n            y_step = 1;\r\n            y_end = header.height;\r\n            break;\r\n\r\n        case _ORIGIN_BL:\r\n            x_start = 0;\r\n            x_step = 1;\r\n            x_end = header.width;\r\n            y_start = header.height - 1;\r\n            y_step = -1;\r\n            y_end = -1;\r\n            break;\r\n\r\n        case _ORIGIN_UR:\r\n            x_start = header.width - 1;\r\n            x_step = -1;\r\n            x_end = -1;\r\n            y_start = 0;\r\n            y_step = 1;\r\n            y_end = header.height;\r\n            break;\r\n\r\n        case _ORIGIN_BR:\r\n            x_start = header.width - 1;\r\n            x_step = -1;\r\n            x_end = -1;\r\n            y_start = header.height - 1;\r\n            y_step = -1;\r\n            y_end = -1;\r\n            break;\r\n    }\r\n\r\n    // Load the specify method\r\n    const func = \"_getImageData\" + (use_grey ? \"Grey\" : \"\") + header.pixel_size + \"bits\";\r\n    const imageData = (<any>TGATools)[func](header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end);\r\n\r\n    const engine = texture.getEngine();\r\n    engine._uploadDataToTextureDirectly(texture, imageData);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction _getImageData8bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data,\r\n        colormap = palettes;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let color,\r\n        i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i++) {\r\n            color = image[i];\r\n            imageData[(x + width * y) * 4 + 3] = 255;\r\n            imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\r\n            imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\r\n            imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction _getImageData16bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let color,\r\n        i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\r\n            color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\r\n            const r = ((((color & 0x7c00) >> 10) * 255) / 0x1f) | 0;\r\n            const g = ((((color & 0x03e0) >> 5) * 255) / 0x1f) | 0;\r\n            const b = (((color & 0x001f) * 255) / 0x1f) | 0;\r\n\r\n            imageData[(x + width * y) * 4 + 0] = r;\r\n            imageData[(x + width * y) * 4 + 1] = g;\r\n            imageData[(x + width * y) * 4 + 2] = b;\r\n            imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction _getImageData24bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i += 3) {\r\n            imageData[(x + width * y) * 4 + 3] = 255;\r\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n            imageData[(x + width * y) * 4 + 1] = image[i + 1];\r\n            imageData[(x + width * y) * 4 + 0] = image[i + 2];\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction _getImageData32bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i += 4) {\r\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n            imageData[(x + width * y) * 4 + 1] = image[i + 1];\r\n            imageData[(x + width * y) * 4 + 0] = image[i + 2];\r\n            imageData[(x + width * y) * 4 + 3] = image[i + 3];\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction _getImageDataGrey8bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let color,\r\n        i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i++) {\r\n            color = image[i];\r\n            imageData[(x + width * y) * 4 + 0] = color;\r\n            imageData[(x + width * y) * 4 + 1] = color;\r\n            imageData[(x + width * y) * 4 + 2] = color;\r\n            imageData[(x + width * y) * 4 + 3] = 255;\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction _getImageDataGrey16bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\r\n            imageData[(x + width * y) * 4 + 0] = image[i + 0];\r\n            imageData[(x + width * y) * 4 + 1] = image[i + 0];\r\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n            imageData[(x + width * y) * 4 + 3] = image[i + 1];\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * Based on jsTGALoader - Javascript loader for TGA file\r\n * By Vincent Thibault\r\n * @see http://blog.robrowser.com/javascript-tga-loader.html\r\n */\r\nexport const TGATools = {\r\n    /**\r\n     * Gets the header of a TGA file\r\n     * @param data defines the TGA data\r\n     * @returns the header\r\n     */\r\n    GetTGAHeader,\r\n\r\n    /**\r\n     * Uploads TGA content to a Babylon Texture\r\n     * @internal\r\n     */\r\n    UploadContent,\r\n\r\n    /** @internal */\r\n    _getImageData8bits,\r\n\r\n    /** @internal */\r\n    _getImageData16bits,\r\n    /** @internal */\r\n    _getImageData24bits,\r\n\r\n    /** @internal */\r\n    _getImageData32bits,\r\n\r\n    /** @internal */\r\n    _getImageDataGrey8bits,\r\n    /** @internal */\r\n    _getImageDataGrey16bits,\r\n};\r\n", "import { GetTGAHeader, UploadContent } from \"../../../Misc/tga\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"./internalTextureLoader\";\r\n\r\n/**\r\n * Implementation of the TGA Texture Loader.\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _TGATextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     */\r\n    public loadCubeData(): void {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \".env not supported in Cube.\";\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(\r\n        data: ArrayBufferView,\r\n        texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void\r\n    ): void {\r\n        const bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n\r\n        const header = GetTGAHeader(bytes);\r\n        callback(header.width, header.height, texture.generateMipMaps, false, () => {\r\n            UploadContent(texture, bytes);\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
