{"version":3,"file":"shadowGeneratorTask.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FrameGraph/Tasks/Rendering/shadowGeneratorTask.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line import/no-internal-modules\r\nimport type { Scene, FrameGraph, FrameGraphObjectList, IShadowLight, WritableObject, AbstractEngine, FrameGraphTextureHandle, Camera } from \"core/index\";\r\nimport { FrameGraphTask } from \"../../frameGraphTask\";\r\nimport { ShadowGenerator } from \"../../../Lights/Shadows/shadowGenerator\";\r\n\r\n/**\r\n * Task used to generate shadows from a list of objects.\r\n */\r\nexport class FrameGraphShadowGeneratorTask extends FrameGraphTask {\r\n    /**\r\n     * The object list that generates shadows.\r\n     */\r\n    public objectList: FrameGraphObjectList;\r\n\r\n    private _light: IShadowLight;\r\n    /**\r\n     * The light to generate shadows from.\r\n     */\r\n    public get light(): IShadowLight {\r\n        return this._light;\r\n    }\r\n\r\n    public set light(value: IShadowLight) {\r\n        if (value === this._light) {\r\n            return;\r\n        }\r\n\r\n        this._light = value;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _camera: Camera;\r\n    /**\r\n     * Gets or sets the camera used to generate the shadow generator.\r\n     */\r\n    public get camera() {\r\n        return this._camera;\r\n    }\r\n\r\n    public set camera(camera: Camera) {\r\n        this._camera = camera;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _mapSize = 1024;\r\n    /**\r\n     * The size of the shadow map.\r\n     */\r\n    public get mapSize() {\r\n        return this._mapSize;\r\n    }\r\n\r\n    public set mapSize(value: number) {\r\n        if (value === this._mapSize) {\r\n            return;\r\n        }\r\n\r\n        this._mapSize = value;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _useFloat32TextureType = false;\r\n    /**\r\n     * If true, the shadow map will use a 32 bits float texture type (else, 16 bits float is used if supported).\r\n     */\r\n    public get useFloat32TextureType() {\r\n        return this._useFloat32TextureType;\r\n    }\r\n\r\n    public set useFloat32TextureType(value: boolean) {\r\n        if (value === this._useFloat32TextureType) {\r\n            return;\r\n        }\r\n\r\n        this._useFloat32TextureType = value;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _useRedTextureFormat = true;\r\n    /**\r\n     * If true, the shadow map will use a red texture format (else, a RGBA format is used).\r\n     */\r\n    public get useRedTextureFormat() {\r\n        return this._useRedTextureFormat;\r\n    }\r\n\r\n    public set useRedTextureFormat(value: boolean) {\r\n        if (value === this._useRedTextureFormat) {\r\n            return;\r\n        }\r\n\r\n        this._useRedTextureFormat = value;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _bias = 0.01;\r\n    /**\r\n     * The bias to apply to the shadow map.\r\n     */\r\n    public get bias() {\r\n        return this._bias;\r\n    }\r\n\r\n    public set bias(value: number) {\r\n        if (value === this._bias) {\r\n            return;\r\n        }\r\n\r\n        this._bias = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.bias = value;\r\n        }\r\n    }\r\n\r\n    private _normalBias = 0;\r\n    /**\r\n     * The normal bias to apply to the shadow map.\r\n     */\r\n    public get normalBias() {\r\n        return this._normalBias;\r\n    }\r\n\r\n    public set normalBias(value: number) {\r\n        if (value === this._normalBias) {\r\n            return;\r\n        }\r\n\r\n        this._normalBias = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.normalBias = value;\r\n        }\r\n    }\r\n\r\n    private _darkness = 0;\r\n    /**\r\n     * The darkness of the shadows.\r\n     */\r\n    public get darkness() {\r\n        return this._darkness;\r\n    }\r\n\r\n    public set darkness(value: number) {\r\n        if (value === this._darkness) {\r\n            return;\r\n        }\r\n\r\n        this._darkness = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.darkness = value;\r\n        }\r\n    }\r\n\r\n    private _transparencyShadow = false;\r\n    /**\r\n     * Gets or sets the ability to have transparent shadow\r\n     */\r\n    public get transparencyShadow() {\r\n        return this._transparencyShadow;\r\n    }\r\n\r\n    public set transparencyShadow(value: boolean) {\r\n        if (value === this._transparencyShadow) {\r\n            return;\r\n        }\r\n\r\n        this._transparencyShadow = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.transparencyShadow = value;\r\n        }\r\n    }\r\n\r\n    private _enableSoftTransparentShadow = false;\r\n    /**\r\n     * Enables or disables shadows with varying strength based on the transparency\r\n     */\r\n    public get enableSoftTransparentShadow() {\r\n        return this._enableSoftTransparentShadow;\r\n    }\r\n\r\n    public set enableSoftTransparentShadow(value: boolean) {\r\n        if (value === this._enableSoftTransparentShadow) {\r\n            return;\r\n        }\r\n\r\n        this._enableSoftTransparentShadow = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.enableSoftTransparentShadow = value;\r\n        }\r\n    }\r\n\r\n    private _useOpacityTextureForTransparentShadow = false;\r\n    /**\r\n     * If this is true, use the opacity texture's alpha channel for transparent shadows instead of the diffuse one\r\n     */\r\n    public get useOpacityTextureForTransparentShadow() {\r\n        return this._useOpacityTextureForTransparentShadow;\r\n    }\r\n\r\n    public set useOpacityTextureForTransparentShadow(value: boolean) {\r\n        if (value === this._useOpacityTextureForTransparentShadow) {\r\n            return;\r\n        }\r\n\r\n        this._useOpacityTextureForTransparentShadow = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.useOpacityTextureForTransparentShadow = value;\r\n        }\r\n    }\r\n\r\n    private _filter = ShadowGenerator.FILTER_PCF;\r\n    /**\r\n     * The filter to apply to the shadow map.\r\n     */\r\n    public get filter() {\r\n        return this._filter;\r\n    }\r\n\r\n    public set filter(value: number) {\r\n        if (value === this._filter) {\r\n            return;\r\n        }\r\n\r\n        this._filter = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.filter = value;\r\n        }\r\n    }\r\n\r\n    private _filteringQuality = ShadowGenerator.QUALITY_HIGH;\r\n    /**\r\n     * The filtering quality to apply to the filter.\r\n     */\r\n    public get filteringQuality() {\r\n        return this._filteringQuality;\r\n    }\r\n\r\n    public set filteringQuality(value: number) {\r\n        if (value === this._filteringQuality) {\r\n            return;\r\n        }\r\n\r\n        this._filteringQuality = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.filteringQuality = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The shadow generator.\r\n     */\r\n    public readonly shadowGenerator: ShadowGenerator;\r\n\r\n    /**\r\n     * The shadow map texture.\r\n     */\r\n    public readonly outputTexture: FrameGraphTextureHandle;\r\n\r\n    protected _shadowGenerator: ShadowGenerator | undefined;\r\n\r\n    protected _createShadowGenerator() {\r\n        this._shadowGenerator = new ShadowGenerator(this._mapSize, this._light, this._useFloat32TextureType, undefined, this._useRedTextureFormat);\r\n    }\r\n\r\n    protected _setupShadowGenerator() {\r\n        this._shadowGenerator?.dispose();\r\n        this._shadowGenerator = undefined;\r\n        if (this._light !== undefined) {\r\n            this._createShadowGenerator();\r\n            const shadowGenerator = this._shadowGenerator as ShadowGenerator | undefined;\r\n            if (shadowGenerator === undefined) {\r\n                return;\r\n            }\r\n            shadowGenerator.bias = this._bias;\r\n            shadowGenerator.normalBias = this._normalBias;\r\n            shadowGenerator.darkness = this._darkness;\r\n            shadowGenerator.transparencyShadow = this._transparencyShadow;\r\n            shadowGenerator.enableSoftTransparentShadow = this._enableSoftTransparentShadow;\r\n            shadowGenerator.useOpacityTextureForTransparentShadow = this._useOpacityTextureForTransparentShadow;\r\n            shadowGenerator.filter = this._filter;\r\n            shadowGenerator.filteringQuality = this._filteringQuality;\r\n\r\n            const shadowMap = shadowGenerator.getShadowMap()!;\r\n            shadowMap._disableEngineStages = true;\r\n            shadowMap.cameraForLOD = this._camera;\r\n\r\n            (this.shadowGenerator as WritableObject<ShadowGenerator | undefined>) = shadowGenerator;\r\n        }\r\n    }\r\n\r\n    public override isReady(): boolean {\r\n        return !!this._shadowGenerator && !!this._shadowGenerator.getShadowMap()?.isReadyForRendering();\r\n    }\r\n\r\n    private _engine: AbstractEngine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Creates a new shadow generator task.\r\n     * @param name The name of the task.\r\n     * @param frameGraph The frame graph the task belongs to.\r\n     * @param scene The scene to create the shadow generator for.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, scene: Scene) {\r\n        super(name, frameGraph);\r\n\r\n        this._engine = scene.getEngine();\r\n        this._scene = scene;\r\n\r\n        this.outputTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n    }\r\n\r\n    public record() {\r\n        if (this.light === undefined || this.objectList === undefined || this.camera === undefined) {\r\n            throw new Error(`FrameGraphShadowGeneratorTask ${this.name}: light, objectList and camera are required`);\r\n        }\r\n\r\n        // Make sure the renderList / particleSystemList are set when FrameGraphShadowGeneratorTask.isReady() is called!\r\n        const shadowMap = this._shadowGenerator!.getShadowMap()!;\r\n\r\n        shadowMap.renderList = this.objectList.meshes;\r\n        shadowMap.particleSystemList = this.objectList.particleSystems;\r\n\r\n        const shadowTextureHandle = this._frameGraph.textureManager.importTexture(`${this.name} shadowmap`, this._shadowGenerator!.getShadowMap()!.getInternalTexture()!);\r\n\r\n        this._frameGraph.textureManager.resolveDanglingHandle(this.outputTexture, shadowTextureHandle);\r\n\r\n        const pass = this._frameGraph.addPass(this.name);\r\n\r\n        pass.setExecuteFunc((_context) => {\r\n            if (!this.light.isEnabled() || !this.light.shadowEnabled) {\r\n                return;\r\n            }\r\n\r\n            const shadowMap = this._shadowGenerator!.getShadowMap()!;\r\n\r\n            shadowMap.renderList = this.objectList.meshes;\r\n            shadowMap.particleSystemList = this.objectList.particleSystems;\r\n\r\n            const currentRenderTarget = this._engine._currentRenderTarget;\r\n\r\n            this._scene.incrementRenderId();\r\n            this._scene.resetCachedMaterial();\r\n\r\n            shadowMap.render();\r\n\r\n            if (this._engine._currentRenderTarget !== currentRenderTarget) {\r\n                if (!currentRenderTarget) {\r\n                    this._engine.restoreDefaultFramebuffer();\r\n                } else {\r\n                    this._engine.bindFramebuffer(currentRenderTarget);\r\n                }\r\n            }\r\n        });\r\n\r\n        const passDisabled = this._frameGraph.addPass(this.name + \"_disabled\", true);\r\n\r\n        passDisabled.setExecuteFunc((_context) => {});\r\n    }\r\n\r\n    public override dispose() {\r\n        this._shadowGenerator?.dispose();\r\n        this._shadowGenerator = undefined;\r\n    }\r\n}\r\n"]}