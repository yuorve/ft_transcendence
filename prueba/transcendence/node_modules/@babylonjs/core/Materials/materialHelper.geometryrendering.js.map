{"version":3,"file":"materialHelper.geometryrendering.js","sourceRoot":"","sources":["../../../../dev/core/src/Materials/materialHelper.geometryrendering.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants } from \"core/Engines/constants\";\r\nimport type { MaterialDefines } from \"core/Materials/materialDefines\";\r\nimport type { Effect } from \"core/Materials/effect\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Matrix } from \"core/Maths/math.vector\";\r\n\r\n/**\r\n * Type of clear operation to perform on a geometry texture.\r\n */\r\nexport const enum GeometryRenderingTextureClearType {\r\n    /**\r\n     * Clear the texture with zero.\r\n     */\r\n    Zero = 0,\r\n\r\n    /**\r\n     * Clear the texture with one.\r\n     */\r\n    One = 1,\r\n\r\n    /**\r\n     * Clear the texture with the maximum view Z value.\r\n     */\r\n    MaxViewZ = 2,\r\n}\r\n\r\n/**\r\n * Configuration for geometry rendering.\r\n * A configuration is created for each rendering pass a geometry rendering is used in.\r\n */\r\nexport type GeometryRenderingConfiguration = {\r\n    /**\r\n     * Defines used for the geometry rendering.\r\n     */\r\n    defines: { [name: string]: number };\r\n\r\n    /**\r\n     * Previous world matrices for meshes.\r\n     */\r\n    previousWorldMatrices: { [index: number]: Matrix };\r\n\r\n    /**\r\n     * Previous view projection matrix.\r\n     */\r\n    previousViewProjection: Matrix;\r\n\r\n    /**\r\n     * Current view projection matrix.\r\n     */\r\n    currentViewProjection: Matrix;\r\n\r\n    /**\r\n     * Previous bones for skinned meshes.\r\n     */\r\n    previousBones: { [index: number]: Float32Array };\r\n\r\n    /**\r\n     * Last frame id the configuration was updated.\r\n     */\r\n    lastUpdateFrameId: number;\r\n\r\n    /**\r\n     * List of excluded skinned meshes.\r\n     */\r\n    excludedSkinnedMesh: AbstractMesh[];\r\n};\r\n\r\n/**\r\n * Helper class to manage geometry rendering.\r\n */\r\nexport class MaterialHelperGeometryRendering {\r\n    /**\r\n     * Descriptions of the geometry textures.\r\n     */\r\n    public static readonly GeometryTextureDescriptions = [\r\n        {\r\n            type: Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE,\r\n            name: \"Irradiance\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_IRRADIANCE\",\r\n            defineIndex: \"PREPASS_IRRADIANCE_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_POSITION_TEXTURE_TYPE,\r\n            name: \"WorldPosition\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_POSITION\",\r\n            defineIndex: \"PREPASS_POSITION_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_VELOCITY_TEXTURE_TYPE,\r\n            name: \"Velocity\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_VELOCITY\",\r\n            defineIndex: \"PREPASS_VELOCITY_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE,\r\n            name: \"Reflectivity\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_REFLECTIVITY\",\r\n            defineIndex: \"PREPASS_REFLECTIVITY_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n            name: \"ViewDepth\",\r\n            clearType: GeometryRenderingTextureClearType.MaxViewZ,\r\n            define: \"PREPASS_DEPTH\",\r\n            defineIndex: \"PREPASS_DEPTH_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_NORMAL_TEXTURE_TYPE,\r\n            name: \"ViewNormal\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_NORMAL\",\r\n            defineIndex: \"PREPASS_NORMAL_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE,\r\n            name: \"AlbedoSqrt\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_ALBEDO_SQRT\",\r\n            defineIndex: \"PREPASS_ALBEDO_SQRT_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_WORLD_NORMAL_TEXTURE_TYPE,\r\n            name: \"WorldNormal\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_WORLD_NORMAL\",\r\n            defineIndex: \"PREPASS_WORLD_NORMAL_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_LOCAL_POSITION_TEXTURE_TYPE,\r\n            name: \"LocalPosition\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_LOCAL_POSITION\",\r\n            defineIndex: \"PREPASS_LOCAL_POSITION_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_SCREENSPACE_DEPTH_TEXTURE_TYPE,\r\n            name: \"ScreenDepth\",\r\n            clearType: GeometryRenderingTextureClearType.One,\r\n            define: \"PREPASS_SCREENSPACE_DEPTH\",\r\n            defineIndex: \"PREPASS_SCREENSPACE_DEPTH_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_VELOCITY_LINEAR_TEXTURE_TYPE,\r\n            name: \"LinearVelocity\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_VELOCITY_LINEAR\",\r\n            defineIndex: \"PREPASS_VELOCITY_LINEAR_INDEX\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_ALBEDO_TEXTURE_TYPE,\r\n            name: \"Albedo\",\r\n            clearType: GeometryRenderingTextureClearType.Zero,\r\n            define: \"PREPASS_ALBEDO\",\r\n            defineIndex: \"PREPASS_ALBEDO_INDEX\",\r\n        },\r\n    ];\r\n\r\n    private static _Configurations: { [renderPassId: number]: GeometryRenderingConfiguration } = {};\r\n\r\n    /**\r\n     * Creates a new geometry rendering configuration.\r\n     * @param renderPassId Render pass id the configuration is created for.\r\n     * @returns The created configuration.\r\n     */\r\n    public static CreateConfiguration(renderPassId: number) {\r\n        MaterialHelperGeometryRendering._Configurations[renderPassId] = {\r\n            defines: {},\r\n            previousWorldMatrices: {},\r\n            previousViewProjection: Matrix.Zero(),\r\n            currentViewProjection: Matrix.Zero(),\r\n            previousBones: {},\r\n            lastUpdateFrameId: -1,\r\n            excludedSkinnedMesh: [],\r\n        };\r\n        return MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Deletes a geometry rendering configuration.\r\n     * @param renderPassId The render pass id of the configuration to delete.\r\n     */\r\n    public static DeleteConfiguration(renderPassId: number) {\r\n        delete MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Gets a geometry rendering configuration.\r\n     * @param renderPassId The render pass id of the configuration to get.\r\n     * @returns The configuration.\r\n     */\r\n    public static GetConfiguration(renderPassId: number): GeometryRenderingConfiguration {\r\n        return MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Adds uniforms and samplers for geometry rendering.\r\n     * @param uniforms The array of uniforms to add to.\r\n     * @param _samplers The array of samplers to add to.\r\n     */\r\n    public static AddUniformsAndSamplers(uniforms: string[], _samplers: string[]) {\r\n        uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\r\n    }\r\n\r\n    /**\r\n     * Marks a list of meshes as dirty for geometry rendering.\r\n     * @param renderPassId The render pass id the meshes are marked as dirty for.\r\n     * @param meshes The list of meshes to mark as dirty.\r\n     */\r\n    public static MarkAsDirty(renderPassId: number, meshes: AbstractMesh[]) {\r\n        for (const mesh of meshes) {\r\n            if (!mesh.subMeshes) {\r\n                continue;\r\n            }\r\n\r\n            for (const subMesh of mesh.subMeshes) {\r\n                subMesh._removeDrawWrapper(renderPassId);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares defines for geometry rendering.\r\n     * @param renderPassId The render pass id the defines are prepared for.\r\n     * @param mesh The mesh the defines are prepared for.\r\n     * @param defines The defines to update according to the geometry rendering configuration.\r\n     */\r\n    public static PrepareDefines(renderPassId: number, mesh: AbstractMesh, defines: MaterialDefines) {\r\n        if (!defines._arePrePassDirty) {\r\n            return;\r\n        }\r\n\r\n        const configuration = MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n        if (!configuration) {\r\n            return;\r\n        }\r\n\r\n        defines[\"PREPASS\"] = true;\r\n        defines[\"PREPASS_COLOR\"] = false;\r\n        defines[\"PREPASS_COLOR_INDEX\"] = -1;\r\n\r\n        let numMRT = 0;\r\n\r\n        for (let i = 0; i < MaterialHelperGeometryRendering.GeometryTextureDescriptions.length; i++) {\r\n            const geometryTextureDescription = MaterialHelperGeometryRendering.GeometryTextureDescriptions[i];\r\n            const defineName = geometryTextureDescription.define;\r\n            const defineIndex = geometryTextureDescription.defineIndex;\r\n            const index = configuration.defines[defineIndex];\r\n\r\n            if (index !== undefined) {\r\n                defines[defineName] = true;\r\n                defines[defineIndex] = index;\r\n                numMRT++;\r\n            } else {\r\n                defines[defineName] = false;\r\n                delete defines[defineIndex];\r\n            }\r\n        }\r\n\r\n        defines[\"SCENE_MRT_COUNT\"] = numMRT;\r\n\r\n        defines[\"BONES_VELOCITY_ENABLED\"] =\r\n            mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton && !mesh.skeleton.isUsingTextureForMatrices && configuration.excludedSkinnedMesh.indexOf(mesh) === -1;\r\n    }\r\n\r\n    /**\r\n     * Binds geometry rendering data for a mesh.\r\n     * @param renderPassId The render pass id the geometry rendering data is bound for.\r\n     * @param effect The effect to bind the geometry rendering data to.\r\n     * @param mesh The mesh to bind the geometry rendering data for.\r\n     * @param world The world matrix of the mesh.\r\n     */\r\n    public static Bind(renderPassId: number, effect: Effect, mesh: Mesh, world: Matrix) {\r\n        const configuration = MaterialHelperGeometryRendering._Configurations[renderPassId];\r\n        if (!configuration) {\r\n            return;\r\n        }\r\n\r\n        if (configuration.defines[\"PREPASS_VELOCITY_INDEX\"] !== undefined || configuration.defines[\"PREPASS_VELOCITY_LINEAR_INDEX\"] !== undefined) {\r\n            if (!configuration.previousWorldMatrices[mesh.uniqueId]) {\r\n                configuration.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n            }\r\n\r\n            const scene = mesh.getScene();\r\n\r\n            if (!configuration.previousViewProjection) {\r\n                configuration.previousViewProjection = scene.getTransformMatrix().clone();\r\n                configuration.currentViewProjection = scene.getTransformMatrix().clone();\r\n            }\r\n\r\n            const engine = scene.getEngine();\r\n\r\n            if (configuration.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\r\n                // First update of the prepass configuration for this rendering pass\r\n                configuration.lastUpdateFrameId = engine.frameId;\r\n                configuration.previousViewProjection.copyFrom(configuration.currentViewProjection);\r\n                configuration.currentViewProjection.copyFrom(scene.getTransformMatrix());\r\n            } else if (configuration.lastUpdateFrameId !== engine.frameId) {\r\n                // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\r\n                configuration.lastUpdateFrameId = engine.frameId;\r\n                configuration.previousViewProjection.copyFrom(configuration.currentViewProjection);\r\n            }\r\n\r\n            effect.setMatrix(\"previousWorld\", configuration.previousWorldMatrices[mesh.uniqueId]);\r\n            effect.setMatrix(\"previousViewProjection\", configuration.previousViewProjection);\r\n\r\n            configuration.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n\r\n            if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n                const skeleton = mesh.skeleton;\r\n\r\n                if (!skeleton.isUsingTextureForMatrices || effect.getUniformIndex(\"boneTextureWidth\") === -1) {\r\n                    const matrices = skeleton.getTransformMatrices(mesh);\r\n\r\n                    if (matrices) {\r\n                        if (!configuration.previousBones[mesh.uniqueId]) {\r\n                            configuration.previousBones[mesh.uniqueId] = matrices.slice();\r\n                        }\r\n                        effect.setMatrices(\"mPreviousBones\", configuration.previousBones[mesh.uniqueId]);\r\n                        configuration.previousBones[mesh.uniqueId].set(matrices);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}